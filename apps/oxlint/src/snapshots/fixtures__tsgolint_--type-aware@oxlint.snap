---
source: apps/oxlint/src/tester.rs
---
########## 
arguments: --type-aware
working directory: fixtures/tsgolint
----------

  x typescript-eslint(await-thenable): Unexpected `await` of a non-Promise (non-"Thenable") value.
   ,-[await-thenable.ts:1:1]
 1 | await 12;
   : ^^^^^^^^
   `----

  x typescript-eslint(no-array-delete): Using the `delete` operator with an array expression is unsafe.
   ,-[no-array-delete.ts:2:1]
 1 | declare const arr: number[];
 2 | delete arr[0];
   : ^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-base-to-string): '({})' will use Object's default stringification format ('[object Object]') when stringified.
   ,-[no-base-to-string.ts:1:1]
 1 | ({}).toString();
   : ^^^^
   `----

  x typescript-eslint(no-meaningless-void-operator): void operator shouldn't be used on void; it should convey that a return value is being ignored
   ,-[no-confusing-void-expression.ts:2:19]
 1 | declare function bar(): void;
 2 | const foo = () => void bar();
   :                   ^^^^^^^^^^
   `----

  x typescript-eslint(no-confusing-void-expression): Placing a void expression inside another expression is forbidden. Move it to its own statement instead.
   ,-[no-confusing-void-expression.ts:2:24]
 1 | declare function bar(): void;
 2 | const foo = () => void bar();
   :                        ^^^^^
   `----

  x typescript-eslint(no-duplicate-type-constituents): Union type constituent is duplicated with  'A'.
   ,-[no-duplicate-type-constituents.ts:1:17]
 1 | type T1 = 'A' | 'A';
   :                 ^^^
   `----

  x typescript-eslint(no-confusing-void-expression): Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.
   ,-[no-floating-promises.ts:1:51]
 1 | const promise = new Promise((resolve, _reject) => resolve("value"));
   :                                                   ^^^^^^^^^^^^^^^^
 2 | promise;
   `----

  x typescript-eslint(no-floating-promises): Promises must be awaited.
   ,-[no-floating-promises.ts:2:1]
 1 | const promise = new Promise((resolve, _reject) => resolve("value"));
 2 | promise;
   : ^^^^^^^^
   `----
  help: The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the `void` operator.

  x typescript-eslint(no-for-in-array): For-in loops over arrays skips holes, returns indices as strings, and may visit the prototype chain or other enumerable properties. Use a more robust
  | iteration method such as for-of or array.forEach instead.
   ,-[no-for-in-array.ts:2:1]
 1 | const arr = [1, 2, 3];
 2 | for (const i in arr) {
   : ^^^^^^^^^^^^^^^^^^^^
 3 |   console.log(arr[i]);
   `----

  x typescript-eslint(no-unsafe-call): Unsafe call of a(n) `any` typed value.
   ,-[no-for-in-array.ts:3:3]
 2 | for (const i in arr) {
 3 |   console.log(arr[i]);
   :   ^^^^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-member-access): Unsafe member access .log on an `any` value.
   ,-[no-for-in-array.ts:3:11]
 2 | for (const i in arr) {
 3 |   console.log(arr[i]);
   :           ^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-call): Unsafe call of a(n) `any` typed value.
   ,-[no-implied-eval.ts:1:1]
 1 | setTimeout('alert("Hi!");', 100);
   : ^^^^^^^^^^
   `----

  x typescript-eslint(no-implied-eval): Implied eval. Consider passing a function.
   ,-[no-implied-eval.ts:1:12]
 1 | setTimeout('alert("Hi!");', 100);
   :            ^^^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-meaningless-void-operator): void operator shouldn't be used on undefined; it should convey that a return value is being ignored
   ,-[no-meaningless-void-operator.ts:4:1]
 3 | }
 4 | void foo();
   : ^^^^^^^^^^
   `----

  x typescript-eslint(no-confusing-void-expression): Placing a void expression inside another expression is forbidden. Move it to its own statement instead.
   ,-[no-meaningless-void-operator.ts:4:6]
 3 | }
 4 | void foo();
   :      ^^^^^
   `----

  x typescript-eslint(no-misused-spread): Using the spread operator on Promise in an object can cause unexpected behavior. Did you forget to await the promise?
   ,-[no-misused-spread.ts:2:25]
 1 | declare const promise: Promise<number>;
 2 | const spreadPromise = { ...promise };
   :                         ^^^^^^^^^^
   `----

  x typescript-eslint(no-mixed-enums): Mixing number and string enums can be confusing.
   ,-[no-mixed-enums.ts:3:12]
 2 |   Open = 1,
 3 |   Closed = 'closed',
   :            ^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-redundant-type-constituents): 'unknown' overrides all other types in this union type.
   ,-[no-redundant-type-constituents.ts:1:20]
 1 | type T1 = string | unknown;
   :                    ^^^^^^^
   `----

  x typescript-eslint(no-unnecessary-boolean-literal-compare): This expression unnecessarily compares a boolean value to a boolean instead of using it directly.
   ,-[no-unnecessary-boolean-literal-compare.ts:2:5]
 1 | declare const someCondition: boolean;
 2 | if (someCondition === true) {
   :     ^^^^^^^^^^^^^^^^^^^^^^
 3 | }
   `----

  x typescript-eslint(no-unnecessary-type-arguments): This is the default value for this type parameter, so it can be omitted.
   ,-[no-unnecessary-type-arguments.ts:4:25]
 3 | }
 4 | const result = identity<string>('hello');
   :                         ^^^^^^
   `----

  x typescript-eslint(no-unnecessary-type-assertion): This assertion is unnecessary since it does not change the type of the expression.
   ,-[no-unnecessary-type-assertion.ts:2:19]
 1 | const str: string = 'hello';
 2 | const redundant = str as string;
   :                   ^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-argument): Unsafe argument of type any assigned to a parameter of type string.
   ,-[no-unsafe-argument.ts:3:13]
 2 | function takesString(str: string): void {}
 3 | takesString(anyValue);
   :             ^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-assignment): Unsafe assignment of an any value.
   ,-[no-unsafe-assignment.ts:2:7]
 1 | declare const anyValue: any;
 2 | const str: string = anyValue;
   :       ^^^^^^^^^^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-call): Unsafe call of a(n) `any` typed value.
   ,-[no-unsafe-call.ts:2:1]
 1 | declare const anyValue: any;
 2 | anyValue();
   : ^^^^^^^^
   `----

  x typescript-eslint(no-mixed-enums): Mixing number and string enums can be confusing.
   ,-[no-unsafe-enum-comparison.ts:2:10]
 1 | enum Status {
 2 |   Open = 'open',
   :          ^^^^^^
 3 |   Closed = 'closed',
   `----

  x typescript-eslint(no-unsafe-member-access): Unsafe member access .foo on an `any` value.
   ,-[no-unsafe-member-access.ts:2:10]
 1 | declare const anyValue: any;
 2 | anyValue.foo;
   :          ^^^
   `----

  x typescript-eslint(no-unsafe-return): Unsafe return of a value of type `any`.
   ,-[no-unsafe-return.ts:3:3]
 2 | function getString(): string {
 3 |   return anyValue;
   :   ^^^^^^^^^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-assignment): Unsafe assignment of an any value.
   ,-[no-unsafe-type-assertion.ts:2:7]
 1 | declare const value: unknown;
 2 | const str = value as any;
   :       ^^^^^^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-type-assertion): Unsafe assertion to `any` detected: consider using a more specific type to ensure safety.
   ,-[no-unsafe-type-assertion.ts:2:13]
 1 | declare const value: unknown;
 2 | const str = value as any;
   :             ^^^^^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-unary-minus): Argument of unary negation should be assignable to number | bigint but is unknown instead.
   ,-[no-unsafe-unary-minus.ts:2:17]
 1 | declare const value: any;
 2 | const result1 = -value;
   :                 ^^^^^^
   `----

  x typescript-eslint(no-unsafe-type-assertion): Unsafe type assertion: type 'string' is more narrow than the original type.
   ,-[non-nullable-type-assertion-style.ts:2:17]
 1 | declare const value: string | null;
 2 | const result1 = value as string;
   :                 ^^^^^^^^^^^^^^^
   `----

  x ]8;;https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-debugger.html\eslint(no-debugger)]8;;\: `debugger` statement is not allowed
   ,-[non-tsgolint.ts:1:1]
 1 | debugger;
   : ^^^^^^^^^
   `----
  help: Remove the debugger statement

  x typescript-eslint(only-throw-error): Expected an error object to be thrown.
   ,-[only-throw-error.ts:1:7]
 1 | throw 'error';
   :       ^^^^^^^
   `----

  x typescript-eslint(prefer-promise-reject-errors): Expected the Promise rejection reason to be an Error.
   ,-[prefer-promise-reject-errors.ts:1:1]
 1 | Promise.reject('error');
   : ^^^^^^^^^^^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-floating-promises): Promises must be awaited.
   ,-[prefer-promise-reject-errors.ts:1:1]
 1 | Promise.reject('error');
   : ^^^^^^^^^^^^^^^^^^^^^^^^
   `----
  help: The promise must end with a call to .catch, or end with a call to .then with a rejection handler, or be explicitly marked as ignored with the `void` operator.

  x typescript-eslint(no-unnecessary-type-assertion): This assertion is unnecessary since it does not change the type of the expression.
   ,-[prefer-reduce-type-parameter.ts:2:13]
 1 | const numbers = [1, 2, 3];
 2 | const sum = numbers.reduce((acc, val) => acc + val, 0) as number;
   :             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

  x typescript-eslint(prefer-return-this-type): Use `this` type instead.
   ,-[prefer-return-this-type.ts:3:28]
 2 |   private value: string = '';
 3 |   setValue(value: string): Builder {
   :                            ^^^^^^^
 4 |     this.value = value;
   `----

  x typescript-eslint(promise-function-async): Functions that return promises must be async.
   ,-[promise-function-async.ts:2:1]
 1 |     declare function fetch(url: string): Promise<Response>;
 2 | ,-> function fetchData(): Promise<string> {
 3 | |     return fetch('/api/data').then(res => res.text());
 4 | `-> }
   `----

  x typescript-eslint(no-unsafe-call): Unsafe call of a(n) `any` typed value.
   ,-[promise-function-async.ts:3:41]
 2 | function fetchData(): Promise<string> {
 3 |   return fetch('/api/data').then(res => res.text());
   :                                         ^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-return): Unsafe return of a value of type `any`.
   ,-[promise-function-async.ts:3:41]
 2 | function fetchData(): Promise<string> {
 3 |   return fetch('/api/data').then(res => res.text());
   :                                         ^^^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-member-access): Unsafe member access .text on an `error` typed value.
   ,-[promise-function-async.ts:3:45]
 2 | function fetchData(): Promise<string> {
 3 |   return fetch('/api/data').then(res => res.text());
   :                                             ^^^^
 4 | }
   `----

  x typescript-eslint(related-getter-setter-pairs): `get()` type should be assignable to its equivalent `set()` type.
   ,-[related-getter-setter-pairs.ts:3:16]
 2 |   private _value: number = 0;
 3 |   get value(): string {
   :                ^^^^^^
 4 |     return this._value.toString();
   `----

  x typescript-eslint(require-array-sort-compare): Require 'compare' argument.
   ,-[require-array-sort-compare.ts:2:1]
 1 | const numbers = [3, 1, 4, 1, 5];
 2 | numbers.sort();
   : ^^^^^^^^^^^^^^
   `----

  x typescript-eslint(no-unsafe-return): Unsafe return of a value of type `Promise<any>`.
   ,-[require-await.ts:3:3]
 2 | async function fetchData() {
 3 |   return fetch('/api/data');
   :   ^^^^^^^^^^^^^^^^^^^^^^^^^^
 4 | }
   `----

  x typescript-eslint(no-unsafe-assignment): Unsafe assignment of an any value.
   ,-[restrict-plus-operands.ts:1:5]
 1 | let foo = 1n + 1;
   :     ^^^^^^^^^^^^
   `----

  x typescript-eslint(restrict-plus-operands): Numeric '+' operations must either be both bigints or both numbers. Got `bigint` + `number`.
   ,-[restrict-plus-operands.ts:1:11]
 1 | let foo = 1n + 1;
   :           ^^^^^^
   `----

  x typescript-eslint(no-base-to-string): 'obj' will use Object's default stringification format ('[object Object]') when stringified.
   ,-[restrict-template-expressions.ts:2:24]
 1 | declare const obj: object;
 2 | const str1 = `Value: ${obj}`;
   :                        ^^^
   `----

  x typescript-eslint(restrict-template-expressions): Invalid type "object" of template literal expression.
   ,-[restrict-template-expressions.ts:2:24]
 1 | declare const obj: object;
 2 | const str1 = `Value: ${obj}`;
   :                        ^^^
   `----

  x typescript-eslint(switch-exhaustiveness-check): Switch is not exhaustive
   ,-[switch-exhaustiveness-check.ts:3:11]
 2 | function handleStatus(status: Status) {
 3 |   switch (status) {
   :           ^^^^^^
 4 |     case 'pending':
   `----

  x typescript-eslint(no-unsafe-enum-comparison): The case statement does not have a shared enum type with the switch predicate.
   ,-[switch-exhaustiveness-check.ts:4:5]
 3 |       switch (status) {
 4 | ,->     case 'pending':
 5 | `->       return 'Waiting for approval';
 6 |         case 'approved':
   `----

  x typescript-eslint(no-unsafe-enum-comparison): The case statement does not have a shared enum type with the switch predicate.
   ,-[switch-exhaustiveness-check.ts:6:5]
 5 |           return 'Waiting for approval';
 6 | ,->     case 'approved':
 7 | `->       return 'Request approved';
 8 |       }
   `----

  x ]8;;https://oxc.rs/docs/guide/usage/linter/rules/eslint/no-debugger.html\eslint(no-debugger)]8;;\: `debugger` statement is not allowed
   ,-[test.svelte:2:2]
 1 | <script>
 2 |     debugger;
   :     ^^^^^^^^^
 3 | 
   `----
  help: Remove the debugger statement

  x typescript-eslint(unbound-method): Avoid referencing unbound methods which may cause unintentional scoping of `this`.
  | If your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.
   ,-[unbound-method.ts:9:19]
 8 | const calc = new Calculator();
 9 | const addMethod = calc.add;
   :                   ^^^^^^^^
   `----

Found 0 warnings and 53 errors.
Finished in <variable>ms on 42 files using 1 threads.
----------
CLI result: LintFoundErrors
----------
