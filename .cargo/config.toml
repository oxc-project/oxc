[alias]
lint = "clippy --workspace --all-targets --all-features"
coverage = "run -p oxc_coverage --release --"
benchmark = "run -p oxc_benchmark --release --"
minsize = "run -p oxc_minsize --release --"
rule = "run -p rulegen"

[build]
rustflags = ["-C", "target-cpu=native"]

[registries.crates-io]
protocol = "sparse"

[target.'cfg(all())']
rustflags = [
    # CLIPPY LINT SETTINGS
    # This is a workaround to configure lints for the entire workspace, pending the ability to configure this via TOML.
    # See: `https://github.com/rust-lang/cargo/issues/5034`
    #      `https://github.com/EmbarkStudios/rust-ecosystem/issues/22#issuecomment-947011395`
    "-Wclippy::all",

    # I want to write the best Rust code so both pedantic and nursery is enabled.
    # We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
    "-Wclippy::pedantic",
    "-Wclippy::nursery",

    # restriction

    "-Wclippy::dbg_macro",
    "-Wclippy::todo",
    "-Wclippy::unimplemented",

    # I like the explicitness of this rule as it removes confusion around `clone`.
    # This increases readability, avoids `clone` mindlessly and heap allocating on accident.
    "-Wclippy::clone_on_ref_ptr",

    # These two are mutually exclusive, I like `mod.rs` files for better fuzzy searches on module entries.
    "-Wclippy::self_named_module_files", # "-Wclippy::mod_module_files",

    "-Wclippy::empty_drop",
    "-Wclippy::empty_structs_with_brackets",
    "-Wclippy::exit",
    "-Wclippy::filetype_is_file",
    "-Wclippy::get_unwrap",
    "-Wclippy::impl_trait_in_params",
    "-Wclippy::rc_buffer",
    "-Wclippy::rc_mutex",
    "-Wclippy::rest_pat_in_fully_bound_structs",
    "-Wclippy::same_name_method",
    "-Wclippy::unnecessary_safety_comment",
    # TODO "-Wclippy::undocumented_unsafe_blocks",

    # pedantic

    # This rule is too pedantic, I don't want to force this because naming things are hard.
    "-Aclippy::module_name_repetitions",

    # nursery

    # `const` functions do not make sense for our project because this is not a `const` library.
    # This rule also confuses new comers and forces them to add `const` blindlessly without any reason.
    "-Aclippy::missing_const_for_fn"
]
