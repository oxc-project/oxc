name: Auto Bisect Issue 14732

on:
  workflow_dispatch:
    inputs:
      good_commit:
        description: 'Known good commit (default: v0.92.0)'
        required: false
        default: '1b3f43746891a3fabdd0d2528595a1bdb4c0f26f'
      bad_commit:
        description: 'Known bad commit (default: v0.95.0)'
        required: false
        default: '454ee94ff30d8423520bba9488bed0e3f8d1c77b'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - '**'

permissions:
  contents: read

jobs:
  auto-bisect:
    name: Auto Bisect on Windows
    runs-on: windows-latest
    timeout-minutes: 180  # 3 hours max
    
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
        with:
          fetch-depth: 0  # Full history for bisect
      
      - name: Fetch upstream commits
        shell: bash
        run: |
          # Add upstream remote if it doesn't exist
          git remote add upstream https://github.com/oxc-project/oxc.git || true
          # Fetch specific commits and tags (avoid long branch names on Windows)
          git fetch upstream --no-tags 1b3f43746891a3fabdd0d2528595a1bdb4c0f26f
          git fetch upstream --no-tags 454ee94ff30d8423520bba9488bed0e3f8d1c77b
          # Also fetch tags for reference
          git fetch upstream 'refs/tags/crates_v0.92.0:refs/tags/crates_v0.92.0'
          git fetch upstream 'refs/tags/crates_v0.95.0:refs/tags/crates_v0.95.0'
          # Verify the commits exist
          echo "Checking for commits..."
          git rev-parse 1b3f43746891a3fabdd0d2528595a1bdb4c0f26f
          git rev-parse 454ee94ff30d8423520bba9488bed0e3f8d1c77b
          echo "Both commits found!"
      
      - uses: oxc-project/setup-node@fdbf0dfd334c4e6d56ceeb77d91c76339c2a0885 # v1.0.4
      
      - uses: samypr100/setup-dev-drive@cf663fdf88945e3faaa980ec525b5bc2350fbf9d # v3.4.3
        with:
          workspace-copy: true
          drive-size: 8GB
          drive-format: NTFS
          env-mapping: |
            CARGO_HOME,{{ DEV_DRIVE }}/.cargo
            RUSTUP_HOME,{{ DEV_DRIVE }}/.rustup

      - name: Install Rust
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash
        run: |
          rustup set profile minimal
          rustup show
          git restore .

      - uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          workspaces: ${{ env.DEV_DRIVE_WORKSPACE }}
          save-if: false

      - name: Save test files to temp
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash
        run: |
          # Save the test files from current branch to a temp location
          mkdir -p /tmp/bisect-tests
          cp napi/parser/test-worker-main.mjs /tmp/bisect-tests/
          cp napi/parser/test-worker.mjs /tmp/bisect-tests/
      
      - name: Create bisect test script
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash
        run: |
          cat > bisect-run.sh << 'SCRIPT_EOF'
          #!/bin/bash
          set -e
          
          echo "============================================"
          echo "Testing commit: $(git log -1 --oneline)"
          echo "============================================"
          
          # Copy test files from temp (they may not exist in older commits)
          mkdir -p napi/parser
          
          if [ ! -f napi/parser/test-worker-main.mjs ]; then
            echo "Copying test-worker-main.mjs..."
            cp /tmp/bisect-tests/test-worker-main.mjs napi/parser/
          fi
          
          if [ ! -f napi/parser/test-worker.mjs ]; then
            echo "Copying test-worker.mjs..."
            cp /tmp/bisect-tests/test-worker.mjs napi/parser/
          fi
          
          # Install workspace dependencies
          echo "Installing workspace dependencies..."
          if [ ! -d node_modules ]; then
            pnpm install
          fi
          
          # Build oxc-parser
          echo "Building oxc-parser..."
          cd napi/parser
          
          # Build with allocator feature
          if ! pnpm build --features allocator --release; then
            echo "Build failed - skipping this commit"
            exit 125  # Tell git bisect to skip this commit
          fi
          
          # Verify native binding was created
          if [ ! -f "src-js/parser.win32-x64-msvc.node" ]; then
            echo "ERROR: Native binding not found after build!"
            echo "Contents of src-js:"
            ls -la src-js/ | grep -E '(\.node|parser)' || true
            exit 125  # Skip this commit if binding wasn't created
          fi
          
          echo "✓ Build completed. Native binding verified."
          echo "Running test..."
          
          # Run test with timeout - if it crashes or times out, it's bad
          if timeout 60 node test-worker-main.mjs 2>&1 | tee test-output.log; then
            # Check if all workers completed
            if grep -q "All workers done!" test-output.log; then
              echo "✅ Test PASSED - All workers completed"
              exit 0  # Good commit
            else
              echo "❌ Test FAILED - Not all workers completed"
              exit 1  # Bad commit
            fi
          else
            EXIT_CODE=$?
            echo "❌ Test FAILED - Exit code: $EXIT_CODE (crash or timeout)"
            exit 1  # Bad commit
          fi
          SCRIPT_EOF
          
          chmod +x bisect-run.sh

      - name: Run git bisect
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash
        run: |
          # Configure git
          git config user.email "bisect@oxc.rs"
          git config user.name "Bisect Bot"
          
          # Set commits - use inputs if available, otherwise use defaults
          GOOD_COMMIT="${{ github.event.inputs.good_commit || '1b3f43746891a3fabdd0d2528595a1bdb4c0f26f' }}"
          BAD_COMMIT="${{ github.event.inputs.bad_commit || '454ee94ff30d8423520bba9488bed0e3f8d1c77b' }}"
          
          # Start bisect
          echo "Starting git bisect..."
          echo "Good commit: $GOOD_COMMIT"
          echo "Bad commit: $BAD_COMMIT"
          
          git bisect start
          git bisect bad "$BAD_COMMIT"
          git bisect good "$GOOD_COMMIT"
          
          # Run bisect automatically
          echo "Running automated bisect..."
          git bisect run ./bisect-run.sh
          
          # Get the result
          echo ""
          echo "=========================================="
          echo "BISECT RESULT:"
          echo "=========================================="
          git bisect log | tail -20
          
          # Save the first bad commit
          FIRST_BAD=$(git bisect view --pretty=format:'%H' | head -1)
          echo ""
          echo "=========================================="
          echo "First bad commit: $FIRST_BAD"
          git log -1 $FIRST_BAD
          echo "=========================================="
          
          # Save to output
          echo "first_bad_commit=$FIRST_BAD" >> $GITHUB_OUTPUT
          
          # Save detailed log
          git bisect log > bisect-full.log
          
      - name: Create summary
        if: always()
        shell: bash
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        run: |
          echo "# Bisect Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f bisect-full.log ]; then
            echo "## Bisect Log" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            tail -30 bisect-full.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Try to extract the first bad commit
            FIRST_BAD=$(git bisect view --pretty=format:'%H' 2>/dev/null | head -1 || echo "unknown")
            if [ "$FIRST_BAD" != "unknown" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🔴 First Bad Commit" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "\`$FIRST_BAD\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              git log -1 $FIRST_BAD >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Bisect did not complete successfully" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload bisect log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bisect-log
          path: ${{ env.DEV_DRIVE_WORKSPACE }}/bisect-full.log
          if-no-files-found: ignore
