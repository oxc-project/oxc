name: CI

permissions: {}

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  test-ubuntu:
    name: Test Linux
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: warm
      - run: cargo ck
      - run: cargo test --all-features
      - run: git diff --exit-code # Must commit everything

  test-ubuntu-aarch64:
    name: Test Linux ARM64
    runs-on: ubuntu-24.04-arm
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: warm-aarch64
      - run: cargo ck
      - run: cargo test --all-features
      - run: git diff --exit-code # Must commit everything

  # Separate job to save a job on PRs
  test-mac:
    name: Test Mac
    runs-on: macos-latest
    if: ${{ github.ref_name == 'main' }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: warm
      - run: cargo ck
      - run: cargo test --all-features
      - run: git diff --exit-code # Must commit everything

  test-windows:
    name: Test Windows
    if: ${{ github.ref_name == 'main' }}
    runs-on: windows-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      # Unsung heroes of the internet, who led me here to speed up Windows' slowness:
      # https://github.com/actions/cache/issues/752#issuecomment-1847036770
      # https://github.com/astral-sh/uv/blob/502e04200d52de30d3159894833b3db4f0d6644d/.github/workflows/ci.yml#L158
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
      - uses: samypr100/setup-dev-drive@750bec535eb7e4833d6a4c86c5738751f9887575 # v3.4.2
        with:
          workspace-copy: true
          drive-size: 8GB
          drive-format: NTFS
          env-mapping: |
            CARGO_HOME,{{ DEV_DRIVE }}/.cargo
            RUSTUP_HOME,{{ DEV_DRIVE }}/.rustup

      - name: Install Rust
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash
        run: |
          # This `awk` command will find the value of our Minimum Supported Rust Version and store it as `MSRV`.
          # NOTE: this will fail if there are any other items named `rust-version`. We assume there is only one in our `Cargo.toml`.
          MSRV=$(awk -F'=' '/rust-version/ {gsub(/[" ]/, "", $2); printf "%s", ($2 + "")}' Cargo.toml)
          # Set profile to minimal and channel to our Minimum Supported Rust Version.
          # Running our tests on this channel ensures that our code uses APIs that are supported in our `MSRV`.
          sed -i -e 's/profile = "default"/profile = "minimal"/g' -e "s/channel = .*/channel = \"$MSRV\"/g" rust-toolchain.toml
          rustup set profile minimal
          rustup show
          git restore .

      - uses: Swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0 # v2.8.0
        with:
          workspaces: ${{ env.DEV_DRIVE_WORKSPACE }}
          save-if: ${{ github.ref_name == 'main' }}
          shared-key: windows-latest

      - run: cargo test --all-features # cargo ck # no need to `cargo ck` because it's already checked in linux
        working-directory: ${{ env.DEV_DRIVE_WORKSPACE }}
        shell: bash

  test-big-endian:
    name: Test big-endian # s390x-unknown-linux-gnu is a big-endian
    if: ${{ github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: s390x-unknown-linux-gnu
          tools: cross
      - run: cross test --all-features --target s390x-unknown-linux-gnu

  test-wasm32-wasip1-threads:
    name: Test wasm32-wasip1-threads
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            src:
              - '!crates/oxc_linter/**'
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          cache-key: wasi
          save-cache: ${{ github.ref_name == 'main' }}
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
        if: steps.filter.outputs.src == 'true'
      - name: Build
        if: steps.filter.outputs.src == 'true'
        run: |
          rustup target add wasm32-wasip1-threads
          pnpm napi build --target wasm32-wasip1-threads --cwd ./napi/parser
          pnpm napi build --target wasm32-wasip1-threads --cwd ./napi/transform
          pnpm napi build --target wasm32-wasip1-threads --cwd ./napi/minify
          git diff --exit-code # Must commit everything
      - name: Test wasi in browser
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/parser
        run: |
          rm -rf *.wasm
          pnpm exec playwright install chromium
          pnpm run build-wasi
          pnpm run build-npm-dir
          pnpm run test-browser
          pnpm build-browser-bundle --npmDir npm-dir

  # NAPI tests are slow, so we shard them into multiple jobs.
  # But we want to build all the packages together, so they share a single build cache.
  #
  # * `napi-build` - build all packages, and upload build files as an artifact.
  # * In parallel:
  #   * `napi-test` (sharded - 1 job per package)
  #   * `napi-test-e2e`
  # * `napi-cleanup` - deletes build files artifact
  napi-build:
    name: Build NAPI packages
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          predicate-quantifier: "every"
          filters: |
            src:
              - '!crates/oxc_linter/**'
              - '!crates/oxc_language_server/**'
              - '!editors/**'
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          cache-key: napi
          save-cache: ${{ github.ref_name == 'main' }}
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
        if: steps.filter.outputs.src == 'true'
      - name: Install wasm32-wasip1-threads
        if: steps.filter.outputs.src == 'true'
        run: |
          rustup target add wasm32-wasip1-threads
      - name: Build minify
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/minify
        run: |
          pnpm run build-test
      - name: Build oxlint2
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/oxlint2
        run: |
          pnpm run build-test
      - name: Build parser
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/parser
        run: |
          pnpm run build-test
      - name: Build playground
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/playground
        run: |
          pnpm run build-test
      - name: Build transform
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/transform
        run: |
          pnpm run build-test
      - name: Check no uncommitted files
        if: steps.filter.outputs.src == 'true'
        run: |
          git diff --exit-code # Must commit everything
      - name: Upload build files
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          if-no-files-found: error
          name: napi
          path: |
            napi/minify/*.node
            napi/oxlint2/dist/
            napi/parser/*.node
            napi/transform/*.node
          retention-days: 1

  napi-test:
    name: Test NAPI
    runs-on: ubuntu-latest
    needs: napi-build
    strategy:
      fail-fast: true
      matrix:
        component:
          - minify
          - oxlint2
          - parser
          - transform
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          predicate-quantifier: "every"
          filters: |
            src:
              - '!crates/oxc_linter/**'
              - '!crates/oxc_language_server/**'
              - '!editors/**'
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
        if: steps.filter.outputs.src == 'true'
      - name: Download build files
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: napi
          path: napi
          pattern: ${{ matrix.component }}/**/*
      # Submodules only needed for parser tests
      - uses: ./.github/actions/clone-submodules
        if: steps.filter.outputs.src == 'true' && matrix.component == 'parser'
        with:
          babel: false
          prettier: false
      - name: Run tests
        if: steps.filter.outputs.src == 'true'
        working-directory: napi/${{ matrix.component }}
        env:
          RUN_RAW_TESTS: "true"
        run: |
          pnpm run test

  napi-test-e2e:
    name: Test NAPI (e2e)
    runs-on: ubuntu-latest
    needs: napi-build
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          predicate-quantifier: "every"
          filters: |
            src:
              - '!crates/oxc_linter/**'
              - '!crates/oxc_language_server/**'
              - '!editors/**'
      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
        if: steps.filter.outputs.src == 'true'
      - name: Download build files
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: napi
          path: napi
          pattern: "{minify,transform}/*.node"
      - name: Install NPM packages
        if: steps.filter.outputs.src == 'true'
        working-directory: tasks/e2e
        run: |
          pnpm install --frozen-lockfile
      - name: Run tests
        if: steps.filter.outputs.src == 'true'
        working-directory: tasks/e2e
        run: |
          pnpm run test

  napi-cleanup:
    name: Delete NAPI build artifacts
    runs-on: ubuntu-latest
    needs: [napi-test, napi-test-e2e]
    steps:
      - uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: napi
          failOnError: false

  typos:
    name: Spell Check
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: crate-ci/typos@52bd719c2c91f9d676e2aa359fc8e0db8925e6d8 # v1.35.3
        with:
          files: .

  lint:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: clippy
          components: clippy
      - run: cargo lint -- -D warnings
      - run: cargo lint --profile dev-no-debug-assertions -- -D warnings

  doc:
    name: Doc
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        with:
          cache-key: warm
          components: rust-docs
      - run: RUSTDOCFLAGS='-D warnings' cargo doc --no-deps --document-private-items

  conformance:
    name: Conformance
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          predicate-quantifier: "every"
          filters: |
            src:
              - '!.github/**'
              - '!.vscode/**'
              - '!apps/**'
              - '!editors/**'
              - '!napi/**'
              - '!npm/**'
              - '!crates/oxc_linter/**'
              - '!crates/oxc_language_server/**'
              - '!tasks/**'

      - uses: ./.github/actions/clone-submodules
        if: steps.filter.outputs.src == 'true'

      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0
        if: steps.filter.outputs.src == 'true'

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          cache-key: conformance
          save-cache: ${{ github.ref_name == 'main' }}
          tools: just

      - name: Check Conformance
        if: steps.filter.outputs.src == 'true'
        run: |
          just update-transformer-fixtures
          just coverage
          git diff --exit-code

  minification:
    name: Minification Size
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            src:
              - '.github/workflows/ci.yml'
              - 'crates/oxc_minifier/**'
              - 'crates/oxc_codegen/**'
              - 'tasks/minsize/**'

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          cache-key: minsize
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Check minification size
        if: steps.filter.outputs.src == 'true'
        run: |
          cargo minsize
          git diff --exit-code

  allocs:
    name: Allocations
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            src:
              - '.github/workflows/ci.yml'
              - 'crates/oxc_ast/**'
              - 'crates/oxc_data_structures/**'
              - 'crates/oxc_parser/**'
              - 'crates/oxc_allocator/**'
              - 'tasks/allocs/**'

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          cache-key: allocs
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Check allocations
        if: steps.filter.outputs.src == 'true'
        run: |
          cargo allocs
          git diff --exit-code ||
          (echo 'Allocations have changed. Run the `cargo allocs` command to update the allocation snapshot, otherwise please fix the regression.' && exit 1)

  ast_changes:
    name: AST Changes
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: ".github/generated/ast_changes_watch_list.yml"

      - uses: oxc-project/setup-rust@cd82e1efec7fef815e2c23d296756f31c7cdc03d # v1.0.0
        if: steps.filter.outputs.src == 'true'
        with:
          components: rustfmt
          tools: dprint
          cache-key: ast_changes
          save-cache: ${{ github.ref_name == 'main' }}

      - name: Restore dprint plugin cache
        uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          key: dprint-${{ hashFiles('dprint.json') }}
          path: ~/.cache/dprint

      - name: Check AST Changes
        if: steps.filter.outputs.src == 'true'
        run: |
          cargo run -p oxc_ast_tools
          git diff --exit-code ||
          (echo 'AST changes caused the "generated" code to get outdated. Have you forgotten to run the `just ast` command and/or commit generated codes?' && exit 1)
