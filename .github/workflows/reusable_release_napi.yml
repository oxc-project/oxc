name: Release NAPI

permissions: {}

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: "The component name"
    secrets:
      NPM_TOKEN:
        required: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.version }}
      version_changed: ${{ steps.version.outputs.changed }}
    env:
      name: ${{ inputs.name }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: EndBug/version-check@36ff30f37c7deabe56a30caa043d127be658c425 # v2.1.5
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/oxc-${{ inputs.name }}@latest/package.json
          file-name: napi/${{ inputs.name }}/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        env:
          VERSION_NUMBER: ${{ steps.version.outputs.version }}
          VERSION_TYPE: ${{ steps.version.outputs.version_type }}
        run: |
          echo "Version change found! New version: ${VERSION_NUMBER} (${VERSION_NUMBER})"
          echo "version=${VERSION_NUMBER}" >> $GITHUB_ENV

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    name: Package ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      version: ${{ needs.check.outputs.version }}
      name: ${{ inputs.name }}
    outputs:
      version: ${{ env.version }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: ubuntu-latest
            target: wasm32-wasip1-threads # For `threads` stackblitz

    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: ./.github/actions/pnpm

      - run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - name: Build with zig cross
        if: ${{ contains(matrix.target, 'musl') }}
        working-directory: napi/${{ inputs.name }}
        run: pnpm build -x --target ${{ matrix.target }}

      - name: Build with napi cross
        if: ${{ contains(matrix.target, 'gnu') }}
        working-directory: napi/${{ inputs.name }}
        run: pnpm build --use-napi-cross --target ${{ matrix.target }}

      - name: Build
        if: ${{ !contains(matrix.target, 'gnu') && !contains(matrix.target, 'musl') }}
        working-directory: napi/${{ inputs.name }}
        run: pnpm build --target ${{ matrix.target }}

      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: bindings-${{ matrix.target }}
          path: |
            napi/${{ inputs.name }}/*.node
            napi/${{ inputs.name }}/*.wasm

  publish:
    name: Publish NAPI
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for `pnpm publish --provenance`
    env:
      name: ${{ inputs.name }}
      package_path: napi/${{ inputs.name }}
      npm_dir: release-dir
      PUBLISH_FLAGS: "--provenance --access public --no-git-checks"
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: ./.github/actions/pnpm

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806 # v4.1.9
        with:
          path: artifacts

      - run: mkdir -p release-dir

      - run: pnpm napi create-npm-dirs --package-json-path ${package_path}/package.json --npm-dir ${npm_dir}

      - run: pnpm napi artifacts --package-json-path ${package_path}/package.json --build-output-dir ${package_path} --npm-dir ${npm_dir}

      - name: Check Publish
        run: |
          # Check subpackages
          for package in ${npm_dir}/*
          do
            echo $package
            ls $package
            cat $package/package.json
            # Check publish files exist
            jq -r '.files[]' $package/package.json | while read -r file ; do
              if ! [ -f $package/$file ] ; then
                echo "File does not exist." $package/$file
                exit 1
              fi
            done
            pnpm publish $package/ ${PUBLISH_FLAGS} --dry-run
            echo ''
          done

          # Check root package
          echo ${package_path}
          ls ${package_path}
          cat ${package_path}/package.json
          # Check publish files exist
          jq -r '.files[]' ${package_path}/package.json | while read -r file ; do
            if ! [ -f ${package_path}/$file ]; then
              echo "File does not exist." ${package_path}/$file
              exit 1
            fi
          done
          pnpm publish ${package_path}/ ${PUBLISH_FLAGS} --dry-run

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          # Publish sub-packages and adds `optionalDependencies` to `package_path`.
          pnpm napi pre-publish --no-gh-release -t npm --package-json-path ${package_path}/package.json --npm-dir ${npm_dir}
          pnpm publish ${package_path}/ ${PUBLISH_FLAGS}
