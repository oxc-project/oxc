name: Release NAPI

permissions: {}

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
        description: "The component name"
    secrets:
      NPM_TOKEN:
        required: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
    env:
      name: ${{ inputs.name }}
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: EndBug/version-check@36ff30f37c7deabe56a30caa043d127be658c425 # v2.1.5
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/oxc-${{ inputs.name }}@latest/package.json
          file-name: napi/${{ inputs.name }}/package.json

      - name: Show version
        if: steps.version.outputs.changed == 'true'
        env:
          version: ${{ steps.version.outputs.version }}
        run: echo "version=${version}"

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    env:
      name: ${{ inputs.name }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              pnpm build --target x86_64-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              pnpm build --target aarch64-pc-windows-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: |
              pnpm build --target x86_64-unknown-linux-gnu --use-napi-cross

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            build: |
              pnpm build --target x86_64-unknown-linux-musl -x

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build: |
              pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            build: |
              pnpm build --target aarch64-unknown-linux-musl -x

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            build: |
              pnpm build --target armv7-unknown-linux-gnueabihf --use-napi-cross

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            build: |
              pnpm build --target armv7-unknown-linux-musleabihf -x

          - os: macos-latest
            target: x86_64-apple-darwin
            build: |
              pnpm build --target x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin
            build: |
              pnpm build --target aarch64-apple-darwin

          - os: ubuntu-latest
            target: wasm32-wasip1-threads
            build: |
              pnpm build --target wasm32-wasip1-threads

          - os: ubuntu-latest
            target: s390x-unknown-linux-gnu
            build: |
              export CFLAGS="-fuse-ld=lld"
              pnpm build --target s390x-unknown-linux-gnu --use-napi-cross

          - os: ubuntu-latest
            target: riscv64gc-unknown-linux-gnu
            build: |
              sudo apt-get update
              sudo apt-get install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu -y
              export CC=riscv64-linux-gnu-gcc
              export CXX=riscv64-linux-gnu-g++
              pnpm build --target riscv64gc-unknown-linux-gnu

    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0

      - run: rustup target add ${{ matrix.target }}

      - uses: goto-bus-stop/setup-zig@abea47f85e598557f500fa1fd2ab7464fcb39406 # v2.2.1
        if: ${{ contains(matrix.target, 'musl') }}
        with:
          version: 0.13.0

      - name: Build
        working-directory: napi/${{ inputs.name }}
        run: ${{ matrix.build }}
        shell: bash
        env:
          CC: clang # for mimalloc

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-${{ matrix.target }}
          path: |
            napi/${{ inputs.name }}/*.node
            napi/${{ inputs.name }}/*.wasm

  build-freebsd:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    name: Build FreeBSD
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - name: Build
        id: build
        uses: cross-platform-actions/action@97419d18f6470332677e345e9df97cdc71244ead # v0.28.0
        env:
          DEBUG: napi:*
          RUSTUP_IO_THREADS: 1
        with:
          operating_system: freebsd
          version: "14.0"
          memory: 8G
          cpu_count: 3
          environment_variables: "DEBUG RUSTUP_IO_THREADS"
          shell: bash
          run: |
            sudo pkg install -y -f curl libnghttp2 node22 npm cmake
            curl https://sh.rustup.rs -sSf --output rustup.sh
            sh rustup.sh -y --profile minimal --default-toolchain stable
            source "$HOME/.cargo/env"
            echo "~~~~ rustc --version ~~~~"
            rustc --version
            echo "~~~~ node -v ~~~~"
            node -v
            pwd
            ls -lah
            whoami
            env
            cd napi/${{ inputs.name }}
            export COREPACK_INTEGRITY_KEYS=0
            sudo corepack enable
            pnpm install
            pnpm build --target x86_64-unknown-freebsd
            rm -rf node_modules
            rm -rf target
      - name: Upload artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: bindings-freebsd
          path: napi/${{ inputs.name }}/*.node
          if-no-files-found: error

  publish:
    name: Publish NAPI
    needs:
      - build
      - build-freebsd
    runs-on: ubuntu-latest
    permissions:
      id-token: write # for `pnpm publish --provenance`
    env:
      name: ${{ inputs.name }}
      package_path: napi/${{ inputs.name }}
      npm_dir: release-dir
      PUBLISH_FLAGS: "--provenance --access public --no-git-checks"
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1

      - uses: oxc-project/setup-node@f42e3bda950c7454575e78ee4eaac880a077700c # v1.0.0

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          path: artifacts

      - run: mkdir -p release-dir

      - run: pnpm napi create-npm-dirs --package-json-path ${package_path}/package.json --npm-dir ${npm_dir}

      - run: pnpm napi artifacts --package-json-path ${package_path}/package.json --build-output-dir ${package_path} --npm-dir ${npm_dir}

      - run: pnpm -C ${package_path} build-browser-bundle --npmDir ../../${npm_dir}
        if: ${{ inputs.name == 'parser' }}

      - name: Check Publish
        run: |
          # Check subpackages
          for package in ${npm_dir}/*
          do
            echo $package
            ls $package
            cat $package/package.json
            # Check publish files exist
            jq -r '.files[]' $package/package.json | while read -r file ; do
              if ! [ -f $package/$file ] ; then
                echo "File does not exist." $package/$file
                exit 1
              fi
            done
            pnpm publish $package/ ${PUBLISH_FLAGS} --dry-run
            echo ''
          done

          # Check root package
          echo ${package_path}
          ls ${package_path}
          cat ${package_path}/package.json
          # Check publish files exist
          jq -r '.files[]' ${package_path}/package.json | while read -r file ; do
            if ! [ -f ${package_path}/$file ]; then
              echo "File does not exist." ${package_path}/$file
              exit 1
            fi
          done
          pnpm publish ${package_path}/ ${PUBLISH_FLAGS} --dry-run

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          # Publish sub-packages and adds `optionalDependencies` to `package_path`.
          pnpm napi pre-publish --no-gh-release -t npm --package-json-path ${package_path}/package.json --npm-dir ${npm_dir}
          pnpm publish ${package_path}/ ${PUBLISH_FLAGS}
