name: Release NAPI

# When main is pushed and npm/napi/package.json has been changed,
# trigger the jobs after the ci workflow has been passed.
on:
  push:
    branches:
      - main
    paths:
      - npm/napi/package.json # Please only commit this file, so we don't need to wait for test CI to pass.

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.version }}
      version_changed: ${{ steps.version.outputs.changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/@oxidation-compiler/napi@latest/package.json
          file-name: npm/napi/package.json

      - name: Set version name
        if: steps.version.outputs.changed == 'true'
        run: |
          echo "Version change found! New version: ${{ steps.version.outputs.version }} (${{ steps.version.outputs.version_type }})"
          echo "version=${{ steps.version.outputs.version }}" >> $GITHUB_ENV

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    env:
      version: ${{ needs.check.outputs.version }}
    outputs:
      version: ${{ env.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64-msvc

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64-gnu

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64-gnu

          - os: macos-latest
            target: x86_64-apple-darwin
            code-target: darwin-x64

          - os: macos-latest
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: Package ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install cross
        uses: taiki-e/install-action@cross

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build with cross
        run: cross build -p oxc_napi --release --target=${{ matrix.target }}

      - name: Move file on ${{ matrix.os }}
        shell: bash
        run: |
          shopt -s extglob
          ls target/${{ matrix.target }}/release/*.@(so|dll|dylib)
          mv target/${{ matrix.target }}/release/*.@(so|dll|dylib) crates/oxc_napi/napi.${{ matrix.code-target }}.node
          ls crates/oxc_napi

      - name: Test
        working-directory: crates/oxc_napi
        if: ${{ contains(matrix.target, 'x86') }} # Need docker for aarch64
        run: |
          ls
          node test.mjs

      # The binary is zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binary
        if: runner.os == 'Windows'
        shell: bash
        run: 7z a ${{ matrix.code-target }}.zip crates/oxc_napi/napi.${{ matrix.code-target }}.node

      # The binary is zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binary
        if: runner.os != 'Windows'
        shell: bash
        run: tar czf ${{ matrix.code-target }}.tar.gz crates/oxc_napi/napi.${{ matrix.code-target }}.node

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: binaries
          path: |
            *.zip
            *.tar.gz

  publish:
    name: Publish NAPI
    runs-on: ubuntu-latest
    permissions:
      contents: write # for softprops/action-gh-release@v1
      id-token: write # for `npm publish --provenance`
    needs:
      - build
    steps:
      - uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Unzip
        uses: montudor/action-zip@v1
        with:
          args: unzip -qq *.zip -d .

      - name: Untar
        shell: bash
        run: ls *.gz | xargs -i tar xvf {}

      - name: Generate npm packages
        shell: bash
        run: |
          ls
          ls crates/oxc_napi
          node npm/napi/scripts/generate-packages.mjs
          cat npm/napi/package.json
          for package in npm/napi*
          do
            ls $package
            cat $package/package.json
            echo '----'
          done

      - name: Publish npm packages as latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        # NOTE: The trailing slash on $package/ changes it to publishing the directory
        shell: bash
        run: |
          for package in npm/napi*
          do
            npm publish $package/ --tag latest --provenance --access public
            echo '----'
          done
