//! Create documentation pages for each rule. Pages are printed as Markdown and
//! get added to the website.

use oxc_linter::table::RuleTableRow;
use std::fmt::{self, Write};

use super::HtmlWriter;

pub fn render_rule_docs_page(rule: &RuleTableRow) -> Result<String, fmt::Error> {
    const APPROX_FIX_CATEGORY_AND_PLUGIN_LEN: usize = 512;
    let RuleTableRow { name, documentation, plugin, turned_on_by_default, autofix, category } =
        rule;

    let mut page = HtmlWriter::with_capacity(
        documentation.map_or(0, str::len) + name.len() + APPROX_FIX_CATEGORY_AND_PLUGIN_LEN,
    );

    writeln!(
        page,
        "<!-- This file is auto-generated by {}. Do not edit it manually. -->\n",
        file!()
    )?;
    writeln!(page, r#"# {plugin}/{name} <Badge type="info" text="{category}" />"#)?;

    // rule metadata
    page.div(r#"class="rule-meta""#, |p| {
        if *turned_on_by_default {
            p.Alert(r#"class="default-on" type="success""#, |p| {
                p.writeln(r#"<span class="emoji">âœ…</span> This rule is turned on by default."#)
            })?;
        }

        if let Some(emoji) = autofix.emoji() {
            p.Alert(r#"class="fix" type="info""#, |p| {
                p.writeln(format!(
                    r#"<span class="emoji">{}</span> {}"#,
                    emoji,
                    autofix.description()
                ))
            })?;
        }

        Ok(())
    })?;

    // rule documentation
    if let Some(docs) = documentation {
        writeln!(page, "\n{}", *docs)?;
    }

    // TODO: link to rule source

    Ok(page.into())
}
