commit: a709f989

parser_typescript Summary:
AST Parsed     : 6470/6479 (99.86%)
Positive Passed: 6445/6479 (99.48%)
Negative Passed: 1193/5715 (20.87%)
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ClassDeclaration9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ExportAssignment7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ExportAssignment8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/FunctionDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/FunctionDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/FunctionDeclaration6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/FunctionDeclaration7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/InterfaceDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ParameterList7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ParameterList8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/abstractClassInLocalScopeIsAbstract.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/abstractClassUnionInstantiation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/abstractPropertyInConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessInstanceMemberFromStaticMethod01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessStaticMemberFromInstanceMethod01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorAccidentalCallDiagnostic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorDeclarationEmitVisibilityErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorInferredReturnTypeErrorInReturnStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorWithInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorWithoutBody1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorWithoutBody2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessorsInAmbientContext.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/accessors_spec_section-4.5_error-cases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/addMoreOverloadsToBaseSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasBug.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasDoesNotDuplicateSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasInstantiationExpressionGenericIntersectionNoCrash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasInstantiationExpressionGenericIntersectionNoCrash2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasOnMergedModuleInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInOrExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasWithInterfaceExportAssignmentUsedInVarInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasesInSystemModule1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/aliasesInSystemModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowImportClausesToMergeWithTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowJscheckJsTypeParameterNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImports10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImports3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImports6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImports8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/alwaysStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/alwaysStrictES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/alwaysStrictModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/alwaysStrictNoImplicitUseStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnum1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientExportDefaultErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleInAnotherExternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithRelativeExternalImportDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithRelativeModuleName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientGetters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambientStatement1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ambiguousOverload.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyComment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyComment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyCommentName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyCommentName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyCommentName3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdDependencyCommentName4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/amdModuleName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/anonymousClassExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/anyDeclare.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/anyIdenticalToItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/anyIndexedAccessArrayNoException.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/anyMappedTypesError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsBindsToFunctionScopeArgumentList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsObjectIterator01_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsObjectIterator02_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsObjectIterator03_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsPropertyNameInJsMode1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsReferenceInConstructor4_Js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsReferenceInFunction1_Js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsReferenceInMethod4_Js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsReferenceInObjectLiteral_Js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/argumentsSpreadRestIterables.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arithAssignTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arithmeticOnInvalidTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arithmeticOnInvalidTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arityErrorRelatedSpanBindingPattern.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayCast.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayDestructuringInSwitch2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayFakeFlatNoCrashInferenceDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayFrom.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayIndexWithArrayFails.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayLiteralAndArrayConstructorEquivalence1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayLiteralTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayOfSubtypeIsAssignableToReadonlyArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayReferenceWithoutTypeArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrayToLocaleStringES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionInConstructorArgument1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/asiPublicPrivateProtected.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignLambdaToNominalSubtypeOfFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignToEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignToExistingClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignToFn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignToModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assigningFromObjectToAnythingElse.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assigningFunctionToTupleIssuesError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompat1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatBug2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatBug5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatFunctionsWithOptionalArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatInterfaceWithStringIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatWithOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability23.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability26.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability27.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability28.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability30.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability31.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability32.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability33.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability34.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability35.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability37.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability38.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability39.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability40.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability41.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability42.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability43.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability44.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability45.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability46.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability_checking-apply-member-off-of-function-interface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability_checking-call-member-off-of-function-interface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentIndexedToPrimitives.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentRestElementWithErrorSourceType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentStricterConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToAnyArrayRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToInstantiationExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToObjectAndFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToReferenceTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionNoReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionReturnExpressionErrorSpans.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals1_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals2_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentedClassWithPrototypePropertyOnModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesEnum3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesModules3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/autoTypeAssignedUsingDestructuringFromNeverNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/autolift3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/autolift4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/avoidListingPropertiesForTypesWithOnlyCallOrConstructSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/awaitCallExpressionInSyncFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/awaitInClassInAsyncFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/awaitedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/awaitedTypeNoLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/awaitedTypeStrictNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/badExternalModuleReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/baseCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/baseClassImprovedMismatchErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/baseConstraintOfDecorator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/baseExpressionTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/baseTypePrivateMemberClash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bestCommonTypeWithContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/betterErrorForAccidentalCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/betterErrorForUnionCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigIntWithTargetLessThanES2016.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigintArbirtraryIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigintIndex.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigintPropertyName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigintWithLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bigintWithoutLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/binaryArithmatic1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/binaryArithmatic2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/binaryArithmatic3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/binaryArithmatic4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bind1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bindingPatternCannotBeOnlyInferenceSource.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bitwiseCompoundAssignmentOperators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedBindingUsedBeforeDef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedEnumVariablesUseBeforeDef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedEnumVariablesUseBeforeDef_isolatedModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedEnumVariablesUseBeforeDef_preserve.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedEnumVariablesUseBeforeDef_verbatimModuleSyntax.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedFunctionDeclarationInStrictClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedFunctionDeclarationInStrictModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedFunctionDeclarationStrictES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedFunctionDeclarationStrictES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedSameNameFunctionDeclarationES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedSameNameFunctionDeclarationES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedSameNameFunctionDeclarationStrictES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedSameNameFunctionDeclarationStrictES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedVariablesUseBeforeDef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/bluebirdStaticThis.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/booleanAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/booleanLiteralsContextuallyTypedFromUnion.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/breakInIterationOrSwitchStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/builtinIterator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callConstructAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOnClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOnInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloadViaElementAccessExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloads1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloads2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloads3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloads4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callOverloads5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callSignaturesShouldBeResolvedBeforeSpecialization.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callWithWrongNumberOfTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/callbackArgsDifferByOptionality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cannotIndexGenericWritingError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cannotInvokeNewOnIndexExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop5_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop6_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop7_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop8_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedParametersInInitializers1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/capturedParametersInInitializers2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/chainedAssignment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/chainedAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/chainedAssignmentChecking.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/chainedCallsWithTypeParameterConstrainedToOtherTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/chainedCallsWithTypeParameterConstrainedToOtherTypeParameter2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkDestructuringShorthandAssigment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkDestructuringShorthandAssigment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkForObjectTooStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkIndexConstraintOfJavascriptClassExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsFiles_skipDiagnostics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsObjectLiteralHasCheckedKeyof.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsdocTypeTagOnExportAssignment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsdocTypeTagOnExportAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsdocTypeTagOnExportAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsdocTypeTagOnExportAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsdocTypeTagOnExportAssignment6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkJsxNotSetError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkMergedGlobalUMDSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkTypePredicateForRedundantProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/checkerInitializationCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularAccessorAnnotations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularBaseConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularBaseTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularConstraintYieldsAppropriateError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularInlineMappedGenericTupleTypeNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularModuleImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularOptionalityRemoval.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularReferenceInReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularReferenceInReturnType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularResolvedSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularTypeArgumentsLocalAndOuterNoCrash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularlyConstrainedMappedTypeContainingConditionalNoInfiniteInstantiationDepth.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/circularlyReferentialInterfaceAccessNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classDeclarationShouldBeOutOfScopeInComputedNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionExtendingAbstractClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionWithDecorator1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendingQualifiedName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsClauseClassMergedWithModuleNotReferingConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsClauseClassNotReferringConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsInterfaceInExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsInterfaceInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsInterfaceThatExtendsClassWithPrivates1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsInterface_not.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsMultipleBaseClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsNull2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classExtendsNull3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classFieldSuperAccessibleJs1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classFieldSuperNotAccessible.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classFieldSuperNotAccessibleJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsPrimitive.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classIndexer4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classInheritence.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerScoping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classMergedWithInterfaceMultipleBasesNoError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classOrder2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classOverloadForFunction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classPropertyErrorOnNameOnly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classSideInheritance1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classSideInheritance2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classSideInheritance3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classStaticInitializersUsePropertiesBeforeDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classStaticPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classTypeParametersInStatics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classUsedBeforeInitializedVariables.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classWithMultipleBaseClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classWithOverloadImplementationOfWrongName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/classWithOverloadImplementationOfWrongName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleSplitAcrossFiles.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleStaticMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleTest2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleWithDuplicateMember1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleWithDuplicateMember2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/cloduleWithPriorInstantiatedModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/clodulesDerivedClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsArrowFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsFunctionExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndInternalModuleAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndVar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commaOperator1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commaOperatorLeftSideUnused.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commentOnImportStatement1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commentOnImportStatement2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commentOnImportStatement3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commentsOnObjectLiteral1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commentsOnObjectLiteral2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commonJsExportTypeDeclarationError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commonJsUnusedLocals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commonSourceDir2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/commonSourceDir4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/compareTypeParameterConstrainedByLiteralToLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/complexClassRelationships.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/complexRecursiveCollections.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/complicatedGenericRecursiveBaseClassReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/complicatedIndexedAccessKeyofReliesOnKeyofNeverUpperBound.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesInDestructuring1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesInDestructuring1_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesInDestructuring2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesInDestructuring2_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesNarrowed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/concatClassAndString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalAnyCheckTypePicksBothBranches.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalDoesntLeakUninstantiatedTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalEqualityOnLiteralObjects.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalExpressionNewLine9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeAssignabilityWhenDeferred.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeDoesntSpinForever.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeVarianceBigArrayConstraintsPerformance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/configFileExtendsAsList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conflictingDeclarationsImportFromNamespace1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conflictingDeclarationsImportFromNamespace2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conflictingMemberTypesInBases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conflictingTypeAnnotatedVar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/conflictingTypeParameterSymbolTransfer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/consistentAliasVsNonAliasRecordBehavior.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-access.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-access2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-access3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-access4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-access5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-ambient-errors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-useBeforeDefinition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-useBeforeDefinition2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constEnumBadPropertyNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constEnumErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constWithNonNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constantEnumAssert.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constraintErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constraintWithIndexedAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constraints0.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorArgsErrors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorArgsErrors4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorAsType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorInvocationWithTooFewTypeArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorParametersInVariableDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorParametersThatShadowExternalNamesInVariableDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorReturnsInvalidType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/constructorsWithSpecializedSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualOverloadListFromUnionWithPrimitiveNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualPropertyOfGenericFilteringMappedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInArrayElementLibEs2015.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInArrayElementLibEs5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstatiationContravariance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTupleTypeParameterReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeForInitalizedVariablesFiltersUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeFunctionObjectPropertyIntersection.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping30.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping33.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping39.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping41.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingArrayDestructuringWithDefaults.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfArrayLiterals1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfConditionalExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfGenericFunctionTypedArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfLambdaReturnExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfObjectLiterals2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingWithFixedTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersOptionalInJSDoc.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithQuestionToken.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypingOrOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypingOrOperator2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypingRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/continueInIterationStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/continueNotInIterationStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowAliasedDiscriminants.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowArrayErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowDestructuringVariablesInTryCatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowForIndexSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowLoopAnalysis.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowNullTypeAndLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowSelfReferentialLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/copyrightWithNewLine1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/copyrightWithoutNewLine1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/corrupted.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/couldNotSelectGenericOverload.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashDeclareGlobalTypeofExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashInEmitTokenWithComment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashInYieldStarInAsyncFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashInsourcePropertyIsRelatableToTargetProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashIntypeCheckInvocationExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashIntypeCheckObjectCreationExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashOnMethodSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/crashRegressionTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/dataViewConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declFileEmitDeclarationOnlyError1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declFileEmitDeclarationOnlyError2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationParenType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithErrorsInInputDeclarationFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithErrorsInInputDeclarationFileWithOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitBindingPatternsUnused.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitCommonJsModuleReferencedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameEnum2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameEnum3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameSymbol1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameSymbol2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuring2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringArrayPattern2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringParameterProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringWithOptionalBindingParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpandoPropertyPrivateName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionWithNonlocalPrivateUniqueSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitIndexTypeNotFound.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInterfaceWithNonEntityNameExpressionHeritage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInvalidReference2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInvalidReferenceAllowJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitLambdaWithMissingTypeParameterNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedPrivateTypeTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypeTemplateTypeofSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMixinPrivateProtected.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitObjectAssignedDefaultExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrivatePromiseLikeInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrivateSymbolCausesVarDeclarationEmit2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitReadonlyComputedProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitReexportedSymlinkReference3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitRelativeModuleError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitToDeclarationDirWithoutCompositeAndDeclarationOptions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasTypeParameterExtendingUnknownSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeofRest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUnknownImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingTypeAlias1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitVarInElidedBlock.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationFileNoCrashOnExtraExportModifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationFileOverwriteError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationFileOverwriteErrorWithOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declarationMapsWithoutDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declareClassInterfaceImplementation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/declareModifierOnImport1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataGenericTypeVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataGenericTypeVariableDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataGenericTypeVariableInScope.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataNoLibIsolatedModulesTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataTypeOnlyImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/decoratorsOnComputedProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deduplicateImportsInSystem.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deepComparisons.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deepElaborationsIntoArrowExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deepExcessPropertyCheckingWhenTargetIsIntersection.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deepKeysIndexing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedAssignabilityErrorsCombined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedAssignabilityIssue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedMappedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultArgsInFunctionExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultArgsInOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultBestCommonTypesHaveDecls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultIsNotVisibleInLocalScope.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultValueInConstructorOverload1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultValueInFunctionOverload1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/defaultValueInFunctionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/definiteAssignmentWithErrorStillStripped.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deleteOperator1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deleteReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deleteReadonlyInStrictNullChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deprecatedCompilerOptions1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deprecatedCompilerOptions3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deprecatedCompilerOptions4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deprecatedCompilerOptions5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/deprecatedCompilerOptions6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/derivedClassOverridesPrivateFunction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/derivedClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/derivedInterfaceCallSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/derivedTypeCallingBaseImplWithOptionalParams.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/derivedTypeIncompatibleSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructureComputedProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructureTupleWithVariableElement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuredLateBoundNameHasCorrectTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringAssignmentWithDefault2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringAssignmentWithExportedName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringAssignment_private.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringFromUnionSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/destructuringUnspreadableIntoRest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/detachedCommentAtStartOfFunctionBody1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/detachedCommentAtStartOfFunctionBody2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/didYouMeanElaborationsForExpressionsWhichCouldBeCalled.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/didYouMeanStringLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/didYouMeanSuggestionErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/differentTypesWithSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithMissingProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/discriminatedUnionErrorMessage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/dissallowSymbolAsWeakType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/distributiveConditionalTypeConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsVisibility1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doNotElaborateAssignabilityToTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2015.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2016Plus.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doYouNeedToChangeYourTargetLibraryES2023.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doubleUnderStringLiteralAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreExportStarConflict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateDefaultExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateErrorAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateErrorClassExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateErrorNameNotFound.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierDifferentModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierInCatchBlock.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierRelatedSpans_moduleAugmentation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifiersAcrossContainerBoundaries.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifiersAcrossFileBoundaries.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateInterfaceMembers1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateLocalVariable1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateLocalVariable2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateLocalVariable3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateLocalVariable4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateObjectLiteralProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateObjectLiteralProperty_computedName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateObjectLiteralProperty_computedName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateObjectLiteralProperty_computedName3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_globalMerge.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_withErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePropertiesInStrictMode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateStringNamedProperty1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateTypeParameters2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateTypeParameters3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateVarAndImport2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateVariablesWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/duplicateVarsAcrossFileBoundaries.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/dynamicImportInDefaultExportExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/dynamicImportTrailingComma.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/dynamicNamesErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/elaboratedErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/elaboratedErrorsOnNullableTargets01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/elaborationForPossiblyCallableTypeStillReferencesArgumentAtTopLevel.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/elidedJSImport1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/elidedJSImport2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emitCapturingThisInTupleDestructuring1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emitCapturingThisInTupleDestructuring2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emitClassExpressionInDeclarationFile2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emitDecoratorMetadata_isolatedModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emitThisInSuperMethodCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyGenericParamList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyModuleName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyObjectNotSubtypeOfIndexSignatureContainingObject1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyObjectNotSubtypeOfIndexSignatureContainingObject2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyThenWarning.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyTypeArgumentList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/emptyTypeArgumentListWithNew.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ensureNoCrashExportAssignmentDefineProperrtyPotentialMerge.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumBasics1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumBasics2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumBasics3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumLiteralAssignableToEnumInsideUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumNoInitializerFollowsNonLiteralInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumPropertyAccessBeforeInitalisation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumUsedBeforeDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumWithComputedMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumWithNonLiteralStringInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumWithPrimitiveName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumsWithMultipleDeclarations1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/enumsWithMultipleDeclarations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorCause.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorElaboration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorElaborationDivesIntoApparentlyPresentPropsOnly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorForBareSpecifierWithImplicitModuleResolutionNone.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorForConflictingExportEqualsValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorForUsingPropertyOfTypeAsType02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorForUsingPropertyOfTypeAsType03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorForwardReferenceForwadingConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorHandlingInInstanceOf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorInfoForRelatedIndexTypesNoConstraintElaboration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorLocationForInterfaceExtension.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessageOnIntersectionsWithDiscriminants01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessageOnObjectLiteralType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessagesIntersectionTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessagesIntersectionTypes02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessagesIntersectionTypes03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorMessagesIntersectionTypes04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorOnContextuallyTypedReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorOnEnumReferenceInCondition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorOnUnionVsObjectShouldDeeplyDisambiguate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorOnUnionVsObjectShouldDeeplyDisambiguate2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorSupression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorTypesAsTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorWithSameNameType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorWithTruncatedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorsForCallAndAssignmentAreSimilar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorsInGenericTypeReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorsOnImportedSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorsOnUnionsOfOverlappingObjects01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/errorsWithInvokablesInUnions01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5-commonjs3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5-commonjs4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5-oldStyleOctalLiteralInEnums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultClassDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportEquals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es5ModuleInternalNamedImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6DeclOrdering.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportEquals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportEqualsInterop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImport1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImport1InEs5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImport1WithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImportDts.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImportDts1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImportInEs5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImportWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding1WithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBindingDts.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBindingInEs5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBindingWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingInEs5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingMergeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingNoDefaultProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportEqualsDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportEqualsExportModuleCommonJsError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportEqualsExportModuleEs2015Error.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportMergeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportMergeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportNoExportMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportNoNamedExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportParsingError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportWithoutFromClauseWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6MemberScoping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleInternalNamedImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleInternalNamedImports2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esModuleInteropDefaultImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esModuleInteropImportDefaultWhenAllNamedAreDefaultAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esModuleInteropPrettyErrorRelatedInformation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esModuleInteropTslibHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esModuleInteropUsesExportStarWhenDefaultPlusNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esmModeDeclarationFileWithExportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/esmNoSynthesizedDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/evalAfter0.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/evolvingArrayResolvedAssert.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exactSpellingSuggestion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertiesInOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckIntersectionWithIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckIntersectionWithRecursiveType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithEmptyObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithMultipleDiscriminants.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithUnions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyChecksWithNestedIntersections.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyErrorForFunctionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyErrorsSuppressed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessiveStackDepthFlatArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/excessivelyLargeTupleSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exhaustiveSwitchCheckCircularity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exhaustiveSwitchImplicitReturn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionContextualTypesNoValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionNestedAssigments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/experimentalDecoratorMetadataUnresolvedTypeObjectInEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAsNamespaceConflict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAsNamespace_augment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentImportMergeNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentOfDeclaredExternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithoutAllowSyntheticDefaultImportsError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDeclarationsInAmbientNamespaces2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDeclareClass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultAlias_excludesEverything.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultClassAndValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultClassInNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultDuplicateCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultFunctionInNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceAndTwoFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceClassAndFunctionOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceClassAndValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultMissingName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultStripsFreshness.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultTypeAndClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultTypeAndFunctionOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultTypeClassAndValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualErrorType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualMemberMissing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportInterfaceClassAndValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportInterfaceClassAndValueWithDuplicatesInImportList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSameNameFuncVar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierAndLocalMemberDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierForAGlobal.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierReferencingOuterDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierReferencingOuterDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierReferencingOuterDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierReferencingOuterDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportStarFromEmptyModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/exportedBlockScopedDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/expr.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extBaseClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendAndImplementTheSameBaseType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendBaseClassBeforeItsDeclared.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendFromAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendGenericArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendGenericArray2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendGlobalThis2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendNonClassSymbol2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendPrivateConstructorClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendedInterfacesWithDuplicateTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendsClauseAlreadySeen.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extendsClauseAlreadySeen2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/externSemantics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/externSyntax.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleExportingGenericClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleImmutableBindings.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleRefernceResolutionOrderInImportDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/extractInferenceImprovement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fakeInfinity1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fallFromLastCase2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/filesEmittingIntoSameOutput.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fillInMissingTypeArgsOnJSConstructCalls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/findLast.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/firstMatchRegExpMatchArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fixTypeParameterInSignatureWithRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fixingTypeParametersRepeatedly2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/flatArrayNoExcessiveStackDepth.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forIn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forIn2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forInStatement2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forInStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forInStatement7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forInStrictNullChecksNoError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forwardDeclaredCommonTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forwardRefInClassProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/forwardRefInEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionAndImportNameConflict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionAndInterfaceWithSeparateErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionArgShadowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCall9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionCallOnConstrainedTypeVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionExpressionShadowedByParams.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadAmbiguity1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadImplementationOfWrongName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadImplementationOfWrongName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads27.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads34.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads37.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads40.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads41.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadsOutOfOrder.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionParameterArityMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionSignatureAssignmentCompat1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionToFunctionWithPropError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionTypeArgumentArityErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionTypeArgumentAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionVariableInReturnTypeAnnotation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/functionsMissingReturnStatementsAndExpressionsStrictNullChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/funduleSplitAcrossFiles.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/fuzzy.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generatorES6_5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generatorReturnExpressionIsChecked.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericAndNonGenericInheritedSignature1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericAndNonGenericInheritedSignature2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArgumentCallSigAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArrayAssignment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArrayAssignmentCompatErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArrayExtenstions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArrayMethods1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericArrayWithoutTypeAnnotation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericAssignmentCompatOfFunctionSignatures1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericAssignmentCompatWithInterfaces1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCallSpecializedToTypeArg.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCallWithObjectLiteralArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCallbackInvokedInsideItsContainingFunction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericChainedCalls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericClassInheritsConstructorFromNonGenericClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericClassWithStaticsUsingTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericClassesRedeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCloduleInModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCloneReturnTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCloneReturnTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericCombinators2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConditionalConstrainedToUnknownNotAssignableToConcreteObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraint1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraint2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraintSatisfaction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConstructInvocationWithNoTypeArg.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericConstructorFunction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericDefaults.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericDefaultsErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericDerivedTypeWithSpecializedBase.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericDerivedTypeWithSpecializedBase2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionCallSignatureReturnTypeMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionInference1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionTypedArgumentsAreFixed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionsWithOptionalParameters2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunduleInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericFunduleInModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericGetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericGetter2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericGetter3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericImplements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericIndexTypeHasSensibleErrorMessage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericIndexedAccessVarianceComparisonResultCorrect.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericInterfacesWithoutTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericLambaArgWithoutTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericMappedTypeAsClause.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericMemberFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericMergedDeclarationUsingTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericMergedDeclarationUsingTypeParameter2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericNewInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericRecursiveImplicitConstructorErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericRecursiveImplicitConstructorErrors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericReduce.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericRestArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericRestTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericReturnTypeFromGetter1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericSignatureIdentity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericSpecializations1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericSpecializations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericSpecializations3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeArgumentInference1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeReferencesRequireTypeArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeUsedWithoutTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeUsedWithoutTypeArguments3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithNonGenericBaseMisMatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericUnboundedTypeParamAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericWithNoConstraintComparableWithCurlyCurly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericWithOpenTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generics1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generics2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generics4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/generics5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericsWithDuplicateTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/genericsWithoutTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/getAndSetNotIdenticalType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/getAndSetNotIdenticalType3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/getterControlFlowStrictNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/getterMissingReturnError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/gettersAndSetters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/gettersAndSettersAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/globalThisDeclarationEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/grammarAmbiguities1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/heterogeneousArrayAndOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/hugeDeclarationOutputGetsTruncatedWithError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/i3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/identityForSignaturesWithTypeParametersAndAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/identityForSignaturesWithTypeParametersSwitched.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ifElseWithStatements1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/ignoredJsxAttributes.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementArrayInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementClausePrecedingExtends.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementGenericWithMismatchedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementPublicPropertyAsPrivate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementsClauseAlreadySeen.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implementsIncorrectlyNoAssertion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyAmbients.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyCastedValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareFunctionExprWithoutFormalType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareFunctionWithoutFormalType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareMemberWithoutType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareMemberWithoutType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareTypePropertyWithoutType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyDeclareVariablesWithoutTypeAndInit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyFromCircularInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyFunctionInvocationWithAnyArguements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyFunctionOverloadWithImplicitAnyReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyFunctionReturnNullOrUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyGetAndSetAccessorWithAnyReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyInAmbientDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyInAmbientDeclaration2.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyNewExprLackConstructorSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyWidenToAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/implicitConstParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/impliedNodeFormatEmit1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/impliedNodeFormatEmit2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/impliedNodeFormatEmit3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/impliedNodeFormatEmit4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importAliasInModuleAugmentation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importAnImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importAndVariableDeclarationConflict1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importAndVariableDeclarationConflict4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importAsBaseClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclRefereingExternalModuleWithNoResolve.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithClassModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithDeclareModifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithDeclareModifierInAmbientContext.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithExportModifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithExportModifierAndExportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithExportModifierAndExportAssignmentInAmbientContext.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importDeclarationInModuleDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importEqualsError45874.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersNoHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersNoHelpersForAsyncGenerators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersNoHelpersForPrivateFields.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersNoModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importInsideModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importNotElidedWhenNotFound.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importTypeWithUnparenthesizedGenericFunctionParsed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importUsedAsTypeWithErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importWithTrailingSlash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importWithTrailingSlash_noResolve.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importedEnumMemberMergedWithExportedAliasIsError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/importedModuleAddToGlobal.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inDoesNotOperateOnPrimitiveTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inKeywordAndUnknown.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incompatibleAssignmentOfIdenticallyNamedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incompatibleExports1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incompatibleExports2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incompatibleGenericTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incompatibleTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incorrectClassOverloadChain.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incorrectNumberOfTypeArgumentsDuringErrorReporting.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incorrectRecursiveMappedTypeConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incrementOnTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/incrementalInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexAt.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexIntoArraySubclass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexSignatureAndMappedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexSignatureInOtherFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexSignatureInOtherFile1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexSignatureOfTypeUnknownStillRequiresIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexSignatureWithInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexWithUndefinedAndNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexWithUndefinedAndNullStrictNullChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexWithoutParamType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessImplicitlyAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessPrivateMemberOfGenericConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessRelation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessWithFreshObjectLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessWithVariableElement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexer2A.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indexerConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indirectDiscriminantAndExcessProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indirectSelfReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/indirectSelfReferenceGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inexistentPropertyInsideToStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferFromGenericFunctionReturnTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferFromGenericFunctionReturnTypes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferFromNestedSameShapeTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferSetterParamType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferTypePredicates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferenceExactOptionalProperties2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferenceFromIncompleteSource.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferenceShouldFailOnEvolvingArrays.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithObjectLiteralProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/infiniteConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritFromGenericTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritSameNamePrivatePropertiesFromDifferentOrigins.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritSameNamePropertiesWithDifferentOptionality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritSameNamePropertiesWithDifferentVisibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritance1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceGrandParentPrivateMemberCollision.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceGrandParentPrivateMemberCollisionWithPublicMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceGrandParentPublicMemberCollisionWithPrivateMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberAccessorOverridingMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberAccessorOverridingProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberFuncOverridingAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberFuncOverridingProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberPropertyOverridingAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticAccessorOverridingMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticFuncOverridingAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticFuncOverridingProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticMembersIncompatible.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticPropertyOverridingMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedConstructorWithRestParams.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedConstructorWithRestParams2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedMembersAndIndexSignaturesFromDifferentBases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedModuleMembersForClodule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedStringIndexersFromDifferentBaseTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inheritedStringIndexersFromDifferentBaseTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/initializedDestructuringAssignmentTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/initializerWithThisPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/inlineSourceMap2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/innerAliases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/innerTypeCheckOfLambdaArgument.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instanceSubtypeCheck2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instanceofOnInstantiationExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instanceofOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instanceofWithPrimitiveUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instanceofWithStructurallyIdenticalTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/instantiateTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceExtendsClassWithPrivate1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceExtendsClassWithPrivate2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceMemberValidation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceNameAsIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfacePropertiesWithSameName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfacePropertiesWithSameName3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceWithImplements1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfaceWithMultipleDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/interfacedeclWithIndexerErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideLocalModuleWithoutExportAccessError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalImportInstantiatedModuleMergedWithClassNotReferencingInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalImportInstantiatedModuleNotReferencingInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/internalImportUnInstantiatedModuleMergedWithClassNotReferencingInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionPropertyCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionWithConflictingPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsAndOptionalProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsAndReadonlyProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsOfLargeUnions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsOfLargeUnions2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intraBindingPatternReferences.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/intrinsics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidConstraint1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidReferenceSyntax1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidStaticField.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidSymbolInTypeParameter1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidTripleSlashReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invalidUseOfTypeAsNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invariantGenericErrorElaboration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invocationExpressionInFunctionParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invokingNonGenericMethodWithTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/invokingNonGenericMethodWithTypeArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isLiteral1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsAugmentation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsClassesExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsEnums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsExpandoFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsFunctionDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsObjects.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationErrorsReturnTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationLazySymbols.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsAddUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsAllowJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsRequiresDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesAmbientConstEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesExportDeclarationType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesExportImportUninstantiatedNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesGlobalNamespacesAndEnums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesImportExportElision.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesNoEmitOnError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesReExportType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesRequiresPreserveConstEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/javascriptImportDefaultBadExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsCheckObjectDefineThisNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsDeclarationEmitExportedClassWithExtends.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsElementAccessNoContextualTypeCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsExportMemberMergedWithModuleAugmentation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsExportMemberMergedWithModuleAugmentation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsExtendsImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileClassPropertyType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileClassPropertyType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileClassPropertyType3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationBindDeepExportsAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationBindReachabilityErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationDuplicateFunctionImplementation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationDuplicateFunctionImplementationFileOrderReversed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationDuplicateVariableErrorReported.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationEmitBlockedCorrectly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationErrorOnDeclarationsWithJsFileReferenceWithNoOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationHeritageClauseSyntaxOfClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationLetDeclarationOrder2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationNoErrorWithoutDeclarationsWithJsFileReferenceWithNoOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationOptionalClassElementSyntaxOfClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationPublicMethodSyntaxOfClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationSyntaxError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithDeclarationEmitPathSameAsInput.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithJsEmitPathSameAsInput.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithMapFileAsJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithMapFileAsJsWithInlineSourceMap.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithMapFileAsJsWithOutDir.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithOutDeclarationFileNameSameAsInputJsFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithOutFileNameSameAsInputJsFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationWithoutOut.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFileFunctionParametersAsOptional2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsFunctionWithPrototypeNoErrorTruncationNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsNoImplicitAnyNoCascadingReferenceErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsPropertyAssignedAfterMethodDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocArrayObjectPromiseNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocBracelessTypeTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocCallbackAndType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocClassMissingTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocFunctionTypeFalsePositive.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocIllegalTags.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocImportTypeNodeNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocInTypeScript.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocParamTagInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocParameterParsingInfiniteLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocPropertyTagInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocReferenceGlobalTypeInCommonJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocResolveNameFailureInTypedef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocRestParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocTypeCast.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocTypeNongenericInstantiationAttempt.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsdocTypedefMissingType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxAttributeWithoutExpressionReact.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxCallElaborationCheckNoCrash1.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildWrongType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildrenArrayWrongType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildrenGenericContextualTypes.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildrenIndividualErrorElaborations.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildrenWrongType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxClassAttributeResolution.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxComponentTypeErrors.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxElementType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxElementTypeLiteral.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxElementTypeLiteralWithGeneric.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxEmptyExpressionNotCountedAsChild2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxExcessPropsAndAssignability.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndJsxFragmentFactoryErrorNotIdentifier.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndReactNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryButNoJsxFragmentFactory.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryIdentifierWithAbsentParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryMissingErrorInsideAClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryNotIdentifierOrQualifiedName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryNotIdentifierOrQualifiedName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryQualifiedNameResolutionError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxImportSourceNonPragmaComment.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicDeclaredUsingTemplateLiteralTypeSignatures.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicElementsTypeArgumentErrors.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxIssuesErrorWhenTagExpectsTooManyArguments.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceGlobalReexportMissingAliasTarget.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespacePrefixIntrinsics.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxSpreadTag.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/jsxViaImport.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/keyofDoesntContainSymbols.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/keyofIsLiteralContexualType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/knockout.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lambdaArgCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lambdaParamTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lambdaPropSelf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/largeControlFlowGraph.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lastPropertyInLiteralWins.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lateBoundConstraintTypeChecksCorrectly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lateBoundDestructuringImplicitAnyError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letAsIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letConstInCaseClauses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes-duplicates7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-scopes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-useBeforeDefinition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations-useBeforeDefinition2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/libTypeScriptOverrideSimple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/libTypeScriptOverrideSimpleConfig.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/libTypeScriptSubfileResolving.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/libTypeScriptSubfileResolvingConfig.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/lift.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/limitDeepInstantiations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/literalFreshnessPropagationOnNarrowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/literalTypeNameAssertionNotTriggered.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/literals-negative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/logicalNotExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeAsStringTemplate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericWithKnownKeys.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeIndexedAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeIndexedAccessConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceFromApparentType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeNoTypeNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeNotMistakenlyHomomorphic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeRecursiveInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeUnionConstrainTupleTreatedAsArrayLike.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeUnionConstraintInferences.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithAsClauseAndLateBoundProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithCombinedTypeMappers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/matchReturnTypeInAllBranches.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/maxConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/maxNodeModuleJsDepthDefaultsToZero.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/maximum10SpellingSuggestions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/memberOverride.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/memberScope.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergeSymbolReexportInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergeSymbolReexportedTypeAliasInstantiation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergeSymbolRexportFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergeWithImportedNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergeWithImportedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedClassNamespaceRecordCast.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedClassWithNamespacePrototype.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarationExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/metadataImportType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/methodChainError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/methodInAmbientClass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/methodSignatureHandledDeclarationKindForSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mismatchedExplicitTypeParameterAndArgumentType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mismatchedGenericArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingCommaInTemplateStringsArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingDomElements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingFunctionImplementation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingFunctionImplementation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingMemberErrorHasShortPath.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingPropertiesOfClassExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingRequiredDeclare.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingReturnStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingReturnStatement1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/missingTypeArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mixedStaticAndInstanceClassMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mixinPrivateAndProtected.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mixingStaticAndInstanceOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_ErrorFromUsingES6ArrayWithOnlyES6ArrayLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_ErrorFromUsingES6FeaturesWithOnlyES5Lib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_ErrorFromUsingWellknownSymbolWithOutES6WellknownSymbolLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceWithSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAsBaseType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAssignmentCompat1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAssignmentCompat2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAssignmentCompat3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAssignmentCompat4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDisallowedExtensions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationEnumClassMergeOfReexportIsError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal6_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal7_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal8_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInDependency2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationWithNonExistentNamedImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleClassArrayCodeGenTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleCrashBug1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleExportNonStructured.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleExports1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleInTypePosition1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleMemberMissingErrorIsRelative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleNewExportBug.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleNodeDefaultImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleNoneErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/modulePreserve3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/modulePreserve4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionAsTypeReferenceDirectiveScoped.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionNoTsCJS.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionNoTsESM.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_notSupported.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_notSupported2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_oneNotFound.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSymlinks_preserveSymlinks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_relativeImportJsFile_noImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleVariableArrayIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleVisibilityTest2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleVisibilityTest3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleVisibilityTest4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleWithNoValuesAsType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/moduleWithValuesAsType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/module_augmentExistingAmbientVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/module_augmentExistingVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multiLineContextDiagnosticWithPretty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multiLineErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleBaseInterfaesWithIncompatibleProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleClassPropertyModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleExportAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleExportAssignmentsInAmbientDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multipleInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/multivar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveCallbacks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namedFunctionExpressionCallErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namedImportNonExistentName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namespaceDisambiguationInUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namespaceMergedWithFunctionWithOverloadsUsage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namespaceMergedWithImportAliasNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namespaceNotMergedWithFunctionDefaultExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/namespacesDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nanEquality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowByEquality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowSwitchOptionalChainContainmentEvolvingArrayNoCrash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingMutualSubtypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingOfDottedNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingOfQualifiedNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingPastLastAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTruthyObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/narrowingUnionToNeverAssigment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nativeToBoxedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nestedCallbackErrorNotFlattened.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nestedExcessPropertyChecking.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nestedFreshLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nestedIfStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nestedRecursiveArraysOrObjectsError01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newAbstractInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newAbstractInstance2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newFunctionImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newMap.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newNonReferenceType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/newOnInstanceSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noCrashOnImportShadowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noCrashOnMixin.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noCrashOnNoLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noCrashOnParameterNamedRequire.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noCrashWithVerbatimModuleSyntaxAndImportsNotUsedAsValues.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noDefaultLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noEmitOnError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noErrorTruncation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noErrorUsingImportExportModuleAugmentationInDeclarationFile2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noErrorUsingImportExportModuleAugmentationInDeclarationFile3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noErrorsInCallback.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noExcessiveStackDepthError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyDestructuringParameterDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyForIn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyForMethodParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyForwardReferencedInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyInBareInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyInCastExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyIndexing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyIndexingSuppressed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyLoopCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyMissingGetAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyMissingSetAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyNamelessParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInAmbientClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInAmbientFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInAmbientModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInBareFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyParametersInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyReferencingDeclaredInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyStringIndexerOnObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyUnionNormalizedObjectLiteral1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyWithOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsExclusions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsInAsync2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsWithProtectedBlocks2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsWithProtectedBlocks3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsWithoutReturnExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitSymbolToString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitThisFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitUseStrict_amd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitUseStrict_commonjs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitUseStrict_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitUseStrict_system.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitUseStrict_umd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noInferCommonPropertyCheck1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noInferUnionExcessPropertyCheck1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noMappedGetSet.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noParameterReassignmentIIFEAnnotated.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noRepeatedPropertyNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noStrictGenericChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noSymbolForMergeCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noTypeArgumentOnReturnType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUncheckedIndexedAccessCompoundAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_destructuringAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_potentialPredicateUnusedParam.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_selfReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_selfReference_skipsBlockLocations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_typeParameterMergedWithParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_writeOnly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_writeOnlyProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/noUnusedLocals_writeOnlyProperty_dynamicNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextImportModeImplicitIndexResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextImportModeImplicitIndexResolution2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextModuleResolution1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextModuleResolution2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextPackageSelfNameWithOutDir.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextPackageSelfNameWithOutDirDeclDir.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nodeNextPackageSelfNameWithOutDirDeclDirNestedDirs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonArrayRestArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonExportedElementsOfMergedModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonIdenticalTypeConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonMergedOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonObjectUnionNestedExcessPropertyCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonexistentPropertyOnUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nonexistentPropertyUnavailableOnPromisedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/normalizedIntersectionTooComplex.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/null.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nullKeyword.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/nullableFunctionError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numberToString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerTyping1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectBindingPattern_restElementWithPropertyName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectCreate-errors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectCreationOfElementAccessExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectFreeze.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectFreezeLiteralsDontWiden.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectGroupBy.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLitIndexerContextualType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLitStructuralTypeMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLitTargetTypeCallSite.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralExcessProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralFreshnessWithSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralFunctionArgContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralFunctionArgContextualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralIndexerErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralMemberWithoutBlock1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralParameterResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralPropertyImplicitlyAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralReferencingInternalProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralThisWidenedOnUse.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralWithNumericPropertyName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralsAgainstUnionsOfArrays01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/omitTypeHelperModifiers01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/omitTypeTestErrors01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/omittedExpressionForOfLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/operationsAvailableOnPromisedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/operatorAddNullUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalArgsWithDefaultValues.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalChainWithInstantiationExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalFunctionArgAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParamAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParamReferencingOtherParams2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParamReferencingOtherParams3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParamTypeComparison.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParameterInDestructuringWithInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParameterProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalParamterAndVariableDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalPropertiesInClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalPropertiesTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionalSetterParam.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsCompositeWithIncrementalFalse.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsInlineSourceMapMapRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsInlineSourceMapSourcemap.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsOutAndNoModuleGen.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsStrictPropertyInitializationStrictNullChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/optionsTsBuildInfoFileWithoutIncrementalAndComposite.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/orderMattersForSignatureGroupIdentity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/out-flag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/out-flag3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/outModuleConcatCommonjs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/outModuleConcatES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/outModuleConcatUmd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/outModuleConcatUnspecifiedModuleKind.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/outModuleConcatUnspecifiedModuleKindDeclarationOnly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overEagerReturnTypeSpecialization.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overload1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadErrorMatchesImplementationElaboaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadModifiersMustAgree.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoAnyImplementation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoAnyImplementation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoStringImplementation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstantsInvalidOverload1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOnDefaultConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOverCTLambda.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionTest1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadingOnConstants1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadingOnConstants2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadresolutionWithConstraintCheckingDeferred.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadsAndTypeArgumentArityErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadsInDifferentContainersDisagreeOnAmbient.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadsWithComputedNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overloadsWithProvisionalErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overridingPrivateStaticMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/overshifts.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/paramPropertiesInSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parameterListAsTupleType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parameterNamesInTypeParameterList.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parameterPropertyInConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parameterPropertyInConstructor2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parameterPropertyInConstructor3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/paramsOnlyHaveLiteralTypesWhenAppropriatelyContextualized.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/paramterDestrcuturingDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parenthesizedJSDocCastDoesNotNarrow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseAssertEntriesError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseCommaSeparatedNewlineNumber.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseCommaSeparatedNewlineString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseImportAttributesError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseInvalidNonNullableTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseInvalidNullableTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseJsxExtends2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/parseTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/partialDiscriminatedUnionMemberHasGoodError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution1_amd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution1_node.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution2_classic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution2_node.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension_failedLookup.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathsValidation1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathsValidation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathsValidation3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathsValidation4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pathsValidation5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/potentiallyUncalledDecorators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/predicateSemantics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/prefixUnaryOperatorsOnExportedVariables.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/preserveUnusedImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/prettyFileWithErrorsAndTabs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primaryExpressionMods.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveConstraints1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveConstraints2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAsClassName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAsInterfaceName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAsInterfaceNameGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privacyClassExtendsClauseDeclFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloImportParseErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelAmbientExternalModuleImportWithExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelAmbientExternalModuleImportWithoutExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privateAccessInSubclass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privateFieldAssignabilityFromUnknown.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privateInterfaceProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privateNameWeakMapCollision.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/privateVisibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseChaining1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseChaining2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseEmptyTupleNoException.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseIdentity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseIdentity2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseIdentityWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseIdentityWithAny2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promiseIdentityWithConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promisePermutations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promisePermutations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promisePermutations3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/promisesWithConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertiesAndIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertiesAndIndexers2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertiesAndIndexersForNumericNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccess1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccess2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccess3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccess4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccess5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccessOfReadonlyIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccessibility1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccessibility2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyIdentityWithPrivacyMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyOrdering.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyOrdering2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertyParameterWithQuestionMark.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/propertySignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/protectedAccessThroughContextualThis.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/protectedMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/protectedMembersThisParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/protoAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/prototypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/publicGetterProtectedSetterFromThisParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/publicMemberImplementedAsPrivateInDerivedClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/pushTypeGetTypeOfAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/qualifiedModuleLocals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/qualifiedName_entity-name-resolution-does-not-affect-class-heritage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/qualify.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/quickIntersectionCheckCorrectlyCachesErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/quickinfoTypeAtReturnPositionsInaccurate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/quotedModuleNameMustBeAmbient.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/raiseErrorOnParameterProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reExportGlobalDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reExportGlobalDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reExportGlobalDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reExportGlobalDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reExportUndefined1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityChecks8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reactDefaultPropsInferenceSuccess.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reactImportUnusedInNewJSXEmit.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reactNamespaceInvalidInput.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reactNamespaceMissingDeclaration.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reactReduxLikeDeferredInferenceAllowsAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/readonlyAssignmentInSubclassOfClassExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/readonlyInNonPropertyParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/readonlyMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/readonlyPropertySubtypeRelationDirected.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/readonlyTupleAndArrayElaboration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reboundIdentifierOnImportAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseCheck6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseConstructorCreation3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveClassReferenceTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveFunctionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveInheritance3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveInheritanceGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveLetConst.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveNamedLambdaCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveResolveTypeMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTupleTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeComparison2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeParameterConstraintReferenceLacksTypeArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeRelations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/recursivelyExpandingUnionNoStackoverflow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/redefineArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportMissingDefault7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reexportedMissingAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/regularExpressionExtendedUnicodeEscapes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/relationComplexityError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/relationalOperatorComparable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/relativeNamesInClassicResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/renamingDestructuredPropertyInFunctionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/renamingDestructuredPropertyInFunctionType3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfAnEmptyFile1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileInJsFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileNonRelativeWithoutExtension.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithAmd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithComputedPropertyName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithEmptyObjectWithErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleEmitNone.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitNone.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitSystem.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitUmd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithNoContent.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutExtension.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutResolveJsonModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutResolveJsonModuleAndPathMapping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requiredInitializedParameter1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requiredInitializedParameter2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/requiredMappedTypeModifierTrumpsVariance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reservedNameOnInterfaceImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reservedNameOnModuleImportWithInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/resolvingClassDeclarationWhenInBaseTypeResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/restArgAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/restInvalidArgumentType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/restParamsWithNonRestParams.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/restUnion3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/returnInConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/returnTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/returnTypeTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/returnValueInSetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reuseTypeAnnotationImportTypeInGlobalThisTypeArgument.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedPartiallyInferableTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeContextualTypeNotCircular.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeIntersectionConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeLimitedConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/satisfiesEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeCheckExtendedClassInsidePublicMethod2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeCheckExtendedClassInsideStaticMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeCheckInsidePublicMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeCheckInsideStaticMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeCheckStaticInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopeTests.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/scopingInCatchBlocks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfRef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencesInFunctionParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencingFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencingFile2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencingFile3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencingSpreadInLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/semicolonsInModuleDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/separate1-1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/setMethods.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/setterWithReturn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shadowPrivateMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shadowedReservedCompilerDeclarationsWithNoEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shorthand-property-es5-es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shorthand-property-es6-amd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shorthand-property-es6-es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shorthandPropertyAssignmentInES6Module.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/shorthandPropertyUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/signatureLengthMismatchCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/signatureLengthMismatchInOverload.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/signatureLengthMismatchWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/simpleRecursionWithBaseCase1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/slightlyIndirectedDeepObjectLiteralElaborations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapSample.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationFor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/specialIntersectionsInMappedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/specializedSignatureAsCallbackParameter1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionGlobal1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionGlobal2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionGlobal3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionGlobal4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionJSXAttribute.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionLeadingUnderscores01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spellingSuggestionModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spliceTuples.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spreadInvalidArgumentType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spreadOfParamsFromGeneratorMakesRequiredParams.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/spyComparisonChecking.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticAsIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticClassMemberError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMemberExportAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMemberOfClassAndPublicMemberOfAnotherClassAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMethodReferencingTypeArgument1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMethodsReferencingClassTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMismatchBecauseOfPrototype.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticModifierAlreadySeen.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticMustPrecedePublic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticOffOfInstance1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticOffOfInstance2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticPropSuper.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticVisibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticVisibility2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/statics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/staticsNotInScopeInClodule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictFunctionTypesErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictModeInConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictModeReservedWordInModuleDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictNullEmptyDestructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictNullNotNullIndexTypeNoLib.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictOptionalProperties1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictOptionalProperties3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/strictSubtypeAndNarrowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/stringIndexerAndConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/stringIndexerAndConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/stringIndexerAssignments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/stringIndexerAssignments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/stringMappingAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/subclassThisTypeAssignable01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/super.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/super1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallArgsMustMatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallAssignResult.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericTypeButWithIncorrectNumberOfTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericTypeButWithNoTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesNonGenericTypeButWithTypeArguments1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallInsideClassDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallInsideClassExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superCallWithMissingBaseClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superInConstructorParam1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superInObjectLiterals_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superInObjectLiterals_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superNewCall1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superPropertyAccess1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superPropertyAccess2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superPropertyAccessInSuperCall01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/superPropertyAccess_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/super_inside-object-literal-getters-and-setters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/switchAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/switchCaseCircularRefeference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/switchCases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/switchCasesExpressionTypeMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemExportAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule10_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/systemModule9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/taggedTemplateWithoutDeclaredHelper.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeBaseCalls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeCastTest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeTest1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeTest3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeVoidFunc.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralsInTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/templateStringsArrayTypeDefinedInES5Mode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/templateStringsArrayTypeNotDefinedES5Mode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/templateStringsArrayTypeRedefinedInES6Mode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisBinding.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisBinding2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisExpressionInCallExpressionWithTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInFunctionCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInFunctionCallJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInOuterClassBody.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInSuperCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInSuperCall1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInSuperCall2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisInSuperCall3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisKeyword.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisPredicateInObjectLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisShadowingErrorSpans.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/thisWhenTypeCheckFails.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/this_inside-enum-should-not-be-allowed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tooManyTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/topFunctionTypeNotCallable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/topLevelLambda.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/topLevelLambda4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/trailingCommaInHeterogenousArrayLiteral1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tripleSlashTypesReferenceWithMissingExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/trivialSubtypeReductionNoStructuralCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/truthinessCallExpressionCoercion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/truthinessCallExpressionCoercion1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/truthinessCallExpressionCoercion2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/truthinessPromiseCoercion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tryCatchFinallyControlFlow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsconfigExtendsPackageJsonExportsWildcard.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tslibInJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tslibMissingHelper.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tslibMultipleMissingHelper.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tslibNotFoundDifferentModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsxDeepAttributeAssignabilityError.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsxInvokeComponentType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsxNoTypeAnnotatedSFC.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsxNotUsingApparentTypeOfSFC.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tsxTypeArgumentPartialDefinitionStillErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/tupleTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasDeclarationEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgInference2WithError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentConstraintResolution1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentDefaultUsesConstraintOnCircularDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceWithConstraintAsCommonRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentsOnFunctionsWithNoTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentsShouldDisallowNonGenericOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeAssertionToGenericFunctionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeAssignabilityErrorMessage.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeCheckExportsVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeCheckObjectLiteralMethodBody.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeCheckReturnExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeCheckTypeArgument.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeCheckingInsideFunctionExpressionInArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeComparisonCaching.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardConstructorClassAndNumber.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardConstructorDerivedClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeIdentityConsidersBrands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeInfer1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceConflictingCandidates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeMatch1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeMatch2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeNamedUndefined1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeNamedUndefined2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeOfEnumAndVarRedeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeOfOnTypeArg.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeOfOperator1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParamExtendsOtherTypeParam.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterArgumentEquivalence.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterArgumentEquivalence2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterArgumentEquivalence3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterArgumentEquivalence4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterArgumentEquivalence5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterAsBaseClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterAssignmentCompat1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterConstrainedToOuterTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterConstraints1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterDiamond2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterDiamond3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterDiamond4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterExplicitlyExtendsAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterHasSelfAsConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterWithInvalidConstraintType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersAndParametersInComputedNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersInStaticAccessors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersInStaticMethods.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersInStaticProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersShouldNotBeEqual.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersShouldNotBeEqual2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeParametersShouldNotBeEqual3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateInLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateInherit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectiveScopedPackageCustomTypeRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectiveWithFailedFromTypeRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeUsedAsTypeLiteralIndex.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeUsedAsValueError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeUsedAsValueError2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeValueConflict1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeValueConflict2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeVariableConstraintedToAliasNotAssignableToUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typecheckCommaExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typecheckIfCondition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typedArrays-es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typedArraysCrossAssignability01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofAmbientExternalModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofExternalModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofInObjectLiteralType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofInternalModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofSimple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/typeofUnknownSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/umdDependencyComment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/umdDependencyCommentName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/umdDependencyCommentName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/umdGlobalAugmentationNoCrash.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/umdNamespaceMergedWithGlobalAugmentationIsNotCircular.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unaryOperators1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/uncalledFunctionChecksInConditional.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/uncalledFunctionChecksInConditional2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unclosedExportClause01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unclosedExportClause02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undeclaredBase.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undeclaredMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undeclaredModuleError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undeclaredVarEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedAssignableToGenericMappedIntersection.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedSymbolReferencedInArrayLiteral1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeArgument1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeArgument2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeAssignment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/undefinedTypeAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/underscoreTest1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unicodeEscapesInNames01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unicodeEscapesInNames02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionErrorMessageOnMatchingDiscriminant.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionPropertyExistence.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionPropertyOfProtectedAndIntersectionProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionSubtypeReductionErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeErrorMessageTypeRefs01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithRecursiveSubtypeReduction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithRecursiveSubtypeReduction3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolAllowsIndexInObjectWithIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownSymbolInGenericReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownSymbolOffContextualType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownSymbols1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownSymbols2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownTypeArgOnCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unknownTypeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unmetTypeConstraintInImportCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unmetTypeConstraintInJSDocImportCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unqualifiedCallToClassStatic1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unreachableJavascriptChecked.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unreachableSwitchTypeofAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unreachableSwitchTypeofUnknown.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unresolvableSelfReferencingAwaitedUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unresolvedTypeAssertionSymbol.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unspecializedConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/untypedFunctionCallsWithTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/untypedModuleImport_withAugmentation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinModule1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedDestructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedDestructuringParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedFunctionsinNamespaces6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedGetterInClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedIdentifiersConsolidated1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedImports_entireImportDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedInvalidTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndObjectSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndObjectSpread2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersTypeAliases2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsInMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsInMethod2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsInMethod3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionDeclarationWithinFunctionDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionDeclarationWithinFunctionDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionDeclarationWithinFunctionExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionDeclarationWithinFunctionExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionExpressionWithinFunctionDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionExpressionWithinFunctionDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionExpressionWithinFunctionExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsOnFunctionExpressionWithinFunctionExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsStartingWithUnderscore.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsinConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsinConstructor2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedModuleInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameter1InContructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameter1InFunctionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameter2InContructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameter2InFunctionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameters1InFunctionDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameters1InMethodDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameters2InFunctionDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedMultipleParameters2InMethodDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedNamespaceInModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedNamespaceInNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParameterProperty1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParameterProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersInLambda1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersInLambda2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersWithUnderscore.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersinConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersinConstructor2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersinConstructor3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateMethodInClass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateMethodInClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateMethodInClass3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateMethodInClass4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateStaticMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateVariableInClass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateVariableInClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateVariableInClass3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateVariableInClass4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedPrivateVariableInClass5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSetterInClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSingleParameterInContructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSingleParameterInFunctionDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSingleParameterInFunctionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSingleParameterInMethodDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedSwitchStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInFunction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInFunction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInFunction3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInFunction4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInInterface1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInInterface2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInLambda1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInLambda2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInLambda3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInMethod2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInMethod3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInMethod4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameterInMethod5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParametersCheckedByNoUnusedParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParametersWithUnderscore.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters_infer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters_templateTag.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters_templateTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesWithUnderscoreInBindingElement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesWithUnderscoreInForOfLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinBlocks1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinBlocks2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinForLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinForLoop2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinForLoop3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinForLoop4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinModules1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinNamespaces1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinNamespaces2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/unusedVariablesinNamespaces3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_classDecorators.1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_destructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_jsx.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_propertyAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_superClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/useUnknownInCatchVariables01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varAndFunctionShareName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varBlock.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varNameConflictsWithImportInDifferentPartOfModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/vararg.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/variableDeclaratorResolvedDuringContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varianceAnnotationValidation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varianceMeasurement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/varianceReferences.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/voidArrayLit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/voidAsNonAmbiguousReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/voidAsOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/weakType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/widenToAny1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/widenToAny2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/widenedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/wrappedRecursiveGenericType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/yieldExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/compiler/yieldExpressionInFlowLoop.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/additionalChecks/noPropertyAccessFromIndexSignature1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsPatterns_merging1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsPatterns_merging2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsPatterns_merging3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsPatterns_tooManyAsterisks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleInsideNonAmbient.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleInsideNonAmbientExternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/asyncFunctionDeclarationParameterEvaluation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction10_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction3_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction_allowJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncAwaitIsolatedModules_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_incorrectThisType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration13_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration3_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration8_es2017.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAliasReturnType_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction10_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction3_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunctionCapturesArguments_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAwaitIsolatedModules_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncDeclare_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration13_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration15_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration16_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration3_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration8_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclarationCapturesArguments_es5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction10_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction3_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAwaitIsolatedModules_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncDeclare_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncImportedPromise_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncQualifiedReturnType_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration13_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration15_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration3_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration8_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/asyncGenerators/asyncGeneratorParameterEvaluation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAssignabilityConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractClinterfaceAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractConstructorAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractDeclarations.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractExtends.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractFactoryFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractImportInstantiation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInAModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInheritance1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInheritance2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMixedWithModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverrideWithAbstract.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractSingleLineDecl.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractSuperCalls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractUsingAbstractMethod1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAndInterfaceMergeConflictingMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classExtendingClassLikeType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classExtendingNonConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsItselfIndirectly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsItselfIndirectly2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsItselfIndirectly3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsShadowedConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsValidConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classIsSubtypeOfBaseType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classImplementsMergedClassInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/declaredClassMergedwithSelf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock23.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlockUseBeforeDef2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlockUseBeforeDef3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/classWithoutExplicitConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorOverloadsAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorParametersAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorParametersAccessibility2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorDefaultValuesReferencingThis.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorImplementationWithDefaultValues2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorOverloadsWithDefaultValues.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorParameterProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorParameterProperties2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyConstructorAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyInAmbientClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyInConstructorParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorWithAssignableReturnExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassConstructorWithoutSuperCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassParameterProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsWithThisArg.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperStatementPosition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superPropertyInConstructorBeforeSuperCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/indexMemberDeclarations/publicIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/indexMemberDeclarations/staticIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/classPropertyAsPrivate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/classPropertyAsProtected.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateProtectedMembersAreNotAccessibleDestructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateStaticMemberAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateStaticNotAccessibleInClodule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateStaticNotAccessibleInClodule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedSubclass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedSubclass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinSubclass3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedInstanceMemberAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedStaticClassPropertyAccessibleWithinSubclass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedStaticClassPropertyAccessibleWithinSubclass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedStaticNotAccessibleInClodule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/instancePropertiesInheritedIntoClassType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/instancePropertyInClassType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/staticPropertyNotInClassType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/classWithBaseClassButNoConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/classWithConstructors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassFunctionOverridesBaseClassAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassTransitivity4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateInstanceShadowingProtectedInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateInstanceShadowingPublicInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateStaticShadowingProtectedStatic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateStaticShadowingPublicStatic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedGenericClassWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/superInStaticMembers1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInInstanceMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInstanceMemberNarrowedWithLoopAntecedent.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAmbientNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndObjectRestSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadSuper.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadSuperUseDefineForClassFields.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameCircularReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameDeclarationMerging.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameES5Ban.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameEmitHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameFieldsESNext.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameInInExpressionUnused.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassAccessorsShadowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassFieldShadowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassMethodShadowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameSetterNoGetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticEmitHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAsync.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameUnused.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndDecorators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndStaticFields.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndkeyof.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesConstructorChain-1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesConstructorChain-2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInNestedClasses-1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInNestedClasses-2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiersJs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUseBeforeDef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateWriteOnlyAccessorRead.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClasses.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/abstractPropertyInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/assignParameterPropertyToPropertyDeclarationES2022.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/assignParameterPropertyToPropertyDeclarationESNext.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorExperimentalDecorators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/constructorParameterShadowsOuterScopes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/constructorParameterShadowsOuterScopes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/defineProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/derivedUninitializedPropertyDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializerReferencingConstructorLocals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializerReferencingConstructorParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/derivedTypeAccessesHiddenBaseCallViaSuperPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/instanceMemberAssignsToClassPrototype.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionOverloadMixingStaticAndInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPrivateOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicPrivateOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/staticMemberAssignsToConstructorFunctionMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/redeclaredProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/redefinedPararameterProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/strictPropertyInitialization.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumNoObjectPrototypePropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumPropertyAccess1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumPropertyAccess2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/importElisionConstEnumMerge1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAliasing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowBindingPatternOrder.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowDeleteOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowGenericTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIIFE.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIterationErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIterationErrorsAsync.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowNullishCoalesce.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowOptionalChain.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowOptionalChain3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowTypeofObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowWhileStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/dependentDestructuredVariables.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/exhaustiveSwitchStatements1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/neverReturningFunctions1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/typeGuardsAsAssertions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typesVersionsDeclarationEmit.multiFileBackReferenceToSelf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructableDecoratorOnClass01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorChecksFunctionBodies.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethodOverload1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorCallGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnImportEquals1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnImportEquals2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnInternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnTypeAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/invalid/decoratorOnVar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/missingDecoratorType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/multiline.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/ts-expect-error-js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/ts-expect-error.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/ts-ignore.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression5ES2020.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression6ES2020.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionCheckReturntype1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionErrorInES2015.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionIncorrect1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionIncorrect2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNestedES2015.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNestedES20152.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNoModuleKindSpecified.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionSpecifierNotStringTypeError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionWithTypeArgument.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithTemplateLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumErrorOnConstantBindingWithInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumMergingErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumShadowedInfinityNaN.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisAmbientModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisBlockscopedProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisCollision.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisGlobalExportAsGlobal.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisPropertyAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisReadonlyProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisUnknown.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisUnknownNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisVarDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/constructBigint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/es2020IntlAPIs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace_exportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace_missingEmitHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace_nonExistent.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_exportEmpty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_importEmpty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_syntax.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2023/intlNumberFormatES5UseGrouping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es5/es5DateAPIs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty30.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty32.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty33.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty34.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty35.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty36.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty39.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty42.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty43.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty44.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty46.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty47.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty52.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty53.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty54.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty59.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionThisCapturing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionThisCapturingES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments01_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments02_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments05.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments06.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments07.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments09.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classExpressions/typeArgumentInferenceWithClassExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames12_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames12_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames14_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames14_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames15_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames15_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames17_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames17_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames19_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames19_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames21_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames21_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames23_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames23_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames24_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames24_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames26_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames26_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames2_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames2_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames30_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames30_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames32_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames32_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames34_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames34_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames35_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames35_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames36_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames36_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames38_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames38_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames39_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames39_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames42_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames42_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames43_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames43_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames44_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames44_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames45_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames45_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames46_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames46_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames48_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames48_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames51_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames51_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames5_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames5_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames6_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames6_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames8_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames8_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames9_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames9_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType10_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType10_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType8_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType8_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType9_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType9_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit3_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit3_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit4_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit4_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit6_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit6_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesOnOverloads_ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesOnOverloads_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesWithStaticProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/declarationsAndAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment1ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment1ES5iterable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment1ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringAssignabilityCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringControlFlow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringInFunctionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES5iterable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration3ES5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration3ES5iterable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration3ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringSpread.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringTypeAssertionsES5_7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringVariableDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringVoidStrictNullChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringWithLiteralInitializers2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern23.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern26.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern28.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/missingAndExcessProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/nonIterableRestElement3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParametersInOverloads1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParametersInOverloads2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithAssignmentPattern2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithAssignmentPattern4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithBindingPattern2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithNullInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of30.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of32.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of33.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of34.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of35.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of39.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of46.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of47.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of48.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of55.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration13_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration3_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration8_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments5_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration3_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportBinding.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportSpellingSuggestion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportStar-amd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportStar.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithContextualKeywordNames01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/importEmptyFromModuleNotExisted.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports05.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/restParameters/readonlyRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesAssignmentError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesAssignmentErrorFromMissingIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorFromNoneExistingIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesFunctionArgument2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/arraySpreadImportHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/arraySpreadInCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsTypeArgumentInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsTypeArgumentInferenceES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithIncompatibleTypedTags.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithIncompatibleTypedTagsES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution1_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution3_ES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypeErrorInFunctionExpressionsInSubstitutionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypeErrorInFunctionExpressionsInSubstitutionExpressionES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateWithConstructableTag01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateWithConstructableTag02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringBinaryOperationsES6Invalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringBinaryOperationsInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInCallExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInCallExpressionES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInDeleteExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInDeleteExpressionES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInDivision.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInEqualityChecks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInEqualityChecksES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInInstanceOf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInInstanceOfES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInModulo.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInModuloES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInMultiplication.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInMultiplicationES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInNewExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInNewExpressionES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInNewOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInNewOperatorES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInSwitchAndCase.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInSwitchAndCaseES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInTaggedTemplate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInTaggedTemplateES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringWithEmbeddedInstanceOf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringWithEmbeddedInstanceOfES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringsWithTypeErrorInFunctionExpressionsInSubstitutionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringsWithTypeErrorInFunctionExpressionsInSubstitutionExpressionES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression10_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression11_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression1_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression6_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression8_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression9_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldStarExpression1_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext3.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext4.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck31.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck39.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck48.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck50.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck57.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck58.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck62.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck63.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/yieldExpressionInControlFlow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSCanBeAssigned1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSCannotBeAssigned.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/emitExponentiationOperator4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithInvalidSimpleUnaryExpressionOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNew.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNullValueAndInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNullValueAndValidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithOnlyNullValueOrUndefinedValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithTemplateStringInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithTemplateStringInvalidES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithUndefinedValueAndInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithUndefinedValueAndValidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-exportModifier.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-exportModifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-classDecorator.1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-classDecorator.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-classDecorator.3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-nonStaticPrivateAutoAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-nonStaticPrivateField.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-nonStaticPrivateGetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-nonStaticPrivateMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-nonStaticPrivateSetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticComputedAutoAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticComputedField.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticComputedGetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticComputedMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticComputedSetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticPrivateAutoAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticPrivateField.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticPrivateGetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticPrivateMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-missingEmitHelpers-staticPrivateSetter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-parameterDecorators.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAbstract.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAbstractAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAmbient.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticAmbient.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticAbstract.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-missingEmitHelpers-classDecorator.9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-arguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-emitDecoratorMetadata.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperator2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorAmbiguity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorContextualType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentLHSCanBeAssigned.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentLHSCannotBeAssigned.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundAdditionAssignmentWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentLHSCanBeAssigned.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNullValueAndInvalidOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNullValueAndValidOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithOnlyNullValueOrUndefinedValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithUndefinedValueAndInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithUndefinedValueAndValidOperator.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithNullValueAndInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithNullValueAndValidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithOnlyNullValueOrUndefinedValue.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithUndefinedValueAndValidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithIdenticalPrimitiveType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithIntersectionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnCallSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnConstructorSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnOptionalProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipPrimitiveType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNumberOperand.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/inOperator/inOperatorWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/inOperator/inOperatorWithValidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidOperands.es2015.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidOperands.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalAndOperator/logicalAndOperatorStrictMode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalAndOperator/logicalAndOperatorWithEveryType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/logicalOrExpressionIsContextuallyTyped.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/logicalOrOperatorWithEveryType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorInvalidAssignmentType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorOtherInvalidOperation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsObjectType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsAnyType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorWithoutIdenticalBCT.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/argumentExpressionContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/arrayLiteralExpressionContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/generatedContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/getSetAccessorContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/objectLiteralContextualTyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callOverload.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithMissingVoid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/forgottenNew.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/functionCalls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/grammarAmbiguities.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolutionClassConstructors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolutionConstructors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceConstructSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceWithConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceWithObjectLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functions/contextuallyTypedIifeStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/identifiers/scopeResolutionIdentifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/literals/literals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/literals/strictModeOctalLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/newOperator/newOperatorErrorCases_noImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterBindingPattern.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterInitializer.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralNormalization.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChain.3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/delete/deleteChain.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterBindingPattern.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterInitializer.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/privateIdentifierChain/privateIdentifierChain.1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessStringIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessStringIndexSignatureNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessWidening.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/superPropertyAccess/superSymbolIndexedAccess3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/superPropertyAccess/superSymbolIndexedAccess4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInInvalidContexts.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInInvalidContextsExternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInObjectLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/typeOfThisGeneral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/constAssertions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/duplicatePropertiesInTypeAssertions01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/duplicatePropertiesInTypeAssertions02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThisErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardInClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfEqualEqualHasNoEffect.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfNotEqualHasNoEffect.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfOther.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsDefeat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInIfStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOf.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOfByConstructorSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOfBySymbolHasInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfactionWithDefaultExport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_contextualTyping2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_errorLocations1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_optionalMemberConformance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propNameConstraining.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyNameFulfillment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyValueConformance3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_vacuousIntersectionOfContextualTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithBooleanType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithBooleanType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithBooleanType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithBooleanType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithBooleanType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithEnumType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithNumberType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithStringType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithAnyOtherType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/valuesAndReferences/assignmentToParenthesizedIdentifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/valuesAndReferences/assignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/circularReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/duplicateExportAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignNonIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentAndDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentConstrainedGenericType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectAMD.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectCommonJS.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectSystem.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectUMD.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportDefaultClassNameWithObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesInIfThenStatementNoCrash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportNonLocalDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/importNonExternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/importTsBeforeDTs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/importsImplicitlyReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/initializersInDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithAMD.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithCommonjs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithSystem.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/relativePathMustResolve.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwaitNonModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelFileModuleMissing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelModuleDeclarationAndFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/allowsImportingTsExtension.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/chained.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/chained2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/circular1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/circular2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/circular3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/circular4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/computedPropertyName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/enums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_moduleSpecifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace_js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportSpecifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/extendsClause.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/filterNamespace_import.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/generic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/grammarErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_default.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_namedImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_namespaceImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEqualsDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importSpecifiers1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importSpecifiers_js.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importsNotUsedAsValues_error.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceMemberAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports_importsNotUsedAsValues.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports_mixedImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports_module.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/renamed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/typeOnlyESMImportFromCJS.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typesOnlyExternalModuleStillHasInstance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-errors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/valuesMergingAcrossModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxAmbientConstEnum.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxCompat2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxCompat3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxCompat4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxInternalImportEquals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxNoElisionCJS.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxNoElisionESM.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxRestrictionsCJS.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/fixSignatureCaching.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionImplementationErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionImplementations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionNameConflicts.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing1_es6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/strictBindCallApply1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorExplicitReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnContextualType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeFallback.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeInferenceNonStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAssertion/importAssertion1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAssertion/importAssertion2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAssertion/importAssertion3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/genericAndNonGenericInterfaceWithTheSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInheritedMembersSatisfyAbstractBase.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithConflictingPropertyNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithIndexers2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithInheritedPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithInheritedPrivates2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithInheritedPrivates3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesWithDifferentConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesWithTheSameNameButDifferentArity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoInterfacesDifferentRootModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoInterfacesDifferentRootModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/derivedInterfaceIncompatibleWithBaseIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersectionErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatHidesBaseProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatIndirectlyInheritsFromItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatInheritsFromItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithAccessibilityModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithMultipleBaseTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithMultipleBaseTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithPropertyThatIsPrivateInBaseType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithPropertyThatIsPrivateInBaseType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithStringIndexerHidingBaseTypeIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithStringIndexerHidingBaseTypeIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithStringIndexerHidingBaseTypeIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/implementingAnInterfaceExtendingClassWithPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/implementingAnInterfaceExtendingClassWithPrivates2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/implementingAnInterfaceExtendingClassWithProtecteds.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClassWithPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClassWithPrivates2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClassWithProtecteds.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClassWithProtecteds2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModuleMemberThatUsesClassTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModulesExportedGenericFunctionAndGenericClassStaticFunctionOfTheSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModulesExportedGenericFunctionAndNonGenericClassStaticFunctionOfTheSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModulesExportedStaticFunctionUsingClassPrivateStatics.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticFunctionAndExportedFunctionThatShareAName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticVariableAndExportedVarThatShareAName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleWithSameNameAndCommonRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleWithSameNameAndCommonRootES6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/FunctionAndModuleWithSameNameAndCommonRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndClassWithSameNameAndCommonRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndFunctionWithSameNameAndCommonRoot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedClassesOfTheSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedLocalVarsOfTheSameName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/importStatementsInterfaces.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedClasses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedEnums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedImportAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedVariables.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/circularImportAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/invalidImportAliasIdentifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/shadowedInternalModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/InvalidNonInstantiatedModule.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/invalidNestedModules.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/assertionsAndNonReturningFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/callOfPropertylessConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/callbackTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkExportsObjectAssignProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkExportsObjectAssignPrototypeProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocOnEndOfFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocOptionalParamOrder.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocParamOnVariableDeclaredFunctionExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocReturnTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocReturnTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTagOnObjectProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypedefOnlySourceFile.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkObjectDefineProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkOtherObjectAssignProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/constructorTagOnObjectLiteralMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassLikeHeuristic.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassesErr.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsCrossfileMerge.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsDefaultsErr.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsEnums.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsExportAssignedConstructorFunctionWithSub.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsExportFormsErr.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsImportAliasExposedWithinNamespace.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsInterfaces.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypeReassignmentFromDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypeReferences4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/enumTag.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/enumTagCircularReference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/errorOnFunctionReturnType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/extendsTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/extendsTag4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/extendsTag5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/extendsTagEmit.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAccessibilityTags.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugmentsMissingType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugments_errorInExtendsExpression.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugments_nameMismatch.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugments_noExtends.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugments_notAClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocFunctionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocFunction_missingReturn.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_class.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_interface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_interface_multiple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_missingType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_properties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_signatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOverrideTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParamTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParamTagTypeLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParseBackquotedParamName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParseDotDotDotInJSDocFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPostfixEqualsAddsOptionality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrefixPostfixParsing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrivateName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrivateName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrototypePropertyAccessWithType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateClass.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateConstructorFunction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTagDefault.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTagNameResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocThisType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeFromChainedAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeFromChainedAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTagCast.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTagParameterType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTagRequiredParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/noDuplicateJsdoc1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/overloadTag1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/overloadTag2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagNestedWithoutTopLevelObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagNestedWithoutTopLevelObject2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagNestedWithoutTopLevelObject3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagNestedWithoutTopLevelObject4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagOnFunctionUsingArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagWrapping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/syntaxErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/templateInsideCallback.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/thisTag3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeTagCircularReferenceOnConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeTagModuleExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeTagNoErasure.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeTagPrototypeAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefDuplicateTypeDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefInnerNamepaths.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefMultipleTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefOnStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefScope1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefTagTypeResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefTagWrapping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenCanBeTupleType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty13.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty14.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty15.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty5.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty7.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxGenericTagHasCorrectInferences.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/correctlyMarkAliasAsReferences3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxAndJsxFragPragma.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryDeclarationsLocalTypes.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryLocalTypeGlobalFallback.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryWithFragmentIsError.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxCheckJsxNoTypeArgumentsAllowed.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxEsprimaFbTestSuite.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxParsingError2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxParsingError3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxSpreadOverwritesAttributeStrict.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformCustomImport.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformCustomImportPragma.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformKeyPropCustomImport.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformKeyPropCustomImportPragma.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeErrors.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution1.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution10.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution11.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution12.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution14.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution15.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution5.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution6.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution7.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution9.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDefaultAttributesResolution3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName7.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution1.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution10.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution11.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution12.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution15.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution16.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution18.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution6.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution7.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution8.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution9.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericArrowFunctionParsing.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxIntrinsicAttributeErrors.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxLibraryManagedAttributes.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedTagName2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit7.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSfcReturnUndefinedStrictNullChecks.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution10.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution12.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution14.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution16.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution17.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution5.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution6.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadInvalidType.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload1.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload5.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentWithDefaultTypeParameter2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponents2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxTypeArgumentResolution.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType1.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType3.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType4.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType6.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionTypeComponent2.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerConditionsExcludesNode.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerNodeModules1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerOptionsCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerRelative1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerSyntaxRestrictions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/declarationNotFoundPackageBundlesTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/importFromDot.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/node10AlternateResult_noResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/node10Alternateresult_noTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/nodeModulesAtTypesPriority.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/packageJsonExportsOptionsCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/packageJsonMain_isNonRecursive.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_noImplicitAny_typesForPackageExist.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeAllowJsPackageSelfName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsConditionalPackageExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsExportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsGeneratedNameCollisions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportHelpersCollisions1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportHelpersCollisions2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportHelpersCollisions3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportMeta.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackageExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackageImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackagePatternExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackagePatternExportsExclude.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackagePatternExportsTrailers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsSynchronousCallErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsTopLevelAwait.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModules1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSEmit1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM1_emptyPackageJson.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM2_cjsPackageJson.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM3_modulePackageJson.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM4_noPackageJson.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesConditionalPackageExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesDeclarationEmitWithPackageExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsBlocksSpecifierResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsBlocksTypesVersions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsDoubleAsterisk.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsSourceTs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsSpecifierGenerationConditions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsSpecifierGenerationDirectory.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsSpecifierGenerationPattern.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesForbidenSyntax.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesGeneratedNameCollisions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAssertions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmit1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmit2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmitErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesTypeModeDeclarationEmitErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportHelpersCollisions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportHelpersCollisions2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportHelpersCollisions3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportMeta.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmit1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmit2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmitErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportResolutionNoCycle.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportTypeModeDeclarationEmitErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackageExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackageImports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExportsExclude.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExportsTrailers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesSynchronousCallErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTopLevelAwait.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverride1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverride2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverride3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverride4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverrideModeError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodePackageSelfName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodePackageSelfNameScoped.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/nonjsExtensions/declarationFileForTsJsImport.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/overrideKeywordOrder.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/overrideParameterProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/overrideWithoutNoImplicitOverride1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override_js2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override_js3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override_js4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.classMethods.es2018.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionDeclarations.es2018.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionExpressions.es2018.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.objectLiteralMethods.es2018.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2018/forAwait/parser.forAwait.es2018.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.decmialNegative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript3/Accessors/parserES3Accessors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript3/Accessors/parserES3Accessors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserGetAccessorWithTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserSetAccessorWithTypeAnnotation1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserSetAccessorWithTypeParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/AutomaticSemicolonInsertion/parserAutomaticSemicolonInsertion1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/CatchClauses/parserCatchClauseWithTypeAnnotation1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClass1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration3.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserCommaInTypeMemberList2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnPropertySignature1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserConditionalExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserInvocationOfMemberAccessOffOfObjectCreationExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserObjectCreation2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration2.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserAmbiguity1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserAmbiguity2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserAmbiguity3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserAmbiguityWithBinaryOperator4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserCastVersusArrowFunction1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserConstructorAmbiguity1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserConstructorAmbiguity2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserConstructorAmbiguity3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserConstructorAmbiguity4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericConstraint7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericsInInterfaceDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericsInTypeContexts1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericsInTypeContexts2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGenericsInVariableDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserMemberAccessExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserMemberAccessOffOfGenericType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserObjectCreation1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessor1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration2.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration4.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RealWorld/parserindenter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509534.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509618.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509693.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509698.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser536727.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parserTernaryAndCommaOperators1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parseRegularExpressionMixedWithComments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakInIterationOrSwitchStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueInIterationStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserBlockStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserBreakStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserContinueStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserDebuggerStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserDoStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserEmptyStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserExpressionStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserIfStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserIfStatement2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserLabeledStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserSwitchStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserThrowStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserTryStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserVariableStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserVariableStatement2.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWhileStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode15-negative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode3-negative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode6-negative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parser15.4.4.14-9-2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserAdditiveExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserArgumentList1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserAstSpans1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserImportDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserNoASIOnCallAfterFunctionExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.2_A1.5_T2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.3_A1.1_T2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.6_A4.2_T1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserUnicode1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserUsingConstructorAsIdentifier.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parservoidInQualifiedName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName18.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName19.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName23.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName24.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName25.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName28.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName31.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName32.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName37.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName40.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName41.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement1.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement16.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement20.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/pedantic/noUncheckedIndexedAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/pedantic/noUncheckedIndexedAccessDestructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/references/library-reference-15.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/references/library-reference-5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/assignmentToVoidZero2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/chainedPrototypeAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/checkSpecialPropertyAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/classCanExtendConstructorFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/conflictingCommonJSES2015Exports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/constructorFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/constructorFunctionsStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/enumMergeWithExpando.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/expandoOnAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/exportDefaultInJsFile02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/exportNestedNamespaces2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/exportPropertyAssignmentNameResolution.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/globalMergeWithCommonJSAssignmentDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/importAliasModuleExports.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/importingExportingTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/inferringClassMembersFromAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/jsContainerMergeTsDeclaration2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/jsContainerMergeTsDeclaration3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/lateBoundAssignmentDeclarationSupport6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportAliasUnknown.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportAssignment7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportDuplicateAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportsAliasLoop1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportsAliasLoop2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/namespaceAssignmentToRequireAlias.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/nestedDestructuringOfRequire.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/plainJSGrammarErrors3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/plainJSTypeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/prototypePropertyAssignmentMergeAcrossFiles2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/prototypePropertyAssignmentMergeWithInterfaceMethod.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/requireOfESWithPropertyAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/thisPropertyAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/thisPropertyAssignmentComputed.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromJSConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromJSInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromJSInitializer4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment21.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment22.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment26.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment28.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment31.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment32.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment33.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment36.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPrototypeAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPrototypeAssignment2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPrototypeAssignment3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeLookupInIIFE.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerAdditiveExpression1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerClass2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerImportDeclaration1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.2_A1.5_T2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.3_A1.1_T2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.6_A4.2_T1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannertest1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInvalidInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/invalidMultipleVariableDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsWithAsyncIteratorObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsWithImportHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsWithIteratorObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithImportHelpers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithIteratorObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithObjectLiterals1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/breakStatements/invalidSwitchBreakStatement.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/breakStatements/switchBreakStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsArrayErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsInvalid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of17.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of26.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of27.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of28.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of29.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of30.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of31.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of34.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of35.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of36.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck10.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck11.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck12.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck13.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck14.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck8.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck9.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/forStatements/forStatementsMultipleInvalidDecl.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/ifDoWhileStatements/ifDoWhileStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementExportDeclarationNoCrash1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/invalidReturnStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/switchStatements/switchStatements.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/anyAsConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/anyAsGenericFunctionCall.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/assignAnyToEveryType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowExceptionVariableInCatchClause.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowFromAnyWithInstanceof.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowFromAnyWithTypePredicate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.es2018.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/conditionalTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/conditionalTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/conditionalTypesExcessProperties.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesInvalidExtendsDeclaration.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtends2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/commaOperator/contextuallyTypeCommaOperator02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/commaOperator/contextuallyTypeCommaOperator03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes01.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes02.tsx
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/logicalAnd/contextuallyTypeLogicalAnd02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/logicalAnd/contextuallyTypeLogicalAnd03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializerNegative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedClassExpressionMethodDeclaration01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedClassExpressionMethodDeclaration02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/partiallyAnnotatedFunction/partiallyAnnotatedFunctionInferenceError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/forAwait/types.forAwait.es2018.2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/forAwait/types.forAwait.es2018.3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeAmbientMissing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeLocalMissing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNested.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNestedNoRef.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNonString.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/commonTypeIntersection.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionAndUnionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionAsWeakTypeSource.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionNarrowing.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionReduction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionReductionStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeAssignment.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionWithIndexSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionWithUnionConstraint.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/recursiveIntersectionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/circularIndexedAccessErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndIndexedAccess.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndIndexedAccessErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypesWidenInParameterPosition.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsAssertionsInEqualityComparisons02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsAssignedToStringMappings.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithEqualityChecks01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithEqualityChecks02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithEqualityChecks03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithEqualityChecks04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements03.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements04.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringMappingOverPatternLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypesPatterns.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypesPatternsPrefixSuffixAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeAsClauseRelationships.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeAsClauses.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeConstraints2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeErrors2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeInferenceErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeRelationships.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeWithAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesAndObjects.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/recursiveMappedTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/augmentedTypeAssignmentCompatIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/classWithPrivateProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/duplicateNumericIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/duplicateStringIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/indexSignatures1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfExtendedObject.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfObjectAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfObjectAssignmentCompat2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureHidingMembersOfFunctionAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureAppearsToBeFunctionType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfFunctionAssignmentCompat.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringAndNumberIndexSignatureToAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringIndexerHidingObjectIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringNamedNumericProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithPrivateConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithProtectedConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithPublicConstructor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/interfaceWithPrivateMember.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverIntersectionNotCallable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverTypeErrors1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverTypeErrors2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAccessProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAndTypeVariables.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAsProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAssignError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveConstraintOfIndexAccessType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveInFunction.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveInGeneric.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveIndexingWithForInNoImplicitAny.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveIndexingWithForInSupressError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveNarrow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveStrictNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveUnionIntersection.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithOptionalParameterAndInitializer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithParameterInitializers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureIsNotSubtypeOfNonSpecializedSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloads2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/multipleNumericIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/multipleStringIndexers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/numericIndexerConstrainsPropertyDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/numericIndexerConstrainsPropertyDeclarations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/methodSignaturesWithOverloads.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/objectTypeLiteralSyntax2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/assignFromBooleanInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/assignFromBooleanInterface2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/boolInsteadOfBoolean.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/invalidBooleanAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/enum/invalidEnumAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/enum/validEnumAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/null/directReferenceToNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/null/validNullAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/assignFromNumberInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/assignFromNumberInterface2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/invalidNumberAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/assignFromStringInterface.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/assignFromStringInterface2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/invalidStringAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/stringPropertyAccessWithError.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/directReferenceToUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/invalidUndefinedAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/void/invalidAssignmentsToVoid.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/void/invalidVoidAssignments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/void/invalidVoidValues.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestArity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestArityStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestParameters1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestParameters3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRest.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/restTuplesFromContextualTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/arrayTypeOfFunctionTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/arrayTypeOfFunctionTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/unionTypeLiterals.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/circularTypeofWithVarOrFunc.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/recursiveTypesWithTypeof.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofANonExportedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofAnExportedType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofClassWithPrivates.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThis.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.d.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/nonGenericTypeReferenceWithTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadNegative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadSetonlyAccessor.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadStrictNull.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadDuplicate.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadDuplicateExact.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadMethods.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadNonObject1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadObjectOrFalsy.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadOverwritesPropertyStrict.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadTypeVariable.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadUnion2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadUnion3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAndLogicalOrExpressions01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInVariableDeclarations01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads05.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesWithTemplateStrings02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesWithVariousOperators02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/typeArgumentsWithStringLiteralTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/declarationFiles.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeErrors2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInAccessors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInAccessorsNegative.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/typeRelationships.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/unionThisTypeInFunctions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/arityAndOrderCompatibility01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/castingTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/contextualTypeTupleEnd.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/contextualTypeWithTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/emptyTuples/emptyTuplesTypeAssertion01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/emptyTuples/emptyTuplesTypeAssertion02.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/indexerWithTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/optionalTupleElements1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/restTupleElements1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/strictTupleLength.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/tupleLengthCheck.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/unionsOfTupleTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/variadicTuples1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/variadicTuples2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/variadicTuples3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples7.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/directDependenceBetweenTypeAliases.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/intrinsicKeyword.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/intrinsicTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithIncorrectNumberOfTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callNonGenericFunctionWithTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiateGenericClassWithWrongNumberOfTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiateNonGenericTypeWithTypeArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressions.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraint2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterAsBaseType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/staticMembersUsingClassTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterDirectlyConstrainedToItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterIndirectlyConstrainedToItself.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typesWithDuplicateTypeParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/apparentType/apparentTypeSubtyping.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/apparentType/apparentTypeSupertype.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatBetweenTupleAndArray.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignatures6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithCallSignaturesWithRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignatures6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithConstructSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithDiscriminatedUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithEnumIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithNumericIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithNumericIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithNumericIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersOptionality.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersOptionality2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersStringNumericNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithStringIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/covariantCallbacks.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/enumAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/enumAssignabilityInInheritance.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/genericCallWithObjectTypeArgsAndInitializers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/nullAssignedToUndefined.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/optionalPropertyAssignableToStringIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/typeParameterAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/typeParameterAssignability2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/typeParameterAssignability3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/unionTypesAssignability.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfTuple.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfTuple2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityStrictNulls.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityWithEnumTypes.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityWithIntersectionTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/switchCaseWithUnionTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/typeAssertionsWithIntersectionTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/typeAssertionsWithUnionTypes01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/instanceOf/narrowingGenericTypeFromInstanceof01.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughInstantiation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/objectTypeWithRecursiveWrappedProperty.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/objectTypeWithRecursiveWrappedProperty2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/objectTypeWithRecursiveWrappedPropertyCheckedNominally.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeReferences1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeReferences2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/enumIsNotASubtypeOfAnythingButNumber.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameter.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithConstraints4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithRecursiveConstraints.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfUnion.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesA.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithRestParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignaturesWithSpecializedSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignaturesWithSpecializedSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithGenericCallSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithGenericConstructSignaturesWithOptionalParameters.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithNumericIndexer5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersAccessibility2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithStringIndexer4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/unionSubtypeIfEveryConstituentTypeIsSubtype.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPrivates3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/unionTypeIdentity.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/contextualSignatureInstantiation.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstraintsTypeArgumentInference2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstructorTypedArguments5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectLiteralArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgs.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedFunctionTypedArguments2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithTupleType.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericClassWithFunctionTypedMemberArguments.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/indexSignatureTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferences.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/noInfer.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionTypeInference.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/widenedTypes/initializersWidened.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeObjectLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/discriminatedUnionTypes1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/discriminatedUnionTypes2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures4.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures5.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures6.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeConstructSignatures.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeEquivalence.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeFromArrayLiteral.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeMembers.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypePropertyAccessibility.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReadonly.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReduction2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeWithIndexSignature.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarationsInJsErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsErrors.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsPropertyNames.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/unknown/unknownControlFlow.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/unknown/unknownType1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/unknown/unknownType2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/witness/witness.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsLookup3.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestion1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestion2.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestionBun1.ts
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestionBun2.ts
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/bom-utf16be.ts

  × Invalid Character `￾`
   ╭─[typescript/tests/cases/compiler/bom-utf16be.ts:1:1]
 1 │ ￾瘀愀爀 砀㴀㄀　㬀ഀ਀
   · ─
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/elidedEmbeddedStatementsReplacedWithSemicolon.ts

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/elidedEmbeddedStatementsReplacedWithSemicolon.ts:23:1]
 22 │ // @ts-ignore suppress `with` statement error
 23 │ with (window)
    · ────
 24 │     const enum H {}
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/jsFileClassSelfReferencedProperty.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/jsFileClassSelfReferencedProperty.ts:1:1]
 1 │ export class StackOverflowTest {
   · ──────
 2 │   constructor () {
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationRestParamJsDocFunction.ts

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/compiler/jsFileCompilationRestParamJsDocFunction.ts:22:1]
 21 │ 
 22 │ export default apply;
    · ──────
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/jsFileESModuleWithEnumTag.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/jsFileESModuleWithEnumTag.ts:1:1]
 1 │ export {}; // mark as module
   · ──────
 2 │ /** @enum {number} */
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/jsdocTypedefNoCrash.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/jsdocTypedefNoCrash.ts:5:1]
 4 │  */
 5 │ export const foo = 5;
   · ──────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationNoNewNames.ts

  × Missing initializer in destructuring declaration
    ╭─[typescript/tests/cases/compiler/moduleAugmentationNoNewNames.ts:11:9]
 10 │     let y: number, z: string;
 11 │     let {a: x, b: x1}: {a: number, b: number};
    ·         ─────────────────────────────────────
 12 │     module Z {}
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_unexpected2.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/moduleResolutionWithExtensions_unexpected2.ts:3:5]
 2 │ 
 3 │ This file is not read.
   ·     ▲
   ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot.ts:1:4]
 1 │ not read
   ·    ▲
   ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_fakeScopedPackage.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_fakeScopedPackage.ts:3:4]
 2 │ 
 3 │ not read
   ·    ▲
   ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/newNamesInGlobalAugmentations1.ts

  × Missing initializer in destructuring declaration
    ╭─[typescript/tests/cases/compiler/newNamesInGlobalAugmentations1.ts:11:9]
 10 │     class Cls {x}
 11 │     let [a, b]: number[];
    ·         ────────────────
 12 │     export import X = M.M1.x;
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDecorators.ts

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/sourceMapValidationDecorators.ts:18:7]
 17 │       @ParameterDecorator2(30) 
 18 │       ...b: string[]) {
    ·       ───
 19 │     }
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/thisInObjectJs.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/thisInObjectJs.ts:1:1]
 1 │ export { }
   · ──────
 2 │ let obj = {
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/unreachableDeclarations.ts

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/unreachableDeclarations.ts:84:2]
 83 │ 
 84 │     namespace Baz { export const value = 1234 }
    ·     ───────────────────────────────────────────
 85 │ }
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/unreachableDeclarations.ts:84:2]
 83 │ 
 84 │     namespace Baz { export const value = 1234 }
    ·     ───────────────────────────────────────────
 85 │ }
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/usedImportNotElidedInJs.ts

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/compiler/usedImportNotElidedInJs.ts:4:1]
 3 │ 
 4 │ import * as moment from 'moment';
   · ──────
 5 │ import rollupMoment__default from 'moment';
   ╰────

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/compiler/usedImportNotElidedInJs.ts:5:1]
 4 │ import * as moment from 'moment';
 5 │ import rollupMoment__default from 'moment';
   · ──────
 6 │ export const moment = rollupMoment__default || moment;
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/usedImportNotElidedInJs.ts:6:1]
 5 │ import rollupMoment__default from 'moment';
 6 │ export const moment = rollupMoment__default || moment;
   · ──────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/compiler/withStatementInternalComments.ts

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/withStatementInternalComments.ts:2:7]
 1 │ // @ts-ignore
 2 │ /*1*/ with /*2*/ ( /*3*/ false /*4*/ ) /*5*/ {}
   ·       ────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts

  × Identifier `x` has already been declared
     ╭─[typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts:130:14]
 129 │     }
 130 │     catch ({ x }) {
     ·              ┬
     ·              ╰── `x` has already been declared here
 131 │         var x;
     ·             ┬
     ·             ╰── It can not be redeclared here
 132 │     }
     ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts

  × Classes may not have a static property named prototype
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:53:12]
 52 │ class StaticPrototype {
 53 │     static prototype: number; // always an error
    ·            ─────────
 54 │     prototype: string; // ok
    ╰────

  × Classes may not have a static property named prototype
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:63:12]
 62 │ class StaticPrototypeFn {
 63 │     static prototype() {} // always an error
    ·            ─────────
 64 │     prototype() {} // ok
    ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:161:12]
 160 │ var StaticPrototype_Anonymous = class {
 161 │     static prototype: number; // always an error
     ·            ─────────
 162 │     prototype: string; // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:171:12]
 170 │ var StaticPrototypeFn_Anonymous = class {
 171 │     static prototype() {} // always an error
     ·            ─────────
 172 │     prototype() {} // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:278:16]
 277 │     export default class StaticPrototype {
 278 │         static prototype: number; // always an error
     ·                ─────────
 279 │         prototype: string; // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:290:16]
 289 │     export default class StaticPrototypeFn {
 290 │         static prototype() {} // always an error
     ·                ─────────
 291 │         prototype() {} // ok
     ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/controlFlow/assertionTypePredicates2.ts

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/conformance/controlFlow/assertionTypePredicates2.ts:18:1]
 17 │ 
 18 │ export const main = () => {
    · ──────
 19 │     /** @type { A } */
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts:2:10]
 1 │ var p1 = import("./0");
 2 │ function arguments() { } // this is allow as the file doesn't have implicit "use strict"
   ·          ─────────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts

  × The only valid meta property for import is import.meta
   ╭─[typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts:2:16]
 1 │ export let x = import.meta;
 2 │ export let y = import.metal;
   ·                ────────────
 3 │ export let z = import.import.import.malkovich;
   ╰────

  × The only valid meta property for import is import.meta
   ╭─[typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts:3:16]
 2 │ export let y = import.metal;
 3 │ export let z = import.import.import.malkovich;
   ·                ─────────────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_module.ts

  × Expected `,` but found `string`
    ╭─[typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_module.ts:19:15]
 18 │ export { type someType as "<A>" };
 19 │ import { type "<A>" as typeA } from "./arbitraryModuleNamespaceIdentifiers_module";
    ·               ──┬──
    ·                 ╰── `,` expected
 20 │ const importTest: typeA = "expect error about someType";
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts:64:1]
 63 │ // @ts-ignore
 64 │ with (_) {
    · ────
 65 │     var y = _;
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:13:12]
 12 │ 
 13 │ { @x?.["y"] class C {} }
    ·            ▲
 14 │ 
    ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.2.ts

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwait.2.ts:4:8]
 3 │ // await allowed in import=namespace when not a module
 4 │ import await = foo.await;
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwait.2.ts:4:8]
 3 │ // await allowed in import=namespace when not a module
 4 │ import await = foo.await;
   ·        ─────
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/jsdoc/constructorTagOnClassConstructor.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/jsdoc/constructorTagOnClassConstructor.ts:1:1]
 1 │ export class Alpha { }
   · ──────
 2 │ export class Beta {
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/jsdoc/constructorTagOnClassConstructor.ts:2:1]
 1 │ export class Alpha { }
 2 │ export class Beta {
   · ──────
 3 │   /**
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/jsdoc/inferThis.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/jsdoc/inferThis.ts:1:1]
 1 │ export class C {
   · ──────
 2 │     /**
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParseMatchingBackticks.ts

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/conformance/jsdoc/jsdocParseMatchingBackticks.ts:12:1]
 11 │  */
 12 │ export function f(x, y, z, alpha, beta, gamma) {
    · ──────
 13 │     return x + y + z + alpha + beta + gamma
    ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/jsdoc/overloadTag3.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/jsdoc/overloadTag3.ts:4:1]
 3 │  */
 4 │ export class Foo {
   · ──────
 5 │     /**
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/untypedModuleImport.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport.ts:4:5]
 3 │ 
 4 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_vsAmbient.ts

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_vsAmbient.ts:3:5]
 2 │ 
 3 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/salsa/annotatedThisPropertyInitializerDoesntNarrow.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/annotatedThisPropertyInitializerDoesntNarrow.ts:5:1]
 4 │ 
 5 │ export class C {
   · ──────
 6 │     constructor() {
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/salsa/plainJSRedeclare3.ts

  × Identifier `orbitol` has already been declared
   ╭─[typescript/tests/cases/conformance/salsa/plainJSRedeclare3.ts:1:7]
 1 │ const orbitol = 1
   ·       ───┬───
   ·          ╰── `orbitol` has already been declared here
 2 │ var orbitol = 1 + false
   ·     ───┬───
   ·        ╰── It can not be redeclared here
 3 │ orbitol.toExponential()
   ╰────
Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignmentWithExport.ts

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/typeFromPropertyAssignmentWithExport.ts:3:1]
 2 │ 
 3 │ export const Adapter = {};
   · ──────
 4 │ 
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/ArrowFunctionExpression1.ts:1:10]
 1 │ var v = (public x: string) => { };
   ·          ────────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/ClassDeclaration26.ts:2:17]
 1 │ class C {
 2 │     public const var export foo = 10;
   ·                 ▲
 3 │ 
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/ClassDeclarationWithInvalidConstOnPropertyDeclaration.ts:2:15]
 1 │ class AtomicNumbers {
 2 │   static const H = 1;
   ·               ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/MemberAccessorDeclaration15.ts:2:12]
 1 │ class C {
 2 │    set Foo(public a: number) { }
   ·            ────────────────
 3 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/ParameterList13.ts:2:10]
 1 │ interface I {
 2 │     new (public x);
   ·          ────────
 3 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/ParameterList4.ts:1:12]
 1 │ function F(public A) {
   ·            ────────
 2 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/ParameterList5.ts:1:16]
 1 │ function A(): (public B) => C {
   ·                ────────
 2 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/ParameterList6.ts:2:19]
 1 │ class C {
 2 │   constructor(C: (public A) => any) {
   ·                   ────────
 3 │   }
   ╰────

  × Invalid Character `؆`
   ╭─[typescript/tests/cases/compiler/TransportStream.ts:1:387]
 1 │ 䁇鈄ЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄ䁇鈅ԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅ䁇鈆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆
   ·                                                                                                                                                                                                     ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/TransportStream.ts:1:387]
 1 │ 䁇鈄ЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄЄ䁇鈅ԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅԅ䁇鈆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆؆
   ·                                                                                                                                                                                                     ▲
   ╰────
  help: Try insert a semicolon here

  × TS(1253): Abstract properties can only appear within an abstract class.
    ╭─[typescript/tests/cases/compiler/abstractPropertyNegative.ts:15:14]
 14 │     readonly ro = "readonly please";
 15 │     abstract notAllowed: string;
    ·              ──────────
 16 │     get concreteWithNoBody(): string;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/accessorBodyInTypeContext.ts:2:15]
 1 │ type A = {
 2 │     get foo() { return 0 }
   ·               ─
 3 │ };
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/accessorParameterAccessibilityModifier.ts:2:11]
 1 │ class C {
 2 │     set X(public v) { }
   ·           ────────
 3 │     static set X(public v2) { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/accessorParameterAccessibilityModifier.ts:3:18]
 2 │     set X(public v) { }
 3 │     static set X(public v2) { }
   ·                  ─────────
 4 │ }
   ╰────

  × A 'set' accessor cannot have rest parameter.
   ╭─[typescript/tests/cases/compiler/accessorWithRestParam.ts:2:11]
 1 │ class C {
 2 │     set X(...v) { }
   ·           ────
 3 │     static set X(...v2) { }
   ╰────

  × A 'set' accessor cannot have rest parameter.
   ╭─[typescript/tests/cases/compiler/accessorWithRestParam.ts:3:18]
 2 │     set X(...v) { }
 3 │     static set X(...v2) { }
   ·                  ─────
 4 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/aliasErrors.ts:13:12]
 12 │ import m2 = no.mod;
 13 │ import n = 5;
    ·            ─
 14 │ import o = "s";
    ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/alwaysStrictModule2.ts:3:13]
 2 │     export function f() {
 3 │         var arguments = [];
   ·             ─────────
 4 │     }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/ambientPropertyDeclarationInJs.ts:6:17]
 5 │ 
 6 │     declare prop: string;
   ·                 ▲
 7 │ 
   ╰────
  help: Try insert a semicolon here

  × TS(1108): A 'return' statement can only be used within a function body.
    ╭─[typescript/tests/cases/compiler/ambientWithStatements.ts:11:5]
 10 │     L: var y;
 11 │     return;
    ·     ──────
 12 │     switch (x) {
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/compiler/ambientWithStatements.ts:2:5]
 1 │ declare module M {
 2 │     break;
   ·     ──────
 3 │     continue;
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/compiler/ambientWithStatements.ts:3:5]
 2 │     break;
 3 │     continue;
   ·     ─────────
 4 │     debugger;
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/ambientWithStatements.ts:25:5]
 24 │     }
 25 │     with (x) {
    ·     ────
 26 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/ambiguousGenericAssertion1.ts:4:10]
 3 │ var r2 = < <T>(x: T) => T>f; // valid
 4 │ var r3 = <<T>(x: T) => T>f; // ambiguous, appears to the parser as a << operation
   ·          ──
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/anonymousModules.ts:1:7]
 1 │ module {
   ·       ▲
 2 │     export var foo = 1;
   ╰────
  help: Try insert a semicolon here

  × 'arguments' is not allowed in class field initializer
   ╭─[typescript/tests/cases/compiler/argumentsUsedInClassFieldInitializerOrStaticInitializationBlock.ts:3:10]
 2 │   return class T {
 3 │      a = arguments
   ·          ─────────
 4 │   }
   ╰────

  × 'arguments' is not allowed in class field initializer
    ╭─[typescript/tests/cases/compiler/argumentsUsedInClassFieldInitializerOrStaticInitializationBlock.ts:9:10]
  8 │   return new class T {
  9 │      a = arguments
    ·          ─────────
 10 │   }
    ╰────

  × 'arguments' is not allowed in class field initializer
    ╭─[typescript/tests/cases/compiler/argumentsUsedInClassFieldInitializerOrStaticInitializationBlock.ts:15:15]
 14 │   return class T {
 15 │      a = { b: arguments }
    ·               ─────────
 16 │   }
    ╰────

  × 'arguments' is not allowed in class field initializer
    ╭─[typescript/tests/cases/compiler/argumentsUsedInClassFieldInitializerOrStaticInitializationBlock.ts:21:15]
 20 │   return new class T {
 21 │      a = { b: arguments }
    ·               ─────────
 22 │   }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/arraySigChecking.ts:11:28]
 10 │ 
 11 │     var foo: { [index: any]; }; // expect an error here
    ·                            ─
 12 │ }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/compiler/arrowFunctionErrorSpan.ts:18:5]
 17 │ f(()
 18 │     => { });
    ·     ──
 19 │ 
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/arrowFunctionMissingCurlyWithSemicolon.ts:2:15]
 1 │ // Should error at semicolon.
 2 │ var f = () => ;
   ·               ─
 3 │ var b = 1 * 2 * 3 * 4;
   ╰────

  × Expected `=>` but found `{`
   ╭─[typescript/tests/cases/compiler/arrowFunctionsMissingTokens.ts:2:16]
 1 │ module missingArrowsWithCurly {
 2 │     var a = () { };
   ·                ┬
   ·                ╰── `=>` expected
 3 │ 
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/compiler/asiAbstract.ts:3:12]
 2 │ class NonAbstractClass {
 3 │   abstract s();
   ·            ─
 4 │ }
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/compiler/asiReturn.ts:2:1]
 1 │ // This should be an error for using a return outside a function, but ASI should work properly
 2 │ return
   · ──────
   ╰────

  × Expected `,` but found `(`
   ╭─[typescript/tests/cases/compiler/assertInWrapSomeTypeParameter.ts:2:26]
 1 │ class C<T extends C<T>> {
 2 │     foo<U extends C<C<T>>(x: U) {
   ·                          ┬
   ·                          ╰── `,` expected
 3 │         return null;
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/compiler/assignToInvalidLHS.ts:4:9]
 3 │ // Below is actually valid JavaScript (see http://es5.github.com/#x8.7 ), even though will always fail at runtime with 'invalid left-hand side'
 4 │ var x = new y = 5;
   ·         ─────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/compiler/assignmentToParenthesizedExpression1.ts:2:2]
 1 │ var x;
 2 │ (1, x)=0;
   ·  ────
   ╰────

  × Identifier `c1` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesClass.ts:2:7]
 1 │ //// class then var
 2 │ class c1 { public foo() { } }
   ·       ─┬
   ·        ╰── `c1` has already been declared here
 3 │ var c1 = 1; // error
   ·     ─┬
   ·      ╰── It can not be redeclared here
 4 │ 
   ╰────

  × Identifier `c4` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesClass.ts:6:7]
 5 │ //// class then enum
 6 │ class c4 { public foo() { } }
   ·       ─┬
   ·        ╰── `c4` has already been declared here
 7 │ enum c4 { One } // error
   ·      ─┬
   ·       ╰── It can not be redeclared here
   ╰────

  × Identifier `c33` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesClass2.ts:16:7]
 15 │ // class then enum 
 16 │ class c33 {
    ·       ─┬─
    ·        ╰── `c33` has already been declared here
 17 │     foo() {
 18 │         return 1;
 19 │     }
 20 │ }
 21 │ enum c33 { One };
    ·      ─┬─
    ·       ╰── It can not be redeclared here
 22 │ 
    ╰────

  × Identifier `c2` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesClass2a.ts:2:7]
 1 │ //// class then function
 2 │ class c2 { public foo() { } } // error
   ·       ─┬
   ·        ╰── `c2` has already been declared here
 3 │ function c2() { } // error
   ·          ─┬
   ·           ╰── It can not be redeclared here
 4 │ var c2 = () => { }
   ╰────

  × Identifier `c2` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesClass2a.ts:2:7]
 1 │ //// class then function
 2 │ class c2 { public foo() { } } // error
   ·       ─┬
   ·        ╰── `c2` has already been declared here
 3 │ function c2() { } // error
 4 │ var c2 = () => { }
   ·     ─┬
   ·      ╰── It can not be redeclared here
   ╰────

  × Identifier `c3` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesClass4.ts:2:7]
 1 │ //// class then class
 2 │ class c3 { public foo() { } } // error
   ·       ─┬
   ·        ╰── `c3` has already been declared here
 3 │ class c3 { public bar() { } } // error
   ·       ─┬
   ·        ╰── It can not be redeclared here
   ╰────

  × Identifier `e1111` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesEnum.ts:2:6]
 1 │ // enum then var
 2 │ enum e1111 { One } // error
   ·      ──┬──
   ·        ╰── `e1111` has already been declared here
 3 │ var e1111 = 1; // error
   ·     ──┬──
   ·       ╰── It can not be redeclared here
 4 │ 
   ╰────

  × Identifier `e2` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesEnum.ts:6:6]
 5 │ // enum then function
 6 │ enum e2 { One } // error
   ·      ─┬
   ·       ╰── `e2` has already been declared here
 7 │ function e2() { } // error
   ·          ─┬
   ·           ╰── It can not be redeclared here
 8 │ 
   ╰────

  × Identifier `e3` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesEnum.ts:9:6]
  8 │ 
  9 │ enum e3 { One } // error
    ·      ─┬
    ·       ╰── `e3` has already been declared here
 10 │ var e3 = () => { } // error
    ·     ─┬
    ·      ╰── It can not be redeclared here
 11 │ 
    ╰────

  × Identifier `e4` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesEnum.ts:13:6]
 12 │ // enum then class
 13 │ enum e4 { One } // error
    ·      ─┬
    ·       ╰── `e4` has already been declared here
 14 │ class e4 { public foo() { } } // error
    ·       ─┬
    ·        ╰── It can not be redeclared here
 15 │ 
    ╰────

  × Identifier `e1` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesEnum2.ts:2:6]
 1 │ // enum then interface
 2 │ enum e1 { One } // error
   ·      ─┬
   ·       ╰── `e1` has already been declared here
 3 │ 
 4 │ interface e1 { // error
   ·           ─┬
   ·            ╰── It can not be redeclared here
 5 │     foo(): void;
   ╰────

  × Identifier `e2` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesEnum2.ts:11:6]
 10 │ // enum then class
 11 │ enum e2 { One }; // error
    ·      ─┬
    ·       ╰── `e2` has already been declared here
 12 │ class e2 { // error
    ·       ─┬
    ·        ╰── It can not be redeclared here
 13 │     foo() {
    ╰────

  × Identifier `y3` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesFunction.ts:13:10]
 12 │ // function then class
 13 │ function y3() { } // error
    ·          ─┬
    ·           ╰── `y3` has already been declared here
 14 │ class y3 { } // error
    ·       ─┬
    ·        ╰── It can not be redeclared here
 15 │ 
    ╰────

  × Identifier `y3a` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesFunction.ts:16:10]
 15 │ 
 16 │ function y3a() { } // error
    ·          ─┬─
    ·           ╰── `y3a` has already been declared here
 17 │ class y3a { public foo() { } } // error
    ·       ─┬─
    ·        ╰── It can not be redeclared here
 18 │ 
    ╰────

  × Identifier `y4` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesFunction.ts:20:10]
 19 │ // function then enum
 20 │ function y4() { } // error
    ·          ─┬
    ·           ╰── `y4` has already been declared here
 21 │ enum y4 { One } // error
    ·      ─┬
    ·       ╰── It can not be redeclared here
 22 │ 
    ╰────

  × Identifier `i3` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesInterface.ts:23:11]
 22 │ // interface then enum
 23 │ interface i3 { // error
    ·           ─┬
    ·            ╰── `i3` has already been declared here
 24 │     foo(): void;
 25 │ }
 26 │ enum i3 { One }; // error
    ·      ─┬
    ·       ╰── It can not be redeclared here
 27 │ 
    ╰────

  × Identifier `m1a` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesModules.ts:5:8]
 4 │ 
 5 │ module m1a { var y = 2; } // error
   ·        ─┬─
   ·         ╰── `m1a` has already been declared here
 6 │ var m1a = 1; // error
   ·     ─┬─
   ·      ╰── It can not be redeclared here
 7 │ 
   ╰────

  × Identifier `m1b` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules.ts:8:8]
  7 │ 
  8 │ module m1b { export var y = 2; } // error
    ·        ─┬─
    ·         ╰── `m1b` has already been declared here
  9 │ var m1b = 1; // error
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 10 │ 
    ╰────

  × Identifier `m1d` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules.ts:16:8]
 15 │ 
 16 │ module m1d { // error
    ·        ─┬─
    ·         ╰── `m1d` has already been declared here
 17 │     export class I { foo() { } }
 18 │ }
 19 │ var m1d = 1; // error
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 20 │ 
    ╰────

  × Identifier `m2a` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules.ts:25:8]
 24 │ 
 25 │ module m2a { var y = 2; }
    ·        ─┬─
    ·         ╰── `m2a` has already been declared here
 26 │ function m2a() { }; // error since the module is instantiated
    ·          ─┬─
    ·           ╰── It can not be redeclared here
 27 │ 
    ╰────

  × Identifier `m2b` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules.ts:28:8]
 27 │ 
 28 │ module m2b { export var y = 2; }
    ·        ─┬─
    ·         ╰── `m2b` has already been declared here
 29 │ function m2b() { };  // error since the module is instantiated
    ·          ─┬─
    ·           ╰── It can not be redeclared here
 30 │ 
    ╰────

  × Identifier `m2a` has already been declared
   ╭─[typescript/tests/cases/compiler/augmentedTypesModules2.ts:5:8]
 4 │ 
 5 │ module m2a { var y = 2; }
   ·        ─┬─
   ·         ╰── `m2a` has already been declared here
 6 │ function m2a() { }; // error since the module is instantiated
   ·          ─┬─
   ·           ╰── It can not be redeclared here
 7 │ 
   ╰────

  × Identifier `m2b` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules2.ts:8:8]
  7 │ 
  8 │ module m2b { export var y = 2; }
    ·        ─┬─
    ·         ╰── `m2b` has already been declared here
  9 │ function m2b() { };  // error since the module is instantiated
    ·          ─┬─
    ·           ╰── It can not be redeclared here
 10 │ 
    ╰────

  × Identifier `m2cc` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesModules2.ts:14:8]
 13 │ 
 14 │ module m2cc { export var y = 2; }
    ·        ──┬─
    ·          ╰── `m2cc` has already been declared here
 15 │ function m2cc() { }; // error to have module first
    ·          ──┬─
    ·            ╰── It can not be redeclared here
 16 │ 
    ╰────

  × Identifier `x4` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesVar.ts:13:5]
 12 │ // var then class
 13 │ var x4 = 1; // error
    ·     ─┬
    ·      ╰── `x4` has already been declared here
 14 │ class x4 { } // error
    ·       ─┬
    ·        ╰── It can not be redeclared here
 15 │ 
    ╰────

  × Identifier `x4a` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesVar.ts:16:5]
 15 │ 
 16 │ var x4a = 1; // error
    ·     ─┬─
    ·      ╰── `x4a` has already been declared here
 17 │ class x4a { public foo() { } } // error
    ·       ─┬─
    ·        ╰── It can not be redeclared here
 18 │ 
    ╰────

  × Identifier `x5` has already been declared
    ╭─[typescript/tests/cases/compiler/augmentedTypesVar.ts:20:5]
 19 │ // var then enum
 20 │ var x5 = 1;
    ·     ─┬
    ·      ╰── `x5` has already been declared here
 21 │ enum x5 { One } // error
    ·      ─┬
    ·       ╰── It can not be redeclared here
 22 │ 
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/autoLift2.ts:5:17]
 4 │     constructor() {
 5 │         this.foo: any;
   ·                 ▲
 6 │         this.bar: any;
   ╰────
  help: Try insert a semicolon here

  × Expected `(` but found `await`
   ╭─[typescript/tests/cases/compiler/awaitInNonAsyncFunction.ts:4:7]
 3 │ function normalFunc(p: Promise<number>) {
 4 │   for await (const _ of []);
   ·       ──┬──
   ·         ╰── `(` expected
 5 │   return await p;
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:2:5]
 1 │ function awaitString() {
 2 │     await 'literal';
   ·     ─────
 3 │ }
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:6:5]
 5 │ function awaitNumber() {
 6 │     await 1;
   ·     ─────
 7 │ }
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:10:5]
  9 │ function awaitTrue() {
 10 │     await true;
    ·     ─────
 11 │ }
    ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:14:5]
 13 │ function awaitFalse() {
 14 │     await false;
    ·     ─────
 15 │ }
    ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:18:5]
 17 │ function awaitNull() {
 18 │     await null;
    ·     ─────
 19 │ }
    ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/compiler/awaitLiteralValues.ts:22:5]
 21 │ function awaitUndefined() {
 22 │     await undefined;
    ·     ─────
 23 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/badArrayIndex.ts:1:22]
 1 │ var results = number[];
   ·                      ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/badArraySyntax.ts:6:16]
 5 │ var a1: Z[] = [];
 6 │ var a2 = new Z[];
   ·                ─
 7 │ var a3 = new Z[]();
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/bases.ts:7:15]
 6 │     constructor() {
 7 │         this.y: any;
   ·               ▲
 8 │     }
   ╰────
  help: Try insert a semicolon here

  × Illegal break statement
   ╭─[typescript/tests/cases/compiler/breakNotInIterationOrSwitchStatement1.ts:1:1]
 1 │ break;
   · ──────
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal break statement
   ╭─[typescript/tests/cases/compiler/breakNotInIterationOrSwitchStatement2.ts:3:5]
 2 │   function f() {
 3 │     break;
   ·     ──────
 4 │   }
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/compiler/breakTarget5.ts:5:13]
 4 │     while (true) {
 5 │       break target;
   ·             ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/compiler/breakTarget6.ts:2:9]
 1 │ while (true) {
 2 │   break target;
   ·         ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/callExpressionWithMissingTypeArgument1.ts:1:7]
 1 │ Foo<a,,b>();
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/cannotInvokeNewOnErrorExpression.ts:5:22]
 4 │ }
 5 │ var t = new M.ClassA[];
   ·                      ─
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/compiler/castOfYield.ts:4:14]
 3 │     // Unlike await, yield is not allowed to appear in a simple unary expression.
 4 │     <number> yield 0;
   ·              ─────
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/castOfYield.ts:4:19]
 3 │     // Unlike await, yield is not allowed to appear in a simple unary expression.
 4 │     <number> yield 0;
   ·                   ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected `)` but found `=`
   ╭─[typescript/tests/cases/compiler/catchClauseWithInitializer1.ts:3:10]
 2 │ }
 3 │ catch (e = 1) {
   ·          ┬
   ·          ╰── `)` expected
 4 │ }
   ╰────

  × 'super' can only be referenced in a derived class.
    ╭─[typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing9.ts:12:1]
 11 │     /** @extends {Based} */
 12 │ ╭─▶ class Derived2 {
 13 │ │       constructor() {
 14 │ │           super();
    · │           ─────
 15 │ │       }
 16 │ ├─▶ }
    · ╰──── class does not have `extends`
    ╰────
  help: either remove this super, or extend the class

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/class2.ts:1:35]
 1 │ class foo { constructor() { static f = 3; } }
   ·                                   ▲
   ╰────
  help: Try insert a semicolon here

  × Identifier `Markup` has already been declared
   ╭─[typescript/tests/cases/compiler/classCannotExtendVar.ts:1:5]
 1 │ var Markup;
   ·     ───┬──
   ·        ╰── `Markup` has already been declared here
 2 │ 
 3 │ class Markup {
   ·       ───┬──
   ·          ╰── It can not be redeclared here
 4 │     constructor() {
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/classExpressionPropertyModifiers.ts:3:11]
 2 │     declare [Symbol.toStringTag] = "uh";
 3 │     export foo = 1;
   ·           ▲
 4 │ }
   ╰────
  help: Try insert a semicolon here

  × Classes can't have a field named 'constructor'
   ╭─[typescript/tests/cases/compiler/classFieldsBrokenConstructorEmitNoCrash1.ts:3:3]
 2 │   prop = 42;
 3 │   constructor
   ·   ───────────
 4 │ }
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/compiler/classHeritageWithTrailingSeparator.ts:3:2]
 2 │ class D extends C, {
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/classMemberWithMissingIdentifier.ts:2:12]
 1 │ class C { 
 2 │     public {};
   ·            ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/classMemberWithMissingIdentifier2.ts:2:12]
 1 │ class C { 
 2 │     public {[name:string]:VariableDeclaration};
   ·            ─
 3 │ }
   ╰────

  × Identifier `foo` has already been declared
   ╭─[typescript/tests/cases/compiler/classOverloadForFunction.ts:1:7]
 1 │ class foo { };
   ·       ─┬─
   ·        ╰── `foo` has already been declared here
 2 │ function foo() {}
   ·          ─┬─
   ·           ╰── It can not be redeclared here
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/classUpdateTests.ts:93:9]
 92 │     constructor() {
 93 │         public p1 = 0; // ERROR
    ·               ▲
 94 │     }
    ╰────
  help: Try insert a semicolon here

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/classWithDuplicateIdentifier.ts:2:5]
 1 │ class C {
 2 │     a(): number { return 0; } // error: duplicate identifier
   ·     ┬
   ·     ╰── `a` has already been declared here
 3 │     a: number;
   ·     ┬
   ·     ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/classWithDuplicateIdentifier.ts:6:5]
 5 │ class K {
 6 │     b: number; // error: duplicate identifier
   ·     ┬
   ·     ╰── `b` has already been declared here
 7 │     b(): number { return 0; }
   ·     ┬
   ·     ╰── It can not be redeclared here
 8 │ }
   ╰────

  × Identifier `c` has already been declared
    ╭─[typescript/tests/cases/compiler/classWithDuplicateIdentifier.ts:10:5]
  9 │ class D {
 10 │     c: number;
    ·     ┬
    ·     ╰── `c` has already been declared here
 11 │     c: string;
    ·     ┬
    ·     ╰── It can not be redeclared here
 12 │ }
    ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/classWithEmptyTypeParameter.ts:1:8]
 1 │ class C<> {
   ·        ──
 2 │ }
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:3:31]
 2 │ class c1 {
 3 │     constructor(i: number, ...arguments) { // error
   ·                               ─────────
 4 │         var arguments: any[]; // no error
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:4:13]
 3 │     constructor(i: number, ...arguments) { // error
 4 │         var arguments: any[]; // no error
   ·             ────────────────
 5 │     }
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:8:17]
 7 │ class c12 {
 8 │     constructor(arguments: number, ...rest) { // error
   ·                 ─────────────────
 9 │         var arguments = 10; // no error
   ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:9:13]
  8 │     constructor(arguments: number, ...rest) { // error
  9 │         var arguments = 10; // no error
    ·             ─────────
 10 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:13:17]
 12 │ class c1NoError {
 13 │     constructor(arguments: number) { // no error
    ·                 ─────────────────
 14 │         var arguments = 10; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:14:13]
 13 │     constructor(arguments: number) { // no error
 14 │         var arguments = 10; // no error
    ·             ─────────
 15 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:20:13]
 19 │     constructor(...restParameters) {
 20 │         var arguments = 10; // no error
    ·             ─────────
 21 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:25:13]
 24 │     constructor() {
 25 │         var arguments = 10; // no error
    ·             ─────────
 26 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:30:24]
 29 │ class c3 {
 30 │     constructor(public arguments: number, ...restParameters) { //arguments is error
    ·                        ─────────────────
 31 │         var arguments = 10; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:31:13]
 30 │     constructor(public arguments: number, ...restParameters) { //arguments is error
 31 │         var arguments = 10; // no error
    ·             ─────────
 32 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:35:24]
 34 │ class c3NoError {
 35 │     constructor(public arguments: number) { // no error
    ·                        ─────────────────
 36 │         var arguments = 10; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:36:13]
 35 │     constructor(public arguments: number) { // no error
 36 │         var arguments = 10; // no error
    ·             ─────────
 37 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:41:31]
 40 │ declare class c4 {
 41 │     constructor(i: number, ...arguments); // No error - no code gen
    ·                               ─────────
 42 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:44:17]
 43 │ declare class c42 {
 44 │     constructor(arguments: number, ...rest); // No error - no code gen
    ·                 ─────────────────
 45 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:47:17]
 46 │ declare class c4NoError {
 47 │     constructor(arguments: number);  // no error
    ·                 ─────────────────
 48 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:51:31]
 50 │ class c5 {
 51 │     constructor(i: number, ...arguments); // no codegen no error
    ·                               ─────────
 52 │     constructor(i: string, ...arguments); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:52:31]
 51 │     constructor(i: number, ...arguments); // no codegen no error
 52 │     constructor(i: string, ...arguments); // no codegen no error
    ·                               ─────────
 53 │     constructor(i: any, ...arguments) { // error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:53:28]
 52 │     constructor(i: string, ...arguments); // no codegen no error
 53 │     constructor(i: any, ...arguments) { // error
    ·                            ─────────
 54 │         var arguments: any[]; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:54:13]
 53 │     constructor(i: any, ...arguments) { // error
 54 │         var arguments: any[]; // no error
    ·             ────────────────
 55 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:59:17]
 58 │ class c52 {
 59 │     constructor(arguments: number, ...rest); // no codegen no error
    ·                 ─────────────────
 60 │     constructor(arguments: string, ...rest); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:60:17]
 59 │     constructor(arguments: number, ...rest); // no codegen no error
 60 │     constructor(arguments: string, ...rest); // no codegen no error
    ·                 ─────────────────
 61 │     constructor(arguments: any, ...rest) { // error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:61:17]
 60 │     constructor(arguments: string, ...rest); // no codegen no error
 61 │     constructor(arguments: any, ...rest) { // error
    ·                 ──────────────
 62 │         var arguments: any; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:62:13]
 61 │     constructor(arguments: any, ...rest) { // error
 62 │         var arguments: any; // no error
    ·             ──────────────
 63 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:67:17]
 66 │ class c5NoError {
 67 │     constructor(arguments: number); // no error
    ·                 ─────────────────
 68 │     constructor(arguments: string); // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:68:17]
 67 │     constructor(arguments: number); // no error
 68 │     constructor(arguments: string); // no error
    ·                 ─────────────────
 69 │     constructor(arguments: any) { // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:69:17]
 68 │     constructor(arguments: string); // no error
 69 │     constructor(arguments: any) { // no error
    ·                 ──────────────
 70 │         var arguments: any; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:70:13]
 69 │     constructor(arguments: any) { // no error
 70 │         var arguments: any; // no error
    ·             ──────────────
 71 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:75:31]
 74 │ declare class c6 {
 75 │     constructor(i: number, ...arguments); // no codegen no error
    ·                               ─────────
 76 │     constructor(i: string, ...arguments); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:76:31]
 75 │     constructor(i: number, ...arguments); // no codegen no error
 76 │     constructor(i: string, ...arguments); // no codegen no error
    ·                               ─────────
 77 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:79:17]
 78 │ declare class c62 {
 79 │     constructor(arguments: number, ...rest); // no codegen no error
    ·                 ─────────────────
 80 │     constructor(arguments: string, ...rest); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:80:17]
 79 │     constructor(arguments: number, ...rest); // no codegen no error
 80 │     constructor(arguments: string, ...rest); // no codegen no error
    ·                 ─────────────────
 81 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:84:17]
 83 │ declare class c6NoError {
 84 │     constructor(arguments: number); // no error
    ·                 ─────────────────
 85 │     constructor(arguments: string); // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassConstructor.ts:85:17]
 84 │     constructor(arguments: number); // no error
 85 │     constructor(arguments: string); // no error
    ·                 ─────────────────
 86 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:2:30]
 1 │ class c1 {
 2 │     public foo(i: number, ...arguments) { //arguments is error
   ·                              ─────────
 3 │         var arguments: any[]; // no error
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:3:13]
 2 │     public foo(i: number, ...arguments) { //arguments is error
 3 │         var arguments: any[]; // no error
   ·             ────────────────
 4 │     }
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:5:17]
 4 │     }
 5 │     public foo1(arguments: number, ...rest) { //arguments is error
   ·                 ─────────────────
 6 │         var arguments = 10; // no error
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:6:13]
 5 │     public foo1(arguments: number, ...rest) { //arguments is error
 6 │         var arguments = 10; // no error
   ·             ─────────
 7 │     }
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:8:23]
 7 │     }
 8 │     public fooNoError(arguments: number) { // no error
   ·                       ─────────────────
 9 │         var arguments = 10; // no error
   ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:9:13]
  8 │     public fooNoError(arguments: number) { // no error
  9 │         var arguments = 10; // no error
    ·             ─────────
 10 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:11:29]
 10 │     }
 11 │     public f4(i: number, ...arguments); // no codegen no error
    ·                             ─────────
 12 │     public f4(i: string, ...arguments); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:12:29]
 11 │     public f4(i: number, ...arguments); // no codegen no error
 12 │     public f4(i: string, ...arguments); // no codegen no error
    ·                             ─────────
 13 │     public f4(i: any, ...arguments) { // error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:13:26]
 12 │     public f4(i: string, ...arguments); // no codegen no error
 13 │     public f4(i: any, ...arguments) { // error
    ·                          ─────────
 14 │         var arguments: any[]; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:14:13]
 13 │     public f4(i: any, ...arguments) { // error
 14 │         var arguments: any[]; // no error
    ·             ────────────────
 15 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:16:16]
 15 │     }
 16 │     public f41(arguments: number, ...rest); // no codegen no error
    ·                ─────────────────
 17 │     public f41(arguments: string, ...rest); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:17:16]
 16 │     public f41(arguments: number, ...rest); // no codegen no error
 17 │     public f41(arguments: string, ...rest); // no codegen no error
    ·                ─────────────────
 18 │     public f41(arguments: any, ...rest) { // error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:18:16]
 17 │     public f41(arguments: string, ...rest); // no codegen no error
 18 │     public f41(arguments: any, ...rest) { // error
    ·                ──────────────
 19 │         var arguments: any; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:19:13]
 18 │     public f41(arguments: any, ...rest) { // error
 19 │         var arguments: any; // no error
    ·             ──────────────
 20 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:21:22]
 20 │     }
 21 │     public f4NoError(arguments: number); // no error
    ·                      ─────────────────
 22 │     public f4NoError(arguments: string); // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:22:22]
 21 │     public f4NoError(arguments: number); // no error
 22 │     public f4NoError(arguments: string); // no error
    ·                      ─────────────────
 23 │     public f4NoError(arguments: any) { // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:23:22]
 22 │     public f4NoError(arguments: string); // no error
 23 │     public f4NoError(arguments: any) { // no error
    ·                      ──────────────
 24 │         var arguments: any; // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:24:13]
 23 │     public f4NoError(arguments: any) { // no error
 24 │         var arguments: any; // no error
    ·             ──────────────
 25 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:29:30]
 28 │ declare class c2 {
 29 │     public foo(i: number, ...arguments); // No error - no code gen
    ·                              ─────────
 30 │     public foo1(arguments: number, ...rest); // No error - no code gen
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:30:17]
 29 │     public foo(i: number, ...arguments); // No error - no code gen
 30 │     public foo1(arguments: number, ...rest); // No error - no code gen
    ·                 ─────────────────
 31 │     public fooNoError(arguments: number); // No error - no code gen
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:31:23]
 30 │     public foo1(arguments: number, ...rest); // No error - no code gen
 31 │     public fooNoError(arguments: number); // No error - no code gen
    ·                       ─────────────────
 32 │ 
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:33:29]
 32 │ 
 33 │     public f4(i: number, ...arguments); // no codegen no error
    ·                             ─────────
 34 │     public f4(i: string, ...arguments); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:34:29]
 33 │     public f4(i: number, ...arguments); // no codegen no error
 34 │     public f4(i: string, ...arguments); // no codegen no error
    ·                             ─────────
 35 │     public f41(arguments: number, ...rest); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:35:16]
 34 │     public f4(i: string, ...arguments); // no codegen no error
 35 │     public f41(arguments: number, ...rest); // no codegen no error
    ·                ─────────────────
 36 │     public f41(arguments: string, ...rest); // no codegen no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:36:16]
 35 │     public f41(arguments: number, ...rest); // no codegen no error
 36 │     public f41(arguments: string, ...rest); // no codegen no error
    ·                ─────────────────
 37 │     public f4NoError(arguments: number); // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:37:22]
 36 │     public f41(arguments: string, ...rest); // no codegen no error
 37 │     public f4NoError(arguments: number); // no error
    ·                      ─────────────────
 38 │     public f4NoError(arguments: string); // no error
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:38:22]
 37 │     public f4NoError(arguments: number); // no error
 38 │     public f4NoError(arguments: string); // no error
    ·                      ─────────────────
 39 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:43:13]
 42 │     public foo(...restParameters) {
 43 │         var arguments = 10; // no error
    ·             ─────────
 44 │     }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/collisionArgumentsClassMethod.ts:46:13]
 45 │     public fooNoError() {
 46 │         var arguments = 10; // no error
    ·             ─────────
 47 │     }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/commonMissingSemicolons.ts:2:6]
 1 │ async function myAsyncFunction1() {}
 2 │ asynd function myAsyncFunction2() {}
   ·      ▲
 3 │ sasync function myAsyncFunction3() {}
   ╰────
  help: Try insert a semicolon here

  × A 'get' accessor must not have any formal parameters.
    ╭─[typescript/tests/cases/compiler/complicatedPrivacy.ts:11:26]
 10 │         export class C2 implements m3.i3 {
 11 │             public get p1(arg) {
    ·                          ─────
 12 │                 return new C1();
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerDiff3Trivia1.ts:2:1]
 1 │ class C {
 2 │ <<<<<<< HEAD
   · ──
 3 │     v = 1;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerDiff3Trivia2.ts:3:1]
 2 │   foo() {
 3 │ <<<<<<< B
   · ──
 4 │      a();
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerTrivia1.ts:2:1]
 1 │ class C {
 2 │ <<<<<<< HEAD
   · ──
 3 │     v = 1;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerTrivia2.ts:3:1]
 2 │   foo() {
 3 │ <<<<<<< B
   · ──
 4 │      a();
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerTrivia3.tsx:2:1]
 1 │ const x = <div>
 2 │ <<<<<<< HEAD
   · ──
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/conflictMarkerTrivia4.ts:2:1]
 1 │ const x = <div>
 2 │ <<<<<<< HEAD
   · ──
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/constDeclarationShadowedByVarDeclaration.ts:4:11]
 3 │ {
 4 │     const x = 0;
   ·           ┬
   ·           ╰── `x` has already been declared here
 5 │ 
 6 │     var x = 0;
   ·         ┬
   ·         ╰── It can not be redeclared here
 7 │ }
   ╰────

  × Identifier `y` has already been declared
    ╭─[typescript/tests/cases/compiler/constDeclarationShadowedByVarDeclaration.ts:12:11]
 11 │ {
 12 │     const y = 0;
    ·           ┬
    ·           ╰── `y` has already been declared here
 13 │     {
 14 │         var y = 0;
    ·             ┬
    ·             ╰── It can not be redeclared here
 15 │     }
    ╰────

  × Identifier `z` has already been declared
    ╭─[typescript/tests/cases/compiler/constDeclarationShadowedByVarDeclaration.ts:20:9]
 19 │ {
 20 │   const z = 0;
    ·         ┬
    ·         ╰── `z` has already been declared here
 21 │   var z = 0
    ·       ┬
    ·       ╰── It can not be redeclared here
 22 │ }
    ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:2:7]
 1 │ // error, missing intialicer
 2 │ const c1;
   ·       ──
 3 │ const c2: number;
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:3:7]
 2 │ const c1;
 3 │ const c2: number;
   ·       ──────────
 4 │ const c3, c4, c5 :string, c6;  // error, missing initialicer
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:4:7]
 3 │ const c2: number;
 4 │ const c3, c4, c5 :string, c6;  // error, missing initialicer
   ·       ──
 5 │ 
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:4:11]
 3 │ const c2: number;
 4 │ const c3, c4, c5 :string, c6;  // error, missing initialicer
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:4:15]
 3 │ const c2: number;
 4 │ const c3, c4, c5 :string, c6;  // error, missing initialicer
   ·               ──────────
 5 │ 
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/constDeclarations-errors.ts:4:27]
 3 │ const c2: number;
 4 │ const c3, c4, c5 :string, c6;  // error, missing initialicer
   ·                           ──
 5 │ 
   ╰────

  × Lexical declaration cannot appear in a single-statement context
   ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:3:5]
 2 │ if (true) 
 3 │     const c1 = 0;
   ·     ─────────────
 4 │ else 
   ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
   ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:5:5]
 4 │ else 
 5 │     const c2 = 0;
   ·     ─────────────
 6 │ 
   ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
   ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:8:5]
 7 │ while (true) 
 8 │     const c3 = 0;
   ·     ─────────────
 9 │ 
   ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:11:5]
 10 │ do 
 11 │     const c4 = 0;
    ·     ─────────────
 12 │ while (true);
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:16:5]
 15 │ with (obj) 
 16 │     const c5 = 0;  // No  Error will be reported here since we turn off all type checking
    ·     ─────────────
 17 │ 
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:19:5]
 18 │ for (var i = 0; i < 10; i++)
 19 │     const c6 = 0;
    ·     ─────────────
 20 │ 
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:22:5]
 21 │ for (var i2 in {}) 
 22 │     const c7 = 0;
    ·     ─────────────
 23 │ 
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:25:12]
 24 │ if (true) 
 25 │     label: const c8 = 0;
    ·            ─────────────
 26 │ 
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:28:29]
 27 │ while (false)
 28 │     label2: label3: label4: const c9 = 0;
    ·                             ─────────────
 29 │ 
    ╰────
  help: Wrap this declaration in a block statement

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/constDeclarations-invalidContexts.ts:15:1]
 14 │ var obj;
 15 │ with (obj) 
    · ────
 16 │     const c5 = 0;  // No  Error will be reported here since we turn off all type checking
    ╰────

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-scopes.ts:43:12]
 42 │ if (true) {
 43 │     label: const c = 0;
    ·            ────────────
 44 │     n = c;
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-scopes.ts:48:29]
 47 │ while (false) {
 48 │     label2: label3: label4: const c = 0;
    ·                             ────────────
 49 │     n = c;
    ╰────
  help: Wrap this declaration in a block statement

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/constDeclarations-scopes.ts:27:1]
 26 │ var obj;
 27 │ with (obj) {
    · ────
 28 │     const c = 0;
    ╰────

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-validContexts.ts:31:12]
 30 │ if (true) {
 31 │     label: const c8 = 0;
    ·            ─────────────
 32 │ }
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-validContexts.ts:35:29]
 34 │ while (false) {
 35 │     label2: label3: label4: const c9 = 0;
    ·                             ─────────────
 36 │ }
    ╰────
  help: Wrap this declaration in a block statement

  × Lexical declaration cannot appear in a single-statement context
    ╭─[typescript/tests/cases/compiler/constDeclarations-validContexts.ts:64:18]
 63 │         const c16 = 0
 64 │         label17: const c17 = 0;
    ·                  ──────────────
 65 │     }
    ╰────
  help: Wrap this declaration in a block statement

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/constDeclarations-validContexts.ts:18:1]
 17 │ var obj;
 18 │ with (obj) {
    · ────
 19 │     const c5 = 0;
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/constInClassExpression.ts:2:10]
 1 │ let C = class {
 2 │     const a = 4;
   ·          ▲
 3 │ };
   ╰────
  help: Try insert a semicolon here

  × TS(1090): 'static' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/compiler/constructorArgsErrors1.ts:2:18]
 1 │ class foo {
 2 │     constructor (static a: number) {
   ·                  ──────
 3 │     }
   ╰────

  × TS(1090): 'static' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/compiler/constructorArgsErrors2.ts:2:25]
 1 │ class foo {
 2 │     constructor (public static a: number) {
   ·                         ──────
 3 │     }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/constructorArgsErrors5.ts:2:18]
 1 │ class foo {
 2 │     constructor (export a: number) {
   ·                  ──────
 3 │     }
   ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/compiler/constructorOverloads1.ts:4:5]
 3 │     constructor(n: number);
 4 │     constructor(x: any) {
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 5 │ 
 6 │     }
 7 │     constructor(x: any) {
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 8 │ 
   ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/compiler/constructorOverloads8.ts:2:5]
 1 │ class C {
 2 │     constructor(x) { }
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 3 │     constructor(y, x) { } // illegal, 2 constructor implementations
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 4 │ }
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/constructorStaticParamName.ts:4:18]
 3 │ class test {
 4 │     constructor (static) { }
   ·                  ──────
 5 │ }
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/constructorStaticParamNameErrors.ts:4:18]
 3 │ class test {
 4 │     constructor (static) { }
   ·                  ──────
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/constructorWithIncompleteTypeAnnotation.ts:11:19]
 10 │ 
 11 │ import fs = module("fs");
    ·                   ▲
 12 │ 
    ╰────
  help: Try insert a semicolon here

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/compiler/continueNotInIterationStatement1.ts:1:1]
 1 │ continue;
   · ─────────
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/compiler/continueNotInIterationStatement2.ts:3:5]
 2 │   function f() {
 3 │     continue;
   ·     ─────────
 4 │   }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/compiler/continueNotInIterationStatement3.ts:3:5]
 2 │   default:
 3 │     continue;
   ·     ─────────
 4 │ }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × A `continue` statement can only jump to a label of an enclosing `for`, `while` or `do while` statement.
   ╭─[typescript/tests/cases/compiler/continueTarget1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── This is an non-iteration statement
 2 │   continue target;
   ·            ───┬──
   ·               ╰── for this label
   ╰────

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/compiler/continueTarget5.ts:5:16]
 4 │     while (true) {
 5 │       continue target;
   ·                ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/compiler/continueTarget6.ts:2:12]
 1 │ while (true) {
 2 │   continue target;
   ·            ──────
 3 │ }
   ╰────

  × Classes can't have a field named 'constructor'
     ╭─[typescript/tests/cases/compiler/convertKeywordsYes.ts:175:12]
 174 │ class bigClass {
 175 │     public "constructor" = 0;
     ·            ─────────────
 176 │     public any = 0;
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/compiler/convertKeywordsYes.ts:292:22]
 291 │     class constructor { }
 292 │     class implements { }
     ·                      ─
 293 │     class interface { }
     ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/createArray.ts:1:19]
 1 │ var na=new number[];
   ·                   ─
 2 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/declarationEmitInvalidExport.ts:5:1]
 4 │ export type MyClass = typeof myClass;
 5 │ }
   · ─
   ╰────

  × Expected `from` but found `Identifier`
   ╭─[typescript/tests/cases/compiler/declarationEmitUnknownImport2.ts:1:12]
 1 │ import Foo From './Foo'; // Syntax error
   ·            ──┬─
   ·              ╰── `from` expected
 2 │ export default Foo
   ╰────

  × TS(1030): declare' modifier already seen.
   ╭─[typescript/tests/cases/compiler/declareAlreadySeen.ts:2:13]
 1 │ module M {
 2 │     declare declare var x;
   ·             ───────
 3 │     declare declare function f();
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): declare' modifier already seen.
   ╭─[typescript/tests/cases/compiler/declareAlreadySeen.ts:3:13]
 2 │     declare declare var x;
 3 │     declare declare function f();
   ·             ───────
 4 │ 
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): declare' modifier already seen.
   ╭─[typescript/tests/cases/compiler/declareAlreadySeen.ts:5:13]
 4 │ 
 5 │     declare declare module N { }  
   ·             ───────
 6 │ 
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): declare' modifier already seen.
   ╭─[typescript/tests/cases/compiler/declareAlreadySeen.ts:7:13]
 6 │ 
 7 │     declare declare class C { }
   ·             ───────
 8 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/compiler/decoratorInJsFile.ts:3:10]
 2 │ class SomeClass {
 3 │     foo(x: number) {
   ·          ┬
   ·          ╰── `,` expected
 4 │ 
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/compiler/decoratorInJsFile1.ts:3:10]
 2 │ class SomeClass {
 3 │     foo(x: number) {
   ·          ┬
   ·          ╰── `,` expected
 4 │ 
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/compiler/decrementAndIncrementOperators.ts:4:1]
 3 │ // errors
 4 │ 1 ++;
   · ─
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/defaultKeywordWithoutExport1.ts:4:1]
 3 │ @decorator
 4 │ default class {}
   · ───────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/defaultKeywordWithoutExport2.ts:1:1]
 1 │ default function () {
   · ───────
 2 │ 
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/compiler/deleteOperatorInStrictMode.ts:3:8]
 2 │ var a;
 3 │ delete a;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/destructionAssignmentError.ts:6:10]
 5 │ ({ a, b } = fn());
 6 │ { a, b } = fn();
   ·          ─
 7 │ 
   ╰────

  × Expected `=>` but found `.`
    ╭─[typescript/tests/cases/compiler/destructuringControlFlowNoCrash.ts:11:28]
 10 │   date2,
 11 │ } = (inspectedElement: any).props;
    ·                            ┬
    ·                            ╰── `=>` expected
 12 │ 
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/dontShowCompilerGeneratedMembers.ts:3:6]
 2 │     x: number;
 3 │     <-
   ·      ─
 4 │ };
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/dottedModuleName.ts:3:29]
 2 │     export module N {
 3 │     export function f(x:number)=>2*x;
   ·                                ▲
 4 │     export module X.Y.Z {
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/downlevelLetConst1.ts:1:6]
 1 │ const
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/downlevelLetConst11.ts:2:4]
 1 │ "use strict";
 2 │ let
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/downlevelLetConst2.ts:1:7]
 1 │ const a
   ·       ─
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/compiler/downlevelLetConst4.ts:1:7]
 1 │ const a: number
   ·       ─────────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/downlevelLetConst6.ts:1:4]
 1 │ let
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:2:12]
 1 │ class a {
 2 │     public a;
   ·            ┬
   ·            ╰── `a` has already been declared here
 3 │     public a;
   ·            ┬
   ·            ╰── It can not be redeclared here
 4 │     public b() {
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:4:12]
 3 │     public a;
 4 │     public b() {
   ·            ┬
   ·            ╰── `b` has already been declared here
 5 │     }
 6 │     public b() {
   ·            ┬
   ·            ╰── It can not be redeclared here
 7 │     }
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:8:12]
  7 │     }
  8 │     public x;
    ·            ┬
    ·            ╰── `x` has already been declared here
  9 │     get x() {
    ·         ┬
    ·         ╰── It can not be redeclared here
 10 │         return 10;
    ╰────

  × Identifier `z` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:21:12]
 20 │ 
 21 │     public z() {
    ·            ┬
    ·            ╰── `z` has already been declared here
 22 │     }
 23 │     get z() {
    ·         ┬
    ·         ╰── It can not be redeclared here
 24 │         return "Hello";
    ╰────

  × Identifier `x2` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:32:9]
 31 │     }
 32 │     set x2(_x: number) {
    ·         ─┬
    ·          ╰── `x2` has already been declared here
 33 │     }
 34 │     public x2;
    ·            ─┬
    ·             ╰── It can not be redeclared here
 35 │ 
    ╰────

  × Identifier `z2` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateClassElements.ts:39:9]
 38 │     }
 39 │     set z2(_y: string) {
    ·         ─┬
    ·          ╰── `z2` has already been declared here
 40 │     }
 41 │     public z2() {
    ·            ─┬
    ·             ╰── It can not be redeclared here
 42 │     }
    ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:1:13]
 1 │ function f0(a, [a, [b]], {b}) { }
   ·             ┬   ┬
   ·             │   ╰── It can not be redeclared here
   ·             ╰── `a` has already been declared here
 2 │ function f1([a, a]) { }
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:1:21]
 1 │ function f0(a, [a, [b]], {b}) { }
   ·                     ┬     ┬
   ·                     │     ╰── It can not be redeclared here
   ·                     ╰── `b` has already been declared here
 2 │ function f1([a, a]) { }
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:2:14]
 1 │ function f0(a, [a, [b]], {b}) { }
 2 │ function f1([a, a]) { }
   ·              ┬  ┬
   ·              │  ╰── It can not be redeclared here
   ·              ╰── `a` has already been declared here
 3 │ function f2({b}, {b}) { }
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:3:14]
 2 │ function f1([a, a]) { }
 3 │ function f2({b}, {b}) { }
   ·              ┬    ┬
   ·              │    ╰── It can not be redeclared here
   ·              ╰── `b` has already been declared here
 4 │ function f3([c,[c],[[c]]]) { }
   ╰────

  × Identifier `c` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:4:14]
 3 │ function f2({b}, {b}) { }
 4 │ function f3([c,[c],[[c]]]) { }
   ·              ┬  ┬
   ·              │  ╰── It can not be redeclared here
   ·              ╰── `c` has already been declared here
 5 │ function f4({d, d:{d}}) { }
   ╰────

  × Identifier `c` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:4:14]
 3 │ function f2({b}, {b}) { }
 4 │ function f3([c,[c],[[c]]]) { }
   ·              ┬       ┬
   ·              │       ╰── It can not be redeclared here
   ·              ╰── `c` has already been declared here
 5 │ function f4({d, d:{d}}) { }
   ╰────

  × Identifier `d` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:5:14]
 4 │ function f3([c,[c],[[c]]]) { }
 5 │ function f4({d, d:{d}}) { }
   ·              ┬     ┬
   ·              │     ╰── It can not be redeclared here
   ·              ╰── `d` has already been declared here
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:6:14]
 5 │ function f4({d, d:{d}}) { }
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ·              ┬      ┬
   ·              │      ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 7 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:6:14]
 5 │ function f4({d, d:{d}}) { }
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ·              ┬            ┬
   ·              │            ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 7 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:6:14]
 5 │ function f4({d, d:{d}}) { }
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ·              ┬                   ┬
   ·              │                   ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 7 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:6:14]
 5 │ function f4({d, d:{d}}) { }
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ·              ┬                        ┬
   ·              │                        ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 7 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:6:14]
 5 │ function f4({d, d:{d}}) { }
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
   ·              ┬                                 ┬
   ·              │                                 ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 7 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `f` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration1.ts:7:14]
 6 │ function f5({e, e: {e}}, {e}, [d,e, [[e]]], ...e) { }
 7 │ function f6([f, ...f]) { }
   ·              ┬     ┬
   ·              │     ╰── It can not be redeclared here
   ·              ╰── `f` has already been declared here
 8 │ function f7(a, func = (a) => { return 1 }) { }  // not error
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:2:13]
 1 │ "use strict"
 2 │ function f0(a, [a, [b]], {b}) { }
   ·             ┬   ┬
   ·             │   ╰── It can not be redeclared here
   ·             ╰── `a` has already been declared here
 3 │ function f1([a, a]) { }
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:2:21]
 1 │ "use strict"
 2 │ function f0(a, [a, [b]], {b}) { }
   ·                     ┬     ┬
   ·                     │     ╰── It can not be redeclared here
   ·                     ╰── `b` has already been declared here
 3 │ function f1([a, a]) { }
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:3:14]
 2 │ function f0(a, [a, [b]], {b}) { }
 3 │ function f1([a, a]) { }
   ·              ┬  ┬
   ·              │  ╰── It can not be redeclared here
   ·              ╰── `a` has already been declared here
 4 │ function f2({b}, {b}) { }
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:4:14]
 3 │ function f1([a, a]) { }
 4 │ function f2({b}, {b}) { }
   ·              ┬    ┬
   ·              │    ╰── It can not be redeclared here
   ·              ╰── `b` has already been declared here
 5 │ function f3([c, [c], [[c]]]) { }
   ╰────

  × Identifier `c` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:5:14]
 4 │ function f2({b}, {b}) { }
 5 │ function f3([c, [c], [[c]]]) { }
   ·              ┬   ┬
   ·              │   ╰── It can not be redeclared here
   ·              ╰── `c` has already been declared here
 6 │ function f4({d, d: {d}}) { }
   ╰────

  × Identifier `c` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:5:14]
 4 │ function f2({b}, {b}) { }
 5 │ function f3([c, [c], [[c]]]) { }
   ·              ┬         ┬
   ·              │         ╰── It can not be redeclared here
   ·              ╰── `c` has already been declared here
 6 │ function f4({d, d: {d}}) { }
   ╰────

  × Identifier `d` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:6:14]
 5 │ function f3([c, [c], [[c]]]) { }
 6 │ function f4({d, d: {d}}) { }
   ·              ┬      ┬
   ·              │      ╰── It can not be redeclared here
   ·              ╰── `d` has already been declared here
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:7:14]
 6 │ function f4({d, d: {d}}) { }
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ·              ┬      ┬
   ·              │      ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 8 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:7:14]
 6 │ function f4({d, d: {d}}) { }
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ·              ┬            ┬
   ·              │            ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 8 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:7:14]
 6 │ function f4({d, d: {d}}) { }
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ·              ┬                    ┬
   ·              │                    ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 8 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:7:14]
 6 │ function f4({d, d: {d}}) { }
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ·              ┬                         ┬
   ·              │                         ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 8 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:7:14]
 6 │ function f4({d, d: {d}}) { }
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
   ·              ┬                                  ┬
   ·              │                                  ╰── It can not be redeclared here
   ·              ╰── `e` has already been declared here
 8 │ function f6([f, ...f]) { }
   ╰────

  × Identifier `f` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierBindingElementInParameterDeclaration2.ts:8:14]
 7 │ function f5({e, e: {e}}, {e}, [d, e, [[e]]], ...e) { }
 8 │ function f6([f, ...f]) { }
   ·              ┬     ┬
   ·              │     ╰── It can not be redeclared here
   ·              ╰── `f` has already been declared here
 9 │ function f7(a, func = (a) => { return 1 }){ }  // not error
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierComputedName.ts:2:6]
 1 │ class C {
 2 │     ["a"]: string;
   ·      ─┬─
   ·       ╰── `a` has already been declared here
 3 │     ["a"]: string;
   ·      ─┬─
   ·       ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `3` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierDifferentSpelling.ts:2:3]
 1 │ class A {
 2 │   0b11 = '';
   ·   ──┬─
   ·     ╰── `3` has already been declared here
 3 │   3 = '';
   ·   ┬
   ·   ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `A` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateIdentifierEnum.ts:2:6]
 1 │ // Test the error message when attempting to merge an enum with a class, an interface, or a function.
 2 │ enum A {
   ·      ┬
   ·      ╰── `A` has already been declared here
 3 │     bar
 4 │ }
 5 │ class A {
   ·       ┬
   ·       ╰── It can not be redeclared here
 6 │     foo: number;
   ╰────

  × Identifier `B` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateIdentifierEnum.ts:9:11]
  8 │ 
  9 │ interface B {
    ·           ┬
    ·           ╰── `B` has already been declared here
 10 │     foo: number;
 11 │ }
 12 │ const enum B {
    ·            ┬
    ·            ╰── It can not be redeclared here
 13 │     bar
    ╰────

  × Identifier `C` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateIdentifierEnum.ts:16:12]
 15 │ 
 16 │ const enum C {
    ·            ┬
    ·            ╰── `C` has already been declared here
 17 │ 
 18 │ }
 19 │ function C() {
    ·          ┬
    ·          ╰── It can not be redeclared here
 20 │     return 0;
    ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateLabel1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ target:
   · ───┬──
   ·    ╰── It can not be redeclared here
 3 │ while (true) {
   ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/compiler/duplicateLabel2.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ while (true) {
 3 │   target:
   ·   ───┬──
   ·      ╰── It can not be redeclared here
 4 │   while (true) {
   ╰────

  × Identifier `F` has already been declared
    ╭─[typescript/tests/cases/compiler/duplicateSymbolsExportMatching.ts:49:12]
 48 │ module M {
 49 │     module F {
    ·            ┬
    ·            ╰── `F` has already been declared here
 50 │         var t;
 51 │     }
 52 │     export function F() { } // Only one error for duplicate identifier (don't consider visibility)
    ·                     ┬
    ·                     ╰── It can not be redeclared here
 53 │ }
    ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/compiler/emptyMemberAccess.ts:3:4]
 2 │ 
 3 │    ().toString();
   ·    ──
 4 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/enumConflictsWithGlobalIdentifier.ts:5:4]
 4 │ var x = IgnoreRulesSpecific.
 5 │ var y = Position.IgnoreRulesSpecific;
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Identifier `X` has already been declared
   ╭─[typescript/tests/cases/compiler/enumGenericTypeClash.ts:1:7]
 1 │ class X<A,B,C> { }
   ·       ┬
   ·       ╰── `X` has already been declared here
 2 │ enum X { MyVal }
   ·      ┬
   ·      ╰── It can not be redeclared here
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/compiler/enumIdentifierLiterals.ts:2:5]
 1 │ enum Nums {
 2 │     1.0,
   ·     ───
 3 │     11e-1,
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/compiler/enumIdentifierLiterals.ts:3:5]
 2 │     1.0,
 3 │     11e-1,
   ·     ─────
 4 │     0.12e1,
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/compiler/enumIdentifierLiterals.ts:4:5]
 3 │     11e-1,
 4 │     0.12e1,
   ·     ──────
 5 │     "13e-1",
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/compiler/enumIdentifierLiterals.ts:6:5]
 5 │     "13e-1",
 6 │     0xF00D
   ·     ──────
 7 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/enumMemberResolution.ts:5:4]
 4 │ var x = IgnoreRulesSpecific. // error
 5 │ var y = 1;
   ·    ▲
 6 │ var z = Position2.IgnoreRulesSpecific; // no error
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `}`
   ╭─[typescript/tests/cases/compiler/enumWithParenthesizedInitializer1.ts:3:1]
 2 │  e = -(3
 3 │ }
   · ┬
   · ╰── `,` expected
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/errorForUsingPropertyOfTypeAsType01.ts:44:24]
 43 │ 
 44 │ import lol = Test5.Foo.
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/errorOnInitializerInInterfaceProperty.ts:2:17]
 1 │ interface Foo {
 2 │     bar: number = 5;
   ·                 ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/errorOnInitializerInObjectTypeLiteralProperty.ts:2:17]
 1 │ var Foo: {
 2 │     bar: number = 5;
   ·                 ─
 3 │ };
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/compiler/errorRecoveryInClassDeclaration.ts:4:20]
 3 │         var v = foo(
 4 │             public blaz() {}
   ·                    ──┬─
   ·                      ╰── `,` expected
 5 │             );
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/errorRecoveryWithDotFollowedByNamespaceKeyword.ts:7:18]
 6 │ 
 7 │         namespace B {
   ·                  ▲
 8 │             export function baz() { }
   ╰────
  help: Try insert a semicolon here

  × Expected `<` but found `EOF`
    ╭─[typescript/tests/cases/compiler/errorSpanForUnclosedJsxTag.tsx:11:23]
 10 │ 
 11 │ let y = <   Baz >Hello
    ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/es5-asyncFunctionWithStatements.ts:4:5]
 3 │ async function withStatement0() {
 4 │     with (x) {
   ·     ────
 5 │         y;
   ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/es5-asyncFunctionWithStatements.ts:10:5]
  9 │ async function withStatement1() {
 10 │     with (await x) {
    ·     ────
 11 │         y;
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/es5-asyncFunctionWithStatements.ts:16:5]
 15 │ async function withStatement2() {
 16 │     with (x) {
    ·     ────
 17 │         a;
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/es5-asyncFunctionWithStatements.ts:25:9]
 24 │     with (x) {
 25 │         with (z) {
    ·         ────
 26 │             a;
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/es5-asyncFunctionWithStatements.ts:24:5]
 23 │ async function withStatement3() {
 24 │     with (x) {
    ·     ────
 25 │         with (z) {
    ╰────

  × Expected `{` but found `(`
   ╭─[typescript/tests/cases/compiler/es6ClassTest9.ts:1:18]
 1 │ declare class foo();
   ·                  ┬
   ·                  ╰── `{` expected
 2 │ function foo() {}
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/es6ImportNamedImportIdentifiersParsing.ts:2:10]
 1 │ import { yield } from "somemodule"; // Allowed
 2 │ import { default } from "somemodule"; // Error - as this is keyword that is not allowed as identifier
   ·          ───────
 3 │ import { yield as default } from "somemodule"; // error to use default as binding name
   ╰────

  × Expected `from` but found `decimal`
   ╭─[typescript/tests/cases/compiler/es6ImportParseErrors.ts:1:8]
 1 │ import 10;
   ·        ─┬
   ·         ╰── `from` expected
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:2:12]
 1 │ module M {
 2 │     export export var x = 1;
   ·            ──────
 3 │     export export function f() { }
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:3:12]
 2 │     export export var x = 1;
 3 │     export export function f() { }
   ·            ──────
 4 │ 
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:6:16]
 5 │     export export module N {
 6 │         export export class C { }
   ·                ──────
 7 │         export export interface I { }
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:7:16]
 6 │         export export class C { }
 7 │         export export interface I { }
   ·                ──────
 8 │     }  
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:5:12]
 4 │ 
 5 │     export export module N {
   ·            ──────
 6 │         export export class C { }
   ╰────

  × 'export' modifier cannot be used here.
    ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:12:12]
 11 │ declare module A {
 12 │     export export var x;
    ·            ──────
 13 │     export export function f()
    ╰────

  × 'export' modifier cannot be used here.
    ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:13:12]
 12 │     export export var x;
 13 │     export export function f()
    ·            ──────
 14 │ 
    ╰────

  × 'export' modifier cannot be used here.
    ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:16:16]
 15 │     export export module N {
 16 │         export export class C { }
    ·                ──────
 17 │         export export interface I { }
    ╰────

  × 'export' modifier cannot be used here.
    ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:17:16]
 16 │         export export class C { }
 17 │         export export interface I { }
    ·                ──────
 18 │     }
    ╰────

  × 'export' modifier cannot be used here.
    ╭─[typescript/tests/cases/compiler/exportAlreadySeen.ts:15:12]
 14 │ 
 15 │     export export module N {
    ·            ──────
 16 │         export export class C { }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/exportAssignmentWithDeclareAndExportModifiers.ts:2:16]
 1 │ var x;
 2 │ export declare export = x;
   ·                ──────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/exportAssignmentWithDeclareModifier.ts:2:9]
 1 │ var x;
 2 │ declare export = x;
   ·         ──────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/exportAssignmentWithExportModifier.ts:2:8]
 1 │ var x;
 2 │ export export = x;
   ·        ──────
   ╰────

  × A class name is required.
   ╭─[typescript/tests/cases/compiler/exportClassWithoutName.ts:1:8]
 1 │ export class {
   ·        ─────
 2 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/exportDeclarationInInternalModule.ts:13:19]
 12 │ 
 13 │     export * from Aaa;      // this line causes the nullref
    ·                   ───
 14 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/compiler/exportDefaultAsyncFunction2.ts:2:17]
 1 │ export function async<T>(...args: any[]): any { }
 2 │ export function await(...args: any[]): any { }
   ·                 ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/compiler/exportDefaultAsyncFunction2.ts:2:17]
 1 │ export function async<T>(...args: any[]): any { }
 2 │ export function await(...args: any[]): any { }
   ·                 ─────
   ╰────

  × Identifier `someProp` has already been declared
   ╭─[typescript/tests/cases/compiler/exportEqualsClassRedeclarationError.ts:6:16]
 5 │ 
 6 │     static set someProp(value: number) {}
   ·                ────┬───
   ·                    ╰── `someProp` has already been declared here
 7 │     static set someProp(value: number) {}
   ·                ────┬───
   ·                    ╰── It can not be redeclared here
 8 │ }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/exportInFunction.ts:2:16]
 1 │ function f() {
 2 │     export = 0;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/expressionTypeNodeShouldError.ts:1:23]
 1 │ declare const x: "foo".charCodeAt(0);
   ·                       ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/expressionWithJSDocTypeArguments.ts:9:21]
  8 │ 
  9 │ const WhatFoo = foo<?>;
    ·                     ─
 10 │ const HuhFoo = foo<string?>;
    ╰────

  × await expression not allowed in formal parameter
   ╭─[typescript/tests/cases/compiler/expressionsForbiddenInParameterInitializers.ts:1:35]
 1 │ export async function foo({ foo = await import("./bar") }) {
   ·                                   ──────────┬──────────
   ·                                             ╰── await expression not allowed in formal parameter
 2 │ }
   ╰────

  × yield expression not allowed in formal parameter
   ╭─[typescript/tests/cases/compiler/expressionsForbiddenInParameterInitializers.ts:4:31]
 3 │ 
 4 │ export function* foo2({ foo = yield "a" }) {
   ·                               ────┬────
   ·                                   ╰── yield expression not allowed in formal parameter
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/extendsUntypedModule.ts:3:5]
 2 │ 
 3 │ This file is not read.
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/extension.ts:16:12]
 15 │ declare module M {
 16 │     export extension class C {
    ·            ─────────
 17 │         public pe:string;
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/externModule.ts:1:8]
 1 │ declare module {
   ·        ▲
 2 │     export class XDate {
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `=>`
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsErrors.ts:2:8]
 1 │ foo((...Far:any[])=>{return 0;})
 2 │ foo((1)=>{return 0;}); 
   ·        ─┬
   ·         ╰── `,` expected
 3 │ foo((x?)=>{return x;})
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgs.ts:88:22]
 87 │ //multiple levels
 88 │ (a?) => { return a; } ? (b)=>(c)=>81 : (c)=>(d)=>82;
    ·                      ▲
 89 │ 
    ╰────
  help: Try insert a semicolon here

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors1.ts:2:8]
 1 │ (arg1?, arg2) => 101;
 2 │ (...arg?) => 102;
   ·        ─
 3 │ (...arg) => 103;
   ╰────

  × A required parameter cannot follow an optional parameter.
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors1.ts:1:9]
 1 │ (arg1?, arg2) => 101;
   ·         ────
 2 │ (...arg?) => 102;
   ╰────

  × A rest parameter cannot have an initializer
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors1.ts:4:5]
 3 │ (...arg) => 103;
 4 │ (...arg:number [] = []) => 104;
   ·     ──────────────────
 5 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors2.ts:1:22]
 1 │ var tt1 = (a, (b, c)) => a+b+c;
   ·                      ▲
 2 │ var tt2 = ((a), b, c) => a+b+c;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/fatarrowfunctionsOptionalArgsErrors3.ts:1:2]
 1 │ (...) => 105;
   ·  ───
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/fieldAndGetterWithSameName.ts:2:5]
 1 │ export class C {
 2 │     x: number;
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │   get x(): number { return 1; }
   ·       ┬
   ·       ╰── It can not be redeclared here
 4 │ }
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/compiler/fileWithNextLine3.ts:3:1]
 2 │ // 0.  It should be counted as a space and should not trigger ASI
 3 │ return0; 
   · ──────
   ╰────

  × Expected `;` but found `)`
    ╭─[typescript/tests/cases/compiler/for.ts:29:6]
 28 │ 
 29 │ for () { // error
    ·      ┬
    ·      ╰── `;` expected
 30 │ }
    ╰────

  × Identifier `foo3` has already been declared
    ╭─[typescript/tests/cases/compiler/funClodule.ts:15:10]
 14 │ 
 15 │ function foo3() { }
    ·          ──┬─
    ·            ╰── `foo3` has already been declared here
 16 │ module foo3 {
 17 │      export function x(): any { }
 18 │ }
 19 │ class foo3 { } // Should error
    ·       ──┬─
    ·         ╰── It can not be redeclared here
    ╰────

  × Identifier `aaaaa` has already been declared
   ╭─[typescript/tests/cases/compiler/functionAndPropertyNameConflict.ts:2:12]
 1 │ class C65 {
 2 │     public aaaaa() { }
   ·            ──┬──
   ·              ╰── `aaaaa` has already been declared here
 3 │     public get aaaaa() {
   ·                ──┬──
   ·                  ╰── It can not be redeclared here
 4 │         return 1;
   ╰────

  × Identifier `b` has already been declared
   ╭─[typescript/tests/cases/compiler/functionCall15.ts:1:25]
 1 │ function foo(a?:string, b?:number, ...b:number[]){}
   ·                         ────┬────     ┬
   ·                             │         ╰── It can not be redeclared here
   ·                             ╰── `b` has already been declared here
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/functionExpressionInWithBlock.ts:2:2]
 1 │ function x() {
 2 │  with({}) {
   ·  ────
 3 │   function f() {
   ╰────

  × Expected `,` but found `var`
   ╭─[typescript/tests/cases/compiler/functionTypesLackingReturnTypes.ts:6:1]
 5 │ // Error (no '=>')
 6 │ var g: (param);
   · ─┬─
   ·  ╰── `,` expected
 7 │ 
   ╰────

  × Identifier `total` has already been declared
   ╭─[typescript/tests/cases/compiler/functionWithSameNameAsField.ts:2:12]
 1 │ class TestProgressBar {
 2 │     public total: number;
   ·            ──┬──
   ·              ╰── `total` has already been declared here
 3 │     public total(total: number) {
   ·            ──┬──
   ·              ╰── It can not be redeclared here
 4 │         this.total = total;
   ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/compiler/functionsMissingReturnStatementsAndExpressions.ts:153:5]
 152 │         throw undefined.
 153 │     }
     ·     ─
 154 │ }
     ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/functionsWithModifiersInBlocks1.ts:4:12]
 3 │    export function f() { }
 4 │    declare export function f() { }
   ·            ──────
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/genericCallWithoutArgs.ts:4:18]
 3 │ 
 4 │ f<number,string>.
   ╰────

  × A 'get' accessor must not have any formal parameters.
   ╭─[typescript/tests/cases/compiler/gettersAndSettersErrors.ts:6:19]
 5 │     public Foo = 0; // error - duplicate identifier Foo - confirmed
 6 │     public get Goo(v:string):string {return null;} // error - getters must not have a parameter
   ·                   ──────────
 7 │     public set Goo(v:string):string {} // error - setters must not specify a return type
   ╰────

  × Identifier `Foo` has already been declared
   ╭─[typescript/tests/cases/compiler/gettersAndSettersErrors.ts:3:16]
 2 │     public get Foo() { return "foo";} // ok
 3 │     public set Foo(foo:string) {} // ok
   ·                ─┬─
   ·                 ╰── `Foo` has already been declared here
 4 │ 
 5 │     public Foo = 0; // error - duplicate identifier Foo - confirmed
   ·            ─┬─
   ·             ╰── It can not be redeclared here
 6 │     public get Goo(v:string):string {return null;} // error - getters must not have a parameter
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/giant.ts:62:17]
 61 │     [p];
 62 │     [p1: string];
    ·                 ─
 63 │     [p2: string, p3: number];
    ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/compiler/identifierStartAfterNumericLiteral.ts:1:16]
 1 │ let valueIn = 3in[null];
   ·                ──
 2 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/illegalModifiersOnClassElements.ts:3:11]
 2 │     declare foo = 1;
 3 │     export bar = 1;
   ·           ▲
 4 │ }
   ╰────
  help: Try insert a semicolon here

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/compiler/illegalSuperCallsInConstructor.ts:12:17]
 11 │             get foo() {
 12 │                 super();
    ·                 ───────
 13 │                 return 1;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/compiler/illegalSuperCallsInConstructor.ts:16:17]
 15 │             set foo(v: number) {
 16 │                 super();
    ·                 ───────
 17 │             }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/importAndVariableDeclarationConflict3.ts:5:8]
 4 │ 
 5 │ import x = m.m;
   ·        ┬
   ·        ╰── `x` has already been declared here
 6 │ import x = m.m;
   ·        ┬
   ·        ╰── It can not be redeclared here
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/importAssertionNonstring.ts:1:52]
 1 │ import * as thing1 from "./mod.mjs" assert {field: 0};
   ·                                                    ─
 2 │ 
   ╰────

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/compiler/importDeclarationInModuleDeclaration2.ts:2:5]
 1 │ function container() {
 2 │     import "fs";
   ·     ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/incompleteDottedExpressionAtEOF.ts:2:18]
 1 │ // used to leak __missing into error message
 2 │ var p2 = window. 
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/incompleteObjectLiteral1.ts:1:14]
 1 │ var tt = { aa; }
   ·              ┬
   ·              ╰── `,` expected
 2 │ var x = tt;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexSignatureMustHaveTypeAnnotation.ts:4:16]
 3 │     [x]: string;
 4 │     [x: string];
   ·                ─
 5 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/indexSignatureTypeCheck.ts:14:9]
 13 │ interface indexErrors {
 14 │     [p2?: string];
    ·         ─
 15 │     [...p3: any[]];
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/indexSignatureTypeCheck2.ts:10:9]
  9 │ interface indexErrors {
 10 │     [p2?: string];
    ·         ─
 11 │     [...p3: any[]];
    ╰────

  × Expected `]` but found `Identifier`
   ╭─[typescript/tests/cases/compiler/indexSignatureWithAccessibilityModifier.ts:2:13]
 1 │ interface I {
 2 │     [public x: string]: string;
   ·             ┬
   ·             ╰── `]` expected
 3 │ }
   ╰────

  × Expected `]` but found `=`
   ╭─[typescript/tests/cases/compiler/indexSignatureWithInitializer1.ts:2:14]
 1 │ class C {
 2 │   [a: number = 1]: number;
   ·              ┬
   ·              ╰── `]` expected
 3 │ }
   ╰────

  × Expected `]` but found `,`
   ╭─[typescript/tests/cases/compiler/indexSignatureWithTrailingComma.ts:2:17]
 1 │ type A = {
 2 │     [key: string,]: string;
   ·                 ┬
   ·                 ╰── `]` expected
 3 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexSignatureWithoutTypeAnnotation1.ts:2:14]
 1 │ class C {
 2 │   [a: number];
   ·              ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexTypeCheck.ts:2:12]
 1 │ interface Red {
 2 │     [n:number]; // ok
   ·               ─
 3 │     [s:string]; // ok
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexWithoutParamType.ts:1:11]
 1 │ var y: { []; } // Error
   ·           ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexerAsOptional.ts:3:10]
 2 │     //Index signatures can't be optional
 3 │     [idx?: number]: any; //err
   ·          ─
 4 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/indexerConstraints2.ts:80:1]
 79 │     [key: Key]
 80 │ }
    · ─
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/indexerSignatureWithRestParam.ts:2:6]
 1 │ interface I {
 2 │     [...x]: string;
   ·      ───
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/innerModExport1.ts:5:11]
 4 │     var non_export_var: number;
 5 │     module {
   ·           ▲
 6 │         var non_export_var = 0;
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/innerModExport2.ts:5:11]
 4 │     var non_export_var: number;
 5 │     module {
   ·           ▲
 6 │         var non_export_var = 0;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/intTypeCheck.ts:37:17]
 36 │     //Index Signatures
 37 │     [p1: string];
    ·                 ─
 38 │     [p2: string, p3: number];
    ╰────

  × Expected `{` but found `.`
    ╭─[typescript/tests/cases/compiler/interfaceDeclaration4.ts:39:14]
 38 │ // Negative case 
 39 │ interface Foo.I1 { }
    ·              ┬
    ·              ╰── `{` expected
    ╰────

  × TS(2499): An interface can only extend an identifier/qualified-name with optional type arguments.
   ╭─[typescript/tests/cases/compiler/interfaceMayNotBeExtendedWitACall.ts:3:24]
 2 │ 
 3 │ interface blue extends color() { // error
   ·                        ───────
 4 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/interfaceNaming1.ts:1:10]
 1 │ interface { }
   ·          ▲
 2 │ interface interface{ }
   ╰────
  help: Try insert a semicolon here

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/compiler/invalidContinueInDownlevelAsync.ts:3:9]
 2 │     if (true) {
 3 │         continue;
   ·         ─────────
 4 │     }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Expected `;` but found `[`
   ╭─[typescript/tests/cases/compiler/invalidLetInForOfAndForIn_ES5.ts:5:13]
 4 │ var let = 10;
 5 │ for (let of [1,2,3]) {}
   ·             ┬
   ·             ╰── `;` expected
 6 │ 
   ╰────

  × Expected `;` but found `[`
   ╭─[typescript/tests/cases/compiler/invalidLetInForOfAndForIn_ES6.ts:5:13]
 4 │ var let = 10;
 5 │ for (let of [1,2,3]) {}
   ·             ┬
   ·             ╰── `;` expected
 6 │ 
   ╰────

  × Optional chaining cannot appear in the callee of new expressions
   ╭─[typescript/tests/cases/compiler/invalidOptionalChainFromNewExpression.ts:5:1]
 4 │ 
 5 │ new A?.b()   // error
   · ──────────
 6 │ new A()?.b() // ok
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/compiler/invalidUnicodeEscapeSequance.ts:1:9]
 1 │ var arg\u003
   ·         ────
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/compiler/invalidUnicodeEscapeSequance2.ts:1:9]
 1 │ var arg\uxxxx
   ·         ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/compiler/invalidUnicodeEscapeSequance3.ts:1:3]
 1 │ a\u
   ·   ─
   ╰────

  × Invalid Character `1`
   ╭─[typescript/tests/cases/compiler/invalidUnicodeEscapeSequance4.ts:2:11]
 1 │ var a\u0031; // a1 is a valid identifier
 2 │ var \u0031a; // 1a is an invalid identifier
   ·           ▲
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationAbstractModifier.ts:1:9]
 1 │ abstract class c {
   ·         ▲
 2 │     abstract x;
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationAmbientVarDeclarationSyntax.ts:1:8]
 1 │ declare var v;
   ·        ▲
   ╰────
  help: Try insert a semicolon here

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/jsFileCompilationBindDuplicateIdentifier.ts:1:5]
 1 │ var a = 10;
   ·     ┬
   ·     ╰── `a` has already been declared here
 2 │ class a {
   ·       ┬
   ·       ╰── It can not be redeclared here
 3 │ }
   ╰────

  × Identifier `C` has already been declared
   ╭─[typescript/tests/cases/compiler/jsFileCompilationBindErrors.ts:1:5]
 1 │ let C = "sss";
   ·     ┬
   ·     ╰── `C` has already been declared here
 2 │ let C = 0;  // Error: Cannot redeclare block-scoped variable 'C'.
   ·     ┬
   ·     ╰── It can not be redeclared here
 3 │ 
   ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/jsFileCompilationBindErrors.ts:11:9]
 10 │     "use strict";
 11 │     var arguments = 0;  // Error: Invalid use of 'arguments' in strict mode.
    ·         ─────────
 12 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationBindMultipleDefaultExports.ts:3:16]
 2 │ }
 3 │ export default var a = 10;
   ·                ───
   ╰────

  × The keyword 'let' is reserved
   ╭─[typescript/tests/cases/compiler/jsFileCompilationBindStrictModeErrors.ts:7:5]
 6 │ };
 7 │ var let = 10; // error
   ·     ───
 8 │ delete a; // error
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/compiler/jsFileCompilationBindStrictModeErrors.ts:8:8]
 7 │ var let = 10; // error
 8 │ delete a; // error
   ·        ─
 9 │ try {
   ╰────

  × Cannot assign to 'eval' in strict mode
    ╭─[typescript/tests/cases/compiler/jsFileCompilationBindStrictModeErrors.ts:10:10]
  9 │ try {
 10 │ } catch (eval) { // error
    ·          ────
 11 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/jsFileCompilationBindStrictModeErrors.ts:12:10]
 11 │ }
 12 │ function arguments() { // error
    ·          ─────────
 13 │ }
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/jsFileCompilationBindStrictModeErrors.ts:15:1]
 14 │ 
 15 │ with (a) {
    · ────
 16 │     b = 10;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationConstructorOverloadSyntax.ts:2:16]
 1 │ class A {
 2 │   constructor();
   ·                ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationEnumSyntax.ts:1:1]
 1 │ enum E { }
   · ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationExportAssignmentSyntax.ts:1:8]
 1 │ export = b;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationFunctionOverloadSyntax.ts:1:15]
 1 │ function foo();
   ·               ─
   ╰────

  × Expected `from` but found `=`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationImportEqualsSyntax.ts:1:10]
 1 │ import a = b;
   ·          ┬
   ·          ╰── `from` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationInterfaceSyntax.ts:1:10]
 1 │ interface I { }
   ·          ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationMethodOverloadSyntax.ts:2:8]
 1 │ class A {
 2 │   foo();
   ·        ─
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationModuleSyntax.ts:1:7]
 1 │ module M { }
   ·       ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationNonNullAssertion.ts:1:2]
 1 │ 0!
   ·  ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationOptionalParameter.ts:1:13]
 1 │ function F(p?) { }
   ·             ┬
   ·             ╰── `,` expected
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationPublicParameterModifier.ts:1:30]
 1 │ class C { constructor(public x) { }}
   ·                              ┬
   ·                              ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsFileCompilationReturnTypeSyntaxOfFunction.ts:1:13]
 1 │ function F(): number { }
   ·             ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeAliasSyntax.ts:1:5]
 1 │ type a = b;
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeArgumentSyntaxOfCall.ts:1:12]
 1 │ Foo<number>();
   ·            ──
 2 │ Foo<number>(1);
   ╰────

  × Expected `<` but found `EOF`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeAssertions.ts:2:27]
 1 │ 0 as number;
 2 │ var v = <string>undefined;
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeOfParameter.ts:1:13]
 1 │ function F(a: number) { }
   ·             ┬
   ·             ╰── `,` expected
   ╰────

  × Expected `{` but found `<`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeParameterSyntaxOfClass.ts:1:8]
 1 │ class C<T> { }
   ·        ┬
   ·        ╰── `{` expected
   ╰────

  × Expected `{` but found `<`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeParameterSyntaxOfClassExpression.ts:1:18]
 1 │ const Bar = class<T> {};
   ·                  ┬
   ·                  ╰── `{` expected
   ╰────

  × Expected `(` but found `<`
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeParameterSyntaxOfFunction.ts:1:11]
 1 │ function F<T>() { }
   ·           ┬
   ·           ╰── `(` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationTypeSyntaxOfVar.ts:1:6]
 1 │ var v: () => number;
   ·      ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/jsFileCompilationWithoutJsExtensions.ts:1:8]
 1 │ declare var v;
   ·        ▲
   ╰────
  help: Try insert a semicolon here

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/compiler/jsFileMethodOverloads3.ts:19:1]
 18 │ 
 19 │ export let a = id(123);
    · ──────
 20 │ export let b = id("hello");
    ╰────

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/compiler/jsFileMethodOverloads3.ts:20:1]
 19 │ export let a = id(123);
 20 │ export let b = id("hello");
    · ──────
    ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/jsdocTypedefNoCrash2.ts:1:1]
 1 │ export type foo = 5;
   · ──────
 2 │ /**
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/jsdocTypedefNoCrash2.ts:6:1]
 5 │  */
 6 │ export const foo = 5;
   · ──────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsxAttributeMissingInitializer.tsx:1:21]
 1 │ const x = <div foo= ></div>;
   ·                     ─
 2 │ const y = 0;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/jsxNamespacePrefixInName.tsx:7:32]
 6 │ 
 7 │ var tooManySeparators1 = <a:ele:ment />;
   ·                                ─
 8 │ var tooManySeparators2 = <a:ele:ment></a:ele:ment>;
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/jsxNamespacePrefixInNameReact.tsx:9:32]
  8 │ 
  9 │ var tooManySeparators1 = <a:ele:ment />;
    ·                                ─
 10 │ var tooManySeparators2 = <a:ele:ment></a:ele:ment>;
    ╰────

  × Identifier `e0` has already been declared
   ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:1:5]
 1 │ let e0
   ·     ─┬
   ·      ╰── `e0` has already been declared here
 2 │ var e0;
   ·     ─┬
   ·      ╰── It can not be redeclared here
 3 │ function e0() { }
   ╰────

  × Identifier `e0` has already been declared
   ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:1:5]
 1 │ let e0
   ·     ─┬
   ·      ╰── `e0` has already been declared here
 2 │ var e0;
 3 │ function e0() { }
   ·          ─┬
   ·           ╰── It can not be redeclared here
 4 │ 
   ╰────

  × Identifier `x1` has already been declared
   ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:6:9]
 5 │ function f0() {
 6 │     let x1;
   ·         ─┬
   ·          ╰── `x1` has already been declared here
 7 │     var x1;
   ·         ─┬
   ·          ╰── It can not be redeclared here
 8 │     function x1() { }
   ╰────

  × Identifier `x1` has already been declared
   ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:6:9]
 5 │ function f0() {
 6 │     let x1;
   ·         ─┬
   ·          ╰── `x1` has already been declared here
 7 │     var x1;
 8 │     function x1() { }
   ·              ─┬
   ·               ╰── It can not be redeclared here
 9 │ }
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:12:9]
 11 │ function f1() {
 12 │     let x;
    ·         ┬
    ·         ╰── `x` has already been declared here
 13 │     {
 14 │         var x;
    ·             ┬
    ·             ╰── It can not be redeclared here
 15 │     }
    ╰────

  × Identifier `x2` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:22:9]
 21 │ module M0 {
 22 │     let x2;
    ·         ─┬
    ·          ╰── `x2` has already been declared here
 23 │     var x2;
    ·         ─┬
    ·          ╰── It can not be redeclared here
 24 │     function x2() { }
    ╰────

  × Identifier `x2` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:22:9]
 21 │ module M0 {
 22 │     let x2;
    ·         ─┬
    ·          ╰── `x2` has already been declared here
 23 │     var x2;
 24 │     function x2() { }
    ·              ─┬
    ·               ╰── It can not be redeclared here
 25 │ }
    ╰────

  × Identifier `x2` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:28:9]
 27 │ module M1 {
 28 │     let x2;
    ·         ─┬
    ·          ╰── `x2` has already been declared here
 29 │     {
 30 │         var x2;
    ·             ─┬
    ·              ╰── It can not be redeclared here
 31 │     }
    ╰────

  × Identifier `x11` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:37:5]
 36 │ 
 37 │ let x11;
    ·     ─┬─
    ·      ╰── `x11` has already been declared here
 38 │ for (var x11; ;) {
    ·          ─┬─
    ·           ╰── It can not be redeclared here
 39 │ }
    ╰────

  × Identifier `x11` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:42:9]
 41 │ function f2() {
 42 │     let x11;
    ·         ─┬─
    ·          ╰── `x11` has already been declared here
 43 │     for (var x11; ;) {
    ·              ─┬─
    ·               ╰── It can not be redeclared here
 44 │     }
    ╰────

  × Identifier `x11` has already been declared
    ╭─[typescript/tests/cases/compiler/letAndVarRedeclaration.ts:48:9]
 47 │ module M2 {
 48 │     let x11;
    ·         ─┬─
    ·          ╰── `x11` has already been declared here
 49 │     for (var x11; ;) {
    ·              ─┬─
    ·               ╰── It can not be redeclared here
 50 │     }
    ╰────

  × The keyword 'let' is reserved
   ╭─[typescript/tests/cases/compiler/letAsIdentifierInStrictMode.ts:2:5]
 1 │ "use strict";
 2 │ var let = 10;
   ·     ───
 3 │ var a = 10;
   ╰────

  × The keyword 'let' is reserved
   ╭─[typescript/tests/cases/compiler/letAsIdentifierInStrictMode.ts:4:1]
 3 │ var a = 10;
 4 │ let = 30;
   · ───
 5 │ let
   ╰────

  × Identifier `a` has already been declared
   ╭─[typescript/tests/cases/compiler/letAsIdentifierInStrictMode.ts:3:5]
 2 │ var let = 10;
 3 │ var a = 10;
   ·     ┬
   ·     ╰── `a` has already been declared here
 4 │ let = 30;
 5 │ let
 6 │ a;
   · ┬
   · ╰── It can not be redeclared here
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/letDeclarations-invalidContexts.ts:3:8]
 2 │ if (true) 
 3 │     let l1 = 0;
   ·        ▲
 4 │ else 
   ╰────
  help: Try insert a semicolon here

  × Identifier `var1` has already been declared
   ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:2:5]
 1 │ // Errors: redeclaration
 2 │ let var1 = 0;
   ·     ──┬─
   ·       ╰── `var1` has already been declared here
 3 │ let var1 = 0; // error
   ·     ──┬─
   ·       ╰── It can not be redeclared here
 4 │ 
   ╰────

  × Identifier `var2` has already been declared
   ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:5:5]
 4 │ 
 5 │ let var2 = 0;
   ·     ──┬─
   ·       ╰── `var2` has already been declared here
 6 │ const var2 = 0;
   ·       ──┬─
   ·         ╰── It can not be redeclared here
 7 │ 
   ╰────

  × Identifier `var3` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:8:7]
  7 │ 
  8 │ const var3 = 0;
    ·       ──┬─
    ·         ╰── `var3` has already been declared here
  9 │ let var3 = 0;
    ·     ──┬─
    ·       ╰── It can not be redeclared here
 10 │ 
    ╰────

  × Identifier `var4` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:11:7]
 10 │ 
 11 │ const var4 = 0;
    ·       ──┬─
    ·         ╰── `var4` has already been declared here
 12 │ const var4 = 0;
    ·       ──┬─
    ·         ╰── It can not be redeclared here
 13 │ 
    ╰────

  × Identifier `var5` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:14:5]
 13 │ 
 14 │ var var5 = 0;
    ·     ──┬─
    ·       ╰── `var5` has already been declared here
 15 │ let var5 = 0;
    ·     ──┬─
    ·       ╰── It can not be redeclared here
 16 │ 
    ╰────

  × Identifier `var6` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:17:5]
 16 │ 
 17 │ let var6 = 0;
    ·     ──┬─
    ·       ╰── `var6` has already been declared here
 18 │ var var6 = 0;
    ·     ──┬─
    ·       ╰── It can not be redeclared here
 19 │ 
    ╰────

  × Identifier `var7` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:21:9]
 20 │ {
 21 │     let var7 = 0;
    ·         ──┬─
    ·           ╰── `var7` has already been declared here
 22 │     let var7 = 0;
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 23 │     {
    ╰────

  × Identifier `var8` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:24:13]
 23 │     {
 24 │         let var8 = 0;
    ·             ──┬─
    ·               ╰── `var8` has already been declared here
 25 │         const var8 = 0;
    ·               ──┬─
    ·                 ╰── It can not be redeclared here
 26 │     }
    ╰────

  × Identifier `var9` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:31:13]
 30 │     default:
 31 │         let var9 = 0;
    ·             ──┬─
    ·               ╰── `var9` has already been declared here
 32 │         let var9 = 0;
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 33 │ }
    ╰────

  × Identifier `var10` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:36:11]
 35 │ try {
 36 │     const var10 = 0;
    ·           ──┬──
    ·             ╰── `var10` has already been declared here
 37 │     const var10 = 0;
    ·           ──┬──
    ·             ╰── It can not be redeclared here
 38 │ }
    ╰────

  × Identifier `var11` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:40:9]
 39 │ catch (e) {
 40 │     let var11 = 0;
    ·         ──┬──
    ·           ╰── `var11` has already been declared here
 41 │     let var11 = 0;
    ·         ──┬──
    ·           ╰── It can not be redeclared here
 42 │ }
    ╰────

  × Identifier `var12` has already been declared
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes-duplicates.ts:45:9]
 44 │ function F1() {
 45 │     let var12;
    ·         ──┬──
    ·           ╰── `var12` has already been declared here
 46 │     let var12;
    ·         ──┬──
    ·           ╰── It can not be redeclared here
 47 │ }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/letDeclarations-scopes.ts:43:15]
 42 │ if (true) {
 43 │     label: let l = 0;
    ·               ▲
 44 │     n = l;
    ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/letDeclarations-validContexts.ts:31:15]
 30 │ if (true) {
 31 │     label: let l8 = 0;
    ·               ▲
 32 │ }
    ╰────
  help: Try insert a semicolon here

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInConstDeclarations_ES5.ts:2:15]
 1 │ // All use of let in const declaration should be an error
 2 │ const x = 50, let = 5;
   ·               ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInConstDeclarations_ES5.ts:5:19]
 4 │ {
 5 │     const x = 10, let = 20;
   ·                   ───
 6 │ }
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInConstDeclarations_ES6.ts:2:15]
 1 │ // All use of let in const declaration should be an error
 2 │ const x = 50, let = 5;
   ·               ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInConstDeclarations_ES6.ts:5:19]
 4 │ {
 5 │     const x = 10, let = 20;
   ·                   ───
 6 │ }
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:2:10]
 1 │ // Should be an error
 2 │ for (let let of [1,2,3]) {}
   ·          ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:4:12]
 3 │ 
 4 │ for (const let of [1,2,3]) {}
   ·            ───
 5 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:6:10]
 5 │ 
 6 │ for (let let in [1,2,3]) {}
   ·          ───
 7 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:8:12]
 7 │ 
 8 │ for (const let in [1,2,3]) {}
   ·            ───
 9 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:11:11]
 10 │ {
 11 │     for (let let of [1,2,3]) {}
    ·              ───
 12 │ 
    ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:13:13]
 12 │ 
 13 │     for (const let of [1,2,3]) {}
    ·                ───
 14 │     
    ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:15:11]
 14 │     
 15 │     for (let let in [1,2,3]) {}
    ·              ───
 16 │ 
    ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES5.ts:17:13]
 16 │ 
 17 │     for (const let in [1,2,3]) {}
    ·                ───
 18 │ }
    ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:2:10]
 1 │ // Should be an error
 2 │ for (let let of [1,2,3]) {}
   ·          ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:4:12]
 3 │ 
 4 │ for (const let of [1,2,3]) {}
   ·            ───
 5 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:6:10]
 5 │ 
 6 │ for (let let in [1,2,3]) {}
   ·          ───
 7 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
   ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:8:12]
 7 │ 
 8 │ for (const let in [1,2,3]) {}
   ·            ───
 9 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:11:11]
 10 │ {
 11 │     for (let let of [1,2,3]) {}
    ·              ───
 12 │ 
    ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:13:13]
 12 │ 
 13 │     for (const let of [1,2,3]) {}
    ·                ───
 14 │     
    ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:15:11]
 14 │     
 15 │     for (let let in [1,2,3]) {}
    ·              ───
 16 │ 
    ╰────

  × `let` cannot be declared as a variable name inside of a `const` declaration
    ╭─[typescript/tests/cases/compiler/letInLetConstDeclOfForOfAndForIn_ES6.ts:17:13]
 16 │ 
 17 │     for (const let in [1,2,3]) {}
    ·                ───
 18 │ }
    ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetDeclarations_ES5.ts:2:13]
 1 │ // All use of let in const declaration should be an error
 2 │ let x = 50, let = 5;
   ·             ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetDeclarations_ES5.ts:5:17]
 4 │ {
 5 │     let x = 10, let = 20;
   ·                 ───
 6 │ }
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetDeclarations_ES6.ts:2:13]
 1 │ // All use of let in const declaration should be an error
 2 │ let x = 50, let = 5;
   ·             ───
 3 │ 
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/letInLetDeclarations_ES6.ts:5:17]
 4 │ {
 5 │     let x = 10, let = 20;
   ·                 ───
 6 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/libMembers.ts:9:17]
  8 │     }
  9 │     var a=new C[];
    ·                 ─
 10 │     a.length;
    ╰────

  × TS(2452): An enum member cannot have a numeric name.
    ╭─[typescript/tests/cases/compiler/literalsInComputedProperties1.ts:39:5]
 38 │ enum X {
 39 │     1 = 1,
    ·     ─
 40 │     [2] = 2,
    ╰────

  × TS(2452): An enum member cannot have a numeric name.
    ╭─[typescript/tests/cases/compiler/literalsInComputedProperties1.ts:40:6]
 39 │     1 = 1,
 40 │     [2] = 2,
    ·      ─
 41 │     "3" = 3,
    ╰────

  × Invalid Character `!`
   ╭─[typescript/tests/cases/compiler/manyCompilerErrorsInTheTwoFiles.ts:1:13]
 1 │ const a =!@#!@$
   ·             ─
 2 │ const b = !@#!@#!@#!
   ╰────

  × Identifier `baz` has already been declared
   ╭─[typescript/tests/cases/compiler/mismatchedClassConstructorVariable.ts:1:5]
 1 │ var baz: foo;
   ·     ────┬───
   ·         ╰── `baz` has already been declared here
 2 │ class baz { }
   ·       ─┬─
   ·        ╰── It can not be redeclared here
 3 │ class foo { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/missingArgument1.ts:1:7]
 1 │ foo(a,,b);
   ·       ─
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/missingCloseBrace.ts:8:6]
 7 │ 
 8 │     }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/missingCloseBraceInObjectLiteral.ts:4:11]
 3 │     b: 'b',
 4 │     c: 'c'
   ╰────

  × Expected `]` but found `EOF`
   ╭─[typescript/tests/cases/compiler/missingCloseBracketInArray.ts:1:48]
 1 │ var alphas:string[] = alphas = ["1","2","3","4"
   ╰────

  × Expected `)` but found `{`
   ╭─[typescript/tests/cases/compiler/missingCloseParenStatements.ts:2:26]
 1 │ var a1, a2, a3 = 0;
 2 │ if ( a1 && (a2 + a3 > 0) {
   ·                          ┬
   ·                          ╰── `)` expected
 3 │     while( (a2 > 0) && a1
   ╰────

  × The only valid meta property for new is new.target
   ╭─[typescript/tests/cases/compiler/misspelledNewMetaProperty.ts:1:16]
 1 │ function foo(){new.targ}
   ·                ────────
   ╰────

  × TS(1090): 'declare' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/compiler/modifierOnParameter1.ts:2:16]
 1 │ class C {
 2 │    constructor(declare p) { }
   ·                ───────
 3 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/modifiersInObjectLiterals.ts:2:2]
 1 │ let data = {
 2 │     public foo: 'hey',
   ·     ──────
 3 │     private bar: 'nay',
   ╰────

  × 'private' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/modifiersInObjectLiterals.ts:3:2]
 2 │     public foo: 'hey',
 3 │     private bar: 'nay',
   ·     ───────
 4 │     protected baz: 'oh my',
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/modifiersInObjectLiterals.ts:4:2]
 3 │     private bar: 'nay',
 4 │     protected baz: 'oh my',
   ·     ─────────
 5 │     abstract noWay: 'yes'   
   ╰────

  × 'abstract' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/modifiersInObjectLiterals.ts:5:2]
 4 │     protected baz: 'oh my',
 5 │     abstract noWay: 'yes'   
   ·     ────────
 6 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/modifiersOnInterfaceIndexSignature1.ts:2:3]
 1 │ interface I {
 2 │   public [a: string]: number;
   ·   ──────
 3 │ }
   ╰────

  × Identifier `Kettle` has already been declared
    ╭─[typescript/tests/cases/compiler/moduleDuplicateIdentifiers.ts:20:14]
 19 │ 
 20 │ export class Kettle {
    ·              ───┬──
    ·                 ╰── `Kettle` has already been declared here
 21 │     member1 = 2;
 22 │ }
 23 │ 
 24 │ export class Kettle { // Should error
    ·              ───┬──
    ·                 ╰── It can not be redeclared here
 25 │     member2 = 42;
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext.ts:2:5]
 1 │ {
 2 │     module M { }
   ·     ────────────
 3 │     export namespace N {
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext.ts:3:12]
 2 │         module M { }
 3 │ ╭─▶     export namespace N {
 4 │ │           export interface I { }
 5 │ ╰─▶     }
 6 │     
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext.ts:7:5]
 6 │ 
 7 │     namespace Q.K { }
   ·     ─────────────────
 8 │ 
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext.ts:9:5]
  8 │     
  9 │ ╭─▶     declare module "ambient" {
 10 │ │   
 11 │ ╰─▶     }
 12 │     
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:2:5]
 1 │ function blah () {
 2 │     module M { }
   ·     ────────────
 3 │     export namespace N {
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:2:5]
 1 │ function blah () {
 2 │     module M { }
   ·     ────────────
 3 │     export namespace N {
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:3:12]
 2 │         module M { }
 3 │ ╭─▶     export namespace N {
 4 │ │           export interface I { }
 5 │ ╰─▶     }
 6 │     
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:3:12]
 2 │         module M { }
 3 │ ╭─▶     export namespace N {
 4 │ │           export interface I { }
 5 │ ╰─▶     }
 6 │     
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:7:5]
 6 │ 
 7 │     namespace Q.K { }
   ·     ─────────────────
 8 │ 
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:7:5]
 6 │ 
 7 │     namespace Q.K { }
   ·     ─────────────────
 8 │ 
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:9:5]
  8 │     
  9 │ ╭─▶     declare module "ambient" {
 10 │ │   
 11 │ ╰─▶     }
 12 │     
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext2.ts:9:5]
  8 │     
  9 │ ╭─▶     declare module "ambient" {
 10 │ │   
 11 │ ╰─▶     }
 12 │     
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext3.ts:3:9]
 2 │     {
 3 │         module M { }
   ·         ────────────
 4 │         export namespace N {
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext3.ts:4:16]
 3 │             module M { }
 4 │ ╭─▶         export namespace N {
 5 │ │               export interface I { }
 6 │ ╰─▶         }
 7 │     
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
   ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext3.ts:8:9]
 7 │ 
 8 │         namespace Q.K { }
   ·         ─────────────────
 9 │ 
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/moduleElementsInWrongContext3.ts:10:9]
  9 │     
 10 │ ╭─▶         declare module "ambient" {
 11 │ │   
 12 │ ╰─▶         }
 13 │     
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/moduleKeywordRepeatError.ts:3:14]
 2 │ 
 3 │ module.module { }
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `(` but found `await`
   ╭─[typescript/tests/cases/compiler/modulePreserveTopLevelAwait1.ts:1:5]
 1 │ for await (const x of []) {}
   ·     ──┬──
   ·       ╰── `(` expected
 2 │ await Promise.resolve();
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/compiler/moduleProperty1.ts:9:12]
  8 │     var x = 10;  // variable local to this module body
  9 │     private y = x;  // can't use private in modules
    ·            ▲
 10 │     export var z = y;  // property visible to any code
    ╰────
  help: Try insert a semicolon here

  × Identifier `M` has already been declared
    ╭─[typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt3.ts:10:12]
  9 │ module A.M {
 10 │     import M = Z.M;
    ·            ┬
    ·            ╰── `M` has already been declared here
 11 │     import M = Z.I;
    ·            ┬
    ·            ╰── It can not be redeclared here
 12 │ 
    ╰────

  × Identifier `M` has already been declared
    ╭─[typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt5.ts:10:12]
  9 │ module A.M {
 10 │     import M = Z.I;
    ·            ┬
    ·            ╰── `M` has already been declared here
 11 │     import M = Z.M;
    ·            ┬
    ·            ╰── It can not be redeclared here
 12 │ 
    ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/compiler/multiLinePropertyAccessAndArrowFunctionIndent1.ts:1:1]
 1 │ return this.edit(role)
   · ──────
 2 │     .then((role: Role) =>
   ╰────

  × TS(1030): public' modifier already seen.
   ╭─[typescript/tests/cases/compiler/multipleClassPropertyModifiersErrors.ts:2:9]
 1 │ class C {
 2 │     public public p1;
   ·            ──────
 3 │     private private p2;
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): private' modifier already seen.
   ╭─[typescript/tests/cases/compiler/multipleClassPropertyModifiersErrors.ts:3:10]
 2 │     public public p1;
 3 │     private private p2;
   ·             ───────
 4 │     static static p3;
   ╰────
  help: Remove the duplicate modifier.

  × Identifier `z` has already been declared
    ╭─[typescript/tests/cases/compiler/nameCollisions.ts:10:12]
  9 │ 
 10 │     module z {
    ·            ┬
    ·            ╰── `z` has already been declared here
 11 │         var t;
 12 │     }
 13 │     var z; // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 14 │ 
    ╰────

  × Identifier `C` has already been declared
    ╭─[typescript/tests/cases/compiler/nameCollisions.ts:33:11]
 32 │ 
 33 │     class C { }
    ·           ┬
    ·           ╰── `C` has already been declared here
 34 │     function C() { } // error
    ·              ┬
    ·              ╰── It can not be redeclared here
 35 │ 
    ╰────

  × Identifier `C2` has already been declared
    ╭─[typescript/tests/cases/compiler/nameCollisions.ts:36:14]
 35 │ 
 36 │     function C2() { }
    ·              ─┬
    ·               ╰── `C2` has already been declared here
 37 │     class C2 { } // error
    ·           ─┬
    ·            ╰── It can not be redeclared here
 38 │ 
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/nestedGlobalNamespaceInClass.ts:3:11]
 2 │ class C {
 3 │     global x
   ·           ▲
 4 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/nestedUnaryExpressionHang.ts:1:34]
 1 │ 3333%!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/newExpressionWithCast.ts:7:17]
 6 │ // parse error
 7 │ var test2 = new <any>Test2();
   ·                 ─
 8 │ 
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/compiler/newMissingIdentifier.ts:1:13]
 1 │ var x = new ();
   ·             ──
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/newOperator.ts:18:21]
 17 │ // Various spacing
 18 │ var t3 = new string[]( );
    ·                     ─
 19 │ var t4 =
    ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:1:5]
 1 │ var [a], {b}, c, d; // error
   ·     ───
 2 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:1:10]
 1 │ var [a], {b}, c, d; // error
   ·          ───
 2 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:3:5]
 2 │ 
 3 │ var [a1 = undefined], {b1 = null}, c1 = undefined, d1 = null; // error
   ·     ────────────────
 4 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:3:23]
 2 │ 
 3 │ var [a1 = undefined], {b1 = null}, c1 = undefined, d1 = null; // error
   ·                       ───────────
 4 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:5:5]
 4 │ 
 5 │ var [a2]: [any], {b2}: { b2: any }, c2: any, d2: any;
   ·     ───────────
 6 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:5:18]
 4 │ 
 5 │ var [a2]: [any], {b2}: { b2: any }, c2: any, d2: any;
   ·                  ─────────────────
 6 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/compiler/noImplicitAnyDestructuringVarDeclaration.ts:7:5]
 6 │ 
 7 │ var {b3}: { b3 }, c3: { b3 }; // error in type instead
   ·     ────────────
 8 │ 
   ╰────

  × Identifier `m1` has already been declared
   ╭─[typescript/tests/cases/compiler/nonMergedDeclarationsAndOverloads.ts:2:5]
 1 │ class A {
 2 │     m1: string;
   ·     ─┬
   ·      ╰── `m1` has already been declared here
 3 │     f() {}
   ╰────
   ╭─[typescript/tests/cases/compiler/nonMergedDeclarationsAndOverloads.ts:6:5]
 5 │     m1 (a: number): void;
 6 │     m1 (a: any): void {
   ·     ─┬
   ·      ╰── It can not be redeclared here
 7 │     }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/numberLiteralsWithLeadingZeros.ts:8:3]
 7 │ 
 8 │ 00.5;
   ·   ▲
 9 │ 000.5;
   ╰────
  help: Try insert a semicolon here

  × Missing initializer in const declaration
    ╭─[typescript/tests/cases/compiler/numberVsBigIntOperations.ts:86:7]
 85 │ const isNumber: (x: 0 | 1) => number = (x: 0 | 1) => x;
 86 │ const zeroOrBigOne: 0 | 1n;
    ·       ────────────────────
 87 │ if (typeof zeroOrBigOne === "bigint") isBigInt(zeroOrBigOne);
    ╰────

  × Missing initializer in const declaration
    ╭─[typescript/tests/cases/compiler/numberVsBigIntOperations.ts:93:7]
 92 │ if (zeroOrBigOne) isOne(zeroOrBigOne);
 93 │ const bigZeroOrOne: 0n | 1;
    ·       ────────────────────
 94 │ if (bigZeroOrOne) isOne(bigZeroOrOne);
    ╰────

  × Identifier `0` has already been declared
   ╭─[typescript/tests/cases/compiler/numericClassMembers1.ts:2:3]
 1 │ class C234 {
 2 │   0 = 1; 
   ·   ┬
   ·   ╰── `0` has already been declared here
 3 │   0.0 = 2;
   ·   ─┬─
   ·    ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `0` has already been declared
   ╭─[typescript/tests/cases/compiler/numericClassMembers1.ts:7:3]
 6 │ class C235 { 
 7 │   0.0 = 1;
   ·   ─┬─
   ·    ╰── `0` has already been declared here
 8 │  '0' = 2;
   ·  ─┬─
   ·   ╰── It can not be redeclared here
 9 │ }
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/compiler/numericLiteralsWithTrailingDecimalPoints01.ts:3:3]
 2 │ 1.0.toString();
 3 │ 1.toString();
   ·   ────────
 4 │ 1.+2.0 + 3. ;
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/compiler/numericLiteralsWithTrailingDecimalPoints02.ts:3:3]
 2 │ 1.0.toString();
 3 │ 1.toString();
   ·   ────────
 4 │ 1.+2.0 + 3. ;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/objectCreationExpressionInFunctionParameter.ts:6:2]
 5 │ function foo(x = new A(123)) { //should error, 123 is not string
 6 │ }}
   ·  ─
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/objectLitArrayDeclNoNew.ts:22:20]
 21 │       return {
 22 │        tokens: Gar[],//IToken[],  // Missing new. Correct syntax is: tokens: new IToken[]
    ·                    ─
 23 │        endState: state
    ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/objectLiteralMemberWithModifiers1.ts:1:11]
 1 │ var v = { public foo() { } }
   ·           ──────
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/compiler/objectLiteralMemberWithModifiers2.ts:1:11]
 1 │ var v = { public get foo() { } }
   ·           ──────
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/compiler/objectLiteralMemberWithQuestionMark1.ts:1:14]
 1 │ var v = { foo?() { } }
   ·              ┬
   ·              ╰── `,` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/objectLiteralWithSemicolons1.ts:1:12]
 1 │ var v = { a; b; c }
   ·            ┬
   ·            ╰── `,` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/objectLiteralWithSemicolons2.ts:2:4]
 1 │ var v = {
 2 │   a;
   ·    ┬
   ·    ╰── `,` expected
 3 │   b;
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/objectLiteralWithSemicolons3.ts:2:4]
 1 │ var v = {
 2 │   a;
   ·    ┬
   ·    ╰── `,` expected
 3 │   b;
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/objectLiteralWithSemicolons4.ts:3:1]
 2 │   a
 3 │ ;
   · ┬
   · ╰── `,` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/objectLiteralWithSemicolons5.ts:1:20]
 1 │ var v = { foo() { }; a: b; get baz() { }; }
   ·                    ┬
   ·                    ╰── `,` expected
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/compiler/objectTypeWithOptionalProperty1.ts:2:10]
 1 │     var b = {
 2 │         x?: 1 // error
   ·          ┬
   ·          ╰── `,` expected
 3 │     }
   ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:88:2]
 87 │ `\0`;
 88 │ `\5`;
    ·  ──
 89 │ `\00`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:89:2]
 88 │ `\5`;
 89 │ `\00`;
    ·  ───
 90 │ `\05`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:90:2]
 89 │ `\00`;
 90 │ `\05`;
    ·  ───
 91 │ `\55`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:91:2]
 90 │ `\05`;
 91 │ `\55`;
    ·  ───
 92 │ `\000`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:92:2]
 91 │ `\55`;
 92 │ `\000`;
    ·  ────
 93 │ `\005`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:93:2]
 92 │ `\000`;
 93 │ `\005`;
    ·  ────
 94 │ `\055`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:94:2]
 93 │ `\005`;
 94 │ `\055`;
    ·  ────
 95 │ `${0}\0`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:96:6]
 95 │ `${0}\0`;
 96 │ `${0}\5`;
    ·      ──
 97 │ `${0}\00`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:97:6]
 96 │ `${0}\5`;
 97 │ `${0}\00`;
    ·      ───
 98 │ `${0}\05`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:98:6]
 97 │ `${0}\00`;
 98 │ `${0}\05`;
    ·      ───
 99 │ `${0}\55`;
    ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:99:6]
  98 │ `${0}\05`;
  99 │ `${0}\55`;
     ·      ───
 100 │ `${0}\000`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:100:6]
  99 │ `${0}\55`;
 100 │ `${0}\000`;
     ·      ────
 101 │ `${0}\005`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:101:6]
 100 │ `${0}\000`;
 101 │ `${0}\005`;
     ·      ────
 102 │ `${0}\055`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:102:6]
 101 │ `${0}\005`;
 102 │ `${0}\055`;
     ·      ────
 103 │ `\0${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:104:2]
 103 │ `\0${0}`;
 104 │ `\5${0}`;
     ·  ──
 105 │ `\00${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:105:2]
 104 │ `\5${0}`;
 105 │ `\00${0}`;
     ·  ───
 106 │ `\05${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:106:2]
 105 │ `\00${0}`;
 106 │ `\05${0}`;
     ·  ───
 107 │ `\55${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:107:2]
 106 │ `\05${0}`;
 107 │ `\55${0}`;
     ·  ───
 108 │ `\000${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:108:2]
 107 │ `\55${0}`;
 108 │ `\000${0}`;
     ·  ────
 109 │ `\005${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:109:2]
 108 │ `\000${0}`;
 109 │ `\005${0}`;
     ·  ────
 110 │ `\055${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:110:2]
 109 │ `\005${0}`;
 110 │ `\055${0}`;
     ·  ────
 111 │ `${0}\0${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:112:6]
 111 │ `${0}\0${0}`;
 112 │ `${0}\5${0}`;
     ·      ──
 113 │ `${0}\00${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:113:6]
 112 │ `${0}\5${0}`;
 113 │ `${0}\00${0}`;
     ·      ───
 114 │ `${0}\05${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:114:6]
 113 │ `${0}\00${0}`;
 114 │ `${0}\05${0}`;
     ·      ───
 115 │ `${0}\55${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:115:6]
 114 │ `${0}\05${0}`;
 115 │ `${0}\55${0}`;
     ·      ───
 116 │ `${0}\000${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:116:6]
 115 │ `${0}\55${0}`;
 116 │ `${0}\000${0}`;
     ·      ────
 117 │ `${0}\005${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:117:6]
 116 │ `${0}\000${0}`;
 117 │ `${0}\005${0}`;
     ·      ────
 118 │ `${0}\055${0}`;
     ╰────

  × Bad escape sequence in untagged template literal
     ╭─[typescript/tests/cases/compiler/octalLiteralAndEscapeSequence.ts:118:6]
 117 │ `${0}\005${0}`;
 118 │ `${0}\055${0}`;
     ·      ────
     ╰────

  × Identifier `C1M5` has already been declared
    ╭─[typescript/tests/cases/compiler/optionalParamArgsTest.ts:31:12]
 30 │ 
 31 │     public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3?:number) { return C1M5A1 + C1M5A2; }
    ·            ──┬─
    ·              ╰── `C1M5` has already been declared here
 32 │ 
 33 │     // Uninitialized parameter makes the initialized one required
 34 │     public C1M5(C1M5A1:number,C1M5A2:number=0,C1M5A3:number) { return C1M5A1 + C1M5A2; }
    ·            ──┬─
    ·              ╰── It can not be redeclared here
 35 │ }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/optionalPropertiesSyntax.ts:11:7]
 10 │     (): any;
 11 │     ()?: any; //err
    ·       ─
 12 │     ?(): any; //err
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/overloadConsecutiveness.ts:3:14]
 2 │ 
 3 │ function f1(), function f1();
   ·              ▲
 4 │ function f2(), function f2() {}
   ╰────
  help: Try insert a semicolon here

  × Expected `(` but found `{`
   ╭─[typescript/tests/cases/compiler/overloadingStaticFunctionsInFunctions.ts:1:14]
 1 │ function boo {
   ·              ┬
   ·              ╰── `(` expected
 2 │   static test()
   ╰────

  × Identifier `fnOverload` has already been declared
   ╭─[typescript/tests/cases/compiler/overloadsWithinClasses.ts:3:12]
 2 │  
 3 │     static fnOverload( ) {}
   ·            ─────┬────
   ·                 ╰── `fnOverload` has already been declared here
 4 │  
 5 │     static fnOverload(foo: string){ } // error
   ·            ─────┬────
   ·                 ╰── It can not be redeclared here
 6 │  
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/compiler/parameterPropertyOutsideConstructor.ts:2:9]
 1 │ class C {
 2 │     foo(public x) {
   ·         ────────
 3 │     }
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/compiler/parametersSyntaxErrorNoCrash1.ts:3:28]
 2 │ 
 3 │ function identity<T>(arg: T: T {
   ·                            ┬
   ·                            ╰── `,` expected
 4 │     return arg;
   ╰────

  × Expected `:` but found `string`
   ╭─[typescript/tests/cases/compiler/parametersSyntaxErrorNoCrash2.ts:3:44]
 2 │ 
 3 │ export default function getThing( { return 'thing'; }
   ·                                            ───┬───
   ·                                               ╰── `:` expected
   ╰────

  × Expected `:` but found `string`
   ╭─[typescript/tests/cases/compiler/parametersSyntaxErrorNoCrash3.ts:4:13]
 3 │ export function getHtml({
 4 │     return  " string" // a long string;
   ·             ────┬────
   ·                 ╰── `:` expected
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parse1.ts:4:1]
 3 │  bar.
 4 │ }
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parse2.ts:3:1]
 2 │  foo(
 3 │ }
   · ─
   ╰────

  × Invalid characters after number
    ╭─[typescript/tests/cases/compiler/parseBigInt.ts:56:25]
 55 │ // In separate blocks because they each declare an "n" variable
 56 │ { const legacyOct = 0123n; }
    ·                         ─
 57 │ { const scientific = 1e2n; }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseCommaSeparatedNewlineNew.ts:2:4]
 1 │ (a,
 2 │ new)
   ·    ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseErrorDoubleCommaInCall.ts:2:10]
 1 │ Boolean({
 2 │     x: 0,,
   ·          ─
 3 │ });
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/compiler/parseErrorInHeritageClause1.ts:1:19]
 1 │ class C extends A ¬ {
   ·                   ─
 2 │ }
   ╰────

  × Expected `{` but found `Unknown`
   ╭─[typescript/tests/cases/compiler/parseErrorInHeritageClause1.ts:1:19]
 1 │ class C extends A ¬ {
   ·                   ┬
   ·                   ╰── `{` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseErrorIncorrectReturnToken.ts:2:17]
 1 │ type F1 = {
 2 │     (n: number) => string; // should be : not =>
   ·                 ──
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/parseInvalidNames.ts:1:10]
 1 │ namespace 100 {}
   ·          ▲
 2 │ interface 100 {}
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseJsxElementInUnaryExpressionNoCrash1.ts:1:4]
 1 │ ~< <
   ·    ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseJsxElementInUnaryExpressionNoCrash2.ts:1:9]
 1 │ ~<></> <
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseJsxElementInUnaryExpressionNoCrash3.ts:1:4]
 1 │ !< {:>
   ·    ─
   ╰────

  × Expected `<` but found `EOF`
   ╭─[typescript/tests/cases/compiler/parseUnaryExpressionNoTypeAssertionInJsx1.ts:2:24]
 1 │ const x = "oops";
 2 │ const y = + <number> x;
   ╰────

  × Expected `<` but found `EOF`
   ╭─[typescript/tests/cases/compiler/parseUnaryExpressionNoTypeAssertionInJsx2.ts:2:18]
 1 │ const x = "oops";
 2 │ const y = + <> x;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseUnaryExpressionNoTypeAssertionInJsx3.ts:2:14]
 1 │ const x = "oops";
 2 │ const y = + <1234> x;
   ·              ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseUnaryExpressionNoTypeAssertionInJsx4.ts:5:13]
 4 │ const b = + <> x;
 5 │ const c = + <1234> x;
   ·             ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parseUnmatchedTypeAssertion.ts:1:2]
 1 │ @<[[import(obju2c77,
   ·  ─
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:2:14]
 1 │ class C {
 2 │   constructor<>() { }
   ·              ──
 3 │   constructor<> () { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:3:14]
 2 │   constructor<>() { }
 3 │   constructor<> () { }
   ·              ──
 4 │   constructor <>() { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:4:15]
 3 │   constructor<> () { }
 4 │   constructor <>() { }
   ·               ──
 5 │   constructor <> () { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:5:15]
 4 │   constructor <>() { }
 5 │   constructor <> () { }
   ·               ──
 6 │   constructor< >() { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:6:14]
 5 │   constructor <> () { }
 6 │   constructor< >() { }
   ·              ───
 7 │   constructor< > () { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:7:14]
 6 │   constructor< >() { }
 7 │   constructor< > () { }
   ·              ───
 8 │   constructor < >() { }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:8:15]
 7 │   constructor< > () { }
 8 │   constructor < >() { }
   ·               ───
 9 │   constructor < > () { }
   ╰────

  × Type parameter list cannot be empty.
    ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:9:15]
  8 │   constructor < >() { }
  9 │   constructor < > () { }
    ·               ───
 10 │ }
    ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/compiler/parserConstructorDeclaration12.ts:2:3]
 1 │ class C {
 2 │   constructor<>() { }
   ·   ─────┬─────
   ·        ╰── constructor has already been declared here
 3 │   constructor<> () { }
   ·   ─────┬─────
   ·        ╰── it cannot be redeclared here
 4 │   constructor <>() { }
   ╰────

  × Expected `in` but found `]`
   ╭─[typescript/tests/cases/compiler/parserPrivateIdentifierInArrayAssignment.ts:1:6]
 1 │ [#abc]=
   ·      ┬
   ·      ╰── `in` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/compiler/parserUnparsedTokenCrash1.ts:1:9]
 1 │ ( y = 1 ; 2 )
   ·         ┬
   ·         ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/parserUnparsedTokenCrash2.ts:1:10]
 1 │ export = } x = ( y = z ==== 'function') {
   ·          ─
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/prettyContextNotDebugAssertion.ts:1:12]
 1 │ if (true) {
   ╰────

  × 'export' modifier cannot be used here.
     ╭─[typescript/tests/cases/compiler/privacyImportParseErrors.ts:326:9]
 325 │ 
 326 │ declare export module "anotherParseError2" {
     ·         ──────
 327 │     module m2 {
     ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/privateNameJsx.tsx:4:22]
 3 │     render() {
 4 │         return <this.#prop />;
   ·                      ─────
 5 │     }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/propertyWrappedInTry.ts:3:8]
 2 │ 
 3 │     try {
   ·        ▲
 4 │ 
   ╰────
  help: Try insert a semicolon here

  × Identifier `bar` has already been declared
   ╭─[typescript/tests/cases/compiler/reassignStaticProp.ts:3:12]
 2 │  
 3 │     static bar = 1;
   ·            ─┬─
   ·             ╰── `bar` has already been declared here
 4 │  
 5 │     static bar:string; // errror - duplicate id
   ·            ─┬─
   ·             ╰── It can not be redeclared here
 6 │  
   ╰────

  × Identifier `e` has already been declared
   ╭─[typescript/tests/cases/compiler/redeclareParameterInCatchBlock.ts:3:9]
 2 │ 
 3 │ } catch(e) {
   ·         ┬
   ·         ╰── `e` has already been declared here
 4 │     const e = null;
   ·           ┬
   ·           ╰── It can not be redeclared here
 5 │ }
   ╰────

  × Identifier `e` has already been declared
    ╭─[typescript/tests/cases/compiler/redeclareParameterInCatchBlock.ts:9:9]
  8 │ 
  9 │ } catch(e) {
    ·         ┬
    ·         ╰── `e` has already been declared here
 10 │     let e;
    ·         ┬
    ·         ╰── It can not be redeclared here
 11 │ }
    ╰────

  × Identifier `b` has already been declared
    ╭─[typescript/tests/cases/compiler/redeclareParameterInCatchBlock.ts:15:14]
 14 │ 
 15 │ } catch ([a, b]) {
    ·              ┬
    ·              ╰── `b` has already been declared here
 16 │     const [c, b] = [0, 1];
    ·               ┬
    ·               ╰── It can not be redeclared here
 17 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/compiler/redeclareParameterInCatchBlock.ts:21:15]
 20 │ 
 21 │ } catch ({ a: x, b: x }) {
    ·               ┬     ┬
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 22 │ 
    ╰────

  × Invalid regular expression: Unterminated character class
   ╭─[typescript/tests/cases/compiler/regExpWithOpenBracketInCharClass.ts:4:4]
 3 │   /[[]/u, // Valid
 4 │   /[[]/v, // Well-terminated regex with an incomplete character class
   ·    ───
 5 │ ];
   ╰────

  × Invalid regular expression: Could not parse the entire pattern
   ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:7:5]
 6 │   // Compare to
 7 │   /\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s/u,
   ·     ▲
 8 │   /[\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s]/u,
   ╰────

  × Invalid regular expression: Invalid class atom
   ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:8:5]
 7 │   /\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s/u,
 8 │   /[\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s]/u,
   ·     ─
 9 │   /\P[\P\w-_]/u,
   ╰────

  × Invalid regular expression: Unterminated unicode property escape
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:9:4]
  8 │   /[\q\u\i\c\k\_\f\o\x\-\j\u\m\p\s]/u,
  9 │   /\P[\P\w-_]/u,
    ·    ──
 10 │ ];
    ╰────

  × Invalid regular expression: Invalid braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:23:4]
 22 │   /{,1}??/,
 23 │   /{1}??/,
    ·    ────
 24 │   /{1,}??/,
    ╰────

  × Invalid regular expression: Invalid braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:24:4]
 23 │   /{1}??/,
 24 │   /{1,}??/,
    ·    ─────
 25 │   /{1,2}??/,
    ╰────

  × Invalid regular expression: Invalid braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:25:4]
 24 │   /{1,}??/,
 25 │   /{1,2}??/,
    ·    ──────
 26 │   /{2,1}??/,
    ╰────

  × Invalid regular expression: Numbers out of order in braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:26:4]
 25 │   /{1,2}??/,
 26 │   /{2,1}??/,
    ·    ─────
 27 │ 
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:29:4]
 28 │   // Compare to
 29 │   /{??/u,
    ·    ▲
 30 │   /{,??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:30:4]
 29 │   /{??/u,
 30 │   /{,??/u,
    ·    ▲
 31 │   /{,1??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:31:4]
 30 │   /{,??/u,
 31 │   /{,1??/u,
    ·    ▲
 32 │   /{1??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:32:4]
 31 │   /{,1??/u,
 32 │   /{1??/u,
    ·    ▲
 33 │   /{1,??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:33:4]
 32 │   /{1??/u,
 33 │   /{1,??/u,
    ·    ▲
 34 │   /{1,2??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:34:4]
 33 │   /{1,??/u,
 34 │   /{1,2??/u,
    ·    ▲
 35 │   /{2,1??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:35:4]
 34 │   /{1,2??/u,
 35 │   /{2,1??/u,
    ·    ▲
 36 │   /{}??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:36:4]
 35 │   /{2,1??/u,
 36 │   /{}??/u,
    ·    ▲
 37 │   /{,}??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:37:4]
 36 │   /{}??/u,
 37 │   /{,}??/u,
    ·    ▲
 38 │   /{,1}??/u,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:38:4]
 37 │   /{,}??/u,
 38 │   /{,1}??/u,
    ·    ▲
 39 │   /{1}??/u,
    ╰────

  × Invalid regular expression: Lone quantifier found, expected with `Atom`
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:39:4]
 38 │   /{,1}??/u,
 39 │   /{1}??/u,
    ·    ────
 40 │   /{1,}??/u,
    ╰────

  × Invalid regular expression: Lone quantifier found, expected with `Atom`
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:40:4]
 39 │   /{1}??/u,
 40 │   /{1,}??/u,
    ·    ─────
 41 │   /{1,2}??/u,
    ╰────

  × Invalid regular expression: Lone quantifier found, expected with `Atom`
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:41:4]
 40 │   /{1,}??/u,
 41 │   /{1,2}??/u,
    ·    ──────
 42 │   /{2,1}??/u,
    ╰────

  × Invalid regular expression: Numbers out of order in braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionAnnexB.ts:42:4]
 41 │   /{1,2}??/u,
 42 │   /{2,1}??/u,
    ·    ─────
 43 │ ];
    ╰────

  × Invalid regular expression: Character class atom range out of order
   ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:7:8]
 6 │ const regexes: RegExp[] = [
 7 │     /[𝘈-𝘡][𝘡-𝘈]/,
   ·        ──
 8 │     /[𝘈-𝘡][𝘡-𝘈]/u,
   ╰────

  × Invalid regular expression: Character class atom range out of order
   ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:8:19]
 7 │     /[𝘈-𝘡][𝘡-𝘈]/,
 8 │     /[𝘈-𝘡][𝘡-𝘈]/u,
   ·             ──
 9 │     /[𝘈-𝘡][𝘡-𝘈]/v,
   ╰────

  × Invalid regular expression: Character class set range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:9:15]
  8 │     /[𝘈-𝘡][𝘡-𝘈]/u,
  9 │     /[𝘈-𝘡][𝘡-𝘈]/v,
    ·            ───
 10 │ 
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:11:13]
 10 │ 
 11 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/,
    ·                ───
 12 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/u,
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:12:34]
 11 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/,
 12 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/u,
    ·                                     ──────────
 13 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/v,
    ╰────

  × Invalid regular expression: Character class set range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:13:25]
 12 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/u,
 13 │     /[\u{1D608}-\u{1D621}][\u{1D621}-\u{1D608}]/v,
    ·                            ───────────────────
 14 │ 
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:15:16]
 14 │ 
 15 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/,
    ·                   ───────
 16 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/u,
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:16:43]
 15 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/,
 16 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/u,
    ·                                              ─────────────
 17 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/v,
    ╰────

  × Invalid regular expression: Character class set range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionCharacterClassRangeOrder.ts:17:31]
 16 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/u,
 17 │     /[\uD835\uDE08-\uD835\uDE21][\uD835\uDE21-\uD835\uDE08]/v,
    ·                                  ─────────────────────────
 18 │ ];
    ╰────

  × Invalid regular expression: Group specifier is empty
   ╭─[typescript/tests/cases/compiler/regularExpressionGroupNameSuggestions.ts:1:24]
 1 │ const regex = /(?<foo>)\k<Foo>/;
   ·                        ───────
   ╰────

  × Unexpected flag a in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:11]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·              ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag l in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:12]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·               ─
 4 │     // Pattern modifiers
   ╰────

  × Flag s is mentioned twice in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:13]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag t in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:14]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                 ─
 4 │     // Pattern modifiers
   ╰────

  × Flag u is mentioned twice in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:15]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                  ─
 4 │     // Pattern modifiers
   ╰────

  × Flag i is mentioned twice in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:17]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                    ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag o in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:18]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                     ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag c in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:19]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                      ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag o in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:20]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                       ─
 4 │     // Pattern modifiers
   ╰────

  × Flag d is mentioned twice in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:21]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                        ─
 4 │     // Pattern modifiers
   ╰────

  × Unexpected flag e in regular expression literal
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:22]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·                         ─
 4 │     // Pattern modifiers
   ╰────

  × Invalid regular expression: Missing capturing group name
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:5:3]
 4 │     // Pattern modifiers
 5 │     /(?med-ium:bar)/,
   ·      ──
 6 │     // Capturing groups
   ╰────

  × Invalid regular expression: Invalid indexed reference
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:13:8]
 12 │     /\2()(\12)(foo)\1\0[\0\1\01\123\08\8](\3\03)\5\005\9\009/,
 13 │     /\2()(\12)(foo)\1\0[\0\1\01\123\08\8](\3\03)\5\005\9\009/u,
    ·           ───
 14 │     /(?<foo>)((?<bar>bar)bar)(?<baz>baz)|(foo(?<foo>foo))(?<baz>)/,
    ╰────

  × Invalid regular expression: Duplicated capturing group names
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:14:46]
 13 │     /\2()(\12)(foo)\1\0[\0\1\01\123\08\8](\3\03)\5\005\9\009/u,
 14 │     /(?<foo>)((?<bar>bar)bar)(?<baz>baz)|(foo(?<foo>foo))(?<baz>)/,
    ·                                                 ───         ───
 15 │     /(\k<bar>)\k<absent>(?<foo>foo)|(?<bar>)((?<foo>)|(bar(?<bar>bar)))/,
    ╰────

  × Invalid regular expression: Duplicated capturing group names
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:15:59]
 14 │     /(?<foo>)((?<bar>bar)bar)(?<baz>baz)|(foo(?<foo>foo))(?<baz>)/,
 15 │     /(\k<bar>)\k<absent>(?<foo>foo)|(?<bar>)((?<foo>)|(bar(?<bar>bar)))/,
    ·                                                              ───
 16 │     // Quantifiers
    ╰────

  × Invalid regular expression: Numbers out of order in braced quantifier
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:17:31]
 16 │     // Quantifiers
 17 │     /{}{1,2}_{3}.{4,}?(foo){008}${32,16}\b{064,128}.+&*?\???\n{,256}{\\{,/,
    ·                                  ───────
 18 │     // Character classes
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:19:13]
 18 │     // Character classes
 19 │     /[-A-Za-z-z-aZ-A\d_-\d-.-.\r-\n\w-\W]/,
    ·                ──
 20 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/,
    ╰────

  × Invalid regular expression: Invalid unicode property name and/or value
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:21:28]
 20 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/,
 21 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/u,
    ·                               ───────
 22 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/v,
    ╰────

  × Invalid regular expression: Invalid unicode property name and/or value
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:22:28]
 21 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/u,
 22 │     /\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/v,
    ·                               ───────
 23 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/,
    ╰────

  × Invalid regular expression: Invalid unicode property name
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:24:22]
 23 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/,
 24 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/u,
    ·                         ─────
 25 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/v,
    ╰────

  × Invalid regular expression: Invalid unicode property name
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:25:22]
 24 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/u,
 25 │     /\p{InvalidProperty=Value}\p{=}\p{sc=}\P{=foo}[\p{}\p\\\P\P{]\p{/v,
    ·                         ─────
 26 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/,
    ╰────

  × Invalid regular expression: Invalid unicode property `RGI_Emoji`
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:27:6]
 26 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/,
 27 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/u,
    ·         ─────────
 28 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/v,
    ╰────
  help: Enable `UnicodeSetsMode` to use this property

  × Invalid regular expression: Invalid property name `RGI_Emoji`(negative + property of strings)
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:28:16]
 27 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/u,
 28 │     /\p{RGI_Emoji}\P{RGI_Emoji}[^\p{RGI_Emoji}\P{RGI_Emoji}]/v,
    ·                   ─────────────
 29 │     // Character escapes
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:31:4]
 30 │     /\c[\c0\ca\cQ\c\C]\c1\C/,
 31 │     /\c[\c0\ca\cQ\c\C]\c1\C/u,
    ·       ▲
 32 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:33:4]
 32 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/,
 33 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/u,
    ·       ▲
 34 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/v,
    ╰────

  × Invalid regular expression: Could not parse the entire pattern
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:34:4]
 33 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/u,
 34 │     /\q\\\`[\q\\\`[\Q\\\Q{\q{foo|bar|baz]\q{]\q{/v,
    ·       ▲
 35 │     // Unicode sets notation
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:36:5]
 35 │     // Unicode sets notation
 36 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/,
    ·        ──
 37 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/u,
    ╰────

  × Invalid regular expression: Character class atom range out of order
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:37:5]
 36 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/,
 37 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/u,
    ·        ──
 38 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/v,
    ╰────

  × Invalid regular expression: Unexpected character inside of class subtraction
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:38:8]
 37 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/u,
 38 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/v,
    ·           ▲
 39 │     /[[^\P{Decimal_Number}&&[0-9]]&&\p{L}&&\p{ID_Continue}--\p{ASCII}\p{CWCF}]/v,
    ╰────

  × Invalid regular expression: Unexpected character inside of class intersection
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:39:56]
 38 │     /[a--b[--][\d++[]]&&[[&0-9--]&&[\p{L}]--\P{L}-_-]]&&&\q{foo}[0---9][&&q&&&\q{bar}&&]/v,
 39 │     /[[^\P{Decimal_Number}&&[0-9]]&&\p{L}&&\p{ID_Continue}--\p{ASCII}\p{CWCF}]/v,
    ·                                                           ▲
 40 │     /[^\p{Emoji}\p{RGI_Emoji}][^\p{Emoji}--\p{RGI_Emoji}][^\p{Emoji}&&\p{RGI_Emoji}]/v,
    ╰────

  × Invalid regular expression: Invalid character class with strings unicode property
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:40:3]
 39 │     /[[^\P{Decimal_Number}&&[0-9]]&&\p{L}&&\p{ID_Continue}--\p{ASCII}\p{CWCF}]/v,
 40 │     /[^\p{Emoji}\p{RGI_Emoji}][^\p{Emoji}--\p{RGI_Emoji}][^\p{Emoji}&&\p{RGI_Emoji}]/v,
    ·      ─────────────────────────
 41 │     /[^\p{RGI_Emoji}\p{Emoji}][^\p{RGI_Emoji}--\p{Emoji}][^\p{RGI_Emoji}&&\p{Emoji}]/v,
    ╰────

  × Invalid regular expression: Invalid character class with strings unicode property
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:41:3]
 40 │     /[^\p{Emoji}\p{RGI_Emoji}][^\p{Emoji}--\p{RGI_Emoji}][^\p{Emoji}&&\p{RGI_Emoji}]/v,
 41 │     /[^\p{RGI_Emoji}\p{Emoji}][^\p{RGI_Emoji}--\p{Emoji}][^\p{RGI_Emoji}&&\p{Emoji}]/v,
    ·      ─────────────────────────
 42 │     /[^\p{RGI_Emoji}\q{foo}][^\p{RGI_Emoji}--\q{foo}][^\p{RGI_Emoji}&&\q{foo}]/v,
    ╰────

  × Invalid regular expression: Invalid character class with strings unicode property
    ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:42:3]
 41 │     /[^\p{RGI_Emoji}\p{Emoji}][^\p{RGI_Emoji}--\p{Emoji}][^\p{RGI_Emoji}&&\p{Emoji}]/v,
 42 │     /[^\p{RGI_Emoji}\q{foo}][^\p{RGI_Emoji}--\q{foo}][^\p{RGI_Emoji}&&\q{foo}]/v,
    ·      ───────────────────────
 43 │     /[^\p{Emoji}[[\p{RGI_Emoji}]]][^\p{Emoji}--[[\p{RGI_Emoji}]]][^\p{Emoji}&&[[\p{RGI_Emoji}]]]/v,
    ╰────

  × The 'u' and 'v' regular expression flags cannot be enabled at the same time
   ╭─[typescript/tests/cases/compiler/regularExpressionScanning.ts:3:2]
 2 │     // Flags
 3 │     /foo/visualstudiocode,
   ·     ─────────────────────
 4 │     // Pattern modifiers
   ╰────

  × Invalid regular expression: Invalid unicode property name and/or value
   ╭─[typescript/tests/cases/compiler/regularExpressionUnicodePropertyValueExpressionSuggestions.ts:1:19]
 1 │ const regex = /\p{ascii}\p{Sc=Unknown}\p{sc=unknownX}\p{Script_Declensions=Inherited}\p{scx=inherit}/u;
   ·                   ─────
   ╰────

  × Invalid regular expression: Missing capturing group name
   ╭─[typescript/tests/cases/compiler/regularExpressionWithNonBMPFlags.ts:7:31]
 6 │ // See https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
 7 │ const 𝘳𝘦𝘨𝘦𝘹 = /(?𝘴𝘪-𝘮:^𝘧𝘰𝘰.)/𝘨𝘮𝘶;
   ·                ──
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/regularExpressionWithNonBMPFlags.ts:7:63]
 6 │ // See https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols
 7 │ const 𝘳𝘦𝘨𝘦𝘹 = /(?𝘴𝘪-𝘮:^𝘧𝘰𝘰.)/𝘨𝘮𝘶;
   ·                              ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `from` but found `while`
   ╭─[typescript/tests/cases/compiler/reservedWords2.ts:1:8]
 1 │ import while = require("dfdf");
   ·        ──┬──
   ·          ╰── `from` expected
 2 │ import * as  while from "foo"
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/reservedWords3.ts:1:13]
 1 │ function f1(enum) {}
   ·             ────
 2 │ function f2(class) {}
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/restArgMissingName.ts:1:18]
 1 │ function sum (...) {} 
   ·                  ─
   ╰────

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/compiler/restParamAsOptional.ts:1:16]
 1 │ function f(...x?) { }
   ·                ─
 2 │ function f2(...x = []) { }
   ╰────

  × A rest parameter cannot have an initializer
   ╭─[typescript/tests/cases/compiler/restParamAsOptional.ts:2:16]
 1 │ function f(...x?) { }
 2 │ function f2(...x = []) { }
   ·                ──────
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/compiler/restParamModifier.ts:2:27]
 1 │ class C {
 2 │     constructor(...public rest: string[]) {}
   ·                           ──┬─
   ·                             ╰── `,` expected
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/restParamModifier2.ts:2:24]
 1 │ class C {
 2 │     constructor(public ...rest: string[]) {}
   ·                        ───
 3 │ }
   ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/compiler/restParameterNotLast.ts:1:12]
 1 │ function f(...x, y) { }
   ·            ────
   ╰────

  × A rest parameter cannot have an initializer
   ╭─[typescript/tests/cases/compiler/restParameterWithBindingPattern3.ts:3:19]
 2 │ 
 3 │ function b(...[...foo = []]: string[]) { }
   ·                   ────────
 4 │ 
   ╰────

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/compiler/selfReferentialDefaultNoStackOverflow.ts:1:1]
 1 │ import DefaultSpinner from './QSpinner'
   · ──────
 2 │ 
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/compiler/selfReferentialDefaultNoStackOverflow.ts:3:1]
 2 │ 
 3 │ export default {
   · ──────
 4 │   mixins: [DefaultSpinner],
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowedFunctionScopedVariablesByBlockScopedOnes.ts:4:14]
 3 │ function test1() {
 4 │     for (let v; ; ) { var v; }
   ·              ┬            ┬
   ·              │            ╰── It can not be redeclared here
   ·              ╰── `v` has already been declared here
 5 │ }
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowedFunctionScopedVariablesByBlockScopedOnes.ts:7:14]
 6 │ function test2() {
 7 │     for (let v in []) { var v; }
   ·              ┬              ┬
   ·              │              ╰── It can not be redeclared here
   ·              ╰── `v` has already been declared here
 8 │ }
   ╰────

  × Identifier `v` has already been declared
    ╭─[typescript/tests/cases/compiler/shadowedFunctionScopedVariablesByBlockScopedOnes.ts:10:14]
  9 │ function test3() {
 10 │     for (let v of []) { var v; }
    ·              ┬              ┬
    ·              │              ╰── It can not be redeclared here
    ·              ╰── `v` has already been declared here
 11 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/compiler/shadowedFunctionScopedVariablesByBlockScopedOnes.ts:14:13]
 13 │     {
 14 │         let x;
    ·             ┬
    ·             ╰── `x` has already been declared here
 15 │         {
 16 │             var x;
    ·                 ┬
    ·                 ╰── It can not be redeclared here
 17 │         }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/compiler/shadowedFunctionScopedVariablesByBlockScopedOnes.ts:23:17]
 22 │         {
 23 │             var x;
    ·                 ┬
    ·                 ╰── `x` has already been declared here
 24 │         }
 25 │         let x;
    ·             ┬
    ·             ╰── It can not be redeclared here
 26 │     }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValue.ts:2:9]
 1 │ {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     {
 4 │         var x = 1;
   ·             ┬
   ·             ╰── It can not be redeclared here
 5 │     }
   ╰────

  × Identifier `x1` has already been declared
    ╭─[typescript/tests/cases/compiler/shadowingViaLocalValue.ts:9:9]
  8 │ {
  9 │     let x1;
    ·         ─┬
    ·          ╰── `x1` has already been declared here
 10 │     {
 11 │         for (var x1 = 0; ;);
    ·                  ─┬
    ·                   ╰── It can not be redeclared here
 12 │     }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:2:9]
 1 │ if (true) {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     if (true) {
 4 │         var x = 0; // Error
   ·             ┬
   ·             ╰── It can not be redeclared here
 5 │         var { x = 0 } = { x: 0 }; // Error
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:2:9]
 1 │ if (true) {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     if (true) {
 4 │         var x = 0; // Error
 5 │         var { x = 0 } = { x: 0 }; // Error
   ·               ┬
   ·               ╰── It can not be redeclared here
 6 │         var { x: x = 0 } = { x: 0 }; // Error
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:2:9]
 1 │ if (true) {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     if (true) {
   ╰────
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:6:18]
 5 │         var { x = 0 } = { x: 0 }; // Error
 6 │         var { x: x = 0 } = { x: 0 }; // Error
   ·                  ┬
   ·                  ╰── It can not be redeclared here
 7 │         var { x } = { x: 0 }; // Error
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:2:9]
 1 │ if (true) {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     if (true) {
   ╰────
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:7:15]
 6 │         var { x: x = 0 } = { x: 0 }; // Error
 7 │         var { x } = { x: 0 }; // Error
   ·               ┬
   ·               ╰── It can not be redeclared here
 8 │         var { x: x } = { x: 0 }; // Error
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:2:9]
 1 │ if (true) {
 2 │     let x;
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     if (true) {
   ╰────
   ╭─[typescript/tests/cases/compiler/shadowingViaLocalValueOrBindingElement.ts:8:18]
 7 │         var { x } = { x: 0 }; // Error
 8 │         var { x: x } = { x: 0 }; // Error
   ·                  ┬
   ·                  ╰── It can not be redeclared here
 9 │     }
   ╰────

  × Invalid Character `!`
   ╭─[typescript/tests/cases/compiler/shebangError.ts:2:2]
 1 │ var foo = 'Shebang is only allowed on the first line';
 2 │ #!/usr/bin/env node
   ·  ─
   ╰────

  × Invalid assignment in object literal
     ╭─[typescript/tests/cases/compiler/shorthandPropertyAssignmentsInDestructuring.ts:111:12]
 110 │ (function() {
 111 │     let a = { s = 5 };
     ·               ─────
 112 │ });
     ╰────
  help: Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.

  × Invalid assignment in object literal
     ╭─[typescript/tests/cases/compiler/shorthandPropertyAssignmentsInDestructuring_ES6.ts:111:12]
 110 │ (function() {
 111 │     let a = { s = 5 };
     ·               ─────
 112 │ });
     ╰────
  help: Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/compiler/slashBeforeVariableDeclaration1.ts:1:2]
 1 │ \ declare var v;
   ·  ─
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/compiler/slashBeforeVariableDeclaration1.ts:1:1]
 1 │ \ declare var v;
   · ─────────
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/compiler/sourceMapValidationEnums.ts:2:5]
 1 │ enum e {
 2 │     x,
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │     y,
 4 │     x
   ·     ┬
   ·     ╰── It can not be redeclared here
 5 │ }
   ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/sourceMapValidationStatements.ts:43:5]
 42 │     }
 43 │     with (obj) {
    ·     ────
 44 │         i = 2;
    ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/compiler/spaceBeforeQuestionMarkInPropertyAssignment.ts:1:12]
 1 │ var x = {x ?: 1} // should not crash
   ·            ┬
   ·            ╰── `,` expected
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/compiler/standaloneBreak.ts:1:1]
 1 │ break;
   · ──────
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/staticClassProps.ts:4:15]
 3 │     public foo() {
 4 │         static z = 1;
   ·               ▲
 5 │     }
   ╰────
  help: Try insert a semicolon here

  × Classes may not have a static property named prototype
   ╭─[typescript/tests/cases/compiler/staticPrototypeProperty.ts:2:11]
 1 │ class C {
 2 │    static prototype() { }
   ·           ─────────
 3 │ }
   ╰────

  × Classes may not have a static property named prototype
   ╭─[typescript/tests/cases/compiler/staticPrototypeProperty.ts:6:11]
 5 │ class C2 {
 6 │    static prototype;
   ·           ─────────
 7 │ }
   ╰────

  × Expected `(` but found `{`
   ╭─[typescript/tests/cases/compiler/staticsInAFunction.ts:1:13]
 1 │ function boo{
   ·             ┬
   ·             ╰── `(` expected
 2 │    static test()
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/staticsInConstructorBodies.ts:3:9]
 2 │     constructor() {
 3 │         static p1 = 0; // ERROR
   ·               ▲
 4 │         static m1() {} // ERROR
   ╰────
  help: Try insert a semicolon here

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:1:5]
 1 │ let let = 10;
   ·     ───
 2 │ 
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:5:9]
 4 │     "use strict"
 5 │     var public = 10;
   ·         ──────
 6 │     var static = "hi";
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:6:9]
 5 │     var public = 10;
 6 │     var static = "hi";
   ·         ──────
 7 │     let let = "blah";
   ╰────

  × The keyword 'let' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:7:9]
 6 │     var static = "hi";
 7 │     let let = "blah";
   ·         ───
 8 │     var package = "hello"
   ╰────

  × The keyword 'package' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:8:9]
 7 │     let let = "blah";
 8 │     var package = "hello"
   ·         ───────
 9 │     function package() { }
   ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:9:14]
  8 │     var package = "hello"
  9 │     function package() { }
    ·              ───────
 10 │     function bar(private, implements, let) { }
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:10:18]
  9 │     function package() { }
 10 │     function bar(private, implements, let) { }
    ·                  ───────
 11 │     function baz<implements, protected>() { }
    ╰────

  × The keyword 'implements' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:10:27]
  9 │     function package() { }
 10 │     function bar(private, implements, let) { }
    ·                           ──────────
 11 │     function baz<implements, protected>() { }
    ╰────

  × The keyword 'let' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:10:39]
  9 │     function package() { }
 10 │     function bar(private, implements, let) { }
    ·                                       ───
 11 │     function baz<implements, protected>() { }
    ╰────

  × The keyword 'implements' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:11:18]
 10 │     function bar(private, implements, let) { }
 11 │     function baz<implements, protected>() { }
    ·                  ──────────
 12 │     function barn(cb: (private, public, package) => void) { }
    ╰────

  × The keyword 'protected' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:11:30]
 10 │     function bar(private, implements, let) { }
 11 │     function baz<implements, protected>() { }
    ·                              ─────────
 12 │     function barn(cb: (private, public, package) => void) { }
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:12:24]
 11 │     function baz<implements, protected>() { }
 12 │     function barn(cb: (private, public, package) => void) { }
    ·                        ───────
 13 │     barn((private, public, package) => { });
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:12:33]
 11 │     function baz<implements, protected>() { }
 12 │     function barn(cb: (private, public, package) => void) { }
    ·                                 ──────
 13 │     barn((private, public, package) => { });
    ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:12:41]
 11 │     function baz<implements, protected>() { }
 12 │     function barn(cb: (private, public, package) => void) { }
    ·                                         ───────
 13 │     barn((private, public, package) => { });
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:13:11]
 12 │     function barn(cb: (private, public, package) => void) { }
 13 │     barn((private, public, package) => { });
    ·           ───────
 14 │ 
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:13:20]
 12 │     function barn(cb: (private, public, package) => void) { }
 13 │     barn((private, public, package) => { });
    ·                    ──────
 14 │ 
    ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:13:28]
 12 │     function barn(cb: (private, public, package) => void) { }
 13 │     barn((private, public, package) => { });
    ·                            ───────
 14 │ 
    ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:15:25]
 14 │ 
 15 │     var myClass = class package extends public {}
    ·                         ───────
 16 │ 
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:15:41]
 14 │ 
 15 │     var myClass = class package extends public {}
    ·                                         ──────
 16 │ 
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:17:12]
 16 │ 
 17 │     var b: public.bar;
    ·            ──────
 18 │ 
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:19:21]
 18 │ 
 19 │     function foo(x: private.x) { }
    ·                     ───────
 20 │     function foo1(x: private.package.x) { }
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:20:22]
 19 │     function foo(x: private.x) { }
 20 │     function foo1(x: private.package.x) { }
    ·                      ───────
 21 │     function foo2(x: private.package.protected) { }
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:21:22]
 20 │     function foo1(x: private.package.x) { }
 21 │     function foo2(x: private.package.protected) { }
    ·                      ───────
 22 │     let b: interface.package.implements.B;
    ╰────

  × Identifier `b` has already been declared
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:17:9]
 16 │ 
 17 │     var b: public.bar;
    ·         ──────┬──────
    ·               ╰── `b` has already been declared here
 18 │ 
 19 │     function foo(x: private.x) { }
 20 │     function foo1(x: private.package.x) { }
 21 │     function foo2(x: private.package.protected) { }
 22 │     let b: interface.package.implements.B;
    ·         ────────────────┬────────────────
    ·                         ╰── It can not be redeclared here
 23 │     ublic();
    ╰────

  × The keyword 'interface' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:22:12]
 21 │     function foo2(x: private.package.protected) { }
 22 │     let b: interface.package.implements.B;
    ·            ─────────
 23 │     ublic();
    ╰────

  × The keyword 'static' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord.ts:24:5]
 23 │     ublic();
 24 │     static();
    ·     ──────
 25 │ }
    ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:2:11]
 1 │ "use strict"
 2 │ interface public { }
   ·           ──────
 3 │ interface implements {
   ╰────

  × The keyword 'implements' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:3:11]
 2 │ interface public { }
 3 │ interface implements {
   ·           ──────────
 4 │     foo(package, protected);
   ╰────

  × The keyword 'package' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:4:9]
 3 │ interface implements {
 4 │     foo(package, protected);
   ·         ───────
 5 │ }
   ╰────

  × The keyword 'protected' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:4:18]
 3 │ interface implements {
 4 │     foo(package, protected);
   ·                  ─────────
 5 │ }
   ╰────

  × The keyword 'package' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:6:6]
 5 │ }
 6 │ enum package { }
   ·      ───────
 7 │ enum foo {
   ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWord2.ts:13:12]
 12 │ 
 13 │ const enum private {
    ·            ───────
 14 │     public,
    ╰────

  × The keyword 'private' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:4:17]
 3 │ class Foo {
 4 │     constructor(private, public, static) {
   ·                 ───────
 5 │         private = public = static;
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:4:26]
 3 │ class Foo {
 4 │     constructor(private, public, static) {
   ·                          ──────
 5 │         private = public = static;
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:4:34]
 3 │ class Foo {
 4 │     constructor(private, public, static) {
   ·                                  ──────
 5 │         private = public = static;
   ╰────

  × The keyword 'private' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:5:9]
 4 │     constructor(private, public, static) {
 5 │         private = public = static;
   ·         ───────
 6 │     }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:5:19]
 4 │     constructor(private, public, static) {
 5 │         private = public = static;
   ·                   ──────
 6 │     }
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:5:28]
 4 │     constructor(private, public, static) {
 5 │         private = public = static;
   ·                            ──────
 6 │     }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:7:22]
 6 │     }
 7 │     public banana(x: public) { }
   ·                      ──────
 8 │ }
   ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:11:24]
 10 │ class C {
 11 │     constructor(public public, let) {
    ·                        ──────
 12 │     }
    ╰────

  × The keyword 'let' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:11:32]
 10 │ class C {
 11 │     constructor(public public, let) {
    ·                                ───
 12 │     }
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:13:10]
 12 │     }
 13 │     foo1(private, static, public) {
    ·          ───────
 14 │         function let() { }
    ╰────

  × The keyword 'static' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:13:19]
 12 │     }
 13 │     foo1(private, static, public) {
    ·                   ──────
 14 │         function let() { }
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:13:27]
 12 │     }
 13 │     foo1(private, static, public) {
    ·                           ──────
 14 │         function let() { }
    ╰────

  × The keyword 'let' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:14:18]
 13 │     foo1(private, static, public) {
 14 │         function let() { }
    ·                  ───
 15 │         var z = function let() { };
    ╰────

  × The keyword 'let' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:15:26]
 14 │         function let() { }
 15 │         var z = function let() { };
    ·                          ───
 16 │     }
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:21:9]
 20 │ 
 21 │ class D<public, private>{ }
    ·         ──────
 22 │ 
    ╰────

  × The keyword 'private' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:21:17]
 20 │ 
 21 │ class D<public, private>{ }
    ·                 ───────
 22 │ 
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:23:20]
 22 │ 
 23 │ class E implements public { }
    ·                    ──────
 24 │ 
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:25:20]
 24 │ 
 25 │ class F implements public.private.B { }
    ·                    ──────
 26 │ class F1 implements public.private.implements { }
    ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:26:21]
 25 │ class F implements public.private.B { }
 26 │ class F1 implements public.private.implements { }
    ·                     ──────
 27 │ class G extends package { }
    ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:27:17]
 26 │ class F1 implements public.private.implements { }
 27 │ class G extends package { }
    ·                 ───────
 28 │ class H extends package.A { }
    ╰────

  × The keyword 'package' is reserved
    ╭─[typescript/tests/cases/compiler/strictModeReservedWordInClassDeclaration.ts:28:17]
 27 │ class G extends package { }
 28 │ class H extends package.A { }
    ·                 ───────
    ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:2:6]
 1 │ "use strict"
 2 │ var [public] = [1];
   ·      ──────
 3 │ var { x: public } = { x: 1 };
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:3:10]
 2 │ var [public] = [1];
 3 │ var { x: public } = { x: 1 };
   ·          ──────
 4 │ var [[private]] = [["hello"]];
   ╰────

  × The keyword 'private' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:4:7]
 3 │ var { x: public } = { x: 1 };
 4 │ var [[private]] = [["hello"]];
   ·       ───────
 5 │ var { y: { s: static }, z: { o: { p: package } }} = { y: { s: 1 }, z: { o: { p: 'h' } } };
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:5:15]
 4 │ var [[private]] = [["hello"]];
 5 │ var { y: { s: static }, z: { o: { p: package } }} = { y: { s: 1 }, z: { o: { p: 'h' } } };
   ·               ──────
 6 │ var { public, protected } = { public: 1, protected: 2 };
   ╰────

  × The keyword 'package' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:5:38]
 4 │ var [[private]] = [["hello"]];
 5 │ var { y: { s: static }, z: { o: { p: package } }} = { y: { s: 1 }, z: { o: { p: 'h' } } };
   ·                                      ───────
 6 │ var { public, protected } = { public: 1, protected: 2 };
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:6:7]
 5 │ var { y: { s: static }, z: { o: { p: package } }} = { y: { s: 1 }, z: { o: { p: 'h' } } };
 6 │ var { public, protected } = { public: 1, protected: 2 };
   ·       ──────
 7 │ var { public: a, protected: b } = { public: 1, protected: 2 };
   ╰────

  × The keyword 'protected' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInDestructuring.ts:6:15]
 5 │ var { y: { s: static }, z: { o: { p: package } }} = { y: { s: 1 }, z: { o: { p: 'h' } } };
 6 │ var { public, protected } = { public: 1, protected: 2 };
   ·               ─────────
 7 │ var { public: a, protected: b } = { public: 1, protected: 2 };
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeReservedWordInImportEqualDeclaration.ts:2:8]
 1 │ "use strict"
 2 │ import public = require("1");
   ·        ──────
   ╰────

  × The keyword 'package' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeWordInImportDeclaration.ts:2:13]
 1 │ "use strict"
 2 │ import * as package from "./1"
   ·             ───────
 3 │ import {foo as private} from "./1"
   ╰────

  × The keyword 'private' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeWordInImportDeclaration.ts:3:16]
 2 │ import * as package from "./1"
 3 │ import {foo as private} from "./1"
   ·                ───────
 4 │ import public from "./1"
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/compiler/strictModeWordInImportDeclaration.ts:4:8]
 3 │ import {foo as private} from "./1"
 4 │ import public from "./1"
   ·        ──────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/compiler/stringLiteralsErrors.ts:2:11]
 1 │ // Srtings missing line terminator
 2 │ var es1 = "line 1
   ·           ────────
 3 │ ";
 4 │ var es2 = 'line 1
   ╰────

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superAccess2.ts:7:10]
 6 │ class Q extends P {
 7 │     xx = super;
   ·          ─────
 8 │     static yy = super; // error for static initializer accessing super
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superAccess2.ts:8:17]
 7 │     xx = super;
 8 │     static yy = super; // error for static initializer accessing super
   ·                 ─────
 9 │ 
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superAccess2.ts:11:28]
 10 │     // Super is not allowed in constructor args
 11 │     constructor(public z = super, zz = super, zzz = () => super) {
    ·                            ─────
 12 │         super();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superAccess2.ts:11:40]
 10 │     // Super is not allowed in constructor args
 11 │     constructor(public z = super, zz = super, zzz = () => super) {
    ·                                        ─────
 12 │         super();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superAccess2.ts:11:59]
 10 │     // Super is not allowed in constructor args
 11 │     constructor(public z = super, zz = super, zzz = () => super) {
    ·                                                           ─────
 12 │         super();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superAccess2.ts:15:14]
 14 │ 
 15 │     foo(zz = super) {
    ·              ─────
 16 │         super.x();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superAccess2.ts:20:21]
 19 │ 
 20 │     static bar(zz = super) {
    ·                     ─────
 21 │         super.x(); // error
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be referenced in a derived class.
   ╭─[typescript/tests/cases/compiler/superCallFromClassThatHasNoBaseType1.ts:7:1]
 6 │     
 7 │ ╭─▶ class B {
 8 │ │       constructor() { super(value => String(value)); }
   · │                       ─────
 9 │ ├─▶ }
   · ╰──── class does not have `extends`
   ╰────
  help: either remove this super, or extend the class

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/compiler/superCallFromFunction1.ts:2:5]
 1 │ function foo() {
 2 │     super(value => String(value));
   ·     ─────────────────────────────
 3 │ }
   ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/compiler/superCallOutsideConstructor.ts:6:9]
 5 │ class D extends C {
 6 │     x = super(); 
   ·         ───────
 7 │  
   ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/compiler/superCallsInConstructor.ts:12:9]
 11 │     constructor() {
 12 │         with(new C()) {
    ·         ────
 13 │             foo();
    ╰────

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superErrors.ts:3:13]
 2 │     // super in a non class context
 3 │     var x = super;
   ·             ─────
 4 │     var y = () => super;
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superErrors.ts:4:19]
 3 │     var x = super;
 4 │     var y = () => super;
   ·                   ─────
 5 │     var z = () => () => () => super;
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superErrors.ts:5:31]
 4 │     var y = () => super;
 5 │     var z = () => () => () => super;
   ·                               ─────
 6 │ }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superErrors.ts:31:36]
 30 │         // super call in a lambda in a function expression in a constructor 
 31 │         (function() { return () => super; })();
    ·                                    ─────
 32 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superErrors.ts:43:36]
 42 │         // super call in a lambda in a function expression in a constructor 
 43 │         (function() { return () => super; })();
    ·                                    ─────
 44 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superErrors.ts:47:17]
 46 │         // super in static functions
 47 │         var s = super;
    ·                 ─────
 48 │         var x = () => super;
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superErrors.ts:48:23]
 47 │         var s = super;
 48 │         var x = () => super;
    ·                       ─────
 49 │         var y = () => () => () => super;
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superErrors.ts:49:35]
 48 │         var x = () => super;
 49 │         var y = () => () => () => super;
    ·                                   ─────
 50 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/compiler/superErrors.ts:3:13]
 2 │     // super in a non class context
 3 │     var x = super;
   ·             ─────
 4 │     var y = () => super;
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/compiler/superErrors.ts:4:19]
 3 │     var x = super;
 4 │     var y = () => super;
   ·                   ─────
 5 │     var z = () => () => () => super;
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/compiler/superErrors.ts:5:31]
 4 │     var y = () => super;
 5 │     var z = () => () => () => super;
   ·                               ─────
 6 │ }
   ╰────

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superInLambdas.ts:61:29]
 60 │         // super in a nested lambda in a constructor 
 61 │         var x = () => () => super;
    ·                             ─────
 62 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/compiler/superInLambdas.ts:65:29]
 64 │         // super in a nested lambda in a method
 65 │         var x = () => () => super;
    ·                             ─────
 66 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superWithTypeArgument.ts:7:9]
 6 │     constructor() {
 7 │         super<T>();
   ·         ─────
 8 │     }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superWithTypeArgument2.ts:7:9]
 6 │     constructor(x) {
 7 │         super<T>(x);
   ·         ─────
 8 │     }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/compiler/superWithTypeArgument3.ts:8:9]
 7 │     constructor() {
 8 │         super<T>();
   ·         ─────
 9 │     }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × Keywords cannot contain escape characters
    ╭─[typescript/tests/cases/compiler/switchStatementsWithMultipleDefaults.ts:25:13]
 24 │             default:    // Error, third 'default' clause
 25 │             def\u0061ult: // Error, fourth 'default' clause.
    ·             ────────────
 26 │             // Errors on fifth-seventh
    ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
    ╭─[typescript/tests/cases/compiler/switchStatementsWithMultipleDefaults.ts:27:22]
 26 │             // Errors on fifth-seventh
 27 │             default: return;
    ·                      ──────
 28 │             default: default:
    ╰────

  × Identifier `default` has already been declared
   ╭─[typescript/tests/cases/compiler/switchStatementsWithMultipleDefaults.ts:6:5]
 5 │         case 2:
 6 │ ╭─▶     default:    // No issues.
 7 │ ├─▶         break;
   · ╰──── `default` has already been declared here
 8 │         default:    // Error; second 'default' clause.
   ·         ────┬───
   ·             ╰── It can not be redeclared here
 9 │         default:    // Error; third 'default' clause.
   ╰────

  × Identifier `default` has already been declared
    ╭─[typescript/tests/cases/compiler/switchStatementsWithMultipleDefaults.ts:19:13]
 18 │             switch (x * x) {
 19 │                 default:    // No issues.
    ·                 ────┬───
    ·                     ╰── `default` has already been declared here
 20 │ ╭─▶             default:    // Error; second 'default' clause.
 21 │ ├─▶                 break;
    · ╰──── It can not be redeclared here
 22 │                 case 10000:
    ╰────

  × Identifier `default` has already been declared
   ╭─[typescript/tests/cases/compiler/switchStatementsWithMultipleDefaults1.ts:6:9]
 5 │             case 2:
 6 │ ╭─▶         default:    // No issues.
 7 │ ├─▶             break;
   · ╰──── `default` has already been declared here
 8 │             default:    // Error; second 'default' clause.
   ·             ────┬───
   ·                 ╰── It can not be redeclared here
 9 │             default:    // Error; third 'default' clause.
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteNoSubstitutionTemplate1.ts:5:3]
 4 │ // Incomplete call, not enough parameters.
 5 │ f `123qdawdrqw
   ·   ────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteNoSubstitutionTemplate1.ts:5:2]
 4 │ // Incomplete call, not enough parameters.
 5 │ f `123qdawdrqw
   ·  ▲
   ╰────
  help: Try insert a semicolon here

  × Unterminated string
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteNoSubstitutionTemplate2.ts:5:3]
 4 │ // Incomplete call, not enough parameters, at EOF.
 5 │ f `
   ·   ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteNoSubstitutionTemplate2.ts:5:2]
 4 │ // Incomplete call, not enough parameters, at EOF.
 5 │ f `
   ·  ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions1.ts:5:17]
 4 │ // Incomplete call, not enough parameters.
 5 │ f `123qdawdrqw${
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions2.ts:5:18]
 4 │ // Incomplete call, enough parameters.
 5 │ f `123qdawdrqw${ }${
   ·                  ─
   ╰────

  × Expected `$}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions3.ts:5:23]
 4 │ // Incomplete call, not enough parameters.
 5 │ f `123qdawdrqw${ 1 }${
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions4.ts:5:24]
 4 │ // Incomplete call, but too many parameters.
 5 │ f `123qdawdrqw${ 1 }${ }${ 
   ·                        ─
   ╰────

  × Expected `$}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions5.ts:5:30]
 4 │ // Incomplete call, but too many parameters.
 5 │ f `123qdawdrqw${ 1 }${ 2 }${ 
   ╰────

  × Expected `$}` but found `EOF`
   ╭─[typescript/tests/cases/compiler/taggedTemplatesWithIncompleteTemplateExpressions6.ts:5:23]
 4 │ // Incomplete call, not enough parameters, at EOF.
 5 │ f `123qdawdrqw${ 1 }${
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:3:2]
 2 │ 
 3 │ `\u`;
   ·  ──
 4 │ `\u0`;
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:4:2]
 3 │ `\u`;
 4 │ `\u0`;
   ·  ───
 5 │ `\u00`;
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:5:2]
 4 │ `\u0`;
 5 │ `\u00`;
   ·  ────
 6 │ `\u000`;
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:6:2]
 5 │ `\u00`;
 6 │ `\u000`;
   ·  ─────
 7 │ `\u0000`;
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:8:2]
 7 │ `\u0000`;
 8 │ `\u{}`;
   ·  ────
 9 │ `\u{ffffff}`;
   ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:9:2]
  8 │ `\u{}`;
  9 │ `\u{ffffff}`;
    ·  ──────────
 10 │ `\x`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:10:2]
  9 │ `\u{ffffff}`;
 10 │ `\x`;
    ·  ──
 11 │ `\x0`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:11:2]
 10 │ `\x`;
 11 │ `\x0`;
    ·  ───
 12 │ `\x00`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:13:6]
 12 │ `\x00`;
 13 │ `${0}\u`;
    ·      ──
 14 │ `${0}\u0`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:14:6]
 13 │ `${0}\u`;
 14 │ `${0}\u0`;
    ·      ───
 15 │ `${0}\u00`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:15:6]
 14 │ `${0}\u0`;
 15 │ `${0}\u00`;
    ·      ────
 16 │ `${0}\u000`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:16:6]
 15 │ `${0}\u00`;
 16 │ `${0}\u000`;
    ·      ─────
 17 │ `${0}\u0000`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:18:6]
 17 │ `${0}\u0000`;
 18 │ `${0}\u{}`;
    ·      ────
 19 │ `${0}\u{ffffff}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:19:6]
 18 │ `${0}\u{}`;
 19 │ `${0}\u{ffffff}`;
    ·      ──────────
 20 │ `${0}\x`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:20:6]
 19 │ `${0}\u{ffffff}`;
 20 │ `${0}\x`;
    ·      ──
 21 │ `${0}\x0`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:21:6]
 20 │ `${0}\x`;
 21 │ `${0}\x0`;
    ·      ───
 22 │ `${0}\x00`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:23:2]
 22 │ `${0}\x00`;
 23 │ `\u${0}`;
    ·  ──
 24 │ `\u0${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:24:2]
 23 │ `\u${0}`;
 24 │ `\u0${0}`;
    ·  ───
 25 │ `\u00${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:25:2]
 24 │ `\u0${0}`;
 25 │ `\u00${0}`;
    ·  ────
 26 │ `\u000${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:26:2]
 25 │ `\u00${0}`;
 26 │ `\u000${0}`;
    ·  ─────
 27 │ `\u0000${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:28:2]
 27 │ `\u0000${0}`;
 28 │ `\u{}${0}`;
    ·  ────
 29 │ `\u{ffffff}${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:29:2]
 28 │ `\u{}${0}`;
 29 │ `\u{ffffff}${0}`;
    ·  ──────────
 30 │ `\x${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:30:2]
 29 │ `\u{ffffff}${0}`;
 30 │ `\x${0}`;
    ·  ──
 31 │ `\x0${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:31:2]
 30 │ `\x${0}`;
 31 │ `\x0${0}`;
    ·  ───
 32 │ `\x00${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:33:6]
 32 │ `\x00${0}`;
 33 │ `${0}\u${0}`;
    ·      ──
 34 │ `${0}\u0${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:34:6]
 33 │ `${0}\u${0}`;
 34 │ `${0}\u0${0}`;
    ·      ───
 35 │ `${0}\u00${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:35:6]
 34 │ `${0}\u0${0}`;
 35 │ `${0}\u00${0}`;
    ·      ────
 36 │ `${0}\u000${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:36:6]
 35 │ `${0}\u00${0}`;
 36 │ `${0}\u000${0}`;
    ·      ─────
 37 │ `${0}\u0000${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:38:6]
 37 │ `${0}\u0000${0}`;
 38 │ `${0}\u{}${0}`;
    ·      ────
 39 │ `${0}\u{ffffff}${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:39:6]
 38 │ `${0}\u{}${0}`;
 39 │ `${0}\u{ffffff}${0}`;
    ·      ──────────
 40 │ `${0}\x${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:40:6]
 39 │ `${0}\u{ffffff}${0}`;
 40 │ `${0}\x${0}`;
    ·      ──
 41 │ `${0}\x0${0}`;
    ╰────

  × Bad escape sequence in untagged template literal
    ╭─[typescript/tests/cases/compiler/templateLiteralEscapeSequence.ts:41:6]
 40 │ `${0}\x${0}`;
 41 │ `${0}\x0${0}`;
    ·      ───
 42 │ `${0}\x00${0}`;
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/thisAssignmentInNamespaceDeclaration1.ts:1:7]
 1 │ module foo {
   ·       ▲
 2 │     this.bar = 4;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/throwWithoutNewLine1.ts:1:6]
 1 │ throw
   ╰────

  × Illegal newline after throw
   ╭─[typescript/tests/cases/compiler/throwWithoutNewLine2.ts:1:1]
 1 │ throw
   · ──┬──
   ·   ╰── throw starts here
 2 │ a;
   · ┬
   · ╰── A newline is not expected here
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/typeAliasDeclareKeywordNewlines.ts:4:8]
 3 │ // The following is invalid but should declare a type alias named 'T1':
 4 │ declare type /*unexpected newline*/
   ·        ▲
 5 │ T1 = null;
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:3:3]
 2 │ 
 3 │ ++eval;
   ·   ────
 4 │ --eval;
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:4:3]
 3 │ ++eval;
 4 │ --eval;
   ·   ────
 5 │ ++arguments;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:5:3]
 4 │ --eval;
 5 │ ++arguments;
   ·   ─────────
 6 │ --arguments;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:6:3]
 5 │ ++arguments;
 6 │ --arguments;
   ·   ─────────
 7 │ eval++;
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:7:1]
 6 │ --arguments;
 7 │ eval++;
   · ────
 8 │ eval--;
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:8:1]
 7 │ eval++;
 8 │ eval--;
   · ────
 9 │ arguments++;
   ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:9:1]
  8 │ eval--;
  9 │ arguments++;
    · ─────────
 10 │ arguments--;
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/compiler/unaryOperatorsInStrictMode.ts:10:1]
  9 │ arguments++;
 10 │ arguments--;
    · ─────────
    ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/compiler/uncaughtCompilerError2.ts:2:4]
 1 │ function getObj() {
 2 │    ().toString();
   ·    ──
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/unexpectedStatementBlockTerminator.ts:4:1]
 3 │ class Bar {}
 4 │ case
   · ────
 5 │ 
   ╰────

  × Invalid Character `₁`
   ╭─[typescript/tests/cases/compiler/unicodeIdentifierName2.ts:1:6]
 1 │ var a₁ = "hello"; alert(a₁)
   ·      ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/unicodeIdentifierName2.ts:1:6]
 1 │ var a₁ = "hello"; alert(a₁)
   ·      ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/unparenthesizedConstructorTypeInUnionOrIntersection.ts:1:23]
 1 │ type U1 = string | new () => void;
   ·                       ▲
 2 │ type U2 = string | new (foo: number) => void
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/unparenthesizedFunctionTypeInUnionOrIntersection.ts:1:21]
 1 │ type U1 = string | () => void;
   ·                     ─
 2 │ type U2 = string | (foo: number) => void
   ╰────

  × Unterminated regular expression
   ╭─[typescript/tests/cases/compiler/unterminatedRegexAtEndOfSource1.ts:1:9]
 1 │ var a = /
   ·         ─
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/compiler/unterminatedStringLiteralWithBackslash1.ts:1:1]
 1 │ "\
   · ──
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/compiler/unterminatedStringLiteralWithBackslash1.ts:1:1]
 1 │ "\
   · ──
   ╰────

  × Expected `;` but found `)`
    ╭─[typescript/tests/cases/compiler/unusedLocalsAndParameters.ts:83:14]
 82 │ 
 83 │ for (let x: y) {
    ·              ┬
    ·              ╰── `;` expected
 84 │     z(x);
    ╰────

  × Missing initializer in const declaration
     ╭─[typescript/tests/cases/compiler/unusedLocalsInMethod4.ts:103:11]
 102 │ function f9() {  
 103 │     const x: number; // should have only one error
     ·           ─────────
 104 │     function bar() {  
     ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/compiler/validRegexp.ts:1:23]
 1 │ var x = / [a - z /]$ / i;
   ·                       ▲
 2 │ var x1 = /[a-z/]$/i;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
    ╭─[typescript/tests/cases/compiler/varArgConstructorMemberParameter.ts:10:25]
  9 │ class Foo3 {
 10 │     constructor (public ...args: string[]) { }
    ·                         ───
 11 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/compiler/varArgWithNoParamName.ts:1:16]
 1 │ function t1(...) {}
   ·                ─
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/compiler/variableDeclarationInStrictMode1.ts:2:5]
 1 │ "use strict";
 2 │ var eval;
   ·     ────
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/withStatement.ts:3:1]
 2 │ 
 3 │ with (ooo.eee.oo.ah_ah.ting.tang.walla.walla) { // error
   · ────
 4 │     bing = true; // no error
   ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/withStatementErrors.ts:15:5]
 14 │     
 15 │     module M {} // error
    ·     ───────────
 16 │         
    ╰────

  × A namespace declaration is only allowed at the top level of a namespace or module.
    ╭─[typescript/tests/cases/compiler/withStatementErrors.ts:15:5]
 14 │     
 15 │     module M {} // error
    ·     ───────────
 16 │         
    ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/withStatementErrors.ts:3:1]
 2 │ 
 3 │ with (ooo.eee.oo.ah_ah.ting.tang.walla.walla) { // error
   · ────
 4 │     bing = true; // no error
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/compiler/withStatementNestedScope.ts:2:1]
 1 │ var x = 1;
 2 │ with (x) {
   · ────
 3 │     function f(a: number) {
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/compiler/yieldStringLiteral.ts:2:5]
 1 │ function yieldString() {
 2 │     yield 'literal';
   ·     ─────
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/ambient/ambientModuleDeclarationWithReservedIdentifierInDottedPath.ts:11:8]
 10 │ 
 11 │ declare module debugger {} // still an error
    ·        ▲
    ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/ambient/ambientModuleDeclarationWithReservedIdentifierInDottedPath2.ts:9:8]
 8 │ 
 9 │ declare namespace debugger {} // still an error
   ·        ▲
   ╰────
  help: Try insert a semicolon here

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction5_es2017.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction6_es2017.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction7_es2017.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction8_es2017.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction9_es2017.ts:1:22]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                      ─────
 2 │ }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_3.ts:2:7]
 1 │ async function bar1() {
 2 │     ++await 42; // Error
   ·       ────────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration10_es2017.ts:1:24]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                        ─────
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration12_es2017.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration5_es2017.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration6_es2017.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration7_es2017.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration9_es2017.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction5_es5.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction6_es5.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction7_es5.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction8_es5.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction9_es5.ts:1:22]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                      ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncClass_es5.ts:1:1]
 1 │ async class C {
   · ─────
 2 │ }
   ╰────

  × Constructor can't be an async method
   ╭─[typescript/tests/cases/conformance/async/es5/asyncConstructor_es5.ts:2:9]
 1 │ class C {
 2 │   async constructor() {
   ·         ───────────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncEnum_es5.ts:1:1]
 1 │ async enum E {
   · ─────
 2 │   Value
   ╰────

  × Expected `(` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/async/es5/asyncGetter_es5.ts:2:13]
 1 │ class C {
 2 │   async get foo() {
   ·             ─┬─
   ·              ╰── `(` expected
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncInterface_es5.ts:1:1]
 1 │ async interface I {
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncModule_es5.ts:1:1]
 1 │ async module M {
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncModule_es5.ts:1:1]
 1 │ async module M {
   · ─────
 2 │ }
   ╰────

  × Expected `(` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/async/es5/asyncSetter_es5.ts:2:13]
 1 │ class C {
 2 │   async set foo(value) {
   ·             ─┬─
   ·              ╰── `(` expected
 3 │   }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration10_es5.ts:1:24]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                        ─────
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration12_es5.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration5_es5.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration6_es5.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration7_es5.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration9_es5.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction5_es6.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction6_es6.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction7_es6.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction8_es6.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction9_es6.ts:1:22]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                      ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncClass_es6.ts:1:1]
 1 │ async class C {  
   · ─────
 2 │ }
   ╰────

  × Constructor can't be an async method
   ╭─[typescript/tests/cases/conformance/async/es6/asyncConstructor_es6.ts:2:9]
 1 │ class C {  
 2 │   async constructor() {    
   ·         ───────────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncEnum_es6.ts:1:1]
 1 │ async enum E {  
   · ─────
 2 │   Value
   ╰────

  × Expected `(` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/async/es6/asyncGetter_es6.ts:2:13]
 1 │ class C {
 2 │   async get foo() {
   ·             ─┬─
   ·              ╰── `(` expected
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncInterface_es6.ts:1:1]
 1 │ async interface I {  
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncModule_es6.ts:1:1]
 1 │ async module M {   
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncModule_es6.ts:1:1]
 1 │ async module M {   
   · ─────
 2 │ }
   ╰────

  × Expected `(` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/async/es6/asyncSetter_es6.ts:2:13]
 1 │ class C {
 2 │   async set foo(value) {
   ·             ─┬─
   ·              ╰── `(` expected
 3 │   }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_3.ts:2:7]
 1 │ async function bar1() {
 2 │     ++await 42; // Error
   ·       ────────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration10_es6.ts:1:24]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                        ─────
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration12_es6.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration5_es6.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration6_es6.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration7_es6.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration9_es6.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:14:9]
 13 │ async function f2_let () {
 14 │     let await = 1
    ·         ─────
 15 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:18:9]
 17 │ async function f2_var () {
 18 │     var await = 1
    ·         ─────
 19 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:22:11]
 21 │ async function f2_const () {
 22 │     const await = 1
    ·           ─────
 23 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:38:9]
 37 │ function * f4_let () {
 38 │     let yield = 2;
    ·         ─────
 39 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:42:9]
 41 │ function * f4_var () {
 42 │     var yield = 2;
    ·         ─────
 43 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:46:11]
 45 │ function * f4_const () {
 46 │     const yield = 2;
    ·           ─────
 47 │ }
    ╰────

  × TS(1318): Accessor 'aa' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:3:17]
 2 │    abstract get a();
 3 │    abstract get aa() { return 1; } // error
   ·                 ──
 4 │    abstract set b(x: string);
   ╰────

  × TS(1245): Method 'aa' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:3:17]
 2 │    abstract get a();
 3 │    abstract get aa() { return 1; } // error
   ·                 ──
 4 │    abstract set b(x: string);
   ╰────

  × TS(1318): Accessor 'bb' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:5:17]
 4 │    abstract set b(x: string);
 5 │    abstract set bb(x: string) {} // error
   ·                 ──
 6 │ }
   ╰────

  × TS(1245): Method 'bb' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:5:17]
 4 │    abstract set b(x: string);
 5 │    abstract set bb(x: string) {} // error
   ·                 ──
 6 │ }
   ╰────

  × TS(1242): 'abstract' modifier can only appear on a class, method, or property declaration.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractConstructor.ts:2:14]
 1 │ abstract class A {
 2 │     abstract constructor() {}
   ·              ───────────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractCrashedOnce.ts:8:5]
 7 │         this.
 8 │     }
   ·     ─
 9 │ }
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations2.ts:50:14]
 49 │ class H { // error -- not declared abstract
 50 │     abstract baz() : number;
    ·              ───
 51 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractManyKeywords.ts:3:1]
 2 │ export abstract class B {}
 3 │ default abstract class C {}
   · ───────
 4 │ import abstract class D {}
   ╰────

  × Identifier `CC1` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:13:16]
 12 │ 
 13 │ abstract class CC1 {}
    ·                ─┬─
    ·                 ╰── `CC1` has already been declared here
 14 │ class CC1 {}
    ·       ─┬─
    ·        ╰── It can not be redeclared here
 15 │ 
    ╰────

  × Identifier `CC2` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:16:7]
 15 │ 
 16 │ class CC2 {}
    ·       ─┬─
    ·        ╰── `CC2` has already been declared here
 17 │ abstract class CC2 {}
    ·                ─┬─
    ·                 ╰── It can not be redeclared here
 18 │ 
    ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:2:14]
 1 │ class A {
 2 │     abstract foo();
   ·              ───
 3 │ }
   ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:6:14]
 5 │ class B {
 6 │     abstract foo() {}
   ·              ───
 7 │ }
   ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:6:14]
 5 │ class B {
 6 │     abstract foo() {}
   ·              ───
 7 │ }
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:6:14]
 5 │ class B {
 6 │     abstract foo() {}
   ·              ───
 7 │ }
   ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodWithImplementation.ts:2:14]
 1 │ abstract class A {
 2 │     abstract foo() {}
   ·              ───
 3 │ }
   ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodWithImplementation.ts:2:14]
 1 │ abstract class A {
 2 │     abstract foo() {}
   ·              ───
 3 │ }
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractUsingAbstractMethods2.ts:2:14]
 1 │ class A {
 2 │     abstract foo();
   ·              ───
 3 │ }
   ╰────

  × 'abstract' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractWithInterface.ts:1:1]
 1 │ abstract interface I {}
   · ────────
   ╰────

  × Identifier `C` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAndVariableWithSameName.ts:1:7]
 1 │ class C { foo: string; } // error
   ·       ┬
   ·       ╰── `C` has already been declared here
 2 │ var C = ''; // error
   ·     ┬
   ·     ╰── It can not be redeclared here
 3 │ 
   ╰────

  × Identifier `D` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAndVariableWithSameName.ts:5:11]
  4 │ module M {
  5 │     class D { // error
    ·           ┬
    ·           ╰── `D` has already been declared here
  6 │         bar: string;
  7 │     }
  8 │ 
  9 │     var D = 1; // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 10 │ }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classBody/classBodyWithStatements.ts:2:8]
 1 │ class C {
 2 │     var x = 1;
   ·        ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected `{` but found `?.`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingOptionalChain.ts:9:22]
 8 │ // error
 9 │ class C2 implements A?.B {}
   ·                      ─┬
   ·                       ╰── `{` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingPrimitive.ts:7:19]
 6 │ class C4 extends Void  { }
 7 │ class C4a extends void {}
   ·                   ────
 8 │ class C5 extends Null { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingPrimitive2.ts:3:19]
 2 │ 
 3 │ class C4a extends void {}
   ·                   ────
 4 │ class C5a extends null { }
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsEveryObjectType.ts:6:31]
 5 │ 
 6 │ class C2 extends { foo: string; } { } // error
   ·                               ┬
   ·                               ╰── `,` expected
 7 │ var x: { foo: string; }
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsEveryObjectType2.ts:1:31]
 1 │ class C2 extends { foo: string; } { } // error
   ·                               ┬
   ·                               ╰── `,` expected
 2 │ 
   ╰────

  × Expected `{` but found `void`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames2.ts:3:7]
 2 │ 
 3 │ class void {}
   ·       ──┬─
   ·         ╰── `{` expected
   ╰────

  × Private field 'y' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock16.ts:11:28]
 10 │     getX = (obj: C) => obj.#x;
 11 │     getY = (obj: D) => obj.#y;
    ·                            ──
 12 │   }
    ╰────

  × Private field 'x' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock16.ts:21:28]
 20 │     // getY has privileged access to y
 21 │     getX = (obj: C) => obj.#x;
    ·                            ──
 22 │     getY = (obj: D) => obj.#y;
    ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:4:9]
 3 │   static {
 4 │     let await: any; // illegal, cannot declare a new binding for await
   ·         ─────
 5 │   }
   ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:13:9]
 12 │   static {
 13 │     let await; // illegal, cannot declare a new binding for await
    ·         ─────
 14 │   }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:16:14]
 15 │   static {
 16 │     function await() { }; // illegal
    ·              ─────
 17 │   }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:19:11]
 18 │   static {
 19 │     class await { }; // illegal
    ·           ─────
 20 │   }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:25:16]
 24 │       await = 1; // legal
 25 │       x = await; // legal (initializers have an implicit function boundary)
    ·                ─
 26 │     };
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock26.ts:3:14]
 2 │     static {
 3 │         await; // illegal
   ·              ─
 4 │     }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock6.ts:7:13]
 6 │     static {
 7 │         let await = 1;
   ·             ─────
 8 │         let arguments = 1;
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock6.ts:13:14]
 12 │     static {
 13 │         await: if (true) {
    ·              ─
 14 │ 
    ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:4:9]
 3 │         await 1;
 4 │         yield 1;
   ·         ─────
 5 │         return 1;
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:5:9]
 4 │         yield 1;
 5 │         return 1;
   ·         ──────
 6 │     }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:24:13]
 23 │         static {
 24 │             yield 1;
    ·             ─────
 25 │ 
    ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:36:13]
 35 │         static {
 36 │             return 1;
    ·             ──────
 37 │ 
    ╰────

  × Cannot use await in class static initialization block
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:3:9]
 2 │     static {
 3 │         await 1;
   ·         ─────
 4 │         yield 1;
   ╰────

  × Cannot use await in class static initialization block
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:12:13]
 11 │         static {
 12 │             await 1;
    ·             ─────
 13 │ 
    ╰────

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:6:27]
 5 │                 if (v === 1) {
 6 │                     break label;
   ·                           ─────
 7 │                 }
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:9:30]
  8 │                 if (v === 2) {
  9 │                     continue label;
    ·                              ─────
 10 │                 }
    ╰────

  × Illegal break statement
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:12:21]
 11 │                 if (v === 3) {
 12 │                     break
    ·                     ─────
 13 │                 }
    ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal continue statement: no surrounding iteration statement
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:15:21]
 14 │                 if (v === 4) {
 15 │                     continue
    ·                     ────────
 16 │                 }
    ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/classWithTwoConstructorDefinitions.ts:2:5]
 1 │ class C {
 2 │     constructor() { } // error
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 3 │     constructor(x) { } // error
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 4 │ }
   ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/classWithTwoConstructorDefinitions.ts:7:5]
 6 │ class D<T> {
 7 │     constructor(x: T) { } // error
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 8 │     constructor(x: T, y: T) { } // error
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 9 │ }
   ╰────

  × TS(1030): readonly' modifier already seen.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyReadonly.ts:2:14]
 1 │ class C {
 2 │     readonly readonly x: number;
   ·              ────────
 3 │     constructor(readonly readonly y: number) {}
   ╰────
  help: Remove the duplicate modifier.

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsInNonConstructorMembers.ts:8:13]
 7 │ class Derived extends Base {
 8 │     a: super();
   ·             ▲
 9 │     b() {
   ╰────
  help: Try insert a semicolon here

  × 'super' can only be referenced in a derived class.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superCallInConstructorWithNoBaseType.ts:1:1]
 1 │ ╭─▶ class C {
 2 │ │       constructor() {
 3 │ │           super(); // error
   · │           ─────
 4 │ │       }
 5 │ ├─▶ }
   · ╰──── class does not have `extends`
 6 │     
   ╰────
  help: either remove this super, or extend the class

  × 'super' can only be referenced in a derived class.
    ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superCallInConstructorWithNoBaseType.ts:7:1]
  6 │     
  7 │ ╭─▶ class D<T> {
  8 │ │       public constructor(public x: T) {
  9 │ │           super(); // error
    · │           ─────
 10 │ │       }
 11 │ ├─▶ }
    · ╰──── class does not have `extends`
    ╰────
  help: either remove this super, or extend the class

  × Expected `,` but found `[`
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer2.ts:4:13]
 3 │ var x = {
 4 │     private [x: string]: string;
   ·             ┬
   ·             ╰── `,` expected
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/classes/members/accessibility/privateInstanceMemberAccessibility.ts:12:12]
 11 │ 
 12 │     a: this.foo; // error
    ·            ▲
 13 │ }
    ╰────
  help: Try insert a semicolon here

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers6.ts:6:16]
 5 │ class D extends C {
 6 │     static c = super();
   ·                ───────
 7 │ }
   ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:14:10]
 13 │ }
 14 │ new A2().#prop; // Error
    ·          ─────
 15 │ 
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:17:14]
 16 │ function  foo (){
 17 │     new A2().#prop; // Error
    ·              ─────
 18 │ }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:22:18]
 21 │     m() {
 22 │         new A2().#prop;
    ·                  ─────
 23 │     }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorssDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:9:15]
  8 │         thing.#baz;
  9 │         thing.#bar; // Error
    ·               ────
 10 │         thing.#foo();
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:16:15]
 15 │         thing.#baz;
 16 │         thing.#bar;
    ·               ────
 17 │         thing.#foo();
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:23:15]
 22 │         thing.#baz;
 23 │         thing.#bar;
    ·               ────
 24 │         thing.#foo();
    ╰────

  × Private field 'f' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndIndexSignature.ts:6:14]
 5 │     constructor(message: string) {
 6 │         this.#f = 3           // Error (index signatures do not implicitly declare private names)
   ·              ──
 7 │         this["#foo"] = 3;     // Okay (type has index signature and "#foo" does not collide with private identifier #foo)
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndPropertySignature.ts:2:5]
 1 │ type A = {
 2 │     #foo: string;
   ·     ────
 3 │     #bar(): string;
   ╰────

  × Private identifier '#nope' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:1:9]
 1 │ exports.#nope = 1;           // Error (outside class body)
   ·         ─────
 2 │ function A() { }
   ╰────

  × Private identifier '#no' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:3:13]
 2 │ function A() { }
 3 │ A.prototype.#no = 2;         // Error (outside class body)
   ·             ───
 4 │ 
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:6:3]
 5 │ class B {}
 6 │ B.#foo = 3;                  // Error (outside class body)
   ·   ────
 7 │ 
   ╰────

  × Private field 'foo' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:12:14]
 11 │         exports.#bar = 6;    // Error
 12 │         this.#foo = 3;       // Error (undeclared)
    ·              ────
 13 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadDeclaration.ts:3:3]
 2 │ A.prototype = {
 3 │   #x: 1,         // Error
   ·   ──
 4 │   #m() {},       // Error
   ╰────

  × Classes can't have an element named '#constructor'
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameConstructorReserved.ts:2:5]
 1 │ class A {
 2 │     #constructor() {}      // Error: `#constructor` is a reserved word.
   ·     ────────────
 3 │ }
   ╰────

  × Identifier `foo` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:5:9]
 4 │     class A_Field_Field {
 5 │         #foo = "foo";
   ·         ──┬─
   ·           ╰── `foo` has already been declared here
 6 │         #foo = "foo";
   ·         ──┬─
   ·           ╰── It can not be redeclared here
 7 │     }
   ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:11:9]
 10 │     class A_Field_Method {
 11 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 12 │         #foo() { }
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 13 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:17:9]
 16 │     class A_Field_Getter {
 17 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 18 │         get #foo() { return ""}
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 19 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:23:9]
 22 │     class A_Field_Setter {
 23 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 24 │         set #foo(value: string) { }
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 25 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:55:9]
 54 │     class A_Method_Field {
 55 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 56 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 57 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:61:9]
 60 │     class A_Method_Method {
 61 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 62 │         #foo() { }
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 63 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:67:9]
 66 │     class A_Method_Getter {
 67 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 68 │         get #foo() { return ""}
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 69 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:73:9]
 72 │     class A_Method_Setter {
 73 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 74 │         set #foo(value: string) { }
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 75 │     }
    ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:106:13]
 105 │     class A_Getter_Field {
 106 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 107 │         #foo = "foo";
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 108 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:112:13]
 111 │     class A_Getter_Method {
 112 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 113 │         #foo() { }
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 114 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:118:13]
 117 │     class A_Getter_Getter {
 118 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 119 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── It can not be redeclared here
 120 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:156:13]
 155 │     class A_Setter_Field {
 156 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 157 │         #foo = "foo";
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 158 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:162:13]
 161 │     class A_Setter_Method {
 162 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 163 │         #foo() { }
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 164 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:174:13]
 173 │     class A_Setter_Setter {
 174 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 175 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── It can not be redeclared here
 176 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:230:16]
 229 │     class A_StaticField_StaticField {
 230 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 231 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 232 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:236:16]
 235 │     class A_StaticField_StaticMethod {
 236 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 237 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 238 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:242:16]
 241 │     class A_StaticField_StaticGetter {
 242 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 243 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 244 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:248:16]
 247 │     class A_StaticField_StaticSetter {
 248 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 249 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 250 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:280:16]
 279 │     class A_StaticMethod_StaticField {
 280 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 281 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 282 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:286:16]
 285 │     class A_StaticMethod_StaticMethod {
 286 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 287 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 288 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:292:16]
 291 │     class A_StaticMethod_StaticGetter {
 292 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 293 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 294 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:298:16]
 297 │     class A_StaticMethod_StaticSetter {
 298 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 299 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 300 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:331:20]
 330 │     class A_StaticGetter_StaticField {
 331 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 332 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 333 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:337:20]
 336 │     class A_StaticGetter_StaticMethod {
 337 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 338 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 339 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:343:20]
 342 │     class A_StaticGetter_StaticGetter {
 343 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 344 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 345 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:381:20]
 380 │     class A_StaticSetter_StaticField {
 381 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 382 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 383 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:387:20]
 386 │     class A_StaticSetter_StaticMethod {
 387 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 388 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 389 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:399:20]
 398 │     class A_StaticSetter_StaticSetter {
 399 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 400 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 401 │     }
     ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameEnum.ts:2:5]
 1 │ enum E {
 2 │     #x
   ·     ──
 3 │ }
   ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameFieldDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameHashCharName.ts:1:2]
 1 │ #
   ·  ─
 2 │ 
 3 │ class C {
   ╰────

  × Private field 'x' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameImplicitDeclaration.ts:4:14]
 3 │         /** @type {string} */
 4 │         this.#x;
   ·              ──
 5 │     }
   ╰────

  × Expected `in` but found `)`
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInInExpression.ts:25:26]
 24 │ 
 25 │         const c = (#field) in v; // Bad - privateID is not an expression on its own
    ·                          ┬
    ·                          ╰── `in` expected
 26 │ 
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInInExpressionTransform.ts:29:9]
 28 │     invalidLHS(v: any) {
 29 │         'prop' in v = 10;
    ·         ───────────
 30 │         #field in v = 10;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-1.ts:2:5]
 1 │ const obj = {
 2 │     #foo: 1
   ·     ────
 3 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-2.ts:2:5]
 1 │ const obj = {
 2 │     #foo() {
   ·     ────
 3 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-3.ts:2:9]
 1 │ const obj = {
 2 │     get #foo() {
   ·         ────
 3 │         return ""
   ╰────

  × Private identifier '#nope' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:1:9]
 1 │ exports.#nope = 1;           // Error (outside class body)
   ·         ─────
 2 │ function A() { }
   ╰────

  × Private identifier '#no' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:3:13]
 2 │ function A() { }
 3 │ A.prototype.#no = 2;         // Error (outside class body)
   ·             ───
 4 │ 
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:6:3]
 5 │ class B {}
 6 │ B.#foo = 3;                  // Error (outside class body)
   ·   ────
 7 │ 
   ╰────

  × Private field 'foo' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:11:14]
 10 │     constructor () {
 11 │         this.#foo = 3;       // Error (undeclared)
    ·              ────
 12 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadDeclaration.ts:3:3]
 2 │ A.prototype = {
 3 │   #x: 1,         // Error
   ·   ──
 4 │   #m() {},       // Error
   ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:12:10]
 11 │ }
 12 │ new A2().#method(); // Error
    ·          ───────
 13 │ 
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:15:14]
 14 │ function  foo (){
 15 │     new A2().#method(); // Error
    ·              ───────
 16 │ }
    ╰────

  × Private field 'method' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:20:18]
 19 │     m() {
 20 │         new A2().#method();
    ·                  ───────
 21 │     }
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodClassExpression.ts:9:17]
  8 │ console.log(C.getInstance().getField());
  9 │ C.getInstance().#method; // Error
    ·                 ───────
 10 │ C.getInstance().#field; // Error
    ╰────

  × Private identifier '#field' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodClassExpression.ts:10:17]
  9 │ C.getInstance().#method; // Error
 10 │ C.getInstance().#field; // Error
    ·                 ──────
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodsDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop());
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'unknown' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedMethodAccess.ts:19:19]
 18 │                 x.#bar;
 19 │                 x.#unknown; // Error
    ·                   ────────
 20 │             }
    ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNotAccessibleOutsideDefiningClass.ts:5:9]
 4 │ 
 5 │ new A().#foo = 4;               // Error
   ·         ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNotAllowedOutsideClass.ts:1:7]
 1 │ const #foo = 3;
   ·       ────
   ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:16:4]
 15 │ 
 16 │ A2.#prop; // Error
    ·    ─────
 17 │ 
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:19:8]
 18 │ function  foo (){
 19 │     A2.#prop; // Error
    ·        ─────
 20 │ }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:24:12]
 23 │     m() {
 24 │         A2.#prop;
    ·            ─────
 25 │     }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorssDerivedClasses.ts:9:23]
  8 │     static method(x: typeof Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'derivedProp' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDerivedClasses.ts:4:17]
 3 │     static method(x: Derived) {
 4 │         Derived.#derivedProp // error
   ·                 ────────────
 5 │         Base.#prop  = 10;
   ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDerivedClasses.ts:12:14]
 11 │         Derived.#derivedProp
 12 │         Base.#prop  = 10; // error
    ·              ─────
 13 │     }
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodClassExpression.ts:9:14]
  8 │ console.log(C.getClass().getField());
  9 │ C.getClass().#method; // Error
    ·              ───────
 10 │ C.getClass().#field; // Error
    ╰────

  × Private identifier '#field' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodClassExpression.ts:10:14]
  9 │ C.getClass().#method; // Error
 10 │ C.getClass().#field; // Error
    ·              ──────
    ╰────

  × Private field 'foo' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameUncheckedJsOptionalChain.ts:4:15]
 3 │     constructor () {
 4 │         this?.#foo;
   ·               ────
 5 │         this?.#bar;
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndGenericClasses-2.ts:24:3]
 23 │ const x: number = a.baz                   // OK
 24 │ a.#foo;                                   // Error
    ·   ────
 25 │ a = b;                                    // Error
    ╰────

  × Expected `]` but found `#identifier`
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndIndexedAccess.ts:7:28]
 6 │         // not supported yet, could support in future:
 7 │         const badForNow: C[#bar] = 3;   // Error
   ·                            ──┬─
   ·                              ╰── `]` expected
 8 │         // will never use this syntax, already taken:
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:22:3]
 21 │ declare let b: C<string>;
 22 │ a.#foo;                                   // Error
    ·   ────
 23 │ a.#method;                                // Error
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:23:3]
 22 │ a.#foo;                                   // Error
 23 │ a.#method;                                // Error
    ·   ───────
 24 │ a.#prop;                                  // Error
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:24:3]
 23 │ a.#method;                                // Error
 24 │ a.#prop;                                  // Error
    ·   ─────
 25 │ a = b;                                    // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:2:5]
 1 │ class A {
 2 │     public #foo = 3;         // Error
   ·     ──────
 3 │     private #bar = 3;        // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:3:5]
 2 │     public #foo = 3;         // Error
 3 │     private #bar = 3;        // Error
   ·     ───────
 4 │     protected #baz = 3;      // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:4:5]
 3 │     private #bar = 3;        // Error
 4 │     protected #baz = 3;      // Error
   ·     ─────────
 5 │     readonly #qux = 3;       // OK
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:8:5]
 7 │ 
 8 │     public #fooMethod() { return  3; }         // Error
   ·     ──────
 9 │     private #barMethod() { return  3; }        // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:9:5]
  8 │     public #fooMethod() { return  3; }         // Error
  9 │     private #barMethod() { return  3; }        // Error
    ·     ───────
 10 │     protected #bazMethod() { return  3; }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:10:5]
  9 │     private #barMethod() { return  3; }        // Error
 10 │     protected #bazMethod() { return  3; }      // Error
    ·     ─────────
 11 │     readonly #quxMethod() { return  3; }       // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:17:5]
 16 │ 
 17 │     public get #fooProp() { return  3; }         // Error
    ·     ──────
 18 │     public set #fooProp(value: number) {  }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:18:5]
 17 │     public get #fooProp() { return  3; }         // Error
 18 │     public set #fooProp(value: number) {  }      // Error
    ·     ──────
 19 │     private get #barProp() { return  3; }        // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:19:5]
 18 │     public set #fooProp(value: number) {  }      // Error
 19 │     private get #barProp() { return  3; }        // Error
    ·     ───────
 20 │     private set #barProp(value: number) {  }     // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:20:5]
 19 │     private get #barProp() { return  3; }        // Error
 20 │     private set #barProp(value: number) {  }     // Error
    ·     ───────
 21 │     protected get #bazProp() { return  3; }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:21:5]
 20 │     private set #barProp(value: number) {  }     // Error
 21 │     protected get #bazProp() { return  3; }      // Error
    ·     ─────────
 22 │     protected set #bazProp(value: number) {  }   // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:22:5]
 21 │     protected get #bazProp() { return  3; }      // Error
 22 │     protected set #bazProp(value: number) {  }   // Error
    ·     ─────────
 23 │     readonly get #quxProp() { return  3; }       // Error
    ╰────

  × Expected `(` but found `#identifier`
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:27:15]
 26 │     declare set #whatProp(value: number)         // Error
 27 │     async get #asyncProp() { return 1; }         // Error
    ·               ─────┬────
    ·                    ╰── `(` expected
 28 │     async set #asyncProp(value: number) { }      // Error
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInterfaceExtendingClass.ts:10:7]
  9 │ function func(x: I) {
 10 │     x.#prop = 123;
    ·       ─────
 11 │ }
    ╰────

  × Private fields can not be deleted
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNoDelete.ts:4:16]
 3 │     constructor() {
 4 │         delete this.#v; // Error: The operand of a delete operator cannot be a private name.
   ·                ───────
 5 │     }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNotAllowedAsParameters.ts:2:12]
 1 │ class A {
 2 │     setFoo(#foo: string) {}
   ·            ────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNotAllowedInVariableDeclarations.ts:1:7]
 1 │ const #foo = 3;
   ·       ────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/classes/nestedClassDeclaration.ts:5:10]
 4 │     x: string;
 5 │     class C2 {
   ·          ▲
 6 │     }
   ╰────
  help: Try insert a semicolon here

  × TS(1030): public' modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:42:12]
 41 │     private protected get getter() { return 0; }
 42 │     public public set setter(a: number) { }
    ·            ──────
 43 │ }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1267): Property 'p' cannot have an initializer because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty7.ts:2:14]
 1 │ abstract class A {
 2 │     abstract p = 'yep'
   ·              ─
 3 │ }
   ╰────

  × Identifier `accessor` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor11.ts:5:12]
  4 │ 
  5 │     static accessor
    ·            ────┬───
    ·                ╰── `accessor` has already been declared here
  6 │     b
  7 │ 
  8 │     static
  9 │     accessor
    ·     ────┬───
    ·         ╰── It can not be redeclared here
 10 │     c
    ╰────

  × TS(1030): accessor' modifier already seen.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:2:14]
 1 │ abstract class C1 {
 2 │     accessor accessor a: any;
   ·              ────────
 3 │     readonly accessor b: any;
   ╰────
  help: Remove the duplicate modifier.

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:10:15]
  9 │     accessor static h: any;
 10 │     accessor i() {}
    ·               ─
 11 │     accessor get j() { return false; }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:2:5]
 1 │ class C {
 2 │     x: number;
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │     get x() { // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 4 │         return 1;
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:9:5]
  8 │ class D {
  9 │     x: number;
    ·     ┬
    ·     ╰── `x` has already been declared here
 10 │     set x(v) { } // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 11 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:14:13]
 13 │ class E {
 14 │     private x: number;
    ·             ┬
    ·             ╰── `x` has already been declared here
 15 │     get x() { // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 16 │         return 1;
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndFunctionWithSameName.ts:2:5]
 1 │ class C {
 2 │     x: number;
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │     x() { // error
   ·     ┬
   ·     ╰── It can not be redeclared here
 4 │         return 1;
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndFunctionWithSameName.ts:9:5]
  8 │ class D {
  9 │     x: number;
    ·     ┬
    ·     ╰── `x` has already been declared here
 10 │     x(v) { } // error
    ·     ┬
    ·     ╰── It can not be redeclared here
 11 │ }
    ╰────

  × Classes can't have a field named 'constructor'
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyNamedConstructor.ts:2:3]
 1 │ class X1 {
 2 │   "constructor" = 3; // Error
   ·   ─────────────
 3 │ }
   ╰────

  × Classes may not have a static property named prototype
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyNamedPrototype.ts:3:12]
 2 │     prototype: number; // ok
 3 │     static prototype: C; // error
   ·            ─────────
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName.ts:2:9]
 1 │ class C {
 2 │     get x() { return 1; }
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     get x() { return 1; } // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName.ts:7:9]
 6 │ class D {
 7 │     set x(v) {  }
   ·         ┬
   ·         ╰── `x` has already been declared here
 8 │     set x(v) {  } // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 9 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName2.ts:2:16]
 1 │ class C {
 2 │     static get x() { return 1; }
   ·                ┬
   ·                ╰── `x` has already been declared here
 3 │     static get x() { return 1; } // error
   ·                ┬
   ·                ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName2.ts:7:16]
 6 │ class D {
 7 │     static set x(v) {  }
   ·                ┬
   ·                ╰── `x` has already been declared here
 8 │     static set x(v) {  } // error
   ·                ┬
   ·                ╰── It can not be redeclared here
 9 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature4.ts:12:5]
 11 │ interface IB {
 12 │     static [s: string]: number;
    ·     ──────
 13 │     static [s: number]: 42 | 233;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature5.ts:7:5]
 6 │ interface I {
 7 │     static readonly [s: string]: number;
   ·     ──────
 8 │     static readonly [s: number]: 42 | 233
   ╰────

  × Expected `,` but found `is`
     ╭─[typescript/tests/cases/conformance/controlFlow/assertionTypePredicates1.ts:163:20]
 162 │     get p1(): this is string;
 163 │     set p1(x: this is string);
     ·                    ─┬
     ·                     ╰── `,` expected
 164 │     get p2(): asserts this is string;
     ╰────

  × Expected `,` but found `!`
   ╭─[typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertionsWithObjectShortHand.ts:2:16]
 1 │ const a: string | undefined = 'ff';
 2 │ const foo = { a! }
   ·                ┬
   ·                ╰── `,` expected
 3 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor3.ts:4:11]
 3 │ class C {
 4 │     public @dec get accessor() { return 1; }
   ·           ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor6.ts:4:11]
 3 │ class C {
 4 │     public @dec set accessor(value: number) { }
   ·           ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter4.ts:4:24]
 3 │ class C {
 4 │     constructor(public @dec p: number) {}
   ·                        ┬
   ·                        ╰── `,` expected
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod17.ts:4:17]
 3 │ class Foo {
 4 │     private prop @decorator
   ·                 ▲
 5 │     foo() {
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod3.ts:4:11]
 3 │ class C {
 4 │     public @dec method() {}
   ·           ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × await expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter3.ts:5:23]
 4 │   class Class {
 5 │     async method(@dec(await value) arg: number) {}
   ·                       ─────┬─────
   ·                            ╰── await expression not allowed in formal parameter
 6 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodThisParameter.ts:4:17]
 3 │ class C {
 4 │     method(@dec this: C) {}
   ·                 ────
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty3.ts:4:11]
 3 │ class C {
 4 │     public @dec prop;
   ·           ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/decorators/decoratorMetadata-jsdoc.ts:9:9]
  8 │     @decorator()
  9 │     c?: *;
    ·         ─
 10 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnArrowFunction.ts:3:17]
 2 │ 
 3 │ var F = @dec () => {
   ·                 ──
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnEnum2.ts:4:5]
 3 │ enum E {
 4 │     @dec A
   ·     ─
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionParameter.ts:5:22]
 4 │ 
 5 │ function direct(@dec this: C) { return this.n; }
   ·                      ────
 6 │ function called(@dec() this: C) { return this.n; }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionGrammarError.ts:5:8]
 4 │ var a = ["./0"];
 5 │ import(...["PathModule"]);
   ·        ───
 6 │ 
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/enums/awaitAndYield.ts:3:15]
 2 │     enum E {
 3 │         foo = await x,
   ·               ─────
 4 │         baz = yield 1,
   ╰────

  × Expected `,` but found `;`
    ╭─[typescript/tests/cases/conformance/enums/enumErrors.ts:48:18]
 47 │ 
 48 │     postSemicolon;
    ·                  ┬
    ·                  ╰── `,` expected
 49 │     postColonValueComma: 2,
    ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:12]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·            ──────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:30]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·                              ───────────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:72]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·                                                                        ────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:2:5]
 1 │ var f1 = ()
 2 │     => { }
   ·     ──
 3 │ var f2 = (x: string, y: string) /*
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:4:7]
 3 │ var f2 = (x: string, y: string) /*
 4 │   */  => { }
   ·       ──
 5 │ var f3 = (x: string, y: number, ...rest)
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:6:5]
 5 │ var f3 = (x: string, y: number, ...rest)
 6 │     => { }
   ·     ──
 7 │ var f4 = (x: string, y: number, ...rest) /*
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:8:7]
 7 │ var f4 = (x: string, y: number, ...rest) /*
 8 │   */  => { }
   ·       ──
 9 │ var f5 = (...rest)
   ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:10:5]
  9 │ var f5 = (...rest)
 10 │     => { }
    ·     ──
 11 │ var f6 = (...rest) /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:12:7]
 11 │ var f6 = (...rest) /*
 12 │   */  => { }
    ·       ──
 13 │ var f7 = (x: string, y: number, z = 10)
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:14:5]
 13 │ var f7 = (x: string, y: number, z = 10)
 14 │     => { }
    ·     ──
 15 │ var f8 = (x: string, y: number, z = 10) /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:16:7]
 15 │ var f8 = (x: string, y: number, z = 10) /*
 16 │   */  => { }
    ·       ──
 17 │ var f9 = (a: number): number
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:18:5]
 17 │ var f9 = (a: number): number
 18 │     => a;
    ·     ──
 19 │ var f10 = (a: number) :
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:21:5]
 20 │   number
 21 │     => a
    ·     ──
 22 │ var f11 = (a: number): number /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:23:8]
 22 │ var f11 = (a: number): number /*
 23 │     */ => a;
    ·        ──
 24 │ var f12 = (a: number) :
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:26:8]
 25 │   number /*
 26 │     */ => a
    ·        ──
 27 │ 
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:52:5]
 51 │ foo(()
 52 │     => true);
    ·     ──
 53 │ foo(()
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:54:5]
 53 │ foo(()
 54 │     => { return false; });
    ·     ──
 55 │ 
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:59:13]
 58 │         constructor(x: number, thing = ()
 59 │             => 100) {
    ·             ──
 60 │         }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:63:13]
 62 │         public m = ()
 63 │             => 2 * 2 * 2
    ·             ──
 64 │     }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:68:13]
 67 │         claw = (()
 68 │             => 10)()
    ·             ──
 69 │     }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:72:9]
 71 │     export var v = x
 72 │         => new City(Enum.claw);
    ·         ──
 73 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments12.ts:2:7]
 1 │ class C {
 2 │     f(arguments) {
   ·       ─────────
 3 │         var a = () => arguments;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments12_ES6.ts:2:7]
 1 │ class C {
 2 │     f(arguments) {
   ·       ─────────
 3 │         var a = () => arguments;
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/binaryIntegerLiteralError.ts:2:17]
 1 │ // error
 2 │ var bin1 = 0B1102110;
   ·                 ─
 3 │ var bin1 = 0b11023410;
   ╰────

  × Invalid Character `2`
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/invalidBinaryIntegerLiteralAndOctalIntegerLiteral.ts:2:16]
 1 │ // Error
 2 │ var binary = 0b21010;
   ·                ▲
 3 │ var binary1 = 0B21010;
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/octalIntegerLiteralError.ts:2:19]
 1 │ // error
 2 │ var oct1 = 0O13334823;
   ·                   ─
 3 │ var oct2 = 0o34318592;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:4:16]
 3 │     public implements() { }
 4 │     public foo(arguments: any) { }
   ·                ──────────────
 5 │     private bar(eval:any) {
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:5:17]
 4 │     public foo(arguments: any) { }
 5 │     private bar(eval:any) {
   ·                 ────────
 6 │         arguments = "hello";
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:6:9]
 5 │     private bar(eval:any) {
 6 │         arguments = "hello";
   ·         ─────────
 7 │     }
   ╰────

  × 'super' can only be referenced in a derived class.
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/superCallFromClassThatHasNoBaseTypeButWithSameSymbolInterface.ts:3:1]
 2 │     
 3 │ ╭─▶ class Foo {
 4 │ │       constructor() {
 5 │ │           super(); // error
   · │           ─────
 6 │ │       }
 7 │ ├─▶ }
   · ╰──── class does not have `extends`
   ╰────
  help: either remove this super, or extend the class

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames27_ES5.ts:4:7]
 3 │ class C extends Base {
 4 │     [(super(), "prop")]() { }
   ·       ───────
 5 │ }
   ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames27_ES6.ts:4:7]
 3 │ class C extends Base {
 4 │     [(super(), "prop")]() { }
   ·       ───────
 5 │ }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames3_ES5.ts:5:17]
 4 │     static [() => { }]() { }
 5 │     get [delete id]() { }
   ·                 ──
 6 │     set [[0, 1]](v) { }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames3_ES6.ts:5:17]
 4 │     static [() => { }]() { }
 5 │     get [delete id]() { }
   ·                 ──
 6 │     set [[0, 1]](v) { }
   ╰────

  × Identifier `` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames40_ES5.ts:8:6]
  7 │     // Computed properties
  8 │     [""]() { return new Foo }
    ·      ─┬
    ·       ╰── `` has already been declared here
  9 │     [""]() { return new Foo2 }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 10 │ }
    ╰────

  × Identifier `` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames40_ES6.ts:8:6]
  7 │     // Computed properties
  8 │     [""]() { return new Foo }
    ·      ─┬
    ·       ╰── `` has already been declared here
  9 │     [""]() { return new Foo2 }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 10 │ }
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames49_ES5.ts:9:16]
  8 │     },
  9 │     set [1 + 1]() {
    ·                ──
 10 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames49_ES6.ts:9:16]
  8 │     },
  9 │     set [1 + 1]() {
    ·                ──
 10 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames50_ES5.ts:11:16]
 10 │     },
 11 │     set [1 + 1]() {
    ·                ──
 12 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames50_ES6.ts:11:16]
 10 │     },
 11 │     set [1 + 1]() {
    ·                ──
 12 │         // just throw
    ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/declarationWithNoInitializer.ts:1:5]
 1 │ var [a, b];          // Error, no initializer
   ·     ──────
 2 │ var {c, d};          // Error, no initializer
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/declarationWithNoInitializer.ts:2:5]
 1 │ var [a, b];          // Error, no initializer
 2 │ var {c, d};          // Error, no initializer
   ·     ──────
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment3.ts:2:7]
 1 │ // Error
 2 │ var {h?} = { h?: 1 };
   ·       ┬
   ·       ╰── `,` expected
 3 │ var {i}: string | number = { i: 2 };
   ╰────

  × Identifier `number` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES6.ts:96:18]
 95 │ 
 96 │ function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
    ·                  ───┬──  ───┬──
    ·                     │       ╰── It can not be redeclared here
    ·                     ╰── `number` has already been declared here
 97 │ 
    ╰────

  × Identifier `number` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES6.ts:96:18]
 95 │ 
 96 │ function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
    ·                  ───┬──          ───┬──
    ·                     │               ╰── It can not be redeclared here
    ·                     ╰── `number` has already been declared here
 97 │ 
    ╰────

  × Expected `,` but found `)`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration2.ts:7:29]
 6 │ function a0([a, b, [[c]]]: [number, number, string[][]]) { }
 7 │ a0([1, "string", [["world"]]);      // Error
   ·                             ┬
   ·                             ╰── `,` expected
 8 │ a0([1, 2, [["world"]], "string"]);  // Error
   ╰────

  × A rest parameter cannot be optional
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts:14:17]
 13 │ function a2(...a: someArray) { }  // Error, rest parameter must be array type
 14 │ function a3(...b?) { }            // Error, can't be optional
    ·                 ─
 15 │ function a4(...b = [1,2,3]) { }   // Error, can't have initializer
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts:29:24]
 28 │ class C {
 29 │     constructor(public ...temp) { }  // Error, rest parameter can't have properties
    ·                        ───
 30 │ }
    ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration6.ts:7:18]
 6 │ // Error
 7 │ function a({while}) { }
   ·                  ┬
   ·                  ╰── `:` expected
 8 │ function a1({public}) { }
   ╰────

  × Identifier `foo1` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:21:7]
 20 │ 
 21 │ let { foo1, foo1 } = { foo1: 10 };
    ·       ──┬─  ──┬─
    ·         │     ╰── It can not be redeclared here
    ·         ╰── `foo1` has already been declared here
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
    ╰────

  × Identifier `foo2` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:22:7]
 21 │ let { foo1, foo1 } = { foo1: 10 };
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
    ·       ──┬─        ──┬─
    ·         │           ╰── It can not be redeclared here
    ·         ╰── `foo2` has already been declared here
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
    ╰────

  × Identifier `foo3` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:23:13]
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `foo3` has already been declared here
 24 │ const { foo4, foo4 } = { foo4: 40 };
    ╰────

  × Identifier `foo4` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:24:9]
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
 24 │ const { foo4, foo4 } = { foo4: 40 };
    ·         ──┬─  ──┬─
    ·           │     ╰── It can not be redeclared here
    ·           ╰── `foo4` has already been declared here
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
    ╰────

  × Identifier `foo5` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:25:9]
 24 │ const { foo4, foo4 } = { foo4: 40 };
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
    ·         ──┬─        ──┬─
    ·           │           ╰── It can not be redeclared here
    ·           ╰── `foo5` has already been declared here
 26 │ const { bar6: foo6, foo6 } = { foo6: 60, bar6: 660 };
    ╰────

  × Identifier `foo6` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:26:15]
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
 26 │ const { bar6: foo6, foo6 } = { foo6: 60, bar6: 660 };
    ·               ──┬─  ──┬─
    ·                 │     ╰── It can not be redeclared here
    ·                 ╰── `foo6` has already been declared here
 27 │ 
    ╰────

  × Identifier `blah1` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:28:6]
 27 │ 
 28 │ let [blah1, blah1] = [111, 222];
    ·      ──┬──  ──┬──
    ·        │      ╰── It can not be redeclared here
    ·        ╰── `blah1` has already been declared here
 29 │ const [blah2, blah2] = [333, 444];
    ╰────

  × Identifier `blah2` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:29:8]
 28 │ let [blah1, blah1] = [111, 222];
 29 │ const [blah2, blah2] = [333, 444];
    ·        ──┬──  ──┬──
    ·          │      ╰── It can not be redeclared here
    ·          ╰── `blah2` has already been declared here
    ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers01.ts:1:13]
 1 │ var { while } = { while: 1 }
   ·             ┬
   ·             ╰── `:` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers02.ts:1:14]
 1 │ var { while: while } = { while: 1 }
   ·              ─────
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers03.ts:1:15]
 1 │ var { "while" } = { while: 1 }
   ·               ┬
   ·               ╰── `:` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers04.ts:1:16]
 1 │ var { "while": while } = { while: 1 }
   ·                ─────
   ╰────

  × A rest parameter cannot have an initializer
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restElementWithInitializer1.ts:2:9]
 1 │ var a: number[];
 2 │ var [...x = a] = a;  // Error, rest element cannot have initializer
   ·         ─────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restElementWithInitializer2.ts:3:5]
 2 │ var x: number[];
 3 │ [...x = a] = a;  // Error, rest element cannot have initializer
   ·     ─────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts:2:6]
 1 │ ({...{}} = {});
 2 │ ({...({})} = {});
   ·      ────
 3 │ ({...[]} = {});
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of-excess-declarations.ts:1:6]
 1 │ for (const a, { [b]: c} of [1]) {
   ·      ──────────────────
 2 │ 
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of2.ts:1:7]
 1 │ const v;
   ·       ─
 2 │ for (v of []) { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of3.ts:2:6]
 1 │ var v: any;
 2 │ for (v++ of []) { }
   ·      ───
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of51.ts:1:10]
 1 │ for (let let of []) {}
   ·          ───
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of52.ts:1:11]
 1 │ for (let [v, v] of [[]]) {}
   ·           ┬  ┬
   ·           │  ╰── It can not be redeclared here
   ·           ╰── `v` has already been declared here
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of53.ts:1:10]
 1 │ for (let v of []) {
   ·          ┬
   ·          ╰── `v` has already been declared here
 2 │     var v;
   ·         ┬
   ·         ╰── It can not be redeclared here
 3 │ }
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of54.ts:1:10]
 1 │ for (let v of []) {
   ·          ┬
   ·          ╰── `v` has already been declared here
 2 │     var v = 0;
   ·         ┬
   ·         ╰── It can not be redeclared here
 3 │ }
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration10_es6.ts:1:20]
 1 │ function * foo(a = yield => yield) {
   ·                    ─────
 2 │ }
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration12_es6.ts:1:20]
 1 │ var v = function * yield() { }
   ·                    ─────
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration5_es6.ts:1:14]
 1 │ function*foo(yield) {
   ·              ─────
 2 │ }
   ╰────

  × yield expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration6_es6.ts:1:18]
 1 │ function*foo(a = yield) {
   ·                  ──┬──
   ·                    ╰── yield expression not allowed in formal parameter
 2 │ }
   ╰────

  × yield expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration7_es6.ts:3:20]
 2 │   // 'yield' here is an identifier, and not a yield expression.
 3 │   function*foo(a = yield) {
   ·                    ──┬──
   ·                      ╰── yield expression not allowed in formal parameter
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments2_es6.ts:1:11]
 1 │ var v = { *() { } }
   ·           ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments3_es6.ts:1:11]
 1 │ var v = { *{ } }
   ·           ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments4_es6.ts:1:11]
 1 │ var v = { * }
   ·           ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments6_es6.ts:1:11]
 1 │ var v = { *<T>() { } }
   ·           ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration4_es6.ts:2:5]
 1 │ class C {
 2 │    *() { }
   ·     ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration5_es6.ts:3:1]
 2 │    *
 3 │ }
   · ─
   ╰────

  × Expected `(` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration6_es6.ts:3:1]
 2 │    *foo
 3 │ }
   · ┬
   · ╰── `(` expected
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration8_es6.ts:4:12]
 3 │     // Make sure we don't think of *bar as the start of a generator method.
 4 │     if (a) ¬ * bar;
   ·            ─
 5 │     return bar;
   ╰────

  × Expected `,` but found `string`
   ╭─[typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithUnderscores1.ts:5:5]
 4 │     "_": 10
 5 │     "___": 30
   ·     ──┬──
   ·       ╰── `,` expected
 6 │ }
   ╰────

  × Identifier `C` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/modules/multipleDefaultExports03.ts:1:22]
 1 │ export default class C {
   ·                      ┬
   ·                      ╰── `C` has already been declared here
 2 │ }
 3 │ 
 4 │ export default class C {
   ·                      ┬
   ·                      ╰── It can not be redeclared here
 5 │ }
   ╰────

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:1:11]
 1 │ const a = new.target;
   ·           ──────────
 2 │ const b = () => new.target;
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:2:17]
 1 │ const a = new.target;
 2 │ const b = () => new.target;
   ·                 ──────────
 3 │ 
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:5:6]
 4 │ class C {
 5 │     [new.target]() { }
   ·      ──────────
 6 │     c() { return new.target; }
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:9:15]
  8 │     set e(_) { _ = new.target; }
  9 │     f = () => new.target;
    ·               ──────────
 10 │ 
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:11:13]
 10 │ 
 11 │     static [new.target]() { }
    ·             ──────────
 12 │     static g() { return new.target; }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:15:22]
 14 │     static set i(_) { _ = new.target; }
 15 │     static j = () => new.target;
    ·                      ──────────
 16 │ }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:19:6]
 18 │ const O = {
 19 │     [new.target]: undefined,
    ·      ──────────
 20 │     k() { return new.target; },
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:23:8]
 22 │     set m(_) { _ = new.target; },
 23 │     n: new.target,
    ·        ──────────
 24 │ };
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:1:11]
 1 │ const a = new.target;
   ·           ──────────
 2 │ const b = () => new.target;
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:2:17]
 1 │ const a = new.target;
 2 │ const b = () => new.target;
   ·                 ──────────
 3 │ 
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:5:6]
 4 │ class C {
 5 │     [new.target]() { }
   ·      ──────────
 6 │     c() { return new.target; }
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:9:15]
  8 │     set e(_) { _ = new.target; }
  9 │     f = () => new.target;
    ·               ──────────
 10 │ 
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:11:13]
 10 │ 
 11 │     static [new.target]() { }
    ·             ──────────
 12 │     static g() { return new.target; }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:15:22]
 14 │     static set i(_) { _ = new.target; }
 15 │     static j = () => new.target;
    ·                      ──────────
 16 │ }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:19:6]
 18 │ const O = {
 19 │     [new.target]: undefined,
    ·      ──────────
 20 │     k() { return new.target; },
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:23:8]
 22 │     set m(_) { _ = new.target; },
 23 │     n: new.target,
    ·        ──────────
 24 │ };
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorFromNotUsingIdentifier.ts:3:20]
 2 │ var y = {
 3 │     "stringLiteral",
   ·                    ─
 4 │     42,
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorWithModule.ts:10:10]
  9 │     export var y = {
 10 │         m.x  // error
    ·          ─
 11 │     };
    ╰────

  × Expected `$}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/es6/templates/TemplateExpression1.ts:1:19]
 1 │ var v = `foo ${ a 
   ╰────

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/conformance/es6/templates/taggedTemplatesWithTypeArguments2.ts:36:9]
 35 │     constructor() {
 36 │         super<number, string, T> `hello world`;
    ·         ─────
 37 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInFunctionParameterType.ts:1:12]
 1 │ function f(`hello`);
   ·            ───────
 2 │ function f(x: string);
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInFunctionParameterTypeES6.ts:1:12]
 1 │ function f(`hello`);
   ·            ───────
 2 │ function f(x: string);
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInModuleName.ts:1:8]
 1 │ declare module `M1` {
   ·        ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInModuleNameES6.ts:1:8]
 1 │ declare module `M1` {
   ·        ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInObjectLiteral.ts:3:5]
 2 │     a: `abc${ 123 }def`,
 3 │     `b`: 321
   ·     ───
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInObjectLiteralES6.ts:3:5]
 2 │     a: `abc${ 123 }def`,
 3 │     `b`: 321
   ·     ───
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyName1.ts:2:5]
 1 │ var x = {
 2 │     `a`: 321
   ·     ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyName2.ts:2:5]
 1 │ var x = {
 2 │     `abc${ 123 }def${ 456 }ghi`: 321
   ·     ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyNameES6_1.ts:2:5]
 1 │ var x = {
 2 │     `a`: 321
   ·     ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyNameES6_2.ts:2:5]
 1 │ var x = {
 2 │     `abc${ 123 }def${ 456 }ghi`: 321
   ·     ──────
 3 │ }
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated1.ts:1:1]
 1 │ `
   · ─
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated1_ES6.ts:1:1]
 1 │ `
   · ─
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated2.ts:1:1]
 1 │ `\`
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated2_ES6.ts:1:1]
 1 │ `\`
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated3.ts:1:1]
 1 │ `\\
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated3_ES6.ts:1:1]
 1 │ `\\
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated4.ts:1:1]
 1 │ `\\\`
   · ─────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated4_ES6.ts:1:1]
 1 │ `\\\`
   · ─────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated5.ts:1:1]
 1 │ `\\\\\`
   · ───────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated5_ES6.ts:1:1]
 1 │ `\\\\\`
   · ───────
   ╰────

  × Expected `(` but found `{`
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringWithEmbeddedYieldKeyword.ts:1:15]
 1 │ function* gen {
   ·               ┬
   ·               ╰── `(` expected
 2 │     // Once this is supported, yield *must* be parenthesized.
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions07.ts:3:11]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = /\u{110000}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions12.ts:1:11]
 1 │ var x = /\u{FFFFFFFF}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions14.ts:2:11]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = /\u{-DDDD}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions17.ts:1:11]
 1 │ var x = /\u{r}\u{n}\u{t}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions19.ts:1:11]
 1 │ var x = /\u{}/gu;
   ·           ─
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings07.ts:3:10]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = "\u{110000}";
   ·          ─────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings12.ts:1:10]
 1 │ var x = "\u{FFFFFFFF}";
   ·          ─────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings14.ts:2:10]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = "\u{-DDDD}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:10]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:15]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·               ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:20]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·                    ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings19.ts:1:10]
 1 │ var x = "\u{}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings20.ts:1:10]
 1 │ var x = "\u{";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings21.ts:1:10]
 1 │ var x = "\u{67";
   ·          ─────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings22.ts:1:10]
 1 │ var x = "\u{00000000000067";
   ·          ─────────────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings24.ts:1:10]
 1 │ var x = "\u{00000000000067
   ·          ─────────────────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings24.ts:1:9]
 1 │ var x = "\u{00000000000067
   ·         ──────────────────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings25.ts:1:9]
 1 │ var x = "\u{00000000000067}
   ·         ───────────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates07.ts:3:10]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = `\u{110000}`;
   ·          ──────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates12.ts:1:10]
 1 │ var x = `\u{FFFFFFFF}`;
   ·          ────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates14.ts:2:10]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = `\u{-DDDD}`;
   ·          ─────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates17.ts:1:10]
 1 │ var x = `\u{r}\u{n}\u{t}`;
   ·          ───────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates19.ts:1:10]
 1 │ var x = `\u{}`;
   ·          ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration11_es6.ts:2:4]
 1 │ "use strict";
 2 │ let
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration13_es6.ts:4:5]
 3 │ var let: any;
 4 │ let[0] = 100;
   ·     ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration1_es6.ts:1:6]
 1 │ const
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration2_es6.ts:1:7]
 1 │ const a
   ·       ─
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration4_es6.ts:1:7]
 1 │ const a: number
   ·       ─────────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration6_es6.ts:1:4]
 1 │ let
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression12_es6.ts:3:6]
 2 │   constructor() {
 3 │      yield foo
   ·      ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression14_es6.ts:3:6]
 2 │   foo() {
 3 │      yield foo
   ·      ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression15_es6.ts:2:6]
 1 │ var v = () => {
 2 │      yield foo
   ·      ─────
 3 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression16_es6.ts:3:5]
 2 │   function bar() {
 3 │     yield foo;
   ·     ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression17_es6.ts:1:23]
 1 │ var v = { get foo() { yield foo; } }
   ·                       ─────
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression18_es6.ts:2:1]
 1 │ "use strict";
 2 │ yield(foo);
   · ─────
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression2_es6.ts:1:1]
 1 │ yield foo;
   · ─────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression5_es6.ts:3:1]
 2 │   yield*
 3 │ }
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldStarExpression2_es6.ts:1:8]
 1 │ yield *;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldStarExpression3_es6.ts:2:12]
 1 │ function *g() {
 2 │     yield *;
   ·            ─
 3 │ }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck32.ts:2:29]
 1 │ var s: string;
 2 │ var f: () => number = () => yield s;
   ·                             ─────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSIsValue.ts:7:9]
 6 │     constructor() {
 7 │         this **= value;
   ·         ────
 8 │     }
   ╰────

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:7:8]
 6 │ // TempateHead & TemplateTail are empty
 7 │ `${1 + typeof t1 ** t2 ** t1}`;
   ·        ─────────────────────
 8 │ `${-t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:8:4]
 7 │ `${1 + typeof t1 ** t2 ** t1}`;
 8 │ `${-t1 ** t2 - t1}`;
   ·    ─────────
 9 │ `${-++t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:9:4]
  8 │ `${-t1 ** t2 - t1}`;
  9 │ `${-++t1 ** t2 - t1}`;
    ·    ───────────
 10 │ `${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:10:4]
  9 │ `${-++t1 ** t2 - t1}`;
 10 │ `${-t1++ ** t2 - t1}`;
    ·    ───────────
 11 │ `${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:11:4]
 10 │ `${-t1++ ** t2 - t1}`;
 11 │ `${!t1 ** t2 ** --t1 }`;
    ·    ─────────────────
 12 │ `${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:12:4]
 11 │ `${!t1 ** t2 ** --t1 }`;
 12 │ `${typeof t1 ** t2 ** t1}`;
    ·    ─────────────────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:14:4]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·    ─────────
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:14:21]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·                     ─────────
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:15:4]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·    ───────────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:15:23]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·                       ───────────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:16:4]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·    ───────────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:16:23]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·                       ───────────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:17:4]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·    ─────────────────
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:17:25]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·                         ─────────────────
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:18:4]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·    ─────────────────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:18:28]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·                            ─────────────────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:19:8]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·        ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:19:36]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·                                    ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:21:4]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·    ─────────
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:21:34]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·                                  ─────────
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:22:4]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·    ───────────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:22:36]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·                                    ───────────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:23:4]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·    ───────────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:23:36]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·                                    ───────────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:24:4]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·    ─────────────────
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:24:38]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·                                      ─────────────────
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:25:4]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·    ─────────────────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:25:41]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·                                         ─────────────────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:26:8]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·        ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:26:49]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·                                                 ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:7:10]
 6 │ // With templateHead
 7 │ `hello ${-t1 ** t2 - t1}`;
   ·          ─────────
 8 │ `hello ${-++t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:8:10]
 7 │ `hello ${-t1 ** t2 - t1}`;
 8 │ `hello ${-++t1 ** t2 - t1}`;
   ·          ───────────
 9 │ `hello ${-t1++ ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:9:10]
  8 │ `hello ${-++t1 ** t2 - t1}`;
  9 │ `hello ${-t1++ ** t2 - t1}`;
    ·          ───────────
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:10:10]
  9 │ `hello ${-t1++ ** t2 - t1}`;
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
    ·          ─────────────────
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:11:10]
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
    ·          ─────────────────────
 12 │ `hello ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:12:14]
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
 12 │ `hello ${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────────────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:14:10]
 13 │ 
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·          ─────────
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:14:27]
 13 │ 
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·                           ─────────
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:15:10]
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·          ───────────
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:15:29]
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·                             ───────────
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:16:10]
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·          ───────────
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:16:29]
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·                             ───────────
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:17:10]
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·          ─────────────────
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:17:31]
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·                               ─────────────────
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:18:10]
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·          ─────────────────────
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:18:34]
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·                                  ─────────────────────
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:19:14]
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:19:42]
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·                                          ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:21:10]
 20 │ 
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·          ─────────
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:21:40]
 20 │ 
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·                                        ─────────
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:22:10]
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·          ───────────
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:22:42]
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·                                          ───────────
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:23:10]
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·          ───────────
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:23:42]
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·                                          ───────────
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:24:10]
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·          ─────────────────
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:24:44]
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·                                            ─────────────────
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:25:10]
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·          ─────────────────────
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:25:47]
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·                                               ─────────────────────
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:26:14]
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:26:55]
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·                                                       ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:7:4]
 6 │ // With TemplateTail
 7 │ `${-t1 ** t2 - t1} world`;
   ·    ─────────
 8 │ `${-++t1 ** t2 - t1} world`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:8:4]
 7 │ `${-t1 ** t2 - t1} world`;
 8 │ `${-++t1 ** t2 - t1} world`;
   ·    ───────────
 9 │ `${-t1++ ** t2 - t1} world`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:9:4]
  8 │ `${-++t1 ** t2 - t1} world`;
  9 │ `${-t1++ ** t2 - t1} world`;
    ·    ───────────
 10 │ `${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:10:4]
  9 │ `${-t1++ ** t2 - t1} world`;
 10 │ `${!t1 ** t2 ** --t1 } world`;
    ·    ─────────────────
 11 │ `${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:11:4]
 10 │ `${!t1 ** t2 ** --t1 } world`;
 11 │ `${typeof t1 ** t2 ** t1} world`;
    ·    ─────────────────────
 12 │ `${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:12:8]
 11 │ `${typeof t1 ** t2 ** t1} world`;
 12 │ `${1 + typeof t1 ** t2 ** t1} world`;
    ·        ─────────────────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:14:4]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
    ·    ─────────
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:14:21]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
    ·                     ─────────
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:15:4]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ·    ───────────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:15:23]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ·                       ───────────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:16:4]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ·    ───────────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:16:23]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ·                       ───────────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:17:4]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ·    ─────────────────
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:17:25]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ·                         ─────────────────
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:18:4]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ·    ─────────────────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:18:28]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ·                            ─────────────────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:19:8]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ·        ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:19:36]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ·                                    ─────────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:21:4]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
    ·    ─────────
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:21:34]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
    ·                                  ─────────
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:22:4]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ·    ───────────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:22:36]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ·                                    ───────────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:23:4]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ·    ───────────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:23:36]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ·                                    ───────────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:24:4]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ·    ─────────────────
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:24:38]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ·                                      ─────────────────
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:25:4]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ·    ─────────────────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:25:41]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ·                                         ─────────────────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:26:8]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ·        ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:26:49]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ·                                                 ─────────────────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:2:1]
 1 │ // Error: early syntax error using ES7 SimpleUnaryExpression on left-hand side without ()
 2 │ -1 ** 2;
   · ───────
 3 │ +1 ** 2
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:3:1]
 2 │ -1 ** 2;
 3 │ +1 ** 2
   · ───────
 4 │ 1 ** -2 ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:4:6]
 3 │ +1 ** 2
 4 │ 1 ** -2 ** 3;
   ·      ───────
 5 │ 1 ** -2 ** -3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:5:6]
 4 │ 1 ** -2 ** 3;
 5 │ 1 ** -2 ** -3;
   ·      ────────
 6 │ -1 ** -2 ** -3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:6:7]
 5 │ 1 ** -2 ** -3;
 6 │ -1 ** -2 ** -3;
   ·       ────────
 7 │ -(1 ** 2) ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:6:1]
 5 │ 1 ** -2 ** -3;
 6 │ -1 ** -2 ** -3;
   · ──────────────
 7 │ -(1 ** 2) ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:7:1]
 6 │ -1 ** -2 ** -3;
 7 │ -(1 ** 2) ** 3;
   · ──────────────
 8 │ 
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:11:1]
 10 │ 
 11 │ -++temp ** 3;
    · ────────────
 12 │ +--temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:12:1]
 11 │ -++temp ** 3;
 12 │ +--temp ** 3;
    · ────────────
 13 │ -temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:13:1]
 12 │ +--temp ** 3;
 13 │ -temp++ ** 3;
    · ────────────
 14 │ +temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:14:1]
 13 │ -temp++ ** 3;
 14 │ +temp-- ** 3;
    · ────────────
 15 │ 1 ** -++temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:15:6]
 14 │ +temp-- ** 3;
 15 │ 1 ** -++temp ** 3;
    ·      ────────────
 16 │ 1 ** +--temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:16:6]
 15 │ 1 ** -++temp ** 3;
 16 │ 1 ** +--temp ** 3;
    ·      ────────────
 17 │ 1 ** -temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:17:6]
 16 │ 1 ** +--temp ** 3;
 17 │ 1 ** -temp++ ** 3;
    ·      ────────────
 18 │ 1 ** +temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:18:6]
 17 │ 1 ** -temp++ ** 3;
 18 │ 1 ** +temp-- ** 3;
    ·      ────────────
 19 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:20:1]
 19 │ 
 20 │ -3 ** temp++;
    · ────────────
 21 │ -3 ** temp--;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:21:1]
 20 │ -3 ** temp++;
 21 │ -3 ** temp--;
    · ────────────
 22 │ -3 ** ++temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:22:1]
 21 │ -3 ** temp--;
 22 │ -3 ** ++temp;
    · ────────────
 23 │ -3 ** --temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:23:1]
 22 │ -3 ** ++temp;
 23 │ -3 ** --temp;
    · ────────────
 24 │ +3 ** temp++;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:24:1]
 23 │ -3 ** --temp;
 24 │ +3 ** temp++;
    · ────────────
 25 │ +3 ** temp--;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:25:1]
 24 │ +3 ** temp++;
 25 │ +3 ** temp--;
    · ────────────
 26 │ +3 ** ++temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:26:1]
 25 │ +3 ** temp--;
 26 │ +3 ** ++temp;
    · ────────────
 27 │ +3 ** --temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:27:1]
 26 │ +3 ** ++temp;
 27 │ +3 ** --temp;
    · ────────────
 28 │ -3 ** temp++ ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:28:1]
 27 │ +3 ** --temp;
 28 │ -3 ** temp++ ** 2;
    · ─────────────────
 29 │ -3 ** temp-- ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:29:1]
 28 │ -3 ** temp++ ** 2;
 29 │ -3 ** temp-- ** 2;
    · ─────────────────
 30 │ -3 ** ++temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:30:1]
 29 │ -3 ** temp-- ** 2;
 30 │ -3 ** ++temp ** 2;
    · ─────────────────
 31 │ -3 ** --temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:31:1]
 30 │ -3 ** ++temp ** 2;
 31 │ -3 ** --temp ** 2;
    · ─────────────────
 32 │ +3 ** temp++ ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:32:1]
 31 │ -3 ** --temp ** 2;
 32 │ +3 ** temp++ ** 2;
    · ─────────────────
 33 │ +3 ** temp-- ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:33:1]
 32 │ +3 ** temp++ ** 2;
 33 │ +3 ** temp-- ** 2;
    · ─────────────────
 34 │ +3 ** ++temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:34:1]
 33 │ +3 ** temp-- ** 2;
 34 │ +3 ** ++temp ** 2;
    · ─────────────────
 35 │ +3 ** --temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:35:1]
 34 │ +3 ** ++temp ** 2;
 35 │ +3 ** --temp ** 2;
    · ─────────────────
 36 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:4:1]
 3 │ 
 4 │ delete --temp ** 3;
   · ──────────────────
 5 │ delete ++temp ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:5:1]
 4 │ delete --temp ** 3;
 5 │ delete ++temp ** 3;
   · ──────────────────
 6 │ delete temp-- ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:6:1]
 5 │ delete ++temp ** 3;
 6 │ delete temp-- ** 3;
   · ──────────────────
 7 │ delete temp++ ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:7:1]
 6 │ delete temp-- ** 3;
 7 │ delete temp++ ** 3;
   · ──────────────────
 8 │ 
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:10:6]
  9 │ 
 10 │ 1 ** delete --temp ** 3;
    ·      ──────────────────
 11 │ 1 ** delete ++temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:11:6]
 10 │ 1 ** delete --temp ** 3;
 11 │ 1 ** delete ++temp ** 3;
    ·      ──────────────────
 12 │ 1 ** delete temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:12:6]
 11 │ 1 ** delete ++temp ** 3;
 12 │ 1 ** delete temp-- ** 3;
    ·      ──────────────────
 13 │ 1 ** delete temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:13:6]
 12 │ 1 ** delete temp-- ** 3;
 13 │ 1 ** delete temp++ ** 3;
    ·      ──────────────────
 14 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:15:1]
 14 │ 
 15 │ typeof --temp ** 3;
    · ──────────────────
 16 │ typeof temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:16:1]
 15 │ typeof --temp ** 3;
 16 │ typeof temp-- ** 3;
    · ──────────────────
 17 │ typeof 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:17:1]
 16 │ typeof temp-- ** 3;
 17 │ typeof 3 ** 4;
    · ─────────────
 18 │ typeof temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:18:1]
 17 │ typeof 3 ** 4;
 18 │ typeof temp++ ** 4;
    · ──────────────────
 19 │ typeof temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:19:1]
 18 │ typeof temp++ ** 4;
 19 │ typeof temp-- ** 4;
    · ──────────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:21:6]
 20 │ 
 21 │ 1 ** typeof --temp ** 3;
    ·      ──────────────────
 22 │ 1 ** typeof temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:22:6]
 21 │ 1 ** typeof --temp ** 3;
 22 │ 1 ** typeof temp-- ** 3;
    ·      ──────────────────
 23 │ 1 ** typeof 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:23:6]
 22 │ 1 ** typeof temp-- ** 3;
 23 │ 1 ** typeof 3 ** 4;
    ·      ─────────────
 24 │ 1 ** typeof temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:24:6]
 23 │ 1 ** typeof 3 ** 4;
 24 │ 1 ** typeof temp++ ** 4;
    ·      ──────────────────
 25 │ 1 ** typeof temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:25:6]
 24 │ 1 ** typeof temp++ ** 4;
 25 │ 1 ** typeof temp-- ** 4;
    ·      ──────────────────
 26 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:27:1]
 26 │ 
 27 │ void --temp ** 3;
    · ────────────────
 28 │ void temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:28:1]
 27 │ void --temp ** 3;
 28 │ void temp-- ** 3;
    · ────────────────
 29 │ void 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:29:1]
 28 │ void temp-- ** 3;
 29 │ void 3 ** 4;
    · ───────────
 30 │ void temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:30:1]
 29 │ void 3 ** 4;
 30 │ void temp++ ** 4;
    · ────────────────
 31 │ void temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:31:1]
 30 │ void temp++ ** 4;
 31 │ void temp-- ** 4;
    · ────────────────
 32 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:33:6]
 32 │ 
 33 │ 1 ** void --temp ** 3;
    ·      ────────────────
 34 │ 1 ** void temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:34:6]
 33 │ 1 ** void --temp ** 3;
 34 │ 1 ** void temp-- ** 3;
    ·      ────────────────
 35 │ 1 ** void 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:35:6]
 34 │ 1 ** void temp-- ** 3;
 35 │ 1 ** void 3 ** 4;
    ·      ───────────
 36 │ 1 ** void temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:36:6]
 35 │ 1 ** void 3 ** 4;
 36 │ 1 ** void temp++ ** 4;
    ·      ────────────────
 37 │ 1 ** void temp-- ** 4 ;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:37:6]
 36 │ 1 ** void temp++ ** 4;
 37 │ 1 ** void temp-- ** 4 ;
    ·      ────────────────
 38 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:39:1]
 38 │ 
 39 │ ~ --temp ** 3;
    · ─────────────
 40 │ ~temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:40:1]
 39 │ ~ --temp ** 3;
 40 │ ~temp-- ** 3;
    · ────────────
 41 │ ~3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:41:1]
 40 │ ~temp-- ** 3;
 41 │ ~3 ** 4;
    · ───────
 42 │ ~temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:42:1]
 41 │ ~3 ** 4;
 42 │ ~temp++ ** 4;
    · ────────────
 43 │ ~temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:43:1]
 42 │ ~temp++ ** 4;
 43 │ ~temp-- ** 4;
    · ────────────
 44 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:45:6]
 44 │ 
 45 │ 1 ** ~ --temp ** 3;
    ·      ─────────────
 46 │ 1 ** ~temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:46:6]
 45 │ 1 ** ~ --temp ** 3;
 46 │ 1 ** ~temp-- ** 3;
    ·      ────────────
 47 │ 1 ** ~3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:47:6]
 46 │ 1 ** ~temp-- ** 3;
 47 │ 1 ** ~3 ** 4;
    ·      ───────
 48 │ 1 ** ~temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:48:6]
 47 │ 1 ** ~3 ** 4;
 48 │ 1 ** ~temp++ ** 4;
    ·      ────────────
 49 │ 1 ** ~temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:49:6]
 48 │ 1 ** ~temp++ ** 4;
 49 │ 1 ** ~temp-- ** 4;
    ·      ────────────
 50 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:51:1]
 50 │ 
 51 │ ! --temp ** 3;
    · ─────────────
 52 │ !temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:52:1]
 51 │ ! --temp ** 3;
 52 │ !temp-- ** 3;
    · ────────────
 53 │ !3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:53:1]
 52 │ !temp-- ** 3;
 53 │ !3 ** 4;
    · ───────
 54 │ !temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:54:1]
 53 │ !3 ** 4;
 54 │ !temp++ ** 4;
    · ────────────
 55 │ !temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:55:1]
 54 │ !temp++ ** 4;
 55 │ !temp-- ** 4;
    · ────────────
 56 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:57:6]
 56 │ 
 57 │ 1 ** ! --temp ** 3;
    ·      ─────────────
 58 │ 1 ** !temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:58:6]
 57 │ 1 ** ! --temp ** 3;
 58 │ 1 ** !temp-- ** 3;
    ·      ────────────
 59 │ 1 ** !3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:59:6]
 58 │ 1 ** !temp-- ** 3;
 59 │ 1 ** !3 ** 4;
    ·      ───────
 60 │ 1 ** !temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:60:6]
 59 │ 1 ** !3 ** 4;
 60 │ 1 ** !temp++ ** 4;
    ·      ────────────
 61 │ 1 ** !temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:61:6]
 60 │ 1 ** !temp++ ** 4;
 61 │ 1 ** !temp-- ** 4;
    ·      ────────────
 62 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected trailing comma after rest element
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:1:12]
 1 │ const [...a,] = [];
   ·            ─
 2 │ const {...b,} = {};
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:1:8]
 1 │ const [...a,] = [];
   ·        ────
 2 │ const {...b,} = {};
   ╰────

  × Unexpected trailing comma after rest element
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:2:12]
 1 │ const [...a,] = [];
 2 │ const {...b,} = {};
   ·            ─
 3 │ let c, d;
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:2:8]
 1 │ const [...a,] = [];
 2 │ const {...b,} = {};
   ·        ────
 3 │ let c, d;
   ╰────

  × Unexpected trailing comma after rest element
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:4:7]
 3 │ let c, d;
 4 │ ([...c,] = []);
   ·       ─
 5 │ ({...d,} = {});
   ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInFunctionParametersAndArguments.ts:5:13]
 4 │ 
 5 │ function f2(...args,) {}
   ·             ───────
 6 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInGetter.ts:2:11]
 1 │ class X {
 2 │     get x(,) { return 0; }
   ·           ─
 3 │ }
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-privateFieldAccess.ts:3:13]
 2 │ 
 3 │ @dec(x => x.#foo) // error
   ·             ────
 4 │ class A {
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-privateFieldAccess.ts:11:18]
 10 │ 
 11 │ @dec((x: B) => x.#foo) // error
    ·                  ────
 12 │ class B {
    ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentLHSIsValue.ts:6:21]
 5 │ class C {
 6 │     constructor() { this = value; }
   ·                     ────
 7 │     foo() { this = value; }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/assignmentOperator/compoundAssignmentLHSIsValue.ts:7:9]
 6 │     constructor() {
 7 │         this *= value;
   ·         ────
 8 │         this += value;
   ╰────

  × Expected `)` but found `,`
    ╭─[typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithoutOperand.ts:9:5]
  8 │ // Missing the second operand
  9 │ (ANY, );
    ·     ┬
    ·     ╰── `)` expected
 10 │ (BOOLEAN, );
    ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/expressions/functions/arrowFunctionContexts.ts:2:1]
 1 │ // Arrow function used in with statement
 2 │ with (window) {
   · ────
 3 │     var p = () => this;
   ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/expressions/functions/arrowFunctionContexts.ts:43:5]
 42 │     // Arrow function used in with statement
 43 │     with (window) {
    ·     ────
 44 │         var p = () => this;
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/expressions/newOperator/newOperatorErrorCases.ts:26:15]
 25 │ // Construct expression with no parentheses for construct signature with > 0 parameters
 26 │ var b = new C0 32, ''; // Parse error
    ·               ▲
 27 │ 
    ╰────
  help: Try insert a semicolon here

  × Logical expressions and coalesce expressions cannot be mixed
   ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:6:1]
 5 │ // should be a syntax error
 6 │ a ?? b || c;
   · ───────────
 7 │ 
   ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:9:1]
  8 │ // should be a syntax error
  9 │ a || b ?? c;
    · ───────────
 10 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:12:1]
 11 │ // should be a syntax error
 12 │ a ?? b && c;
    · ───────────
 13 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:15:1]
 14 │ // should be a syntax error
 15 │ a && b ?? c;
    · ───────────
 16 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralErrors.ts:50:5]
 49 │     y = 2,
 50 │     #z: 3
    ·     ──
 51 │ }
    ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/operators/incrementAndDecrement.ts:8:1]
 7 │ // Assign to expression++
 8 │ x++ = 4; // Error
   · ───
 9 │ 
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.3.ts:3:1]
 2 │ 
 3 │ obj?.["a"]++;
   · ──────────
 4 │ obj?.a["b"]++;
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.3.ts:3:1]
 2 │ 
 3 │ obj?.a++;
   · ──────
 4 │ obj?.a.b++;
   ╰────

  × Tagged template expressions are not permitted in an optional chain
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/taggedTemplateChain/taggedTemplateChain.ts:2:4]
 1 │ declare let a: any;
 2 │ a?.`b`;
   ·    ───
 3 │ 
   ╰────

  × Tagged template expressions are not permitted in an optional chain
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/taggedTemplateChain/taggedTemplateChain.ts:4:4]
 3 │ 
 4 │ a?.`b${1}c`;
   ·    ────────
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessNumericLiterals.ts:8:2]
 7 │ 08.8e5.toString();
 8 │ 0_8.8e5.toString();
   ·  ─
 9 │ 8.8e5.toString();
   ╰────

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:46:9]
 45 │     constructor() {
 46 │         super<string>();
    ·         ─────
 47 │         super();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be referenced in a derived class.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:2:1]
  1 │     //super call in class constructor with no base type
  2 │ ╭─▶ class NoBase {
  3 │ │       constructor() {
  4 │ │           super();
    · │           ─────
  5 │ │       }
  6 │ │   
  7 │ │       //super call in class member function with no base type
  8 │ │       fn() {
  9 │ │           super();
 10 │ │       }
 11 │ │   
 12 │ │       //super call in class accessor (get and set) with no base type
 13 │ │       get foo() {
 14 │ │           super();
 15 │ │           return null;
 16 │ │       }
 17 │ │       set foo(v) {
 18 │ │           super();
 19 │ │       }
 20 │ │   
 21 │ │       //super call in class member initializer with no base type
 22 │ │       p = super();
 23 │ │   
 24 │ │       //super call in static class member function with no base type
 25 │ │       static fn() {
 26 │ │           super();
 27 │ │       }
 28 │ │   
 29 │ │       //super call in static class member initializer with no base type
 30 │ │       static k = super();
 31 │ │   
 32 │ │       //super call in static class accessor (get and set) with no base type
 33 │ │       static get q() {
 34 │ │           super();
 35 │ │           return null;
 36 │ │       }
 37 │ │       static set q(n) {
 38 │ │           super();
 39 │ │       }
 40 │ ├─▶ }
    · ╰──── class does not have `extends`
 41 │     
    ╰────
  help: either remove this super, or extend the class

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:9:9]
  8 │     fn() {
  9 │         super();
    ·         ───────
 10 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:14:9]
 13 │     get foo() {
 14 │         super();
    ·         ───────
 15 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:18:9]
 17 │     set foo(v) {
 18 │         super();
    ·         ───────
 19 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:22:9]
 21 │     //super call in class member initializer with no base type
 22 │     p = super();
    ·         ───────
 23 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:26:9]
 25 │     static fn() {
 26 │         super();
    ·         ───────
 27 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:30:16]
 29 │     //super call in static class member initializer with no base type
 30 │     static k = super();
    ·                ───────
 31 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:34:9]
 33 │     static get q() {
 34 │         super();
    ·         ───────
 35 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:38:9]
 37 │     static set q(n) {
 38 │         super();
    ·         ───────
 39 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:58:9]
 57 │     //super call in class member initializer of derived type
 58 │     t = super();
    ·         ───────
 59 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:62:9]
 61 │         //super call in class member function of derived type
 62 │         super();
    ·         ───────
 63 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:67:9]
 66 │     get foo() {
 67 │         super();
    ·         ───────
 68 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:71:9]
 70 │     set foo(n) {
 71 │         super();
    ·         ───────
 72 │     }
    ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
     ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:127:16]
 126 │ // In object literal
 127 │ var obj = { n: super.wat, p: super.foo() };
     ·                ─────
     ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
     ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:127:30]
 126 │ // In object literal
 127 │ var obj = { n: super.wat, p: super.foo() };
     ·                              ─────
     ╰────

  × Expected `>` but found `is`
    ╭─[typescript/tests/cases/conformance/expressions/typeAssertions/typeAssertions.ts:44:14]
 43 │ var str: string;
 44 │ if(<numOrStr is string>(numOrStr === undefined)) { // Error
    ·              ─┬
    ·               ╰── `>` expected
 45 │     str = numOrStr; // Error, no narrowing occurred
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionErrors.ts:17:56]
 16 │ 
 17 │ function hasTypeGuardTypeInsideTypeGuardType(x): x is x is A {
    ·                                                        ▲
 18 │     return true;
    ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMember.ts:4:14]
 3 │     export class FileSystemObject {
 4 │         isFSO: this is FileSystemObject;
   ·                    ▲
 5 │         get isFile(): this is File {
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMemberErrors.ts:4:14]
 3 │     export class FileSystemObject {
 4 │         isFSO: this is FileSystemObject;
   ·                    ▲
 5 │         get isFile(): this is File {
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typePredicateOnVariableDeclaration01.ts:1:12]
 1 │ var x: this is string;
   ·            ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typePredicateOnVariableDeclaration02.ts:1:9]
 1 │ var y: z is number;
   ·         ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorInvalidOperations.ts:5:10]
 4 │ // operand before ~
 5 │ var a = q~;  //expect error
   ·          ▲
 6 │ 
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithAnyOtherTypeInvalidOperations.ts:37:26]
 36 │ // any type literal
 37 │ var ResultIsNumber11 = --{};
    ·                          ──
 38 │ var ResultIsNumber12 = --null;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumTypeInvalidOperations.ts:14:26]
 13 │ // enum type expressions
 14 │ var ResultIsNumber5 = --(ENUM["A"] + ENUM.B);
    ·                          ──────────────────
 15 │ var ResultIsNumber6 = (ENUM.A + ENUM["B"])--;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithNumberTypeInvalidOperations.ts:22:25]
 21 │ // number type literal
 22 │ var ResultIsNumber3 = --1;
    ·                         ─
 23 │ var ResultIsNumber4 = --{ x: 1, y: 2};
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithUnsupportedBooleanType.ts:22:25]
 21 │ // boolean type literal
 22 │ var ResultIsNumber3 = --true;
    ·                         ────
 23 │ var ResultIsNumber4 = --{ x: true, y: false };
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithUnsupportedStringType.ts:25:25]
 24 │ // string type literal
 25 │ var ResultIsNumber5 = --"";
    ·                         ──
 26 │ var ResultIsNumber6 = --{ x: "", y: "" };
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorInvalidOperations.ts:5:19]
 4 │ // operand before delete operator
 5 │ var BOOLEAN1 = ANY delete ;     //expect error
   ·                   ▲
 6 │ 
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherTypeInvalidOperations.ts:37:26]
 36 │ // any type literal
 37 │ var ResultIsNumber11 = ++{};
    ·                          ──
 38 │ var ResultIsNumber12 = ++null;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithEnumTypeInvalidOperations.ts:14:26]
 13 │ // enum type expressions
 14 │ var ResultIsNumber5 = ++(ENUM[1] + ENUM[2]);
    ·                          ─────────────────
 15 │ var ResultIsNumber6 = (ENUM[1] + ENUM[2])++;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberTypeInvalidOperations.ts:22:25]
 21 │ // number type literal
 22 │ var ResultIsNumber3 = ++1;
    ·                         ─
 23 │ var ResultIsNumber4 = ++{ x: 1, y: 2};
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedBooleanType.ts:22:25]
 21 │ // boolean type literal
 22 │ var ResultIsNumber3 = ++true;
    ·                         ────
 23 │ var ResultIsNumber4 = ++{ x: true, y: false };
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedStringType.ts:25:25]
 24 │ // string type literal
 25 │ var ResultIsNumber5 = ++"";
    ·                         ──
 26 │ var ResultIsNumber6 = ++{ x: "", y: "" };
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorInvalidOperations.ts:11:16]
 10 │ // miss an operand
 11 │ var BOOLEAN3 =!;
    ·                ─
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorInvalidOperations.ts:4:15]
 3 │ // operand before -
 4 │ var NUMBER1 = var NUMBER-;  //expect error
   ·               ───
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorInvalidOperations.ts:5:17]
 4 │ // operand before +
 5 │ var result1 = b+;   //expect error
   ·                 ─
 6 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorInvalidOperations.ts:4:14]
 3 │ // opreand before typeof
 4 │ var ANY = ANY typeof ;    //expect error
   ·              ▲
 5 │ 
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorInvalidOperations.ts:4:14]
 3 │ // operand before void
 4 │ var ANY = ANY void ;    //expect error
   ·              ▲
 5 │ 
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesAMD.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesCommonJS.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesES6.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesSystem.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesUMD.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/importNonStringLiteral.ts:2:22]
 1 │ var x = "filename";
 2 │ import foo = require(x); // invalid
   ·                      ─
   ╰────

  × Expected `)` but found `,`
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:4:9]
 3 │ // reparse call as invalid await should error
 4 │ await (1,);
   ·         ┬
   ·         ╰── `)` expected
 5 │ await <number, string>(1);
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.10.ts:2:19]
 1 │ // await disallowed in alias of named import
 2 │ import { await as await } from "./other";
   ·                   ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.11.ts:3:8]
 2 │ declare var require: any;
 3 │ import await = require("./other");
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.11.ts:3:8]
 2 │ declare var require: any;
 3 │ import await = require("./other");
   ·        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.12.ts:5:8]
 4 │ // await disallowed in import=namespace when in a module
 5 │ import await = foo.await;
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.12.ts:5:8]
 4 │ // await disallowed in import=namespace when in a module
 5 │ import await = foo.await;
   ·        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.2.ts:4:5]
 3 │ // reparse variable name as await should fail
 4 │ var await = 1;
   ·     ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.2.ts:4:5]
 3 │ // reparse variable name as await should fail
 4 │ var await = 1;
   ·     ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.3.ts:4:6]
 3 │ // reparse binding pattern as await should fail
 4 │ var {await} = {await:1};
   ·      ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.4.ts:4:6]
 3 │ // reparse binding pattern as await should fail
 4 │ var [await] = [1];
   ·      ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.4.ts:4:6]
 3 │ // reparse binding pattern as await should fail
 4 │ var [await] = [1];
   ·      ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.5.ts:2:14]
 1 │ // await in exported class name should fail
 2 │ export class await {
   ·              ─────
 3 │ }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.5.ts:2:14]
 1 │ // await in exported class name should fail
 2 │ export class await {
   ·              ─────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.6.ts:2:17]
 1 │ // await in exported function name should fail
 2 │ export function await() {
   ·                 ─────
 3 │ }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.6.ts:2:17]
 1 │ // await in exported function name should fail
 2 │ export function await() {
   ·                 ─────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.7.ts:2:13]
 1 │ // await disallowed in namespace import
 2 │ import * as await from "./other";
   ·             ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.7.ts:2:13]
 1 │ // await disallowed in namespace import
 2 │ import * as await from "./other";
   ·             ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.8.ts:2:8]
 1 │ // await disallowed in default import
 2 │ import await from "./other";
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.8.ts:2:8]
 1 │ // await disallowed in default import
 2 │ import await from "./other";
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.9.ts:2:10]
 1 │ // await disallowed in un-alised named import
 2 │ import { await } from "./other";
   ·          ─────
   ╰────

  × Expected `=` but found `;`
    ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_missingBraces.ts:11:16]
 10 │ namespace ns {
 11 │   export type T; // Normal parse error because there is no other 'T'
    ·                ┬
    ·                ╰── `=` expected
 12 │ }
    ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportSpecifiers_js.ts:2:15]
 1 │ const foo = 0;
 2 │ export { type foo };
   ·               ─┬─
   ·                ╰── `,` expected
   ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionOverloadErrorsSyntax.ts:9:25]
  8 │ //Function overload signature with rest param followed by non-optional parameter
  9 │ function fn5(x: string, ...y: any[], z: string);
    ·                         ───────────
 10 │ function fn5() { }
    ╰────

  × A required parameter cannot follow an optional parameter.
   ╭─[typescript/tests/cases/conformance/functions/functionOverloadErrorsSyntax.ts:2:27]
 1 │ //Function overload signature with optional parameter followed by non-optional parameter
 2 │ function fn4a(x?: number, y: string);
   ·                           ─────────
 3 │ function fn4a() { }
   ╰────

  × A required parameter cannot follow an optional parameter.
   ╭─[typescript/tests/cases/conformance/functions/functionOverloadErrorsSyntax.ts:5:38]
 4 │ 
 5 │ function fn4b(n: string, x?: number, y: string);
   ·                                      ─────────
 6 │ function fn4b() { }
   ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
   ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:2:5]
 1 │ function a(a = 10) {
 2 │     "use strict";
   ·     ─────────────
 3 │ }
   ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:16:5]
 15 │ function rest(...args: any[]) {
 16 │     'use strict';
    ·     ─────────────
 17 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:20:5]
 19 │ function rest1(a = 1, ...args) {
 20 │     'use strict';
    ·     ─────────────
 21 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:24:5]
 23 │ function paramDefault(param = 1) {
 24 │     'use strict';
    ·     ─────────────
 25 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:28:5]
 27 │ function objectBindingPattern({foo}: any) {
 28 │     'use strict';
    ·     ─────────────
 29 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:32:5]
 31 │ function arrayBindingPattern([foo]: any[]) {
 32 │     'use strict';
    ·     ─────────────
 33 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:36:5]
 35 │ function manyParameter(a = 10, b = 20) {
 36 │     "use strict";
    ·     ─────────────
 37 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:41:5]
 40 │     "foo";
 41 │     "use strict";
    ·     ─────────────
 42 │ }
    ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAssertion/importAssertion4.ts:1:36]
 1 │ import * as f from "./first" assert
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAssertion/importAssertion5.ts:1:38]
 1 │ import * as f from "./first" assert {
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes4.ts:1:34]
 1 │ import * as f from "./first" with
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes5.ts:1:36]
 1 │ import * as f from "./first" with {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes6.ts:1:51]
 1 │ import * as thing1 from "./mod.mjs" with { field: 0 };
   ·                                                   ─
 2 │ import * as thing2 from "./mod.mjs" with { field: `a` };
   ╰────

  × The keyword 'interface' is reserved
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface05.ts:3:5]
 2 │ 
 3 │ var interface: number;
   ·     ─────────────────
 4 │ 
   ╰────

  × The keyword 'interface' is reserved
    ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface05.ts:10:1]
  9 │ 
 10 │ interface   // This should be the identifier 'interface'
    · ─────────
 11 │ I           // This should be the identifier 'I'
    ╰────

  × TS(2499): An interface can only extend an identifier/qualified-name with optional type arguments.
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendingOptionalChain.ts:5:22]
 4 │ 
 5 │ interface C1 extends Foo?.Bar {}
   ·                      ────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfacesWithPredefinedTypesAsNames.ts:5:10]
 4 │ interface boolean { }
 5 │ interface void {}
   ·          ▲
 6 │ interface unknown {}
   ╰────
  help: Try insert a semicolon here

  × Expected `}` but found `EOF`
    ╭─[typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClass2.ts:15:6]
 14 │         };
 15 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/internalModules/exportDeclarations/NonInitializedExportInInternalModule.ts:2:8]
 1 │ module Inner {
 2 │     var;
   ·        ─
 3 │     let;
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:4:5]
 3 │ module Y {
 4 │     public class A { s: string }
   ·     ──────
 5 │ 
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:6:5]
 5 │ 
 6 │     public class BB<T> extends A {
   ·     ──────
 7 │         id: number;
   ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:12:5]
 11 │ module Y2 {
 12 │     public class AA<T> { s: T }
    ·     ──────
 13 │     public interface I { id: number }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:13:5]
 12 │     public class AA<T> { s: T }
 13 │     public interface I { id: number }
    ·     ──────
 14 │ 
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:15:5]
 14 │ 
 15 │     public class B extends AA<string> implements I { id: number }
    ·     ──────
 16 │ }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:19:5]
 18 │ module Y3 {
 19 │     public module Module {
    ·     ──────
 20 │         class A { s: string }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:19:5]
 18 │ module Y3 {
 19 │     public module Module {
    ·     ──────
 20 │         class A { s: string }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:25:5]
 24 │ module Y4 {
 25 │     public enum Color { Blue, Red }
    ·     ──────
 26 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:29:5]
 28 │ module YY {
 29 │     private class A { s: string }
    ·     ───────
 30 │ 
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:31:5]
 30 │ 
 31 │     private class BB<T> extends A {
    ·     ───────
 32 │         id: number;
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:37:5]
 36 │ module YY2 {
 37 │     private class AA<T> { s: T }
    ·     ───────
 38 │     private interface I { id: number }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:38:5]
 37 │     private class AA<T> { s: T }
 38 │     private interface I { id: number }
    ·     ───────
 39 │ 
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:40:5]
 39 │ 
 40 │     private class B extends AA<string> implements I { id: number }
    ·     ───────
 41 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:44:5]
 43 │ module YY3 {
 44 │     private module Module {
    ·     ───────
 45 │         class A { s: string }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:44:5]
 43 │ module YY3 {
 44 │     private module Module {
    ·     ───────
 45 │         class A { s: string }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:50:5]
 49 │ module YY4 {
 50 │     private enum Color { Blue, Red }
    ·     ───────
 51 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:55:5]
 54 │ module YYY {
 55 │     static class A { s: string }
    ·     ──────
 56 │ 
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:57:5]
 56 │ 
 57 │     static class BB<T> extends A {
    ·     ──────
 58 │         id: number;
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:63:5]
 62 │ module YYY2 {
 63 │     static class AA<T> { s: T }
    ·     ──────
 64 │     static interface I { id: number }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:64:5]
 63 │     static class AA<T> { s: T }
 64 │     static interface I { id: number }
    ·     ──────
 65 │ 
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:66:5]
 65 │ 
 66 │     static class B extends AA<string> implements I { id: number }
    ·     ──────
 67 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:70:5]
 69 │ module YYY3 {
 70 │     static module Module {
    ·     ──────
 71 │         class A { s: string }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:70:5]
 69 │ module YYY3 {
 70 │     static module Module {
    ·     ──────
 71 │         class A { s: string }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:76:5]
 75 │ module YYY4 {
 76 │     static enum Color { Blue, Red }
    ·     ──────
 77 │ }
    ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:4:5]
 3 │ module Y {
 4 │     public var x: number = 0;
   ·     ──────
 5 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:8:5]
 7 │ module Y2 {
 8 │     public function fn(x: string) { }
   ·     ──────
 9 │ }
   ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:12:5]
 11 │ module Y4 {
 12 │     static var x: number = 0;
    ·     ──────
 13 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:16:5]
 15 │ module YY {
 16 │     static function fn(x: string) { }
    ·     ──────
 17 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:20:5]
 19 │ module YY2 {
 20 │     private var x: number = 0;
    ·     ───────
 21 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:25:5]
 24 │ module YY3 {
 25 │     private function fn(x: string) { }
    ·     ───────
 26 │ }
    ╰────

  × Identifier `Point` has already been declared
   ╭─[typescript/tests/cases/conformance/internalModules/moduleDeclarations/invalidInstantiatedModule.ts:2:18]
 1 │ module M {
 2 │     export class Point { x: number; y: number }
   ·                  ──┬──
   ·                    ╰── `Point` has already been declared here
 3 │     export var Point = 1;  // Error
   ·                ──┬──
   ·                  ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag9.ts:9:1]
  8 │ // All of these should be Colors, but I only use some of them here.
  9 │ export const Palette = /** @satisfies {Record<string, Color>} */ ({
    · ──────
 10 │     white: { r: 255, g: 255, b: 255 },
    ╰────

  × Identifier `err` has already been declared
    ╭─[typescript/tests/cases/conformance/jsdoc/jsdocCatchClauseWithTypeAnnotation.ts:33:9]
 32 │     try { }
 33 │     catch (err) {
    ·            ─┬─
    ·             ╰── `err` has already been declared here
 34 │         /** @type {string} */
 35 │         let err;
    ·             ─┬─
    ·              ╰── It can not be redeclared here
 36 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/jsdocDisallowedInTypescript.ts:2:16]
 1 │ // grammar error from checker
 2 │ var ara: Array.<number> = [1,2,3];
   ·                ─
 3 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/jsdocParseErrorsInTypescript.ts:2:27]
 1 │ // parse error (blocks grammar errors from checker)
 2 │ function parse1(n: number=) { }
   ·                           ─
   ╰────

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/conformance/jsdoc/noAssertForUnparseableTypedefs.ts:2:1]
 1 │ /** @typedef {module:locale} hi */
 2 │ import { nope } from 'nope';
   · ──────
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/checkJsxNamespaceNamesQuestionableForms.tsx:12:5]
 11 │ <a:b></a:b>;
 12 │ <b:c.x></b:c.x>;
    ·     ─
 13 │ <this:b></this:b>;
    ╰────

  × Expected `}` but found `:`
   ╭─[typescript/tests/cases/conformance/jsx/jsxAndTypeAssertion.tsx:6:17]
 5 │ var x: any;
 6 │ x = <any> { test: <any></any> };
   ·                 ┬
   ·                 ╰── `}` expected
 7 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/jsxAttributeInitializer.ts:7:16]
 6 │     <div attr=<><div>foo</div></> />
 7 │     <div attr= />
   ·                ─
 8 │ </div>
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/jsxInvalidEsprimaTestSuite.tsx:3:2]
 2 │ 
 3 │ </>;
   ·  ─
   ╰────

  × TS(18007): JSX expressions may not use the comma operator
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingError1.tsx:11:30]
 10 │ const class2 = "bar";
 11 │ const elem = <div className={class1, class2}/>;
    ·                              ──────────────
    ╰────
  help: Did you mean to write an array?

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:8:7]
 7 │ 
 8 │ const X: any
   ·       ──────
 9 │ const a: any
   ╰────

  × Missing initializer in const declaration
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:9:7]
  8 │ const X: any
  9 │ const a: any
    ·       ──────
 10 │ 
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:11:7]
 10 │ 
 11 │ <X a={...a} />
    ·       ───
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/jsxUnclosedParserRecovery.ts:11:5]
 10 │ var donkey = <div>
 11 │     <
    ·     ─
 12 │ </div>;
    ╰────

  × Invalid characters after number
    ╭─[typescript/tests/cases/conformance/jsx/tsxAttributeInvalidNames.tsx:10:10]
  9 │ // Invalid names
 10 │ <test1 32data={32} />;
    ·          ────
 11 │ <test2 -data={32} />;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery1.tsx:4:20]
 3 │ function foo() {
 4 │     var x = <div>  { </div>
   ·                       ─
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery2.tsx:4:7]
 3 │ <div></div>
 4 │ <div></div>
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery3.tsx:4:7]
 3 │ <div></div>
 4 │ <div></div>
   ·       ─
   ╰────

  × Expected `>` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/jsx/tsxFragmentErrors.tsx:9:7]
  8 │ 
  9 │ <>hi</div> // Error
    ·       ─┬─
    ·        ╰── `>` expected
 10 │ 
    ╰────

  × Expected `,` but found `;`
    ╭─[typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponents1.tsx:41:16]
 40 │ let o = {
 41 │     prop1: true;
    ·                ┬
    ·                ╰── `,` expected
 42 │ }
    ╰────

  × Expected corresponding JSX closing tag for '\u0061'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:15:4]
 14 │ // tag name:
 15 │ ; <\u0061></a>
    ·    ──────   ─
 16 │ ; <\u0061-b></a-b>
    ╰────

  × Expected corresponding JSX closing tag for '\u0061-b'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:16:4]
 15 │ ; <\u0061></a>
 16 │ ; <\u0061-b></a-b>
    ·    ────────   ───
 17 │ ; <a-\u0063></a-c>
    ╰────

  × Expected corresponding JSX closing tag for 'a-'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:17:4]
 16 │ ; <\u0061-b></a-b>
 17 │ ; <a-\u0063></a-c>
    ·    ──         ───
 18 │ ; <Comp\u0061 x={12} />
    ╰────

  × Expected corresponding JSX closing tag for '\u{0061}'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:20:4]
 19 │ ; <x.\u0076ideo />
 20 │ ; <\u{0061}></a>
    ·    ────────   ─
 21 │ ; <\u{0061}-b></a-b>
    ╰────

  × Expected corresponding JSX closing tag for '\u{0061}-b'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:21:4]
 20 │ ; <\u{0061}></a>
 21 │ ; <\u{0061}-b></a-b>
    ·    ──────────   ───
 22 │ ; <a-\u{0063}></a-c>
    ╰────

  × Expected corresponding JSX closing tag for 'a-'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:22:4]
 21 │ ; <\u{0061}-b></a-b>
 22 │ ; <a-\u{0063}></a-c>
    ·    ──           ───
 23 │ ; <Comp\u{0061} x={12} />
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_noImplicitAny.ts:1:5]
 1 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_noImplicitAny_relativePath.ts:1:5]
 1 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_noImplicitAny_scoped.ts:1:5]
 1 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_withAugmentation.ts:3:5]
 2 │ 
 3 │ This file is not processed.
   ·     ▲
   ╰────
  help: Try insert a semicolon here

  × TS(1030): override' modifier already seen.
    ╭─[typescript/tests/cases/conformance/override/override5.ts:22:14]
 21 │ 
 22 │     override override oop: number;
    ·              ────────
 23 │ 
    ╰────
  help: Remove the duplicate modifier.

  × TS(1030): override' modifier already seen.
    ╭─[typescript/tests/cases/conformance/override/override7.ts:19:14]
 18 │ 
 19 │     override override oop: number;
    ·              ────────
 20 │ 
    ╰────
  help: Remove the duplicate modifier.

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.binaryNegative.ts:1:6]
 1 │ 0b00_
   ·      ▲
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.hexNegative.ts:1:6]
 1 │ 0x00_
   ·      ▲
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.octalNegative.ts:1:6]
 1 │ 0o00_
   ·      ▲
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.unicodeEscape.ts:1:2]
 1 │ "\u{10_ffff}"
   ·  ─────
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors10.ts:2:3]
 1 │ var v = {
 2 │   public get foo() { }
   ·   ──────
 3 │ };
   ╰────

  × A 'get' accessor must not have any formal parameters.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors7.ts:1:18]
 1 │ var v = { get foo(v: number) { } };
   ·                  ───────────
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors8.ts:1:18]
 1 │ var v = { set foo() { } }
   ·                  ──
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors9.ts:1:18]
 1 │ var v = { set foo(a, b) { } }
   ·                  ──────
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression1.ts:1:10]
 1 │ var v = (public x: string) => { };
   ·          ────────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression10.ts:1:19]
 1 │ a ? (b) : c => (d) : e => f // Not legal JS; "Unexpected token ':'" at last colon
   ·                   ▲
   ╰────
  help: Try insert a semicolon here

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression13.ts:1:17]
 1 │ a ? () => a() : (): any => null; // Not legal JS; "Unexpected token ')'" at last paren
   ·                 ──
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression14.ts:1:9]
 1 │ a() ? (b: number, c?: string): void => d() : e; // Not legal JS; "Unexpected token ':'" at first colon
   ·         ┬
   ·         ╰── `,` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression15.ts:1:33]
 1 │ false ? (param): string => param : null // Not legal JS; "Unexpected token ':'" at last colon
   ·                                 ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression16.ts:1:47]
 1 │ true ? false ? (param): string => param : null : null // Not legal JS; "Unexpected token ':'" at last colon
   ·                                               ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression17.ts:1:12]
 1 │ a ? b : (c) : d => e // Not legal JS; "Unexpected token ':'" at last colon
   ·            ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression2.ts:1:14]
 1 │ a = () => { } || a
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `||`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression3.ts:1:16]
 1 │ a = (() => { } || a)
   ·                ─┬
   ·                 ╰── `,` expected
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName6.ts:2:4]
 1 │ enum E {
 2 │   [e] = 1
   ·    ─
 3 │ }
   ╰────

  × Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration11.ts:2:14]
 1 │ class C {
 2 │   constructor<>() { }
   ·              ──
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration3.ts:2:9]
 1 │ class C {
 2 │   export constructor() { }
   ·         ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × TS(1030): public' modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration6.ts:2:10]
 1 │ class C {
 2 │   public public constructor() { }
   ·          ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Classes can't have a field named 'constructor'
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration8.ts:3:10]
 2 │   // Not a constructor
 3 │   public constructor;
   ·          ───────────
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum4.ts:2:9]
 1 │     export enum SignatureFlags {
 2 │         ,
   ·         ─
 3 │     }
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum5.ts:2:12]
 1 │ enum E2 { a, }
 2 │ enum E3 { a: 1, }
   ·            ┬
   ·            ╰── `,` expected
 3 │ enum E1 { a, b: 1, c, d: 2 = 3 }
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum7.ts:2:3]
 1 │ enum E {
 2 │   1, 2, 3
   ·   ─
 3 │ }
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum7.ts:2:6]
 1 │ enum E {
 2 │   1, 2, 3
   ·      ─
 3 │ }
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum7.ts:2:9]
 1 │ enum E {
 2 │   1, 2, 3
   ·         ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration4.ts:1:6]
 1 │ enum void {
   ·      ────
 2 │ }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic6.ts:3:14]
 2 │ {
 3 │ static public
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList1.ts:3:4]
 2 │    bar(
 3 │    return x;
   ·    ──────
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList2.ts:2:8]
 1 │ function foo() {
 2 │    bar(;
   ·        ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList3.ts:3:4]
 2 │    bar(a,
 3 │    return;
   ·    ──────
 4 │ }
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList4.ts:3:4]
 2 │    bar(a,b
 3 │    return;
   ·    ───┬──
   ·       ╰── `,` expected
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList6.ts:1:5]
 1 │ Foo(,
   ·     ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList7.ts:1:7]
 1 │ Foo(a,,
   ·       ─
   ╰────

  × Expected `,` but found `decimal`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression1.ts:2:1]
 1 │ var v = [1, 2, 3
 2 │ 4, 5, 6, 7];
   · ┬
   · ╰── `,` expected
   ╰────

  × Expected `,` but found `float`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression2.ts:3:2]
 2 │  
 3 │  .7042760848999023, 1.1955541372299194, 0.19600726664066315, -0.7120069861412048];
   ·  ────────┬────────
   ·          ╰── `,` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression3.ts:1:54]
 1 │ var texCoords = [2, 2, 0.5000001192092895, 0.8749999 ; 403953552, 0.5000001192092895, 0.8749999403953552];
   ·                                                      ┬
   ·                                                      ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/ArrowFunction1.ts:1:13]
 1 │ var v = (a: ) => {
   ·             ─
 2 │    
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/ArrowFunction3.ts:1:12]
 1 │ var v = (a): => {
   ·            ▲
 2 │    
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/parserX_ArrowFunction1.ts:1:13]
 1 │ var v = (a: ) => {
   ·             ─
 2 │    
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/parserX_ArrowFunction3.ts:1:12]
 1 │ var v = (a): => {
   ·            ▲
 2 │    
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block1.ts:3:5]
 2 │     1 + 
 3 │     return;
   ·     ──────
 4 │ }
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block2.ts:2:5]
 1 │ function f() {
 2 │     ¬
   ·     ─
 3 │     return;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block3.ts:4:12]
 3 │ 
 4 │     private b(): boolean {
   ·            ▲
 5 │     }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement1.ts:5:6]
 4 │ // this as a source unit element.
 5 │ class D {
   ·      ▲
 6 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement2.ts:4:7]
 3 │ 
 4 │   enum E {
   ·       ▲
 5 │   }
   ╰────
  help: Try insert a semicolon here

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement3.ts:2:4]
 1 │ module M {
 2 │    ¬
   ·    ─
 3 │    class C {
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Expressions/parserErrorRecovery_Expression1.ts:1:9]
 1 │ var v = ()({});
   ·         ──
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause1.ts:2:2]
 1 │ class C extends {
 2 │ }
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause2.ts:2:2]
 1 │ class C extends A, {
 2 │ }
   ╰────

  × Expected `{` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause3.ts:1:28]
 1 │ class C extends implements A {
   ·                            ┬
   ·                            ╰── `{` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause4.ts:1:30]
 1 │ class C extends A implements {
   ·                              ─
 2 │ }
   ╰────

  × Expected `{` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause5.ts:1:31]
 1 │ class C extends A, implements B, {
   ·                               ┬
   ·                               ╰── `{` expected
 2 │ }
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause6.ts:1:24]
 1 │ interface I extends { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement1.ts:4:3]
 3 │     if (
 4 │   }
   ·   ─
 5 │   f2() {
   ╰────

  × Expected `)` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement2.ts:4:3]
 3 │     if (a
 4 │   }
   ·   ┬
   ·   ╰── `)` expected
 5 │   f2() {
   ╰────

  × Expected `)` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement3.ts:4:3]
 3 │     if (a.b
 4 │   }
   ·   ┬
   ·   ╰── `)` expected
 5 │   f2() {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement4.ts:4:3]
 3 │     if (a.b)
 4 │   }
   ·   ─
 5 │   f2() {
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement5.ts:5:7]
 4 │   }
 5 │   f2() {
   ·       ▲
 6 │   }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement6.ts:5:9]
 4 │   }
 5 │   public f2() {
   ·         ▲
 6 │   }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IncompleteMemberVariables/parserErrorRecovery_IncompleteMemberVariable2.ts:12:21]
 11 │ 
 12 │         public con:C "hello";
    ·                     ▲
 13 │         // Constructor
    ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/LeftShifts/parserErrorRecovery_LeftShift1.ts:1:29]
 1 │ retValue = bfs.VARIABLES >> );
   ·                             ─
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement1.ts:1:1]
 1 │ return foo;
   · ──────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement1.ts:2:1]
 1 │ return foo;
 2 │ }
   · ─
 3 │ return bar;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement2.ts:7:1]
 6 │ 
 7 │ )
   · ─
 8 │ )
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral1.ts:1:16]
 1 │ var v = { a: 1 b: 2 }
   ·                ┬
   ·                ╰── `,` expected
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral2.ts:2:1]
 1 │ var v = { a
 2 │ return;
   · ───┬──
   ·    ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral3.ts:2:1]
 1 │ var v = { a: 
 2 │ return;
   · ──────
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral4.ts:2:1]
 1 │ var v = { a: 1
 2 │ return;
   · ───┬──
   ·    ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral5.ts:2:7]
 1 │ var v = { a: 1,
 2 │ return;
   ·       ─
   ╰────

  × Expected `,` but found `{`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList1.ts:1:14]
 1 │ function f(a {
   ·              ┬
   ·              ╰── `,` expected
 2 │ }
   ╰────

  × Expected `)` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList2.ts:2:2]
 1 │ function f(a, {
 2 │ }
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList4.ts:1:14]
 1 │ function f(a,¬) {
   ·              ─
 2 │ }
   ╰────

  × Expected `,` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList5.ts:1:11]
 1 │ (a:number => { }
   ·           ─┬
   ·            ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SourceUnits/parserErrorRecovery_SourceUnit1.ts:3:1]
 2 │ }
 3 │ }
   · ─
 4 │ class D {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SwitchStatements/parserErrorRecovery_SwitchStatement1.ts:4:5]
 3 │        1 + 
 4 │     case 2:
   ·     ────
 5 │        1 + 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SwitchStatements/parserErrorRecovery_SwitchStatement2.ts:5:1]
 4 │ 
 5 │ class D {
   · ─────
 6 │ }
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/TypeArgumentLists/TypeArgumentList1.ts:1:10]
 1 │ Foo<A,B,\ C>(4, 5, 6);
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/TypeArgumentLists/parserX_TypeArgumentList1.ts:1:10]
 1 │ Foo<A,B,\ C>(4, 5, 6);
   ·          ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/VariableLists/parserErrorRecovery_VariableList1.ts:2:1]
 1 │ var a,
 2 │ return;
   · ──────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/VariableLists/parserInvalidIdentifiersInVariableStatements1.ts:1:5]
 1 │ var export;
   ·     ──────
 2 │ var foo;
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEmptyParenthesizedExpression1.ts:2:4]
 1 │ function getObj() {
 2 │    ().toString();
   ·    ──
 3 │ }
   ╰────

  × Expected `(` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction1.ts:1:10]
 1 │ function =>
   ·          ─┬
   ·           ╰── `(` expected
   ╰────

  × Expected function name
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction2.ts:1:10]
 1 │ function (a => b;
   ·          ─
   ╰────
  help: Function name is required in function declaration or named export

  × Expected `,` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction2.ts:1:13]
 1 │ function (a => b;
   ·             ─┬
   ·              ╰── `,` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantAccessibilityModifierInModule1.ts:3:12]
 2 │     var x=10;  // variable local to this module body
 3 │     private y=x;  // property visible only in module
   ·            ▲
 4 │     export var z=y;  // property visible to any code
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantEqualsGreaterThanAfterFunction1.ts:1:13]
 1 │ function f() => 4;
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantEqualsGreaterThanAfterFunction2.ts:1:17]
 1 │ function f(p: A) => p;
   ·                 ▲
   ╰────
  help: Try insert a semicolon here

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantSemicolonInClass1.ts:15:17]
 14 │     }
 15 │     public set d() {
    ·                 ──
 16 │     }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserFuzz1.ts:1:8]
 1 │ cla <ss {
   ·        ▲
 2 │   _ static try
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserMissingLambdaOpenBrace1.ts:4:13]
 3 │         return fromDoWhile(test =>
 4 │             var index = 0;
   ·             ───
 5 │             return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserPublicBreak1.ts:1:7]
 1 │ public break;
   ·       ▲
   ╰────
  help: Try insert a semicolon here

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserStatementIsNotAMemberVariableDeclaration1.ts:1:1]
 1 │ return {
   · ──────
 2 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnfinishedTypeNameBeforeKeyword1.ts:2:7]
 1 │ var x: TypeModule1.
 2 │ module TypeModule2 {
   ·       ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected `>` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnterminatedGeneric1.ts:2:54]
 1 │  interface IQService {
 2 │         all(promises: IPromise < any > []): IPromise<
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnterminatedGeneric2.ts:2:33]
 1 │ declare module ng {
 2 │     interfaceICompiledExpression {
   ·                                 ▲
 3 │         (context: any, locals?: any): any;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment3.ts:1:9]
 1 │ export =
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment4.ts:1:10]
 1 │ export = ;
   ·          ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parseIncompleteBinaryExpression1.ts:1:9]
 1 │ var v = || b;
   ·         ──
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserAssignmentExpression1.ts:1:2]
 1 │ (foo()) = bar;
   ·  ─────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserMemberAccessAfterPostfixExpression1.ts:1:4]
 1 │ a--.toString()
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserPostfixPostfixExpression1.ts:1:4]
 1 │ a++ ++;
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserPostfixUnaryExpression1.ts:1:7]
 1 │ foo ++ ++;
   ·       ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserTypeAssertionInObjectCreationExpression1.ts:1:5]
 1 │ new <T>Foo()
   ·     ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression1.ts:1:3]
 1 │ ++this;
   ·   ────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression2.ts:1:3]
 1 │ ++function(e) { }
   ·   ───────────────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression3.ts:1:3]
 1 │ ++[0];
   ·   ───
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression4.ts:1:3]
 1 │ ++{};
   ·   ──
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression5.ts:1:4]
 1 │ ++ delete foo.bar
   ·    ──────────────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression7.ts:1:4]
 1 │ ++ new Foo();
   ·    ─────────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Fuzz/parser0_004152.ts:2:45]
 1 │ export class Game {
 2 │     private position = new DisplayPosition([), 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0], NoMove, 0);
   ·                                             ─
 3 │     private prevConfig: SeedCoords[][];
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity11.ts:1:1]
 1 │ 1 >>= 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity12.ts:1:6]
 1 │ 1 >> = 2;
   ·      ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity13.ts:1:9]
 1 │ 1 >>/**/= 2;
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity14.ts:2:1]
 1 │ 1 >>
 2 │ = 2;
   · ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity15.ts:1:1]
 1 │ 1 
   · ─
 2 │ // before
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity16.ts:1:1]
 1 │ 1 >>>= 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity17.ts:1:7]
 1 │ 1 >>> = 2;
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity18.ts:1:10]
 1 │ 1 >>>/**/= 2;
   ·          ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity19.ts:2:1]
 1 │ 1 >>>
 2 │ = 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity2.ts:1:5]
 1 │ 1 > > 2;
   ·     ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity20.ts:1:1]
 1 │ 1
   · ─
 2 │ // Before
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity3.ts:1:8]
 1 │ 1 >/**/> 2;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity4.ts:2:1]
 1 │ 1 >
 2 │ > 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity7.ts:1:6]
 1 │ 1 >> > 2;
   ·      ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity8.ts:1:9]
 1 │ 1 >>/**/> 2;
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity9.ts:2:1]
 1 │ 1 >>
 2 │ > 2;
   · ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration9.ts:2:10]
 1 │ class C {
 2 │    export [x: string]: string;
   ·          ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature1.ts:2:4]
 1 │ interface I {
 2 │   [...a]
   ·    ───
 3 │ }
   ╰────

  × Expected `]` but found `,`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature10.ts:2:6]
 1 │ interface I {
 2 │    [a, b]: number
   ·      ┬
   ·      ╰── `]` expected
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature11.ts:3:21]
 2 │         [p]; // Used to be indexer, now it is a computed property
 3 │         [p1: string];
   ·                     ─
 4 │         [p2: string, p3: number];
   ╰────

  × Expected `]` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature2.ts:2:11]
 1 │ interface I {
 2 │   [public a]
   ·           ┬
   ·           ╰── `]` expected
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature3.ts:2:6]
 1 │ interface I {
 2 │   [a?]
   ·      ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature6.ts:3:1]
 2 │   [a:boolean]
 3 │ }
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature7.ts:3:1]
 2 │   [a:string]
 3 │ }
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature8.ts:1:24]
 1 │ var foo: { [index: any]; }; // expect an error here
   ·                        ─
 2 │ var foo2: { [index: RegExp]; }; // expect an error here
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature9.ts:2:5]
 1 │ interface I {
 2 │    []: number
   ·     ─
 3 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration3.ts:1:1]
 1 │ public interface I {
   · ──────
 2 │ }
   ╰────

  × 'static' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration4.ts:1:1]
 1 │ static interface I {
   · ──────
 2 │ }
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration6.ts:1:8]
 1 │ export export interface I {
   ·        ──────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration10.ts:2:11]
 1 │ class C {
 2 │     export get Foo() { }
   ·           ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × A 'get' accessor must not have any formal parameters.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration12.ts:2:11]
 1 │ class C {
 2 │    get Foo(a: number) { }
   ·           ───────────
 3 │ }
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration13.ts:2:11]
 1 │ class C {
 2 │    set Foo() { }
   ·           ──
 3 │ }
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration14.ts:2:11]
 1 │ class C {
 2 │    set Foo(a: number, b: number) { }
   ·           ──────────────────────
 3 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration15.ts:2:12]
 1 │ class C {
 2 │    set Foo(public a: number) { }
   ·            ────────────────
 3 │ }
   ╰────

  × A 'set' accessor cannot have rest parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration18.ts:2:12]
 1 │ class C {
 2 │    set Foo(...a) { }
   ·            ────
 3 │ }
   ╰────

  × TS(1030): public' modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration7.ts:2:12]
 1 │ class C {
 2 │     public public get Foo() { }
   ·            ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): public' modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration1.ts:2:12]
 1 │ class C {
 2 │     public public Foo() { }
   ·            ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration4.ts:2:11]
 1 │ class C {
 2 │     export Foo() { }
   ·           ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Identifier `public` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:2:3]
 1 │ class C {
 2 │   public() {}
   ·   ───┬──
   ·      ╰── `public` has already been declared here
 3 │   static() {}
 4 │ 
 5 │   public public() {}
   ·          ───┬──
   ·             ╰── It can not be redeclared here
 6 │   public static() {}
   ╰────

  × Identifier `static` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:3:3]
 2 │   public() {}
 3 │   static() {}
   ·   ───┬──
   ·      ╰── `static` has already been declared here
 4 │ 
 5 │   public public() {}
 6 │   public static() {}
   ·          ───┬──
   ·             ╰── It can not be redeclared here
 7 │ 
   ╰────

  × Identifier `public` has already been declared
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:8:17]
  7 │ 
  8 │   public static public() {}
    ·                 ───┬──
    ·                    ╰── `public` has already been declared here
  9 │   public static static() {}
 10 │   
 11 │   static public() {}
    ·          ───┬──
    ·             ╰── It can not be redeclared here
 12 │   static static() {}
    ╰────

  × Identifier `static` has already been declared
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:9:17]
  8 │   public static public() {}
  9 │   public static static() {}
    ·                 ───┬──
    ·                    ╰── `static` has already been declared here
 10 │   
 11 │   static public() {}
 12 │   static static() {}
    ·          ───┬──
    ·             ╰── It can not be redeclared here
 13 │ }
    ╰────

  × TS(1030): public' modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration1.ts:2:10]
 1 │ class C {
 2 │   public public Foo;
   ·          ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration4.ts:2:9]
 1 │ class C {
 2 │   export Foo;
   ·         ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MissingTokens/parserMissingToken1.ts:1:5]
 1 │ a / finally
   ·     ───────
   ╰────

  × Unterminated regular expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MissingTokens/parserMissingToken2.ts:1:1]
 1 │ / b;
   · ────
   ╰────

  × Expected `(` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ObjectTypes/parserObjectType5.ts:3:7]
 2 │    A: B
 3 │    <T>;
   ·       ┬
   ·       ╰── `(` expected
 4 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ObjectTypes/parserObjectType6.ts:3:5]
 2 │    a: B
 3 │    [];
   ·     ─
 4 │ };
   ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList1.ts:2:6]
 1 │ class C {
 2 │    F(...A, B) { }
   ·      ────
 3 │ }
   ╰────

  × A rest parameter cannot have an initializer
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList10.ts:2:11]
 1 │ class C {
 2 │    foo(...bar = 0) { }
   ·           ───────
 3 │ }
   ╰────

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList11.ts:1:8]
 1 │ (...arg?) => 102;
   ·        ─
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList13.ts:2:10]
 1 │ interface I {
 2 │     new (public x);
   ·          ────────
 3 │ }
   ╰────

  × A required parameter cannot follow an optional parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList3.ts:2:9]
 1 │ class C {
 2 │   F(A?, B) { }
   ·         ─
 3 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList4.ts:1:12]
 1 │ function F(public A) {
   ·            ────────
 2 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList5.ts:1:16]
 1 │ function A(): (public B) => C {
   ·                ────────
 2 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList6.ts:2:19]
 1 │ class C {
 2 │   constructor(C: (public A) => any) {
   ·                   ────────
 3 │   }
   ╰────

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList9.ts:2:14]
 1 │ class C {
 2 │    foo(...bar?) { }
   ·              ─
 3 │ }
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected1.ts:1:1]
 1 │ protected class C {
   · ─────────
 2 │ }
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected2.ts:1:1]
 1 │ protected module M {
   · ─────────
 2 │ }
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected2.ts:1:1]
 1 │ protected module M {
   · ─────────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
      ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RealWorld/parserharness.ts:1430:16]
 1429 │         // Regex for parsing options in the format "@Alpha: Value of any sort"
 1430 │         private optionRegex = /^[\/]{2}\s*@(\w+):\s*(\S*)/gm;  // multiple matches on multiple lines
      ·                ▲
 1431 │ 
      ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509630.ts:3:1]
 2 │     public examples = [ // typing here
 3 │ }
   · ─
 4 │ class Any extends Type {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509667.ts:4:4]
 3 │       if (this.
 4 │    }
   ·    ─
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509668.ts:3:23]
 2 │   // Doesn't work, but should
 3 │   constructor (public ...args: string[]) { }
   ·                       ───
 4 │ }
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509669.ts:2:9]
 1 │ function foo():any {
 2 │  return ():void {};
   ·         ──
 3 │ }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512084.ts:1:12]
 1 │ class foo {
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512097.ts:1:14]
 1 │ var tt = { aa; }
   ·              ┬
   ·              ╰── `,` expected
 2 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512325.ts:1:21]
 1 │ var tt = (a, (b, c)) => a+b+c;
   ·                     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser519458.ts:1:21]
 1 │ import rect = module("rect"); var bar = new rect.Rect();
   ·                     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser521128.ts:1:14]
 1 │ module.module { }
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser553699.ts:3:21]
 2 │   constructor() { }
 3 │   public banana (x: public) { }
   ·                     ──────
 4 │ }
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser566700.ts:1:9]
 1 │ var v = ()({});
   ·         ──
   ╰────

  × Invalid regular expression: Unterminated capturing group
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser579071.ts:1:12]
 1 │ var x = /fo(o/;
   ·            ──
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser585151.ts:2:6]
 1 │ class Foo2 {
 2 │   var icecream = "chocolate";
   ·      ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser618973.ts:1:8]
 1 │ export export class Foo {
   ·        ──────
 2 │   public Bar() {
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser642331.ts:2:18]
 1 │ class test {
 2 │     constructor (static) { }
   ·                  ──────
 3 │ }
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser642331_1.ts:4:18]
 3 │ class test {
 4 │     constructor (static) { }
   ·                  ──────
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645086_1.ts:1:13]
 1 │ var v = /[]/]/
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645086_2.ts:1:14]
 1 │ var v = /[^]/]/
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected flag a in regular expression literal
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity3.ts:1:16]
 1 │ if (1) /regexp/a.foo();
   ·                ─
   ╰────

  × Unterminated regular expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity4.ts:1:5]
 1 │ foo(/notregexp);
   ·     ────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity7.ts:2:3]
 1 │ (a/8
 2 │  ){}
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens1.ts:1:2]
 1 │ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens10.ts:1:2]
 1 │ \
   ·  ─
 2 │ \
 3 │ /*existing trivia*/ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens10.ts:2:2]
 1 │ \
 2 │ \
   ·  ─
 3 │ /*existing trivia*/ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:4]
 1 │ ; \ \ \ 
   ·    ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:6]
 1 │ ; \ \ \ 
   ·      ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:8]
 1 │ ; \ \ \ 
   ·        ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:2]
 1 │ \ \ \
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:4]
 1 │ \ \ \
   ·    ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:6]
 1 │ \ \ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens13.ts:1:11]
 1 │ /regexp/ \ ;
   ·           ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens13.ts:1:9]
 1 │ /regexp/ \ ;
   ·         ▲
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens14.ts:1:2]
 1 │ \
   ·  ─
 2 │ /*existing trivia*/ 
 3 │ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens14.ts:3:2]
 2 │ /*existing trivia*/ 
 3 │ \
   ·  ─
 4 │ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens15.ts:2:2]
 1 │ /*existing trivia*/
 2 │ \
   ·  ─
 3 │ \
 4 │ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens15.ts:3:2]
 2 │ \
 3 │ \
   ·  ─
 4 │ ;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens16.ts:1:6]
 1 │ foo(): Bar { }
   ·      ▲
 2 │ function Foo      () ¬   { }
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens17.ts:1:9]
 1 │ foo(a, \
   ╰────

  × Expected `)` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens17.ts:1:9]
 1 │ foo(a, \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens18.ts:1:8]
 1 │ foo(a \
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens18.ts:1:7]
 1 │ foo(a \
   ·       ┬
   ·       ╰── `,` expected
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens19.ts:1:2]
 1 │ \ declare var v;
   ·  ─
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens19.ts:1:1]
 1 │ \ declare var v;
   · ─────────
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens2.ts:1:2]
 1 │ \\
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens20.ts:1:13]
 1 │ var v: X<T \
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens20.ts:1:12]
 1 │ var v: X<T \
   ·            ┬
   ·            ╰── `,` expected
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens3.ts:1:2]
 1 │ \ ; \
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens3.ts:1:6]
 1 │ \ ; \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens4.ts:1:2]
 1 │ \  /regexp/;
   ·  ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens4.ts:1:12]
 1 │ \  /regexp/;
   ·            ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens5.ts:1:2]
 1 │ \ /*foo*/ ;
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens6.ts:1:10]
 1 │ /*foo*/ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens7.ts:1:10]
 1 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens8.ts:2:10]
 1 │ ;
 2 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens9.ts:2:10]
 1 │ ; // existing trivia
 2 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakNotInIterationOrSwitchStatement1.ts:1:1]
 1 │ break;
   · ──────
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakNotInIterationOrSwitchStatement2.ts:3:5]
 2 │   function f() {
 3 │     break;
   ·     ──────
 4 │   }
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakTarget5.ts:5:13]
 4 │     while (true) {
 5 │       break target;
   ·             ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakTarget6.ts:2:9]
 1 │ while (true) {
 2 │   break target;
   ·         ──────
 3 │ }
   ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement1.ts:1:1]
 1 │ continue;
   · ─────────
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement2.ts:3:5]
 2 │   function f() {
 3 │     continue;
   ·     ─────────
 4 │   }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement3.ts:3:5]
 2 │   default:
 3 │     continue;
   ·     ─────────
 4 │ }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × A `continue` statement can only jump to a label of an enclosing `for`, `while` or `do while` statement.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── This is an non-iteration statement
 2 │   continue target;
   ·            ───┬──
   ·               ╰── for this label
   ╰────

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget5.ts:5:16]
 4 │     while (true) {
 5 │       continue target;
   ·                ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget6.ts:2:12]
 1 │ while (true) {
 2 │   continue target;
   ·            ──────
 3 │ }
   ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/LabeledStatements/parser_duplicateLabel1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ target:
   · ───┬──
   ·    ╰── It can not be redeclared here
 3 │ while (true) {
   ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/LabeledStatements/parser_duplicateLabel2.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ while (true) {
 3 │   target:
   ·   ───┬──
   ·      ╰── It can not be redeclared here
 4 │   while (true) {
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ReturnStatements/parserReturnStatement1.ts:1:1]
 1 │ return;
   · ──────
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ReturnStatements/parserReturnStatement2.ts:2:4]
 1 │ {
 2 │    return;
   ·    ──────
 3 │ }
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement2.ts:1:13]
 1 │ for (var of X) {
   ·             ┬
   ·             ╰── `;` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement21.ts:1:15]
 1 │ for (var of of) { }
   ·               ─
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement3.ts:1:6]
 1 │ for (var a, b of X) {
   ·      ────────
 2 │ }
   ╰────

  × for-of loop variable declaration may not have an initializer
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement4.ts:1:6]
 1 │ for (var a = 1 of X) {
   ·      ─────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 of X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement2.ts:1:10]
 1 │ for (var in X) {
   ·          ──
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement3.ts:1:6]
 1 │ for (var a, b in X) {
   ·      ────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 in X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" in X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement4.ts:1:6]
 1 │ for (a = 1 in b) {
   ·      ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement6.ts:1:6]
 1 │ for (foo() in b) {
   ·      ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement7.ts:1:6]
 1 │ for (new foo() in b) {
   ·      ─────────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement8.ts:1:6]
 1 │ for (this in b) {
   ·      ────
 2 │ }
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserReturnStatement1.d.ts:1:1]
 1 │ return;
   · ──────
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement2.ts:2:3]
 1 │ with (1)
 2 │   return;
   ·   ──────
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement2.ts:1:1]
 1 │ with (1)
   · ────
 2 │   return;
   ╰────

  × '0'-prefixed octal literals and octal escape sequences are deprecated
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/octalLiteralInStrictModeES3.ts:2:1]
 1 │ "use strict";
 2 │ 03;
   · ──
   ╰────
  help: for octal literals use the '0o' prefix instead

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode10.ts:2:12]
 1 │ "use strict";
 2 │ function f(eval) {
   ·            ────
 3 │ }
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode11.ts:2:20]
 1 │ "use strict";
 2 │ var v = function f(eval) {
   ·                    ────
 3 │ };
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode12.ts:2:19]
 1 │ "use strict";
 2 │ var v = { set foo(eval) { } }
   ·                   ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode13.ts:4:7]
 3 │ }
 4 │ catch(eval) {
   ·       ────
 5 │ }
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode14.ts:2:1]
 1 │ "use strict";
 2 │ with (a) {
   · ────
 3 │ }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode15.ts:2:8]
 1 │ "use strict";
 2 │ delete a;
   ·        ─
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode2.ts:5:1]
 4 │ foo1();
 5 │ static();
   · ──────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode3.ts:2:1]
 1 │ "use strict";
 2 │ eval = 1;
   · ────
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode4.ts:2:1]
 1 │ "use strict";
 2 │ arguments = 1;
   · ─────────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode5.ts:2:1]
 1 │ "use strict";
 2 │ eval += 1;
   · ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode6.ts:2:1]
 1 │ "use strict";
 2 │ eval++;
   · ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode7.ts:2:3]
 1 │ "use strict";
 2 │ ++eval;
   ·   ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode8.ts:2:10]
 1 │ "use strict";
 2 │ function eval() {
   ·          ────
 3 │ }
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode9.ts:2:18]
 1 │ "use strict";
 2 │ var v = function eval() {
   ·                  ────
 3 │ };
   ╰────

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression2.ts:3:5]
 2 │   M() {
 3 │     super<T>(0);
   ·     ─────
 4 │   }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression2.ts:3:5]
 2 │   M() {
 3 │     super<T>(0);
   ·     ───────────
 4 │   }
   ╰────

  × Expected `]` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/TupleTypes/TupleType4.ts:1:9]
 1 │ var v: [
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/TupleTypes/TupleType6.ts:1:16]
 1 │ var v: [number,,]
   ·                ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery3.ts:1:17]
 1 │ var v: typeof A.
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery4.ts:1:17]
 1 │ var v: typeof A.;
   ·                 ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration10.ts:1:7]
 1 │ var a,;
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration5.ts:1:7]
 1 │ var a,
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration6.ts:1:4]
 1 │ var
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration8.ts:1:5]
 1 │ var ;
   ·     ─
   ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parser10.1.1-8gs.ts:17:5]
 16 │ throw NotEarlyError;
 17 │ var public = 1;
    ·     ──────
    ╰────

  × Unterminated multiline comment
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserKeywordsAsIdentifierName2.ts:2:10]
 1 │ // 'public' should be marked unusable, should complain on trailing /*
 2 │ a.public /*
   ·          ──
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserNotRegex1.ts:3:5]
 2 │   {
 3 │     return true;
   ·     ──────
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral1.ts:1:9]
 1 │ new Foo[];
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral3.ts:1:9]
 1 │ new Foo[]();
   ·         ─
   ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource10.ts:127:43]
 126 │ 
 127 │     export var tokenTable = new TokenInfo[];
     ·                                           ─
 128 │     export var nodeTypeTable = new string[];
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource11.ts:193:41]
 192 │         public enclosingScope: SymbolScope = null;
 193 │         public members: AST[] = new AST[];
     ·                                         ─
 194 │ 
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource4.ts:195:38]
 194 │         public itemCount: number = 0;
 195 │         public table = new HashEntry[];
     ·                                      ─
 196 │ 
     ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource7.ts:16:46]
 15 │             if (baseTypeLinks == null) {
 16 │                 baseTypeLinks = new TypeLink[];
    ·                                              ─
 17 │             }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource9.ts:12:40]
 11 │             if (typeLinks) {
 12 │                 extendsList = new Type[];
    ·                                        ─
 13 │                 for (var i = 0, len = typeLinks.length; i < len; i++) {
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserS12.11_A3_T4.ts:16:9]
 15 │   switch(value) {
 16 │     case:
    ·         ─
 17 │       result += 2;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserS7.9_A5.7_T1.ts:16:1]
 15 │     x
 16 │ ╭─▶ ++
 17 │ │   ++
 18 │ ╰─▶ y
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parservoidInQualifiedName1.ts:1:13]
 1 │ var v : void.x;
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName1.ts:1:15]
 1 │ var v = { [e] };
   ·               ─
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName16.ts:2:4]
 1 │ enum E {
 2 │   [e] = 1
   ·    ─
 3 │ }
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName26.ts:3:6]
 2 │     // No ASI
 3 │     [e] = 0
   ·      ─
 4 │     [e2] = 1
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName27.ts:4:9]
 3 │     [e]: number = 0
 4 │     [e2]: number
   ·         ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName30.ts:3:6]
 2 │     // no ASI, comma expected
 3 │     [e] = id++
   ·      ─
 4 │     [e2] = 1
   ╰────

  × Expected `,` but found `[`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName30.ts:4:5]
 3 │     [e] = id++
 4 │     [e2] = 1
   ·     ┬
   ·     ╰── `,` expected
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName33.ts:4:11]
 3 │     [e] = 0
 4 │     [e2]() { }
   ·           ▲
 5 │ }
   ╰────
  help: Try insert a semicolon here

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName34.ts:3:6]
 2 │     // no ASI, comma expected
 3 │     [e] = id++,
   ·      ─
 4 │     [e2] = 1
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName34.ts:4:6]
 3 │     [e] = id++,
 4 │     [e2] = 1
   ·      ──
 5 │ }
   ╰────

  × Expected `]` but found `,`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName35.ts:2:7]
 1 │ var x = {
 2 │     [0, 1]: { }
   ·       ┬
   ·       ╰── `]` expected
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName36.ts:2:6]
 1 │ class C {
 2 │     [public ]: string;
   ·      ──────
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName38.ts:2:6]
 1 │ class C {
 2 │     [public]() { }
   ·      ──────
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName39.ts:3:6]
 2 │ class C {
 3 │     [public]() { }
   ·      ──────
 4 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName5.ts:1:11]
 1 │ var v = { public get [e]() { } };
   ·           ──────
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement2.ts:1:13]
 1 │ for (var of X) {
   ·             ┬
   ·             ╰── `;` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement21.ts:1:15]
 1 │ for (var of of) { }
   ·               ─
   ╰────

  × The left-hand side of a `for...of` statement may not be `async`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement22.ts:2:6]
 1 │ var async;
 2 │ for (async of [1, 2]) {}
   ·      ─────
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement3.ts:1:6]
 1 │ for (var a, b of X) {
   ·      ────────
 2 │ }
   ╰────

  × for-of loop variable declaration may not have an initializer
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement4.ts:1:6]
 1 │ for (var a = 1 of X) {
   ·      ─────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 of X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment1.ts:3:11]
 2 │ var name:any, id: any;
 3 │ foo({ name?, id? });
   ·           ┬
   ·           ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment2.ts:1:17]
 1 │ var v = { class };
   ·                 ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment3.ts:1:14]
 1 │ var v = { "" };
   ·              ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment4.ts:1:13]
 1 │ var v = { 0 };
   ·             ─
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment5.ts:2:18]
 1 │ var greet = "hello";
 2 │ var obj = { greet? }; 
   ·                  ┬
   ·                  ╰── `,` expected
   ╰────

  × Expected `]` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolIndexer5.ts:2:7]
 1 │ var x = {
 2 │     [s: symbol]: ""
   ·       ┬
   ·       ╰── `]` expected
 3 │ }
   ╰────

  × Constructor can't have get/set modifier
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInAccessor.ts:2:9]
 1 │ class C1 {
 2 │     get constructor() { return }
   ·         ───────────
 3 │     set constructor(value) {}
   ╰────

  × Constructor can't have get/set modifier
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInAccessor.ts:3:9]
 2 │     get constructor() { return }
 3 │     set constructor(value) {}
   ·         ───────────
 4 │ }
   ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInAccessor.ts:2:9]
 1 │ class C1 {
 2 │     get constructor() { return }
   ·         ─────┬─────
   ·              ╰── constructor has already been declared here
 3 │     set constructor(value) {}
   ·         ─────┬─────
   ·              ╰── it cannot be redeclared here
 4 │ }
   ╰────

  × Constructor can't be a generator
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInGenerator.ts:2:6]
 1 │ class C2 {
 2 │     *constructor() {}
   ·      ───────────
 3 │ }
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/exportDefaultInJsFile01.ts:1:1]
 1 │ export default "hello";
   · ──────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:6:11]
 5 │ async function f() {
 6 │     const await = 3
   ·           ─────
 7 │ }
   ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:9:11]
  8 │ function* g() {
  9 │     const yield = 4
    ·           ─────
 10 │ }
    ╰────

  × Classes can't have an element named '#constructor'
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:12:5]
 11 │ class C {
 12 │     #constructor = 5
    ·     ────────────
 13 │     deleted() {
    ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:1:1]
 1 │ export default 12
   · ──────
 2 │ export default 13
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:2:1]
 1 │ export default 12
 2 │ export default 13
   · ──────
 3 │ const await = 1
   ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:15:20]
 14 │         function container(f) {
 15 │             delete f
    ·                    ─
 16 │         }
    ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:18:16]
 17 │         var g = 6
 18 │         delete g
    ·                ─
 19 │         delete container
    ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:19:16]
 18 │         delete g
 19 │         delete container
    ·                ─────────
 20 │     }
    ╰────

  × Cannot assign to 'eval' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:22:15]
 21 │     evalArguments() {
 22 │         const eval = 7
    ·               ────
 23 │         const arguments = 8
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:23:15]
 22 │         const eval = 7
 23 │         const arguments = 8
    ·               ─────────
 24 │     }
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:27:9]
 26 │         const redundant = 0o10
 27 │         with (redundant) {
    ·         ────
 28 │             return toFixed()
    ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:34:19]
 33 │             label: var x = 1
 34 │             break label
    ·                   ─────
 35 │         }
    ╰────

  × Duplicated export 'default'
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:1:8]
 1 │ export default 12
   ·        ───┬───
   ·           ╰── Export has already been declared here
 2 │ export default 13
   ·        ───┬───
   ·           ╰── It cannot be redeclared here
 3 │ const await = 1
   ╰────

  × Expected `in` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/salsa/plainJSGrammarErrors.ts:4:5]
 3 │     q = #unbound
 4 │     m() {
   ·     ┬
   ·     ╰── `in` expected
 5 │         #p
   ╰────

  × Private field 'b' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/salsa/plainJSGrammarErrors4.ts:5:14]
 4 │         this.#a; // ok
 5 │         this.#b; // error
   ·              ──
 6 │     }
   ╰────

  × Identifier `orbitol` has already been declared
   ╭─[typescript/tests/cases/conformance/salsa/plainJSRedeclare.ts:1:7]
 1 │ const orbitol = 1
   ·       ───┬───
   ·          ╰── `orbitol` has already been declared here
 2 │ var orbitol = 1 + false
   ·     ───┬───
   ·        ╰── It can not be redeclared here
 3 │ orbitol.toExponential()
   ╰────

  × Identifier `orbitol` has already been declared
   ╭─[typescript/tests/cases/conformance/salsa/plainJSRedeclare2.ts:1:7]
 1 │ const orbitol = 1
   ·       ───┬───
   ·          ╰── `orbitol` has already been declared here
 2 │ var orbitol = 1 + false
   ·     ───┬───
   ·        ╰── It can not be redeclared here
 3 │ orbitol.toExponential()
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/salsa/plainJSReservedStrict.ts:2:7]
 1 │ "use strict"
 2 │ const eval = 1
   ·       ────
 3 │ const arguments = 2
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/salsa/plainJSReservedStrict.ts:3:7]
 2 │ const eval = 1
 3 │ const arguments = 2
   ·       ─────────
   ╰────

  × Cannot use import statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/propertyAssignmentOnUnresolvedImportedSymbol.ts:1:1]
 1 │ import x from 'arglebaz'
   · ──────
 2 │ {
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/propertyAssignmentUseParentType2.ts:2:1]
 1 │ /** @type {{ (): boolean; nuo: 789 }} */
 2 │ export const inlined = () => true
   · ──────
 3 │ inlined.nuo = 789
   ╰────

  × Cannot use export statement outside a module
   ╭─[typescript/tests/cases/conformance/salsa/propertyAssignmentUseParentType2.ts:6:1]
 5 │ /** @type {{ (): boolean; nuo: 789 }} */
 6 │ export const duplicated = () => true
   · ──────
 7 │ /** @type {789} */
   ╰────

  × Cannot use export statement outside a module
    ╭─[typescript/tests/cases/conformance/salsa/propertyAssignmentUseParentType2.ts:11:1]
 10 │ /** @type {{ (): boolean; nuo: 789 }} */
 11 │ export const conflictingDuplicated = () => true
    · ──────
 12 │ /** @type {1000} */
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral3.ts:1:3]
 1 │ 01.0
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral4.ts:1:3]
 1 │ 1e
   ╰────

  × Invalid Number invalid float
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral4.ts:1:1]
 1 │ 1e
   · ──
   ╰────

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral6.ts:1:4]
 1 │ 1e+
   ╰────

  × Invalid Number invalid float
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral6.ts:1:1]
 1 │ 1e+
   · ───
   ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scanner10.1.1-8gs.ts:17:5]
 16 │ throw NotEarlyError;
 17 │ var public = 1;
    ·     ──────
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral3.ts:1:3]
 1 │ 01.0
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral4.ts:1:3]
 1 │ 1e
   ╰────

  × Invalid Number invalid float
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral4.ts:1:1]
 1 │ 1e
   · ──
   ╰────

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral6.ts:1:4]
 1 │ 1e+
   ╰────

  × Invalid Number invalid float
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral6.ts:1:1]
 1 │ 1e+
   · ───
   ╰────

  × Unterminated multiline comment
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.4_A2_T2.ts:12:1]
 11 │ 
 12 │ /*CHECK#1/
    · ───────────
    ╰────

  × Invalid Character `
  │ `
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.8.3_A6.1_T1.ts:13:3]
 12 │ //CHECK#1
 13 │ 0x
    ·   ▲
    ╰────

  × Invalid escape sequence
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.8.4_A7.1_T4.ts:13:2]
 12 │ //CHECK#
 13 │ "\u000G"
    ·  ─────
    ╰────

  × Unterminated string
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerStringLiterals.ts:10:1]
  9 │ "
 10 │ "Should error because of newline.
    · ──────────────────────────────────
 11 │ "Should error because of end of file.
    ╰────

  × Invalid Character ` `
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnexpectedNullCharacter1.ts:1:4]
 1 │ foo + bar;
   ·    ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnexpectedNullCharacter1.ts:1:4]
 1 │ foo + bar;
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword1.ts:1:1]
 1 │ \u0076ar x = "hello";
   · ────────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:1:5]
 1 │ var \u0061wait = 12; // ok
   ·     ──────────
 2 │ async function main() {
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:3:5]
 2 │ async function main() {
 3 │     \u0061wait 12; // not ok
   ·     ──────────
 4 │ }
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:8:5]
 7 │ function *gen() {
 8 │     \u0079ield 12; //not ok
   ·     ──────────
 9 │ }
   ╰────

  × Keywords cannot contain escape characters
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:13:1]
 12 │ 
 13 │ typ\u0065 notok = 0; // not ok
    · ─────────
 14 │ 
    ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:1:5]
 1 │ var \u0061wait = 12; // ok
   ·     ──────────
 2 │ async function main() {
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:6:5]
 5 │ 
 6 │ var \u0079ield = 12; // ok
   ·     ──────────
 7 │ function *gen() {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.11.ts:1:8]
 1 │ export await using x = null;
   ·        ─────
 2 │ declare await using y: null;
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.4.ts:2:5]
 1 │ {
 2 │     await using [a] = null;
   ·     ───────────────
 3 │ }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.5.ts:3:17]
 2 │     await using a = null,
 3 │                 [b] = null,
   ·                 ───
 4 │                 c = null;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.6.ts:2:16]
 1 │ {
 2 │     await using {a} = null;
   ·                ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.7.ts:3:17]
 2 │     await using a = null,
 3 │                 {b} = null,
   ·                 ───
 4 │                 c = null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.8.ts:2:17]
 1 │ {
 2 │     await using a;
   ·                 ─
 3 │ }
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.3.ts:5:27]
 4 │ 
 5 │ for await (await using of x);
   ·                           ┬
   ·                           ╰── `;` expected
 6 │ 
   ╰────

  × The left-hand side of a for...in statement cannot be an await using declaration.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForIn.ts:2:10]
 1 │ async function main() {
 2 │     for (await using x in {}) {
   ·          ─────────────
 3 │     }
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.3.ts:2:22]
 1 │ async function main() {
 2 │     for (await using {} of []) {
   ·                      ──
 3 │     }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.3.ts:2:22]
 1 │ async function main() {
 2 │     for (await using {} of []) {
   ·                      ──
 3 │     }
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.5.ts:5:21]
 4 │ 
 5 │ for (await using of x);
   ·                     ┬
   ·                     ╰── `;` expected
 6 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.13.ts:1:8]
 1 │ export using x = null;
   ·        ─────
 2 │ declare using y: null;
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.5.ts:3:11]
 2 │     using a = null,
 3 │           [b] = null,
   ·           ───
 4 │           c = null;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.6.ts:2:10]
 1 │ {
 2 │     using {a} = null;
   ·          ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.7.ts:3:11]
 2 │     using a = null,
 3 │           {b} = null,
   ·           ───
 4 │           c = null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.8.ts:2:11]
 1 │ {
 2 │     using a;
   ·           ─
 3 │ }
   ╰────

  × The left-hand side of a for...in statement cannot be an using declaration.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForIn.ts:1:6]
 1 │ for (using x in {}) {
   ·      ───────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForOf.2.ts:1:19]
 1 │ for (using of of []) {
   ·                   ─
 2 │ }
   ╰────

  × Expected `;` but found `{`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForOf.3.ts:1:12]
 1 │ for (using {} of []) {
   ·            ┬
   ·            ╰── `;` expected
 2 │ }
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:8:10]
 7 │ ONE:
 8 │ do break TWO; while (true)
   ·          ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:27:11]
 26 │ do {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:37:11]
 36 │ do {
 37 │     break NINE;
    ·           ────
 38 │ }while (true)
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:8:15]
 7 │ ONE:
 8 │ for(;;) break TWO;
   ·               ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:27:11]
 26 │ for(;;) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:36:11]
 35 │ for(;;) {
 36 │     break NINE;
    ·           ────
 37 │ }
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:8:25]
 7 │ ONE:
 8 │ for (var x in {}) break TWO;
   ·                         ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:27:11]
 26 │ for (var x in {}) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:37:11]
 36 │ for (var x in {}) {
 37 │     break NINE;
    ·           ────
 38 │ }
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:8:20]
 7 │ ONE:
 8 │ while (true) break TWO;
   ·                    ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:27:11]
 26 │ while (true) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:37:11]
 36 │ while (true) {
 37 │     break NINE;
    ·           ────
 38 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:8:13]
 7 │ ONE:
 8 │ do continue TWO; while (true)
   ·             ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:27:14]
 26 │ do {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:37:14]
 36 │ do {
 37 │     continue NINE;
    ·              ────
 38 │ }while (true)
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:8:18]
 7 │ ONE:
 8 │ for(;;) continue TWO;
   ·                  ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:27:14]
 26 │ for(;;) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:36:14]
 35 │ for(;;) {
 36 │     continue NINE;
    ·              ────
 37 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:8:28]
 7 │ ONE:
 8 │ for (var x in {}) continue TWO;
   ·                            ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:27:14]
 26 │ for (var x in {}) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:37:14]
 36 │ for (var x in {}) {
 37 │     continue NINE;
    ·              ────
 38 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidSwitchContinueStatement.ts:5:9]
 4 │     case 5:
 5 │         continue;
   ·         ─────────
 6 │ }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:8:23]
 7 │ ONE:
 8 │ while (true) continue TWO;
   ·                       ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:27:14]
 26 │ while (true) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:37:14]
 36 │ while (true) {
 37 │     continue NINE;
    ·              ────
 38 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of12.ts:1:6]
 1 │ for ([""] of [[""]]) { }
   ·      ────
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of20.ts:4:15]
 3 │     for (let v of [v]) {
 4 │         const v;
   ·               ─
 5 │     }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash1.ts:3:11]
 2 │   var v0 = x;
 3 │   foo: var;
   ·           ─
 4 │   (function() { return x + v0});
   ╰────

  × Expected `,` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash3.ts:15:12]
 14 │         [
 15 │           `font-size: var(--button-size-${fontType}-fontSize)`,
    ·            ──┬─
    ·              ╰── `,` expected
 16 │           `height: var(--button-size-${fontType}-height)`,
    ╰────

  × Expected `,` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash4.ts:13:12]
 12 │         [
 13 │           `font-size: var(--button-size-${fontType}-fontSize)`,
    ·            ──┬─
    ·              ╰── `,` expected
 14 │           `height: var foo`,
    ╰────

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:2:8]
 1 │ label: function fn() { }
 2 │ label: function* gen() { }
   ·        ───────────────
 3 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:3:8]
 2 │ label: function* gen() { }
 3 │ label: async function gen1() { }
   ·        ─────────────────────
 4 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:6:8]
 5 │ label: interface I {}
 6 │ label: class C { }
   ·        ────────
 7 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:8:11]
 7 │ label: var a = 1;
 8 │ label: let b = 1;
   ·           ▲
 9 │ label: const c = 1;
   ╰────
  help: Try insert a semicolon here

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:2:8]
 1 │ label: function fn() { }
 2 │ label: function* gen() { }
   ·        ───────────────
 3 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:3:8]
 2 │ label: function* gen() { }
 3 │ label: async function gen1() { }
   ·        ─────────────────────
 4 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:6:8]
 5 │ label: interface I {}
 6 │ label: class C { }
   ·        ────────
 7 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:8:11]
 7 │ label: var a = 1;
 8 │ label: let b = 1;
   ·           ▲
 9 │ label: const c = 1;
   ╰────
  help: Try insert a semicolon here

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:3:8]
 2 │ label: function fn() { }
 3 │ label: function* gen() { }
   ·        ───────────────
 4 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:4:8]
 3 │ label: function* gen() { }
 4 │ label: async function gen1() { }
   ·        ─────────────────────
 5 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:7:8]
 6 │ label: interface I {}
 7 │ label: class C { }
   ·        ────────
 8 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:9:11]
  8 │ label: var a = 1;
  9 │ label: let b = 1;
    ·           ▲
 10 │ label: const c = 1;
    ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/throwStatements/invalidThrowStatement.ts:1:6]
 1 │ throw; 
   ·      ─
 2 │ 
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/statements/tryStatements/catchClauseWithTypeAnnotation.ts:29:20]
 28 │     // minor bug: shows that the `catch` argument is skipped when checking scope
 29 │     try { } catch (x) { let x: string; }
    ·                    ┬        ────┬────
    ·                    │            ╰── It can not be redeclared here
    ·                    ╰── `x` has already been declared here
 30 │     try { } catch (x) { var x: string; }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/tryStatements/invalidTryStatements.ts:2:5]
 1 │ function fn() {
 2 │     catch(x) { } // error missing try
   ·     ─────
 3 │ 
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/statements/withStatements/withStatements.ts:2:1]
 1 │ var x = 12;
 2 │ with (x) {
   · ────
 3 │     name = 'twelve'
   ╰────

  × Expected `from` but found `<`
   ╭─[typescript/tests/cases/conformance/types/import/importWithTypeArguments.ts:1:7]
 1 │ import<T>
   ·       ┬
   ·       ╰── `from` expected
 2 │ const a = import<string, number>
   ╰────

  × Identifier `T` has already been declared
    ╭─[typescript/tests/cases/conformance/types/localTypes/localTypes4.ts:18:16]
 17 │     // Type parameters and top-level local types are in same declaration space
 18 │     function f<T>() {
    ·                ┬
    ·                ╰── `T` has already been declared here
 19 │         interface T { }
    ·                   ┬
    ·                   ╰── It can not be redeclared here
 20 │         return undefined;
    ╰────

  × Expected `}` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/types/mapped/mappedTypeProperties.ts:9:5]
  8 │     [placeType in PlaceType]: void;
  9 │     model: 'hour' | 'day'
    ·     ──┬──
    ·       ╰── `}` expected
 10 │ }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:19:5]
 18 │ class C {
 19 │     foo: string;
    ·     ─┬─
    ·      ╰── `foo` has already been declared here
 20 │     foo: string;
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 21 │ 
    ╰────

  × Identifier `bar` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:22:5]
 21 │ 
 22 │     bar(x) { }
    ·     ─┬─
    ·      ╰── `bar` has already been declared here
 23 │     bar(x) { }
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 24 │ 
    ╰────

  × Identifier `baz` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:25:5]
 24 │ 
 25 │     baz = () => { }
    ·     ─┬─
    ·      ╰── `baz` has already been declared here
 26 │     baz = () => { }
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 27 │ }
    ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:5:5]
 4 │ class C {
 5 │     1;
   ·     ┬
   ·     ╰── `1` has already been declared here
 6 │     1.0;
   ·     ─┬─
   ·      ╰── It can not be redeclared here
 7 │     1.;
   ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:6:5]
 5 │     1;
 6 │     1.0;
   ·     ─┬─
   ·      ╰── `1` has already been declared here
 7 │     1.;
   ·     ─┬
   ·      ╰── It can not be redeclared here
 8 │     1.00;
   ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:7:5]
 6 │     1.0;
 7 │     1.;
   ·     ─┬
   ·      ╰── `1` has already been declared here
 8 │     1.00;
   ·     ──┬─
   ·       ╰── It can not be redeclared here
 9 │ }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:3:14]
 2 │ 
 3 │ function foo(public x, private y) { }
   ·              ────────
 4 │ var f = function foo(public x, private y) { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:3:24]
 2 │ 
 3 │ function foo(public x, private y) { }
   ·                        ─────────
 4 │ var f = function foo(public x, private y) { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:4:22]
 3 │ function foo(public x, private y) { }
 4 │ var f = function foo(public x, private y) { }
   ·                      ────────
 5 │ var f2 = function (public x, private y) { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:4:32]
 3 │ function foo(public x, private y) { }
 4 │ var f = function foo(public x, private y) { }
   ·                                ─────────
 5 │ var f2 = function (public x, private y) { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:5:20]
 4 │ var f = function foo(public x, private y) { }
 5 │ var f2 = function (public x, private y) { }
   ·                    ────────
 6 │ var f3 = (x, private y) => { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:5:30]
 4 │ var f = function foo(public x, private y) { }
 5 │ var f2 = function (public x, private y) { }
   ·                              ─────────
 6 │ var f3 = (x, private y) => { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:6:14]
 5 │ var f2 = function (public x, private y) { }
 6 │ var f3 = (x, private y) => { }
   ·              ─────────
 7 │ var f4 = <T>(public x: T, y: T) => { }
   ╰────

  × A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:7:14]
 6 │ var f3 = (x, private y) => { }
 7 │ var f4 = <T>(public x: T, y: T) => { }
   ·              ───────────
 8 │ 
   ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:9:15]
  8 │ 
  9 │ function foo2(private x: string, public y: number) { }
    ·               ─────────────────
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:9:34]
  8 │ 
  9 │ function foo2(private x: string, public y: number) { }
    ·                                  ────────────────
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:10:23]
  9 │ function foo2(private x: string, public y: number) { }
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ·                       ─────────────────
 11 │ var f6 = function (private x: string, public y: number) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:10:42]
  9 │ function foo2(private x: string, public y: number) { }
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ·                                          ────────────────
 11 │ var f6 = function (private x: string, public y: number) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:11:20]
 10 │ var f5 = function foo(private x: string, public y: number) { }
 11 │ var f6 = function (private x: string, public y: number) { }
    ·                    ─────────────────
 12 │ var f7 = (private x: string, public y: number) => { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:11:39]
 10 │ var f5 = function foo(private x: string, public y: number) { }
 11 │ var f6 = function (private x: string, public y: number) { }
    ·                                       ────────────────
 12 │ var f7 = (private x: string, public y: number) => { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:12:11]
 11 │ var f6 = function (private x: string, public y: number) { }
 12 │ var f7 = (private x: string, public y: number) => { }
    ·           ─────────────────
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:12:30]
 11 │ var f6 = function (private x: string, public y: number) { }
 12 │ var f7 = (private x: string, public y: number) => { }
    ·                              ────────────────
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:13:14]
 12 │ var f7 = (private x: string, public y: number) => { }
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ·              ────────────
 14 │ 
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:13:28]
 12 │ var f7 = (private x: string, public y: number) => { }
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ·                            ───────────
 14 │ 
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:16:9]
 15 │ class C {
 16 │     foo(public x, private y) { }
    ·         ────────
 17 │     foo2(public x: number, private y: string) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:16:19]
 15 │ class C {
 16 │     foo(public x, private y) { }
    ·                   ─────────
 17 │     foo2(public x: number, private y: string) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:17:10]
 16 │     foo(public x, private y) { }
 17 │     foo2(public x: number, private y: string) { }
    ·          ────────────────
 18 │     foo3<T>(public x: T, private y: T) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:17:28]
 16 │     foo(public x, private y) { }
 17 │     foo2(public x: number, private y: string) { }
    ·                            ─────────────────
 18 │     foo3<T>(public x: T, private y: T) { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:18:13]
 17 │     foo2(public x: number, private y: string) { }
 18 │     foo3<T>(public x: T, private y: T) { }
    ·             ───────────
 19 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:18:26]
 17 │     foo2(public x: number, private y: string) { }
 18 │     foo3<T>(public x: T, private y: T) { }
    ·                          ────────────
 19 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:22:6]
 21 │ interface I {
 22 │     (private x, public y);
    ·      ─────────
 23 │     (private x: string, public y: number);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:22:17]
 21 │ interface I {
 22 │     (private x, public y);
    ·                 ────────
 23 │     (private x: string, public y: number);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:23:6]
 22 │     (private x, public y);
 23 │     (private x: string, public y: number);
    ·      ─────────────────
 24 │     foo(private x, public y);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:23:25]
 22 │     (private x, public y);
 23 │     (private x: string, public y: number);
    ·                         ────────────────
 24 │     foo(private x, public y);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:24:9]
 23 │     (private x: string, public y: number);
 24 │     foo(private x, public y);
    ·         ─────────
 25 │     foo(public x: number, y: string);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:24:20]
 23 │     (private x: string, public y: number);
 24 │     foo(private x, public y);
    ·                    ────────
 25 │     foo(public x: number, y: string);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:25:9]
 24 │     foo(private x, public y);
 25 │     foo(public x: number, y: string);
    ·         ────────────────
 26 │     foo3<T>(x: T, private y: T);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:26:19]
 25 │     foo(public x: number, y: string);
 26 │     foo3<T>(x: T, private y: T);
    ·                   ────────────
 27 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:30:9]
 29 │ var a: {
 30 │     foo(public x, private y);
    ·         ────────
 31 │     foo2(private x: number, public y: string);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:30:19]
 29 │ var a: {
 30 │     foo(public x, private y);
    ·                   ─────────
 31 │     foo2(private x: number, public y: string);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:31:10]
 30 │     foo(public x, private y);
 31 │     foo2(private x: number, public y: string);
    ·          ─────────────────
 32 │ };
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:31:29]
 30 │     foo(public x, private y);
 31 │     foo2(private x: number, public y: string);
    ·                             ────────────────
 32 │ };
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:35:9]
 34 │ var b = {
 35 │     foo(public x, y) { },
    ·         ────────
 36 │     a: function foo(x: number, private y: string) { },
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:36:32]
 35 │     foo(public x, y) { },
 36 │     a: function foo(x: number, private y: string) { },
    ·                                ─────────────────
 37 │     b: <T>(public x: T, private y: T) => { }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:37:12]
 36 │     a: function foo(x: number, private y: string) { },
 37 │     b: <T>(public x: T, private y: T) => { }
    ·            ───────────
 38 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:37:25]
 36 │     a: function foo(x: number, private y: string) { },
 37 │     b: <T>(public x: T, private y: T) => { }
    ·                         ────────────
 38 │ }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:6:11]
 5 │ var f2 = function (x, x) { }
 6 │ var f3 = (x, x) => { }
   ·           ┬  ┬
   ·           │  ╰── It can not be redeclared here
   ·           ╰── `x` has already been declared here
 7 │ var f4 = <T>(x: T, x: T) => { }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:7:14]
 6 │ var f3 = (x, x) => { }
 7 │ var f4 = <T>(x: T, x: T) => { }
   ·              ──┬─  ──┬─
   ·                │     ╰── It can not be redeclared here
   ·                ╰── `x` has already been declared here
 8 │ 
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:12:11]
 11 │ var f6 = function (x: string, x: number) { }
 12 │ var f7 = (x: string, x: number) => { }
    ·           ────┬────  ────┬────
    ·               │          ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 13 │ var f8 = <T>(x: T, y: T) => { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:16:9]
 15 │ class C {
 16 │     foo(x, x) { }
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 17 │     foo2(x: number, x: string) { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:17:10]
 16 │     foo(x, x) { }
 17 │     foo2(x: number, x: string) { }
    ·          ────┬────  ────┬────
    ·              │          ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 18 │     foo3<T>(x: T, x: T) { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:18:13]
 17 │     foo2(x: number, x: string) { }
 18 │     foo3<T>(x: T, x: T) { }
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 19 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:22:6]
 21 │ interface I {
 22 │     (x, x);
    ·      ┬  ┬
    ·      │  ╰── It can not be redeclared here
    ·      ╰── `x` has already been declared here
 23 │     (x: string, x: number);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:23:6]
 22 │     (x, x);
 23 │     (x: string, x: number);
    ·      ────┬────  ────┬────
    ·          │          ╰── It can not be redeclared here
    ·          ╰── `x` has already been declared here
 24 │     foo(x, x);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:24:9]
 23 │     (x: string, x: number);
 24 │     foo(x, x);
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 25 │     foo(x: number, x: string);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:25:9]
 24 │     foo(x, x);
 25 │     foo(x: number, x: string);
    ·         ────┬────  ────┬────
    ·             │          ╰── It can not be redeclared here
    ·             ╰── `x` has already been declared here
 26 │     foo3<T>(x: T, x: T);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:26:13]
 25 │     foo(x: number, x: string);
 26 │     foo3<T>(x: T, x: T);
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 27 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:30:9]
 29 │ var a: {
 30 │     foo(x, x);
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 31 │     foo2(x: number, x: string);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:31:10]
 30 │     foo(x, x);
 31 │     foo2(x: number, x: string);
    ·          ────┬────  ────┬────
    ·              │          ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 32 │ };
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:37:12]
 36 │     a: function foo(x: number, x: string) { },
 37 │     b: <T>(x: T, x: T) => { }
    ·            ──┬─  ──┬─
    ·              │     ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 38 │ }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithParameterInitializers2.ts:20:15]
 19 │ var b = {
 20 │     foo(x = 1), // error
    ·               ▲
 21 │     foo(x = 1) { }, // error
    ╰────
  help: Try insert a semicolon here

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:16:10]
 15 │ interface I {
 16 │     new (public x);
    ·          ────────
 17 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:20:10]
 19 │ interface I2 {
 20 │     new (private x);
    ·          ─────────
 21 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:24:10]
 23 │ var a: {
 24 │     new (public x);
    ·          ────────
 25 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:28:10]
 27 │ var b: {
 28 │     new (private x);
    ·          ─────────
 29 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:19:10]
 18 │ interface I {
 19 │     new (public x);
    ·          ────────
 20 │     new (public x);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:20:10]
 19 │     new (public x);
 20 │     new (public x);
    ·          ────────
 21 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:24:10]
 23 │ interface I2 {
 24 │     new (private x);
    ·          ─────────
 25 │     new (private x);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:25:10]
 24 │     new (private x);
 25 │     new (private x);
    ·          ─────────
 26 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:29:10]
 28 │ var a: {
 29 │     new (public x);
    ·          ────────
 30 │     new (public y);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:30:10]
 29 │     new (public x);
 30 │     new (public y);
    ·          ────────
 31 │ }
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:34:10]
 33 │ var b: {
 34 │     new (private x);
    ·          ─────────
 35 │     new (private y);
    ╰────

  × A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:35:10]
 34 │     new (private x);
 35 │     new (private y);
    ·          ─────────
 36 │ }
    ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:5:11]
 4 │ var f = function foo(...x) { }
 5 │ var f2 = (...x, ...y) => { }
   ·           ────
 6 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:5:11]
 4 │ var f = function foo(...x) { }
 5 │ var f2 = (...x, ...y) => { }
   ·           ────
 6 │ 
   ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:13:9]
 12 │     (...x);
 13 │     foo(...x, ...y);
    ·         ────
 14 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:13:9]
 12 │     (...x);
 13 │     foo(...x, ...y);
    ·         ────
 14 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:23:21]
 22 │     foo(...x) { },
 23 │     a: function foo(...x, ...y) { },
    ·                     ────
 24 │     b: (...x) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:23:21]
 22 │     foo(...x) { },
 23 │     a: function foo(...x, ...y) { },
    ·                     ────
 24 │     b: (...x) => { }
    ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:5:11]
 4 │ var f = function foo(...x: number) { }
 5 │ var f2 = (...x: Date, ...y: boolean) => { }
   ·           ──────────
 6 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:5:11]
 4 │ var f = function foo(...x: number) { }
 5 │ var f2 = (...x: Date, ...y: boolean) => { }
   ·           ──────────
 6 │ 
   ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:13:9]
 12 │     (...x: string);
 13 │     foo(...x: number, ...y: number);
    ·         ────────────
 14 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:13:9]
 12 │     (...x: string);
 13 │     foo(...x: number, ...y: number);
    ·         ────────────
 14 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:23:21]
 22 │     foo(...x: string) { },
 23 │     a: function foo(...x: number, ...y: Date) { },
    ·                     ────────────
 24 │     b: (...x: string) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:23:21]
 22 │     foo(...x: string) { },
 23 │     a: function foo(...x: number, ...y: Date) { },
    ·                     ────────────
 24 │     b: (...x: string) => { }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:9:11]
  8 │ var f = function foo(...x: MyThing) { }
  9 │ var f2 = (...x: MyThing, ...y: MyThing) => { }
    ·           ─────────────
 10 │ 
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:9:11]
  8 │ var f = function foo(...x: MyThing) { }
  9 │ var f2 = (...x: MyThing, ...y: MyThing) => { }
    ·           ─────────────
 10 │ 
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:17:9]
 16 │     (...x: MyThing);
 17 │     foo(...x: MyThing, ...y: MyThing);
    ·         ─────────────
 18 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:17:9]
 16 │     (...x: MyThing);
 17 │     foo(...x: MyThing, ...y: MyThing);
    ·         ─────────────
 18 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:27:21]
 26 │     foo(...x: MyThing) { },
 27 │     a: function foo(...x: MyThing, ...y: MyThing) { },
    ·                     ─────────────
 28 │     b: (...x: MyThing) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:27:21]
 26 │     foo(...x: MyThing) { },
 27 │     a: function foo(...x: MyThing, ...y: MyThing) { },
    ·                     ─────────────
 28 │     b: (...x: MyThing) => { }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:36:11]
 35 │ var f3 = function foo(...x: MyThing2<string>) { }
 36 │ var f4 = (...x: MyThing2<string>, ...y: MyThing2<string>) => { }
    ·           ──────────────────────
 37 │ 
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:36:11]
 35 │ var f3 = function foo(...x: MyThing2<string>) { }
 36 │ var f4 = (...x: MyThing2<string>, ...y: MyThing2<string>) => { }
    ·           ──────────────────────
 37 │ 
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:44:9]
 43 │     (...x: MyThing2<string>);
 44 │     foo(...x: MyThing2<string>, ...y: MyThing2<string>);
    ·         ──────────────────────
 45 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:44:9]
 43 │     (...x: MyThing2<string>);
 44 │     foo(...x: MyThing2<string>, ...y: MyThing2<string>);
    ·         ──────────────────────
 45 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:54:21]
 53 │     foo(...x: MyThing2<string>) { },
 54 │     a: function foo(...x: MyThing2<string>, ...y: MyThing2<string>) { },
    ·                     ──────────────────────
 55 │     b: (...x: MyThing2<string>) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:54:21]
 53 │     foo(...x: MyThing2<string>) { },
 54 │     a: function foo(...x: MyThing2<string>, ...y: MyThing2<string>) { },
    ·                     ──────────────────────
 55 │     b: (...x: MyThing2<string>) => { }
    ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:5:11]
 4 │ var f = function foo(...x: number[]) { }
 5 │ var f2 = (...x: number[], ...y: number[]) => { }
   ·           ──────────────
 6 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:5:11]
 4 │ var f = function foo(...x: number[]) { }
 5 │ var f2 = (...x: number[], ...y: number[]) => { }
   ·           ──────────────
 6 │ 
   ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:13:9]
 12 │     (...x: number[]);
 13 │     foo(...x: number[], ...y: number[]);
    ·         ──────────────
 14 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:13:9]
 12 │     (...x: number[]);
 13 │     foo(...x: number[], ...y: number[]);
    ·         ──────────────
 14 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:23:21]
 22 │     foo(...x: number[]) { },
 23 │     a: function foo(...x: number[], ...y: number[]) { },
    ·                     ──────────────
 24 │     b: (...x: number[]) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:23:21]
 22 │     foo(...x: number[]) { },
 23 │     a: function foo(...x: number[], ...y: number[]) { },
    ·                     ──────────────
 24 │     b: (...x: number[]) => { }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:32:11]
 31 │ var f3 = function foo(...x: Array<string>) { }
 32 │ var f4 = (...x: Array<string>, ...y: Array<string>) => { }
    ·           ───────────────────
 33 │ 
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:32:11]
 31 │ var f3 = function foo(...x: Array<string>) { }
 32 │ var f4 = (...x: Array<string>, ...y: Array<string>) => { }
    ·           ───────────────────
 33 │ 
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:40:9]
 39 │     (...x: Array<string>);
 40 │     foo(...x: Array<string>, ...y: Array<string>);
    ·         ───────────────────
 41 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:40:9]
 39 │     (...x: Array<string>);
 40 │     foo(...x: Array<string>, ...y: Array<string>);
    ·         ───────────────────
 41 │ }
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:50:21]
 49 │     foo(...x: Array<string>) { },
 50 │     a: function foo(...x: Array<string>, ...y: Array<string>) { },
    ·                     ───────────────────
 51 │     b: (...x: Array<string>) => { }
    ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:50:21]
 49 │     foo(...x: Array<string>) { },
 50 │     a: function foo(...x: Array<string>, ...y: Array<string>) { },
    ·                     ───────────────────
 51 │     b: (...x: Array<string>) => { }
    ╰────

  × Expected `,` but found `?`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/objectTypesWithOptionalProperties.ts:24:6]
 23 │ var b = {
 24 │     x?: 1 // error
    ·      ┬
    ·      ╰── `,` expected
 25 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/objectTypesWithOptionalProperties2.ts:4:8]
 3 │ var a: {
 4 │     x()?: number; // error
   ·        ─
 5 │ }
   ╰────

  × Expected `,` but found `decimal`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/numericNamedPropertyDuplicates.ts:20:5]
 19 │     2: 1
 20 │     2: 1
    ·     ┬
    ·     ╰── `,` expected
 21 │ }
    ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/numericStringNamedPropertyEquivalence.ts:4:5]
 3 │ class C {
 4 │     "1": number;
   ·     ─┬─
   ·      ╰── `1` has already been declared here
 5 │     "1.0": number; // not a duplicate
 6 │     1.0: number;
   ·     ─┬─
   ·      ╰── It can not be redeclared here
 7 │ }
   ╰────

  × Expected `,` but found `string`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/stringNamedPropertyDuplicates.ts:20:5]
 19 │     "a b": 1
 20 │     "a b": 1
    ·     ──┬──
    ·       ╰── `,` expected
 21 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/objectRestNegative.ts:2:7]
 1 │ let o = { a: 1, b: 'no' };
 2 │ var { ...mustBeLast, a } = o;
   ·       ─────────────
 3 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
    ╭─[typescript/tests/cases/conformance/types/rest/objectRestNegative.ts:9:28]
  8 │ 
  9 │ function stillMustBeLast({ ...mustBeLast, a }: { a: number, b: string }): void {
    ·                            ─────────────
 10 │ }
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/types/rest/objectRestNegative.ts:17:9]
 16 │ let rest: { b: string }
 17 │ ({a, ...rest.b + rest.b} = o);
    ·         ───────────────
    ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/objectRestPropertyMustBeLast.ts:1:6]
 1 │ var {...a, x } = { x: 1 };    // Error, rest must be last property
   ·      ────
 2 │ ({...a, x } = { x: 1 });      // Error, rest must be last property
   ╰────

  × Spread must be last element
   ╭─[typescript/tests/cases/conformance/types/rest/objectRestPropertyMustBeLast.ts:2:3]
 1 │ var {...a, x } = { x: 1 };    // Error, rest must be last property
 2 │ ({...a, x } = { x: 1 });      // Error, rest must be last property
   ·   ────
 3 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/restElementMustBeLast.ts:1:6]
 1 │ var [...a, x] = [1, 2, 3];  // Error, rest must be last element
   ·      ────
 2 │ [...a, x] = [1, 2, 3];      // Error, rest must be last element
   ╰────

  × Spread must be last element
   ╭─[typescript/tests/cases/conformance/types/rest/restElementMustBeLast.ts:2:2]
 1 │ var [...a, x] = [1, 2, 3];  // Error, rest must be last element
 2 │ [...a, x] = [1, 2, 3];      // Error, rest must be last element
   ·  ────
   ╰────

  × Expected `{` but found `void`
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName2.ts:3:7]
 2 │ 
 3 │ class void {} // parse error unlike the others
   ·       ──┬─
   ·         ╰── `{` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/invalidTypeOfTarget.ts:1:16]
 1 │ var x1: typeof {};
   ·                ─
 2 │ var x2: typeof (): void;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/spread/objectSpreadNegativeParse.ts:1:18]
 1 │ let o7 = { ...o? };
   ·                  ─
 2 │ let o8 = { ...*o };
   ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:158:17]
 157 │ class ThisConstructor {
 158 │     constructor(this: ThisConstructor, private n: number) {
     ·                 ─────────────────────
 159 │     }
     ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:162:9]
 161 │ interface ThisConstructorInterface {
 162 │     new(this: ThisConstructor, n: number);
     ·         ─────────────────────
 163 │ }
     ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:164:31]
 163 │ }
 164 │ var thisConstructorType: new (this: number) => number;
     ·                               ────────────
 165 │ function notFirst(a: number, this: C): number { return this.n; }
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:165:30]
 164 │ var thisConstructorType: new (this: number) => number;
 165 │ function notFirst(a: number, this: C): number { return this.n; }
     ·                              ────
 166 │ 
     ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/types/typeAliases/reservedNamesInAliases.ts:6:5]
 5 │ type string = I;
 6 │ type void = I;
   ·     ▲
 7 │ type object = I;
   ╰────
  help: Try insert a semicolon here

  × Identifier `A` has already been declared
   ╭─[typescript/tests/cases/conformance/types/typeAliases/typeAliasesDoNotMerge.ts:1:13]
 1 │ export type A = {}
   ·             ┬
   ·             ╰── `A` has already been declared here
 2 │ type A = {}
   ·      ┬
   ·      ╰── It can not be redeclared here
   ╰────

  × Identifier `T2` has already been declared
    ╭─[typescript/tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts:10:6]
  9 │ // An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
 10 │ type T2 = { x: string }
    ·      ─┬
    ·       ╰── `T2` has already been declared here
 11 │ type T2 = { y: number }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 12 │ 
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressionErrors.ts:18:29]
 17 │ 
 18 │ const a8 = f<number><number>;  // Relational operator error
    ·                             ─
 19 │ const a9 = (f<number>)<number>;  // Error, no applicable signatures
    ╰────

  × TS(1273): 'public' modifier cannot be used on a type parameter.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:95:10]
 94 │ 
 95 │ type T20<public T> = T;  // Error
    ·          ──────
 96 │ type T21<in out in T> = T;  // Error
    ╰────

  × TS(1030): in' modifier already seen.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:96:17]
 95 │ type T20<public T> = T;  // Error
 96 │ type T21<in out in T> = T;  // Error
    ·                 ──
 97 │ type T22<in out out T> = T;  // Error
    ╰────
  help: Remove the duplicate modifier.

  × TS(1030): out' modifier already seen.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:97:17]
 96 │ type T21<in out in T> = T;  // Error
 97 │ type T22<in out out T> = T;  // Error
    ·                 ───
 98 │ type T23<out in T> = T;  // Error
    ╰────
  help: Remove the duplicate modifier.

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotationsWithCircularlyReferencesError.ts:1:12]
 1 │ type T1<in in> = T1 // Error: circularly references 
   ·            ──
 2 │ type T2<out out> = T2 // Error: circularly references 
   ╰────
