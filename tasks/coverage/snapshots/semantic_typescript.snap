commit: 261630d6

semantic_typescript Summary:
AST Parsed     : 6559/6559 (100.00%)
Positive Passed: 2842/6559 (43.33%)
semantic Error: tasks/coverage/typescript/tests/cases/compiler/2dArrays.ts
Symbol reference IDs mismatch for "Cell":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Ship":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_Watch.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "formatHost", "os", "process", "reportDiagnostic", "reportWatchStatusChanged", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["formatHost", "reportDiagnostic", "reportWatchStatusChanged", "ts", "watchMain"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(28), ReferenceId(30), ReferenceId(33), ReferenceId(36), ReferenceId(38)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(27), ReferenceId(31), ReferenceId(35)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "ReadonlyArray", "require"]
rebuilt        : ["Error", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_WatchWithDefaults.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["ts", "watchMain"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "require"]
rebuilt        : ["Error", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["ts", "watchMain"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(32)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(30)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_compile.ts
Bindings mismatch:
after transform: ScopeId(0): ["compile", "console", "os", "process", "ts"]
rebuilt        : ScopeId(0): ["compile", "ts"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(8), ReferenceId(27), ReferenceId(28)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(8), ReferenceId(27), ReferenceId(28)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "process", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_jsdoc.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getAllTags", "getAnnotations", "getReturnTypeFromJSDoc", "getSomeOtherTags", "parseCommentsIntoDefinition", "parseSpecificTags", "ts"]
rebuilt        : ScopeId(0): ["getAllTags", "getAnnotations", "getReturnTypeFromJSDoc", "getSomeOtherTags", "parseCommentsIntoDefinition", "parseSpecificTags", "ts"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9), ScopeId(14), ScopeId(20), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(13), ScopeId(19), ScopeId(22), ScopeId(23)]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(19), ReferenceId(21), ReferenceId(25), ReferenceId(33), ReferenceId(45), ReferenceId(47), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(69), ReferenceId(73), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(79), ReferenceId(80), ReferenceId(82), ReferenceId(85), ReferenceId(88), ReferenceId(90), ReferenceId(96)]
rebuilt        : SymbolId(0): [ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(44), ReferenceId(47), ReferenceId(53), ReferenceId(54), ReferenceId(56), ReferenceId(60), ReferenceId(62), ReferenceId(65), ReferenceId(68), ReferenceId(71), ReferenceId(73), ReferenceId(79)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_linter.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "delint", "fileNames", "process", "readFileSync", "ts"]
rebuilt        : ScopeId(0): ["delint", "fileNames", "ts"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(14), ReferenceId(15), ReferenceId(18), ReferenceId(23), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(32), ReferenceId(34), ReferenceId(37), ReferenceId(40), ReferenceId(50), ReferenceId(54)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(14), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(32), ReferenceId(44), ReferenceId(48)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "readFileSync":
after transform: SymbolId(2) "readFileSync"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console", "process", "readFileSync"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_parseConfig.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "createProgram", "os", "printError", "process", "ts"]
rebuilt        : ScopeId(0): ["createProgram", "printError", "ts"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(13), ReferenceId(21)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require", "undefined"]
rebuilt        : ["console", "process", "require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_transform.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "result", "source", "ts"]
rebuilt        : ScopeId(0): ["result", "source", "ts"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSON"]
rebuilt        : ["JSON", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/APISample_watcher.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "currentDirectoryFiles", "fs", "path", "process", "ts", "watch"]
rebuilt        : ScopeId(0): ["currentDirectoryFiles", "ts", "watch"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(29)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(23)]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(7), ReferenceId(16), ReferenceId(21), ReferenceId(27), ReferenceId(29), ReferenceId(60), ReferenceId(79)]
rebuilt        : SymbolId(0): [ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(55), ReferenceId(74)]
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Date", "undefined"]
rebuilt        : ["console", "fs", "process", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/DeclarationErrorsNoEmitOnError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/abstractInterfaceIdentifierName.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/abstractPropertyBasics.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/acceptableAlias1.ts
Bindings mismatch:
after transform: ScopeId(1): ["N", "X", "_M"]
rebuilt        : ScopeId(1): ["X", "_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/accessorsEmit.ts
Symbol reference IDs mismatch for "Result":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/accessors_spec_section-4.5_inference.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/addMoreCallSignaturesToBaseSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/addMoreCallSignaturesToBaseSignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasInaccessibleModule.ts
Bindings mismatch:
after transform: ScopeId(1): ["N", "X", "_M"]
rebuilt        : ScopeId(1): ["X", "_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasInaccessibleModule2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "N":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(1): Span { start: 22, end: 23 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasOfGenericFunctionWithRestBehavedSameAsUnaliased.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInAccessorsOfClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInArray.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "moduleA":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInFunctionExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInGenericFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInIndexerOfClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "moduleA":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInObjectLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "moduleA":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInTypeArgumentOfExtendsClause.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/aliasUsageInVarAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/allowJsCrossMonorepoPackage.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImportsCanPaintCrossModuleDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientClassDeclarationWithExtends.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol flags mismatch for "D":
after transform: SymbolId(3): SymbolFlags(Class | ValueModule | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable | Class)
Symbol span mismatch for "D":
after transform: SymbolId(3): Span { start: 97, end: 98 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "D":
after transform: SymbolId(3): [Span { start: 97, end: 98 }, Span { start: 124, end: 125 }]
rebuilt        : SymbolId(4): [Span { start: 0, end: 0 }, Span { start: 124, end: 125 }]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientClassMergesOverloadsWithInterface.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["C"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Interface | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 14, end: 15 }, Span { start: 71, end: 72 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientClassOverloadForFunction.ts
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | Function | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class | Function)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientConstLiterals.ts
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E", "non identifier"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer1.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer2.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer3.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer4.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer5.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer6.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleReopen.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithInternalImportDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithoutInternalImportDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientFundule.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientModuleExports.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Foo2", "c", "c2"]
rebuilt        : ScopeId(0): ["c", "c2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo2":
after transform: SymbolId(5) "Foo2"
rebuilt        : <None>
Reference symbol mismatch for "Foo2":
after transform: SymbolId(5) "Foo2"
rebuilt        : <None>
Reference symbol mismatch for "Foo2":
after transform: SymbolId(5) "Foo2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo", "Foo2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientModuleWithClassDeclarationWithExtends.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientModuleWithTemplateLiterals.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientModules.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambientNameRestrictions.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambiguousCallsWhereReturnTypesAgree.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ambiguousOverloadResolution.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(9), SymbolId(10)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : SymbolId(4) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/amdDeclarationEmitNoExtraDeclare.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/amdModuleConstEnumUsage.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "CharCode"]
rebuilt        : ScopeId(1): ["CharCode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "CharCode":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/anonClassDeclarationEmitIsAnon.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/anonterface.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/anyAndUnknownHaveFalsyComponents.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "foo1", "foo2", "isTreeHeader1", "isTreeHeader2", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["_objectSpread", "foo1", "foo2", "y1", "y2"]
Reference symbol mismatch for "x1":
after transform: SymbolId(0) "x1"
rebuilt        : <None>
Reference symbol mismatch for "isTreeHeader1":
after transform: SymbolId(2) "isTreeHeader1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(4) "x2"
rebuilt        : <None>
Reference symbol mismatch for "isTreeHeader1":
after transform: SymbolId(2) "isTreeHeader1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["isTreeHeader1", "require", "x1", "x2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/anyIsAssignableToObject.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/anyIsAssignableToVoid.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/argumentsAsPropertyName.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(0) "use"
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest6.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Test":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayAugment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayBestCommonTypes.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(8): [ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(17)]
Symbol flags mismatch for "EmptyTypes":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "EmptyTypes":
after transform: SymbolId(0): Span { start: 7, end: 17 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "base":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(23)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(18)]
Symbol flags mismatch for "NonEmptyTypes":
after transform: SymbolId(28): SymbolFlags(ValueModule)
rebuilt        : SymbolId(23): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NonEmptyTypes":
after transform: SymbolId(28): Span { start: 2225, end: 2238 }
rebuilt        : SymbolId(23): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "base":
after transform: SymbolId(30): [ReferenceId(39), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(51), ReferenceId(52), ReferenceId(54), ReferenceId(60)]
rebuilt        : SymbolId(25): [ReferenceId(38), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(57)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayBufferIsViewNarrowsType.ts
Unresolved references mismatch:
after transform: ["ArrayBuffer", "ArrayBufferView", "Object"]
rebuilt        : ["ArrayBuffer"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayConcat3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayDestructuringInSwitch1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayFind.ts
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayFlatMap.ts
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayFromAsync.ts
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayLiteralContextualType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayToLocaleStringES2015.ts
Unresolved references mismatch:
after transform: ["Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "ReadonlyArray", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(15), ReferenceId(16), ReferenceId(26)]
rebuilt        : [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayToLocaleStringES2020.ts
Unresolved references mismatch:
after transform: ["BigInt", "BigInt64Array", "BigUint64Array", "Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "ReadonlyArray", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["BigInt", "BigInt64Array", "BigUint64Array", "Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(15), ReferenceId(16), ReferenceId(24)]
rebuilt        : [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayTypeInSignatureOfInterfaceAndClass.ts
Bindings mismatch:
after transform: ScopeId(0): ["Data", "WinJS"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrayconcat.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionInExpressionStatement2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionParsingDoesNotConfuseParenthesizedObjectForArrowHead.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "test", "value"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "value":
after transform: SymbolId(0) "value"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "value"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionParsingGenericInObject.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionWithObjectLiteralBody5.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/arrowFunctionWithObjectLiteralBody6.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asiAmbientFunctionDeclaration.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assertionFunctionWildcardImport1.ts
Bindings mismatch:
after transform: ScopeId(0): ["assert"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assertionFunctionWildcardImport2.ts
Unresolved references mismatch:
after transform: ["Error", "NonNullable", "undefined"]
rebuilt        : ["Error", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assertionFunctionsCanNarrowByDiscriminant.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "assertEqual":
after transform: SymbolId(3) "assertEqual"
rebuilt        : SymbolId(0) "assertEqual"
Reference symbol mismatch for "assertEqual":
after transform: SymbolId(3) "assertEqual"
rebuilt        : SymbolId(0) "assertEqual"
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assign1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignToObjectTypeWithPrototypeProperty.ts
Symbol reference IDs mismatch for "XEvent":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignToPrototype1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatForEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["One", "TokenType", "Two"]
rebuilt        : ScopeId(1): ["TokenType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TokenType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TokenType":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatOnNew.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability10.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability36.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability6.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability7.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability8.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability9.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentNonObjectTypeConstraints.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(8): [ReferenceId(5), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(17)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(9): [ReferenceId(6), ReferenceId(9), ReferenceId(14)]
rebuilt        : SymbolId(7): [ReferenceId(19)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/assignmentToConditionalBrandedStringTemplateOrMapping.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Uppercase"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncAwaitWithCapturedBlockScopeVar.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionContextuallyTypedReturns.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(9), SymbolId(15), SymbolId(19), SymbolId(25)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(7), SymbolId(13), SymbolId(21), SymbolId(29)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(18), ScopeId(22)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(1) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(1) "f"
Reference symbol mismatch for "g":
after transform: SymbolId(4) "g"
rebuilt        : SymbolId(7) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(4) "g"
rebuilt        : SymbolId(7) "g"
Reference symbol mismatch for "h":
after transform: SymbolId(9) "h"
rebuilt        : SymbolId(13) "h"
Reference symbol mismatch for "h":
after transform: SymbolId(9) "h"
rebuilt        : SymbolId(13) "h"
Unresolved references mismatch:
after transform: ["Promise", "PromiseLike", "arguments", "require"]
rebuilt        : ["Promise", "arguments", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(3), ReferenceId(6), ReferenceId(10), ReferenceId(13), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(25)]
rebuilt        : [ReferenceId(3), ReferenceId(7), ReferenceId(12), ReferenceId(16), ReferenceId(21), ReferenceId(25)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionReturnType.2.ts
Unresolved references mismatch:
after transform: ["Promise", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(3), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(40), ScopeId(41), ScopeId(43), ScopeId(44), ScopeId(46), ScopeId(47), ScopeId(49), ScopeId(50)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(21), ReferenceId(23), ReferenceId(26), ReferenceId(28), ReferenceId(33), ReferenceId(38), ReferenceId(40), ReferenceId(44), ReferenceId(46), ReferenceId(51), ReferenceId(56), ReferenceId(58), ReferenceId(62), ReferenceId(64), ReferenceId(71), ReferenceId(80), ReferenceId(83), ReferenceId(90), ReferenceId(93)]
rebuilt        : [ReferenceId(24), ReferenceId(32), ReferenceId(47), ReferenceId(55), ReferenceId(70), ReferenceId(78), ReferenceId(93), ReferenceId(101), ReferenceId(117), ReferenceId(126)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncFunctionsAndStrictNullChecks.ts
Bindings mismatch:
after transform: ScopeId(0): ["Windows", "_asyncToGenerator", "_sample", "_sample2", "resolve1", "resolve2", "sample", "sample2"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_sample", "_sample2", "resolve1", "resolve2", "sample", "sample2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Reference symbol mismatch for "resolve1":
after transform: SymbolId(12) "resolve1"
rebuilt        : SymbolId(6) "resolve1"
Reference symbol mismatch for "resolve2":
after transform: SymbolId(15) "resolve2"
rebuilt        : SymbolId(8) "resolve2"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/asyncYieldStarContextualType.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncGeneratorDelegate", "_asyncIterator", "_awaitAsyncGenerator", "_f", "_wrapAsyncGenerator", "authorPromise", "f", "g", "mapper"]
rebuilt        : ScopeId(0): ["_asyncGeneratorDelegate", "_asyncIterator", "_awaitAsyncGenerator", "_f", "_wrapAsyncGenerator", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "authorPromise":
after transform: SymbolId(6) "authorPromise"
rebuilt        : <None>
Reference symbol mismatch for "mapper":
after transform: SymbolId(7) "mapper"
rebuilt        : <None>
Reference symbol mismatch for "authorPromise":
after transform: SymbolId(6) "authorPromise"
rebuilt        : <None>
Reference symbol mismatch for "mapper":
after transform: SymbolId(7) "mapper"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(9) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(9) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Promise", "Symbol", "arguments", "require"]
rebuilt        : ["arguments", "authorPromise", "g", "mapper", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentArray.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals3_1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals4_1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals5.ts
Unresolved references mismatch:
after transform: ["Error", "Function", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals6.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals6_1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypeBracketNamedPropertyAccess.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesClass3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesExternalModule1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "c5":
after transform: SymbolId(1): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "c5":
after transform: SymbolId(1): [Span { start: 24, end: 26 }, Span { start: 55, end: 57 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesModules3b.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/augmentedTypesModules4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/autonumberingInEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["Foo", "a"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["Foo", "b"]
rebuilt        : ScopeId(2): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 5, end: 8 }, Span { start: 29, end: 32 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/avoidCycleWithVoidExpressionReturnedFromArrow.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/avoidNarrowingUsingConstVariableFromBindingElementWithLiteralInitializer.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo", "test"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/awaitUnionPromise.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "AsyncEnumeratorDone":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/awaitedTypeCrash.ts
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/awaitedTypeJQuery.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Awaited", "Element", "Error", "PromiseLike"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/badInferenceLowerPriorityThanGoodInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(4): []
Reference symbol mismatch for "canYouInferThis":
after transform: SymbolId(2) "canYouInferThis"
rebuilt        : SymbolId(0) "canYouInferThis"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/badThisBinding.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(2) "bar"
rebuilt        : SymbolId(2) "bar"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/bangInModuleName.ts
Bindings mismatch:
after transform: ScopeId(0): ["http"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/baseIndexSignatureResolution.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/baseTypeAfterDerivedType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/baseTypeOrderChecking.ts
Symbol reference IDs mismatch for "Class2":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Class4":
after transform: SymbolId(5): [ReferenceId(0)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/baseTypeWrappingInstantiationChain.ts
Symbol reference IDs mismatch for "Parameter":
after transform: SymbolId(5): [ReferenceId(0)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Wrapper":
after transform: SymbolId(8): [ReferenceId(3), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/bestCommonTypeReturnStatement.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/bestCommonTypeWithOptionalProperties.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/bindingPatternContextualTypeDoesNotCauseWidening.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "pick":
after transform: SymbolId(0) "pick"
rebuilt        : SymbolId(0) "pick"
Reference symbol mismatch for "pick":
after transform: SymbolId(0) "pick"
rebuilt        : SymbolId(0) "pick"
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/binopAssignmentShouldHaveType.ts
Bindings mismatch:
after transform: ScopeId(0): ["Test", "console"]
rebuilt        : ScopeId(0): ["Test"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Test":
after transform: SymbolId(1): Span { start: 42, end: 46 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedBindingsReassignedInLoop1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedClassDeclarationAcrossFiles.ts
Unresolved references mismatch:
after transform: ["C"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/blockScopedNamespaceDifferentFile.ts
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(0): Span { start: 66, end: 67 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/booleanFilterAnyArray.ts
Bindings mismatch:
after transform: ScopeId(0): ["anys", "foo", "foor", "foos", "realanys", "xs", "ys"]
rebuilt        : ScopeId(0): ["foo", "foor", "foos", "xs", "ys"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "anys":
after transform: SymbolId(6) "anys"
rebuilt        : <None>
Reference symbol mismatch for "Bullean":
after transform: SymbolId(0) "Bullean"
rebuilt        : <None>
Reference symbol mismatch for "realanys":
after transform: SymbolId(8) "realanys"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Boolean"]
rebuilt        : ["Boolean", "Bullean", "anys", "realanys"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedContextualTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "createInstance":
after transform: SymbolId(0) "createInstance"
rebuilt        : SymbolId(0) "createInstance"
Unresolved references mismatch:
after transform: ["ConstructorParameters", "InstanceType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution1.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution2.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution3.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution4.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution5.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/callExpressionWithTypeParameterConstrainedToOuterTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/callOfConditionalTypeWithConcreteBranches.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["Function", "Parameters"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/callbacksDontShareTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/callsOnComplexSignatures.tsx
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(18): [ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(9): []
Scope children mismatch:
after transform: ScopeId(34): [ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(13): []
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(28), ReferenceId(32), ReferenceId(33), ReferenceId(36), ReferenceId(38), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(0): [ReferenceId(24), ReferenceId(28), ReferenceId(31)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/captureSuperPropertyAccessInSuperCall01.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop1.ts
Bindings mismatch:
after transform: ScopeId(0): ["iobj", "sobj", "use"]
rebuilt        : ScopeId(0): ["use"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(10), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(24), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(38), ScopeId(41), ScopeId(44), ScopeId(47), ScopeId(53), ScopeId(57), ScopeId(61), ScopeId(65), ScopeId(68), ScopeId(71), ScopeId(75), ScopeId(79), ScopeId(82), ScopeId(85), ScopeId(89), ScopeId(92)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(10), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(24), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(38), ScopeId(41), ScopeId(44), ScopeId(47), ScopeId(53), ScopeId(57), ScopeId(61), ScopeId(65), ScopeId(68), ScopeId(71), ScopeId(75), ScopeId(79), ScopeId(82), ScopeId(85), ScopeId(89), ScopeId(92)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "sobj":
after transform: SymbolId(36) "sobj"
rebuilt        : <None>
Reference symbol mismatch for "sobj":
after transform: SymbolId(36) "sobj"
rebuilt        : <None>
Reference symbol mismatch for "iobj":
after transform: SymbolId(38) "iobj"
rebuilt        : <None>
Reference symbol mismatch for "iobj":
after transform: SymbolId(38) "iobj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["iobj", "sobj"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6), SymbolId(10), SymbolId(14), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(32), SymbolId(37), SymbolId(42), SymbolId(47), SymbolId(51), SymbolId(55), SymbolId(59), SymbolId(63), SymbolId(67), SymbolId(72), SymbolId(77), SymbolId(82), SymbolId(87)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6), SymbolId(10), SymbolId(14), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(32), SymbolId(37), SymbolId(42), SymbolId(47), SymbolId(51), SymbolId(55), SymbolId(59), SymbolId(63), SymbolId(67), SymbolId(72), SymbolId(77), SymbolId(82), SymbolId(87)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop3_ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6), SymbolId(10), SymbolId(14), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(32), SymbolId(37), SymbolId(42), SymbolId(47), SymbolId(51), SymbolId(55), SymbolId(59), SymbolId(63), SymbolId(67), SymbolId(72), SymbolId(77), SymbolId(82), SymbolId(87)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6), SymbolId(10), SymbolId(14), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(32), SymbolId(37), SymbolId(42), SymbolId(47), SymbolId(51), SymbolId(55), SymbolId(59), SymbolId(63), SymbolId(67), SymbolId(72), SymbolId(77), SymbolId(82), SymbolId(87)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop9.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(8), SymbolId(10), SymbolId(18), SymbolId(21), SymbolId(25)]
rebuilt        : ScopeId(0): [SymbolId(8), SymbolId(10), SymbolId(18), SymbolId(21), SymbolId(25)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop9_ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(8), SymbolId(10), SymbolId(18), SymbolId(21), SymbolId(25)]
rebuilt        : ScopeId(0): [SymbolId(8), SymbolId(10), SymbolId(18), SymbolId(21), SymbolId(25)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(8) "use"
rebuilt        : SymbolId(8) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/caseInsensitiveFileSystemWithCapsImportTypeDeclarations.ts
Bindings mismatch:
after transform: ScopeId(0): ["Broken", "TypeB"]
rebuilt        : ScopeId(0): ["Broken"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/castExpressionParentheses.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A", "a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/castNewObjectBug.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/castTest.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Point":
after transform: SymbolId(8): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(9): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(8): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(9): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/chainedAssignment2.ts
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/chainedImportAlias.ts
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/chainedSpecializationToObjectTypeLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkInfiniteExpansionTermination.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkInfiniteExpansionTermination2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "combineLatest":
after transform: SymbolId(4) "combineLatest"
rebuilt        : SymbolId(0) "combineLatest"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkInterfaceBases.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["JQueryEventObjectTest"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkJsTypeDefNoUnusedLocalMarked.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing7.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/checkSwitchStatementIfCaseTypeIsString.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularConstrainedMappedTypeNoCrash.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularConstructorWithReturn.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "getPrismaClient":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularContextualMappedType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "reproduce":
after transform: SymbolId(5) "reproduce"
rebuilt        : SymbolId(0) "reproduce"
Reference symbol mismatch for "reproduce":
after transform: SymbolId(5) "reproduce"
rebuilt        : SymbolId(0) "reproduce"
Reference symbol mismatch for "reproduce":
after transform: SymbolId(5) "reproduce"
rebuilt        : SymbolId(0) "reproduce"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularGetAccessor.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularInstantiationExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularMappedTypeConstraint.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo2":
after transform: SymbolId(0) "foo2"
rebuilt        : SymbolId(0) "foo2"
Unresolved references mismatch:
after transform: ["Capitalize"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularReferenceInImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["Db", "foo"]
rebuilt        : ScopeId(0): ["foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularTypeofWithFunctionModule.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "maker":
after transform: SymbolId(1): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(Function)
Symbol reference IDs mismatch for "maker":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "maker":
after transform: SymbolId(1): [Span { start: 44, end: 49 }, Span { start: 121, end: 126 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/circularlySimplifyingConditionalTypesNoCrash.ts
Bindings mismatch:
after transform: ScopeId(0): ["connect", "myStoreConnect"]
rebuilt        : ScopeId(0): ["myStoreConnect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "connect":
after transform: SymbolId(17) "connect"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Partial", "Pick"]
rebuilt        : ["connect"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classDeclarationMergedInModuleWithContinuation.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionWithResolutionOfNamespaceOfSameName01.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionWithStaticProperties3.ts
Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "arr", "console"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "arr"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExpressionWithStaticPropertiesES63.ts
Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "arr", "console"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "arr"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExpressions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExtendingAny.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "Err", "_defineProperty", "o"]
rebuilt        : ScopeId(0): ["A", "_defineProperty", "o"]
Reference symbol mismatch for "Err":
after transform: SymbolId(0) "Err"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Err"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classExtendingQualifiedName2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classFunctionMerging.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | Function | NamespaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class | Function)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 164, end: 167 }, Span { start: 205, end: 208 }, Span { start: 259, end: 262 }]
rebuilt        : SymbolId(0): [Span { start: 164, end: 167 }, Span { start: 205, end: 208 }]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classFunctionMerging2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol flags mismatch for "B":
after transform: SymbolId(2): SymbolFlags(Class | Function | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class | Function)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classImplementingInterfaceIndexer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass1.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsClass3.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsImportedInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["M1", "M2"]
rebuilt        : ScopeId(0): ["M2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M2":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(2): Span { start: 68, end: 70 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["M1"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classImplementsMethodWIthTupleArgs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "MySettable":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classInConvertedLoopES5.ts
Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping5.ts
Bindings mismatch:
after transform: ScopeId(0): ["Greeter", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["Greeter", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classNonUniqueSymbolMethodHasSymbolIndexer.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "Mix", "Mixer", "a", "e1"]
rebuilt        : ScopeId(0): ["A", "Mix", "Mixer"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "Mix":
after transform: SymbolId(4) "Mix"
rebuilt        : SymbolId(1) "Mix"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classOrderBug.ts
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(3): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classReferencedInContextualParameterWithinItsOwnBaseExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(14): [ReferenceId(18)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "Class":
after transform: SymbolId(4) "Class"
rebuilt        : <None>
Reference symbol mismatch for "string":
after transform: SymbolId(13) "string"
rebuilt        : SymbolId(0) "string"
Unresolved references mismatch:
after transform: ["JSON"]
rebuilt        : ["Class", "JSON"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classVarianceCircularity.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classVarianceResolveCircularity1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "callme":
after transform: SymbolId(2) "callme"
rebuilt        : SymbolId(2) "callme"
Reference symbol mismatch for "callme":
after transform: SymbolId(2) "callme"
rebuilt        : SymbolId(2) "callme"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classVarianceResolveCircularity2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(5): [ReferenceId(3), ReferenceId(6)]
Reference symbol mismatch for "callme":
after transform: SymbolId(2) "callme"
rebuilt        : SymbolId(2) "callme"
Reference symbol mismatch for "callme":
after transform: SymbolId(2) "callme"
rebuilt        : SymbolId(2) "callme"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/classdecl.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(13)]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(39)]
rebuilt        : ScopeId(20): [ScopeId(21)]
Scope children mismatch:
after transform: ScopeId(31): [ScopeId(32), ScopeId(33), ScopeId(34)]
rebuilt        : ScopeId(22): [ScopeId(23)]
Scope children mismatch:
after transform: ScopeId(35): [ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(24): [ScopeId(25)]
Symbol flags mismatch for "m1":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(9): Span { start: 594, end: 596 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m1":
after transform: SymbolId(9): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(6): [ReferenceId(7), ReferenceId(8), ReferenceId(20)]
Symbol flags mismatch for "m2":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(13): Span { start: 690, end: 692 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "m3":
after transform: SymbolId(14): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m3":
after transform: SymbolId(14): Span { start: 714, end: 716 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol flags mismatch for "aAmbient":
after transform: SymbolId(19): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(18): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/clinterfaces.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "_defineProperty"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "M", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["_M"]
rebuilt        : ScopeId(1): ["C", "D", "_M"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(1): [Span { start: 21, end: 22 }, Span { start: 41, end: 42 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "D":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 61, end: 62 }
rebuilt        : SymbolId(4): Span { start: 77, end: 78 }
Symbol redeclarations mismatch for "D":
after transform: SymbolId(2): [Span { start: 61, end: 62 }, Span { start: 77, end: 78 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 96, end: 99 }
rebuilt        : SymbolId(5): Span { start: 129, end: 132 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(3): [Span { start: 96, end: 99 }, Span { start: 129, end: 132 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(6): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(6): SymbolFlags(Class)
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(6): [Span { start: 161, end: 164 }, Span { start: 197, end: 200 }]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleAcrossModuleDefinitions.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleAndTypeParameters.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 6, end: 9 }, Span { start: 63, end: 66 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleGenericOnSelfMember.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "Service":
after transform: SymbolId(2): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "Service":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "Service":
after transform: SymbolId(2): [Span { start: 45, end: 52 }, Span { start: 108, end: 115 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleTest1.ts
Bindings mismatch:
after transform: ScopeId(0): ["it"]
rebuilt        : ScopeId(0): ["$", "it"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Reference symbol mismatch for "$":
after transform: SymbolId(0) "$"
rebuilt        : SymbolId(0) "$"
Reference symbol mismatch for "$":
after transform: SymbolId(0) "$"
rebuilt        : SymbolId(0) "$"
Reference symbol mismatch for "$":
after transform: SymbolId(0) "$"
rebuilt        : SymbolId(0) "$"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleWithPriorUninstantiatedModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Moclodule":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "Moclodule":
after transform: SymbolId(0): Span { start: 47, end: 56 }
rebuilt        : SymbolId(0): Span { start: 132, end: 141 }
Symbol redeclarations mismatch for "Moclodule":
after transform: SymbolId(0): [Span { start: 47, end: 56 }, Span { start: 132, end: 141 }, Span { start: 178, end: 187 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cloduleWithRecursiveReference.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "actionA", "actionB", "b", "call", "fab", "foo", "printFn"]
rebuilt        : ScopeId(0): ["actionA", "actionB", "call", "fab", "foo", "printFn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "actionA":
after transform: SymbolId(13): [ReferenceId(24), ReferenceId(29)]
rebuilt        : SymbolId(5): [ReferenceId(11)]
Symbol reference IDs mismatch for "actionB":
after transform: SymbolId(14): [ReferenceId(25), ReferenceId(32)]
rebuilt        : SymbolId(6): [ReferenceId(14)]
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : SymbolId(2) "foo"
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "fab":
after transform: SymbolId(4) "fab"
rebuilt        : SymbolId(0) "fab"
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : SymbolId(2) "foo"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "fab":
after transform: SymbolId(4) "fab"
rebuilt        : SymbolId(0) "fab"
Unresolved references mismatch:
after transform: ["console"]
rebuilt        : ["a", "b", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences2.ts
Bindings mismatch:
after transform: ScopeId(0): ["SyntaxKind", "SyntaxKind1", "assertNode", "bar", "canHaveLocals", "cast", "consume", "every", "f1", "f2", "f3", "foo", "isC", "isClassLike", "isExpression", "isNodeArray", "maybeClassStatement", "statement", "tryCast", "types", "useA", "x"]
rebuilt        : ScopeId(0): ["SyntaxKind", "SyntaxKind1", "assertNode", "bar", "canHaveLocals", "cast", "consume", "every", "f1", "f2", "f3", "foo", "isC", "isClassLike", "isExpression", "isNodeArray", "maybeClassStatement", "tryCast", "useA", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Bindings mismatch:
after transform: ScopeId(17): ["Block", "CaseClause", "FunctionDeclaration", "FunctionExpression", "Identifier", "SyntaxKind"]
rebuilt        : ScopeId(11): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(36): ["ClassExpression", "ClassStatement", "SyntaxKind1"]
rebuilt        : ScopeId(19): ["SyntaxKind1"]
Scope flags mismatch:
after transform: ScopeId(36): ScopeFlags(0x0)
rebuilt        : ScopeId(19): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(33): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(24): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(33): [ReferenceId(52), ReferenceId(56), ReferenceId(59), ReferenceId(61), ReferenceId(63), ReferenceId(131)]
rebuilt        : SymbolId(24): [ReferenceId(38)]
Symbol flags mismatch for "SyntaxKind1":
after transform: SymbolId(68): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(43): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind1":
after transform: SymbolId(68): [ReferenceId(94), ReferenceId(97), ReferenceId(99), ReferenceId(137)]
rebuilt        : SymbolId(43): [ReferenceId(51)]
Reference symbol mismatch for "cast":
after transform: SymbolId(3) "cast"
rebuilt        : SymbolId(0) "cast"
Reference symbol mismatch for "isC":
after transform: SymbolId(8) "isC"
rebuilt        : SymbolId(3) "isC"
Reference symbol mismatch for "cast":
after transform: SymbolId(3) "cast"
rebuilt        : SymbolId(0) "cast"
Reference symbol mismatch for "isC":
after transform: SymbolId(8) "isC"
rebuilt        : SymbolId(3) "isC"
Reference symbol mismatch for "consume":
after transform: SymbolId(17) "consume"
rebuilt        : SymbolId(12) "consume"
Reference symbol mismatch for "useA":
after transform: SymbolId(15) "useA"
rebuilt        : SymbolId(10) "useA"
Reference symbol mismatch for "consume":
after transform: SymbolId(17) "consume"
rebuilt        : SymbolId(12) "consume"
Reference symbol mismatch for "useA":
after transform: SymbolId(15) "useA"
rebuilt        : SymbolId(10) "useA"
Reference symbol mismatch for "consume":
after transform: SymbolId(17) "consume"
rebuilt        : SymbolId(12) "consume"
Reference symbol mismatch for "useA":
after transform: SymbolId(15) "useA"
rebuilt        : SymbolId(10) "useA"
Reference symbol mismatch for "consume":
after transform: SymbolId(17) "consume"
rebuilt        : SymbolId(12) "consume"
Reference symbol mismatch for "useA":
after transform: SymbolId(15) "useA"
rebuilt        : SymbolId(10) "useA"
Reference symbol mismatch for "every":
after transform: SymbolId(26) "every"
rebuilt        : SymbolId(19) "every"
Reference symbol mismatch for "isC":
after transform: SymbolId(8) "isC"
rebuilt        : SymbolId(3) "isC"
Reference symbol mismatch for "assertNode":
after transform: SymbolId(49) "assertNode"
rebuilt        : SymbolId(28) "assertNode"
Reference symbol mismatch for "canHaveLocals":
after transform: SymbolId(47) "canHaveLocals"
rebuilt        : SymbolId(26) "canHaveLocals"
Reference symbol mismatch for "tryCast":
after transform: SymbolId(60) "tryCast"
rebuilt        : SymbolId(37) "tryCast"
Reference symbol mismatch for "isExpression":
after transform: SymbolId(58) "isExpression"
rebuilt        : SymbolId(35) "isExpression"
Reference symbol mismatch for "tryCast":
after transform: SymbolId(60) "tryCast"
rebuilt        : SymbolId(37) "tryCast"
Reference symbol mismatch for "statement":
after transform: SymbolId(78) "statement"
rebuilt        : <None>
Reference symbol mismatch for "isClassLike":
after transform: SymbolId(76) "isClassLike"
rebuilt        : SymbolId(45) "isClassLike"
Reference symbol mismatch for "tryCast":
after transform: SymbolId(60) "tryCast"
rebuilt        : SymbolId(37) "tryCast"
Reference symbol mismatch for "types":
after transform: SymbolId(86) "types"
rebuilt        : <None>
Reference symbol mismatch for "isNodeArray":
after transform: SymbolId(83) "isNodeArray"
rebuilt        : SymbolId(48) "isNodeArray"
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["statement", "types"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences3.ts
Bindings mismatch:
after transform: ScopeId(0): ["DISALLOW_DECORATORS", "SyntaxKind", "buildOverload", "createBinder", "createOverload", "every", "foo", "isArray", "isAssertClause", "isDecorator", "isExpression", "isImportClause", "isModifier", "modifiers", "updateImportDeclaration"]
rebuilt        : ScopeId(0): ["SyntaxKind", "buildOverload", "createBinder", "createOverload", "every", "foo", "isArray", "isAssertClause", "isDecorator", "isExpression", "isImportClause", "isModifier"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(49), ScopeId(51), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Bindings mismatch:
after transform: ScopeId(32): ["AssertClause", "Decorator", "ImportClause", "ImportDeclaration", "Modifier", "SyntaxKind"]
rebuilt        : ScopeId(4): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(41): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(41): [ReferenceId(67), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(203)]
rebuilt        : SymbolId(10): [ReferenceId(11)]
Reference symbol mismatch for "buildOverload":
after transform: SymbolId(39) "buildOverload"
rebuilt        : SymbolId(8) "buildOverload"
Reference symbol mismatch for "updateImportDeclaration":
after transform: SymbolId(66) "updateImportDeclaration"
rebuilt        : <None>
Reference symbol mismatch for "updateImportDeclaration":
after transform: SymbolId(66) "updateImportDeclaration"
rebuilt        : <None>
Reference symbol mismatch for "every":
after transform: SymbolId(67) "every"
rebuilt        : SymbolId(22) "every"
Reference symbol mismatch for "isModifier":
after transform: SymbolId(62) "isModifier"
rebuilt        : SymbolId(18) "isModifier"
Reference symbol mismatch for "isArray":
after transform: SymbolId(79) "isArray"
rebuilt        : SymbolId(29) "isArray"
Reference symbol mismatch for "isExpression":
after transform: SymbolId(56) "isExpression"
rebuilt        : SymbolId(12) "isExpression"
Reference symbol mismatch for "isAssertClause":
after transform: SymbolId(58) "isAssertClause"
rebuilt        : SymbolId(14) "isAssertClause"
Reference symbol mismatch for "every":
after transform: SymbolId(67) "every"
rebuilt        : SymbolId(22) "every"
Reference symbol mismatch for "isDecorator":
after transform: SymbolId(64) "isDecorator"
rebuilt        : SymbolId(20) "isDecorator"
Reference symbol mismatch for "isArray":
after transform: SymbolId(79) "isArray"
rebuilt        : SymbolId(29) "isArray"
Reference symbol mismatch for "isImportClause":
after transform: SymbolId(60) "isImportClause"
rebuilt        : SymbolId(16) "isImportClause"
Reference symbol mismatch for "isExpression":
after transform: SymbolId(56) "isExpression"
rebuilt        : SymbolId(12) "isExpression"
Reference symbol mismatch for "isAssertClause":
after transform: SymbolId(58) "isAssertClause"
rebuilt        : SymbolId(14) "isAssertClause"
Reference symbol mismatch for "DISALLOW_DECORATORS":
after transform: SymbolId(81) "DISALLOW_DECORATORS"
rebuilt        : <None>
Reference symbol mismatch for "every":
after transform: SymbolId(67) "every"
rebuilt        : SymbolId(22) "every"
Reference symbol mismatch for "modifiers":
after transform: SymbolId(103) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "isModifier":
after transform: SymbolId(62) "isModifier"
rebuilt        : SymbolId(18) "isModifier"
Reference symbol mismatch for "every":
after transform: SymbolId(67) "every"
rebuilt        : SymbolId(22) "every"
Reference symbol mismatch for "modifiers":
after transform: SymbolId(103) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "isDecorator":
after transform: SymbolId(64) "isDecorator"
rebuilt        : SymbolId(20) "isDecorator"
Unresolved references mismatch:
after transform: ["Extract", "Parameters", "undefined"]
rebuilt        : ["DISALLOW_DECORATORS", "modifiers", "undefined", "updateImportDeclaration"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences4.ts
Bindings mismatch:
after transform: ScopeId(0): ["SyntaxKind", "every", "foo", "isDecorator", "isModifier", "modifiers"]
rebuilt        : ScopeId(0): ["SyntaxKind", "every", "foo", "isDecorator", "isModifier"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["Decorator", "Modifier", "SyntaxKind"]
rebuilt        : ScopeId(1): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(27)]
rebuilt        : SymbolId(0): [ReferenceId(5)]
Reference symbol mismatch for "every":
after transform: SymbolId(10) "every"
rebuilt        : SymbolId(6) "every"
Reference symbol mismatch for "modifiers":
after transform: SymbolId(15) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "isModifier":
after transform: SymbolId(6) "isModifier"
rebuilt        : SymbolId(2) "isModifier"
Reference symbol mismatch for "every":
after transform: SymbolId(10) "every"
rebuilt        : SymbolId(6) "every"
Reference symbol mismatch for "modifiers":
after transform: SymbolId(15) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "isDecorator":
after transform: SymbolId(8) "isDecorator"
rebuilt        : SymbolId(4) "isDecorator"
Unresolved references mismatch:
after transform: []
rebuilt        : ["modifiers"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "select":
after transform: SymbolId(4) "select"
rebuilt        : SymbolId(3) "select"
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences7.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "route":
after transform: SymbolId(3) "route"
rebuilt        : SymbolId(0) "route"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences8.ts
Bindings mismatch:
after transform: ScopeId(0): ["fn", "x", "y"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(2) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["fn", "x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collectionPatternNoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
Symbol reference IDs mismatch for "Message":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsInType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsInterfaceMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenEnumWithEnumMemberConflict.ts
Bindings mismatch:
after transform: ScopeId(1): ["Color", "Thing"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithAccessorChildren.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithConstructorChildren.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithEnumMemberConflict.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["e", "m1", "m2"]
rebuilt        : ScopeId(2): ["e"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "e":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithFunctionChildren.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberClassConflict.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(3): Span { start: 73, end: 75 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberInterfaceConflict.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberVariable.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMethodChildren.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithModuleChildren.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithModuleReopening.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithPrivateMember.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithUnicodeNames.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123":
after transform: SymbolId(0): Span { start: 7, end: 170 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientClass.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["exports", "m2", "require"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(6): ["_m", "exports", "require"]
rebuilt        : ScopeId(3): ["_m"]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "require":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol flags mismatch for "exports":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 147, end: 149 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientEnum.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(6): ["_m", "exports", "require"]
rebuilt        : ScopeId(1): ["_m"]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "m2":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(13): Span { start: 279, end: 281 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientFunction.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(6): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(1): ["_m", "a"]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 187, end: 189 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientFunctionInGlobalFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m3", "m4", "require"]
rebuilt        : ScopeId(0): ["exports", "m4", "require"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(6): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(3): ["_m", "a"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "m4":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m4":
after transform: SymbolId(5): Span { start: 169, end: 171 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "foo", "foo2", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["foo", "foo2", "m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(16): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(3): ["_m", "a"]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(20)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "m2":
after transform: SymbolId(15): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(15): Span { start: 524, end: 526 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientVar.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(1): ["_m", "a"]
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 151, end: 153 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndFunctionInGlobalFile.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "m3":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m3":
after transform: SymbolId(2): Span { start: 89, end: 91 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "m4":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m4":
after transform: SymbolId(5): Span { start: 209, end: 211 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndInternalModuleAliasInGlobalFile.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "mOfGloalFile":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "mOfGloalFile":
after transform: SymbolId(0): Span { start: 7, end: 19 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "m1":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(4): Span { start: 155, end: 157 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(7): Span { start: 282, end: 284 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndUninstantiatedModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["exports", "foo", "foo2", "require"]
rebuilt        : ScopeId(0): ["foo", "foo2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterClassConstructor.ts
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(13): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(14): []
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(15): [ScopeId(16)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(17): [ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(19): []
Scope children mismatch:
after transform: ScopeId(28): [ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(20): []
Symbol flags mismatch for "c4":
after transform: SymbolId(15): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(15): SymbolFlags(Class)
Symbol flags mismatch for "c4NoError":
after transform: SymbolId(18): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(16): SymbolFlags(Class)
Symbol flags mismatch for "c6":
after transform: SymbolId(31): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(22): SymbolFlags(Class)
Symbol flags mismatch for "c6NoError":
after transform: SymbolId(36): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(23): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterClassMethod.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(6): []
Symbol flags mismatch for "c2":
after transform: SymbolId(13): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(7): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterFunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(15), SymbolId(22), SymbolId(26), SymbolId(31)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(15), SymbolId(22), SymbolId(26), SymbolId(31)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterFunctionExpressions.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterInType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterInterfaceMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterUnderscoreIUsage.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_i", "console"]
rebuilt        : ScopeId(0): ["Foo", "_i"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndNameResolution.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndParameter.ts
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(17)]
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(34)]
rebuilt        : ScopeId(19): [ScopeId(20)]
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(21): [ScopeId(22), ScopeId(23)]
Symbol flags mismatch for "Foo3":
after transform: SymbolId(18): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(19): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndPropertyNameAsConstuctorParameter.ts
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(8): [ScopeId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAliasInGlobal.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAmbientClassInGlobal.ts
Symbol flags mismatch for "_this":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAmbientVarInGlobal.ts
Bindings mismatch:
after transform: ScopeId(0): ["_this", "f"]
rebuilt        : ScopeId(0): ["f"]
Reference symbol mismatch for "_this":
after transform: SymbolId(0) "_this"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["_this"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndEnumInGlobal.ts
Bindings mismatch:
after transform: ScopeId(1): ["_this", "_thisVal1", "_thisVal2"]
rebuilt        : ScopeId(1): ["_this"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "_this":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndLocalVarInFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndLocalVarInLambda.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "alert":
after transform: SymbolId(0) "alert"
rebuilt        : SymbolId(0) "alert"
Reference symbol mismatch for "alert":
after transform: SymbolId(0) "alert"
rebuilt        : SymbolId(0) "alert"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndModuleInGlobal.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "_this":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "_this":
after transform: SymbolId(0): Span { start: 7, end: 12 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndNameResolution.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndParameter.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Foo1", "Foo2", "Foo3", "Foo4", "console", "f1", "f2", "f3", "f4"]
rebuilt        : ScopeId(0): ["Foo", "Foo1", "Foo2", "Foo3", "Foo4", "f1", "f2", "f3", "f4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(27), ScopeId(28), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(36), ScopeId(37), ScopeId(38)]
Scope children mismatch:
after transform: ScopeId(24): [ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(23): []
Scope children mismatch:
after transform: ScopeId(28): [ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(25): [ScopeId(26), ScopeId(29)]
Scope children mismatch:
after transform: ScopeId(44): [ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48)]
rebuilt        : ScopeId(36): []
Symbol flags mismatch for "Foo2":
after transform: SymbolId(26): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(25): SymbolFlags(Class)
Symbol flags mismatch for "Foo4":
after transform: SymbolId(47): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(40): SymbolFlags(Class)
Reference symbol mismatch for "console":
after transform: SymbolId(22) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(22) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(9): [ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(13): [ScopeId(14)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentEmitAtEndOfFile1.ts
Bindings mismatch:
after transform: ScopeId(0): ["empty", "f", "foo"]
rebuilt        : ScopeId(0): ["f", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(1): Span { start: 37, end: 40 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement.ts
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement2.ts
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentInNamespaceDeclarationWithIdentifierPathName.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "hello":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "hello":
after transform: SymbolId(0): Span { start: 10, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "hi":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "hi":
after transform: SymbolId(1): Span { start: 16, end: 18 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "world":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "world":
after transform: SymbolId(2): Span { start: 19, end: 24 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentLeadingCloseBrace.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "commentedParameters":
after transform: SymbolId(0) "commentedParameters"
rebuilt        : SymbolId(0) "commentedParameters"
Reference symbol mismatch for "commentedParameters":
after transform: SymbolId(0) "commentedParameters"
rebuilt        : SymbolId(0) "commentedParameters"
Reference symbol mismatch for "commentedParameters":
after transform: SymbolId(0) "commentedParameters"
rebuilt        : SymbolId(0) "commentedParameters"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientClass1.ts
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol flags mismatch for "D":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientEnum.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientVariable1.ts
Bindings mismatch:
after transform: ScopeId(0): ["v", "y"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientVariable2.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientfunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnDecoratedClassDeclaration.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol span mismatch for "Remote":
after transform: SymbolId(2): Span { start: 97, end: 103 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "Remote":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 97, end: 103 }
Symbol span mismatch for "AnotherRomote":
after transform: SymbolId(3): Span { start: 161, end: 174 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol span mismatch for "AnotherRomote":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 161, end: 174 }
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : SymbolId(2) "decorator"
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : SymbolId(2) "decorator"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnElidedModule1.ts
Bindings mismatch:
after transform: ScopeId(0): ["ElidedModule", "ElidedModule2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnExportEnumDeclaration.ts
Bindings mismatch:
after transform: ScopeId(1): ["Color", "b", "g", "r"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnInterface1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnParenthesizedExpressionOpenParen1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentOnSignature1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsCommentParsing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(20): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsDottedModuleName.ts
Symbol flags mismatch for "outerModule":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "outerModule":
after transform: SymbolId(0): Span { start: 49, end: 60 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "InnerModule":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "InnerModule":
after transform: SymbolId(1): Span { start: 61, end: 72 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["Colors", "Cornflower", "FancyPink"]
rebuilt        : ScopeId(1): ["Colors"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Colors":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsFormatting.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsInheritance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(10), ScopeId(19), ScopeId(29), ScopeId(35), ScopeId(36), ScopeId(45)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(17), ScopeId(23)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(50)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsModules.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsMultiModuleMultiFile.ts
Symbol flags mismatch for "multiM":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "multiM":
after transform: SymbolId(0): Span { start: 49, end: 55 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "multiM":
after transform: SymbolId(0): [Span { start: 49, end: 55 }, Span { start: 153, end: 159 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsMultiModuleSingleFile.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "multiM":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "multiM":
after transform: SymbolId(0): Span { start: 42, end: 48 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "multiM":
after transform: SymbolId(0): [Span { start: 42, end: 48 }, Span { start: 176, end: 182 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsOnJSXExpressionsArePreserved.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Component", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["Component", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(27), ScopeId(30), ScopeId(33), ScopeId(36), ScopeId(52), ScopeId(56), ScopeId(60), ScopeId(64), ScopeId(68)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27)]
Scope children mismatch:
after transform: ScopeId(36): [ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51)]
rebuilt        : ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(52): [ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(19): [ScopeId(20)]
Scope children mismatch:
after transform: ScopeId(56): [ScopeId(57), ScopeId(58), ScopeId(59)]
rebuilt        : ScopeId(21): [ScopeId(22)]
Scope children mismatch:
after transform: ScopeId(60): [ScopeId(61), ScopeId(62), ScopeId(63)]
rebuilt        : ScopeId(23): [ScopeId(24)]
Scope children mismatch:
after transform: ScopeId(64): [ScopeId(65), ScopeId(66), ScopeId(67)]
rebuilt        : ScopeId(25): [ScopeId(26)]
Scope children mismatch:
after transform: ScopeId(68): [ScopeId(69), ScopeId(70), ScopeId(71)]
rebuilt        : ScopeId(27): [ScopeId(28)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsVarDecl.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsdoNotEmitComments.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "c", "color", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "shade", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "c", "color", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "shade"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(11), ScopeId(14), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(14): ["_m", "b", "m2"]
rebuilt        : ScopeId(8): ["_m", "b"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(18): ["blue", "color", "green", "red"]
rebuilt        : ScopeId(11): ["color"]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(12): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(12): Span { start: 1256, end: 1258 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "color":
after transform: SymbolId(17): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "color":
after transform: SymbolId(17): [ReferenceId(6), ReferenceId(7), ReferenceId(21)]
rebuilt        : SymbolId(14): [ReferenceId(19), ReferenceId(20)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commentsemitComments.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "c", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "c", "foo", "fooVar", "i", "i1_i", "m1", "myVariable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(14): ["_m", "b", "m2"]
rebuilt        : ScopeId(8): ["_m", "b"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Symbol flags mismatch for "m1":
after transform: SymbolId(12): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(12): Span { start: 1256, end: 1258 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/commonJsImportClassExpression.ts
Bindings mismatch:
after transform: ScopeId(0): ["c"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "c":
after transform: SymbolId(1) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["c"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/comparableRelationBidirectional.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["AutomationMode", "LOCATION", "NONE", "SYSTEM", "TIME"]
rebuilt        : ScopeId(1): ["AutomationMode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AutomationMode":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "AutomationMode":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/comparisonOfPartialDeepAndIndexedAccessTerminatesWithoutError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/complexNarrowingWithAny.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/complicatedIndexesOfIntersectionsAreInferencable.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "Func":
after transform: SymbolId(2) "Func"
rebuilt        : SymbolId(0) "Func"
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Partial", "Pick", "Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/compositeContextualSignature.ts
Unresolved references mismatch:
after transform: ["ReadonlyArray", "console", "undefined"]
rebuilt        : ["console", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/compositeGenericFunction.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/compoundVarDecl1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedEnumMemberSyntacticallyString.ts
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "F", "Foo", "G", "H", "I", "J"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(10): [ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24)]
rebuilt        : SymbolId(2): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedEnumMemberSyntacticallyString2.ts
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E1", "E2", "F", "Foo", "G", "H", "I", "J"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(14): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33)]
rebuilt        : SymbolId(3): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedEnumTypeWidening.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "E2", "MyDeclaredEnum", "MyEnum", "_defineProperty", "c1", "c2", "computed", "f1", "f2", "f3", "f4", "v1", "v2", "val1", "val2"]
rebuilt        : ScopeId(0): ["C", "E", "MyEnum", "_defineProperty", "c1", "c2", "computed", "f1", "f2", "f3", "f4", "v1", "v2", "val1", "val2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "C", "MyEnum"]
rebuilt        : ScopeId(9): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(46), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(54), ReferenceId(55), ReferenceId(57), ReferenceId(58), ReferenceId(60), ReferenceId(61), ReferenceId(78)]
rebuilt        : SymbolId(3): [ReferenceId(14), ReferenceId(15), ReferenceId(19), ReferenceId(24), ReferenceId(25), ReferenceId(32), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(62)]
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(52): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(45): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "computed":
after transform: SymbolId(0) "computed"
rebuilt        : SymbolId(1) "computed"
Reference symbol mismatch for "computed":
after transform: SymbolId(0) "computed"
rebuilt        : SymbolId(1) "computed"
Reference symbol mismatch for "computed":
after transform: SymbolId(0) "computed"
rebuilt        : SymbolId(1) "computed"
Reference symbol mismatch for "computed":
after transform: SymbolId(0) "computed"
rebuilt        : SymbolId(1) "computed"
Reference symbol mismatch for "E2":
after transform: SymbolId(39) "E2"
rebuilt        : <None>
Reference symbol mismatch for "MyDeclaredEnum":
after transform: SymbolId(57) "MyDeclaredEnum"
rebuilt        : <None>
Reference symbol mismatch for "MyDeclaredEnum":
after transform: SymbolId(57) "MyDeclaredEnum"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const", "require"]
rebuilt        : ["E2", "MyDeclaredEnum", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesTransformedInOtherwiseNonTSClasses.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "NS":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NS":
after transform: SymbolId(0): Span { start: 10, end: 12 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertiesWithSetterAssignment.ts
Bindings mismatch:
after transform: ScopeId(0): ["Props", "foo", "k"]
rebuilt        : ScopeId(0): ["Props", "k"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["Props", "k"]
rebuilt        : ScopeId(1): ["Props"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "k":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(5), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(9)]
Symbol flags mismatch for "Props":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Iterable", "Set", "Symbol"]
rebuilt        : ["Symbol", "foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedPropertyNameAndTypeParameterConflict.ts
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "O", "_defineProperty"]
rebuilt        : ScopeId(0): ["Bar", "_defineProperty"]
Symbol flags mismatch for "Bar":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Reference symbol mismatch for "O":
after transform: SymbolId(0) "O"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["O", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/computedTypesKeyofNoIndexSignatureType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalEqualityTestingNullability.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeAnyUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeBasedContextualTypeReturnTypeWidening.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(12), SymbolId(16), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(17), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11)]
Reference symbol mismatch for "useState1":
after transform: SymbolId(0) "useState1"
rebuilt        : SymbolId(0) "useState1"
Reference symbol mismatch for "useState2":
after transform: SymbolId(3) "useState2"
rebuilt        : SymbolId(2) "useState2"
Reference symbol mismatch for "useState1":
after transform: SymbolId(0) "useState1"
rebuilt        : SymbolId(0) "useState1"
Reference symbol mismatch for "useState2":
after transform: SymbolId(3) "useState2"
rebuilt        : SymbolId(2) "useState2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeClassMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Symbol flags mismatch for "MyRecord":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "MyRecord":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "MySet":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "MySet":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeContextualTypeSimplificationsSuceeds.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeDiscriminatingLargeUnionRegularTypeFetchingSpeedReasonable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeGenericInSignatureTypeParameterConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeRelaxingConstraintAssignability.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(12), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "f":
after transform: SymbolId(12) "f"
rebuilt        : SymbolId(2) "f"
Unresolved references mismatch:
after transform: ["Partial", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeSimplification.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypeSubclassExtendsTypeParam.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Model":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol flags mismatch for "Field":
after transform: SymbolId(4): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Field":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypesASI.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionalTypesSimplifyWhenTrivial.ts
Bindings mismatch:
after transform: ScopeId(0): ["fn1", "fn10", "fn11", "fn12", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "x", "z", "zee"]
rebuilt        : ScopeId(0): ["fn1", "fn10", "fn11", "fn12", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "zee"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Reference symbol mismatch for "z":
after transform: SymbolId(56) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Pick"]
rebuilt        : ["z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/conditionallyDuplicateOverloadsCausedByOverloadResolution.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(9), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(9), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7), ScopeId(8), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(4): [ReferenceId(1)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(5): [ReferenceId(2)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(13): [ReferenceId(5)]
rebuilt        : SymbolId(13): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(14): [ReferenceId(6)]
rebuilt        : SymbolId(14): []
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : SymbolId(9) "foo2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarationShadowedByVarDeclaration3.ts
Unresolved reference IDs mismatch for "RegExp":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations-ambient.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "c1", "c2", "c3", "c4", "c5"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constDeclarations2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 19, end: 20 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumDeclarations.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E2"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumExternalModule.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "V"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues1.ts
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 9, end: 12 }, Span { start: 25, end: 28 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues2.ts
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 6, end: 9 }, Span { start: 20, end: 23 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues3.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "foo"]
rebuilt        : ScopeId(1): ["foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 5, end: 8 }, Span { start: 22, end: 25 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues4.ts
Bindings mismatch:
after transform: ScopeId(2): ["E", "X"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 7, end: 10 }, Span { start: 46, end: 49 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues5.ts
Bindings mismatch:
after transform: ScopeId(2): ["E", "X"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumNamespaceReferenceCausesNoImport.ts
Bindings mismatch:
after transform: ScopeId(1): ["ConstFooEnum", "Here", "Some", "Values"]
rebuilt        : ScopeId(1): ["ConstFooEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "ConstFooEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumNamespaceReferenceCausesNoImport2.ts
Bindings mismatch:
after transform: ScopeId(2): ["ConstFooEnum", "Here", "Some", "Values"]
rebuilt        : ScopeId(2): ["ConstFooEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "ConstEnumOnlyModule":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ConstEnumOnlyModule":
after transform: SymbolId(0): Span { start: 14, end: 33 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "ConstFooEnum":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumNoEmitReexport.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo", "MyConstEnum"]
rebuilt        : ScopeId(1): ["MyConstEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyConstEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumOnlyModuleMerging.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitNamedExport1.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "Foo"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitNamedExport2.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "Foo"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitReexport.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo", "MyConstEnum"]
rebuilt        : ScopeId(1): ["MyConstEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyConstEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumSyntheticNodesComments.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "En"]
rebuilt        : ScopeId(1): ["En"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "En":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "En":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(4), ReferenceId(7), ReferenceId(10), ReferenceId(13), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumToStringNoComments.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Foo", "X", "Y", "Z"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnumToStringWithComments.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Foo", "X", "Y", "Z"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["A0", "Enum1"]
rebuilt        : ScopeId(1): ["Enum1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "D", "E", "Enum1", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "PQ", "Q", "R", "S", "T", "U", "V", "W", "W1", "W2", "W3", "W4", "W5"]
rebuilt        : ScopeId(2): ["Enum1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["#", "*/", "-->", "/*", "//", "///", "<!--", "Comments"]
rebuilt        : ScopeId(3): ["Comments"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["E", "V1", "V2"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["E", "V3", "V4"]
rebuilt        : ScopeId(11): ["E"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(15): ["E", "V1", "V2"]
rebuilt        : ScopeId(15): ["E"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(19): ["E", "V1", "V2"]
rebuilt        : ScopeId(19): ["E"]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(0x0)
rebuilt        : ScopeId(19): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(20): ScopeFlags(Function)
Symbol flags mismatch for "Enum1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum1":
after transform: SymbolId(0): [ReferenceId(23), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(50), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(149), ReferenceId(209), ReferenceId(210)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(67), ReferenceId(175), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(187), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(195), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(201), ReferenceId(202)]
Symbol redeclarations mismatch for "Enum1":
after transform: SymbolId(0): [Span { start: 11, end: 16 }, Span { start: 46, end: 51 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Enum1":
after transform: SymbolId(92): [ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(187), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(195), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(208)]
rebuilt        : SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66)]
Symbol flags mismatch for "Comments":
after transform: SymbolId(31): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Comments":
after transform: SymbolId(31): [ReferenceId(85), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(226)]
rebuilt        : SymbolId(3): [ReferenceId(83), ReferenceId(208), ReferenceId(209), ReferenceId(210), ReferenceId(211), ReferenceId(212), ReferenceId(213), ReferenceId(214)]
Symbol flags mismatch for "A":
after transform: SymbolId(39): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(39): Span { start: 717, end: 718 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(39): [ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(80), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(104), ReferenceId(105), ReferenceId(116), ReferenceId(117)]
rebuilt        : SymbolId(5): [ReferenceId(88), ReferenceId(100), ReferenceId(101), ReferenceId(104), ReferenceId(107), ReferenceId(119), ReferenceId(120), ReferenceId(159), ReferenceId(204), ReferenceId(205), ReferenceId(206)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(39): [Span { start: 717, end: 718 }, Span { start: 905, end: 906 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "B":
after transform: SymbolId(40): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(40): Span { start: 739, end: 740 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(41): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(41): Span { start: 765, end: 766 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(42): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "B":
after transform: SymbolId(45): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(45): Span { start: 927, end: 928 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(46): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(46): Span { start: 953, end: 954 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(47): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "A1":
after transform: SymbolId(50): SymbolFlags(ValueModule)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A1":
after transform: SymbolId(50): Span { start: 1114, end: 1116 }
rebuilt        : SymbolId(20): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(51): SymbolFlags(ValueModule)
rebuilt        : SymbolId(22): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(51): Span { start: 1137, end: 1138 }
rebuilt        : SymbolId(22): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(52): SymbolFlags(ValueModule)
rebuilt        : SymbolId(24): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(52): Span { start: 1163, end: 1164 }
rebuilt        : SymbolId(24): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(53): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(26): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "A2":
after transform: SymbolId(56): SymbolFlags(ValueModule)
rebuilt        : SymbolId(28): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A2":
after transform: SymbolId(56): Span { start: 1292, end: 1294 }
rebuilt        : SymbolId(28): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(57): SymbolFlags(ValueModule)
rebuilt        : SymbolId(30): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(57): Span { start: 1315, end: 1316 }
rebuilt        : SymbolId(30): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(58): SymbolFlags(ValueModule)
rebuilt        : SymbolId(32): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(58): Span { start: 1341, end: 1342 }
rebuilt        : SymbolId(32): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "C":
after transform: SymbolId(58): [Span { start: 1341, end: 1342 }, Span { start: 1524, end: 1525 }]
rebuilt        : SymbolId(32): []
Symbol flags mismatch for "E":
after transform: SymbolId(59): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(34): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "I":
after transform: SymbolId(63): [ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(38): [ReferenceId(163), ReferenceId(165)]
Symbol reference IDs mismatch for "I1":
after transform: SymbolId(64): [ReferenceId(40), ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(39): [ReferenceId(167), ReferenceId(169)]
Symbol reference IDs mismatch for "I2":
after transform: SymbolId(65): [ReferenceId(45), ReferenceId(47), ReferenceId(49)]
rebuilt        : SymbolId(40): [ReferenceId(171), ReferenceId(173)]
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Unresolved references mismatch:
after transform: ["A0"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constIndexedAccess.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["numbers", "one", "zero"]
rebuilt        : ScopeId(1): ["numbers"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["numbersNotConst", "one", "zero"]
rebuilt        : ScopeId(2): ["numbersNotConst"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "numbers":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "numbersNotConst":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constantOverloadFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constantOverloadFunctionNoSubtypeError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constraintCheckInGenericBaseTypeReference.ts
Symbol reference IDs mismatch for "Constraint":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "TypeArg":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constraintOfRecursivelyMappedTypeWithConditionalIsResolvable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constraintReferencingTypeParameterFromSameTypeParameterList.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constraintsThatReferenceOtherContstraints1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorArgWithGenericCallSignature.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Test":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorArgs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads5.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorOverloads9.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorTypeWithTypeParameters.ts
Bindings mismatch:
after transform: ScopeId(0): ["X", "Y", "anotherVar"]
rebuilt        : ScopeId(0): ["anotherVar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/constructorWithCapturedSuper.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(11)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextSensitiveReturnTypeInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
Symbol reference IDs mismatch for "DEPS":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(22)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(18)]
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualComputedNonBindablePropertyType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(13), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(6), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(12): []
rebuilt        : ScopeId(5): ["propName"]
Symbol flags mismatch for "propName":
after transform: SymbolId(14): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "propName":
after transform: SymbolId(14): Span { start: 526, end: 534 }
rebuilt        : SymbolId(7): Span { start: 551, end: 569 }
Symbol reference IDs mismatch for "propName":
after transform: SymbolId(14): [ReferenceId(13), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(7): [ReferenceId(4)]
Symbol redeclarations mismatch for "propName":
after transform: SymbolId(14): [Span { start: 526, end: 534 }, Span { start: 551, end: 569 }]
rebuilt        : SymbolId(7): []
Reference symbol mismatch for "forceMatch":
after transform: SymbolId(1) "forceMatch"
rebuilt        : SymbolId(1) "forceMatch"
Reference symbol mismatch for "testD":
after transform: SymbolId(0) "testD"
rebuilt        : SymbolId(0) "testD"
Reference symbol mismatch for "forceMatch2":
after transform: SymbolId(5) "forceMatch2"
rebuilt        : SymbolId(3) "forceMatch2"
Reference symbol mismatch for "testD":
after transform: SymbolId(0) "testD"
rebuilt        : SymbolId(0) "testD"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualExpressionTypecheckingDoesntBlowStack.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualOuterTypeParameters.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(6), SymbolId(11), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(8), ScopeId(9), ScopeId(14), ScopeId(15), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(18)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(24)]
rebuilt        : ScopeId(5): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(8): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(14): [ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(19): [ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(9): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualOverloadListFromArrayUnion.ts
Bindings mismatch:
after transform: ScopeId(0): ["y", "yThen"]
rebuilt        : ScopeId(0): ["yThen"]
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualParameterAndSelfReferentialConstraint1.ts
Bindings mismatch:
after transform: ScopeId(0): ["pipe", "repeat"]
rebuilt        : ScopeId(0): ["pipe"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "pipe":
after transform: SymbolId(6) "pipe"
rebuilt        : SymbolId(0) "pipe"
Reference symbol mismatch for "repeat":
after transform: SymbolId(13) "repeat"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : ["repeat"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualPropertyOfGenericMappedType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE.ts
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE2.ts
Bindings mismatch:
after transform: ScopeId(0): ["app"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "app":
after transform: SymbolId(0) "app"
rebuilt        : <None>
Reference symbol mismatch for "app":
after transform: SymbolId(0) "app"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["app"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE3.ts
Bindings mismatch:
after transform: ScopeId(0): ["app"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "app":
after transform: SymbolId(0) "app"
rebuilt        : <None>
Reference symbol mismatch for "app":
after transform: SymbolId(0) "app"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["app"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSigInstantiationRestParams.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "toInstantiate":
after transform: SymbolId(0) "toInstantiate"
rebuilt        : SymbolId(0) "toInstantiate"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureConditionalTypeInstantiationUsingDefault.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "createMachine":
after transform: SymbolId(4) "createMachine"
rebuilt        : SymbolId(0) "createMachine"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "map2":
after transform: SymbolId(9) "map2"
rebuilt        : SymbolId(6) "map2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(2): [ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(7), SymbolId(8), SymbolId(11), SymbolId(12), SymbolId(15), SymbolId(16), SymbolId(19), SymbolId(20), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(15)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Banana":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Reference symbol mismatch for "fruitFactory1":
after transform: SymbolId(4) "fruitFactory1"
rebuilt        : SymbolId(1) "fruitFactory1"
Reference symbol mismatch for "fruitFactory2":
after transform: SymbolId(8) "fruitFactory2"
rebuilt        : SymbolId(4) "fruitFactory2"
Reference symbol mismatch for "fruitFactory3":
after transform: SymbolId(12) "fruitFactory3"
rebuilt        : SymbolId(7) "fruitFactory3"
Reference symbol mismatch for "fruitFactory4":
after transform: SymbolId(16) "fruitFactory4"
rebuilt        : SymbolId(10) "fruitFactory4"
Reference symbol mismatch for "fruitFactory5":
after transform: SymbolId(20) "fruitFactory5"
rebuilt        : SymbolId(13) "fruitFactory5"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiationWithTypeParameterConstrainedToOuterTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstatiationCovariance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualSignature_objectLiteralMethodMayReturnNever.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeAppliedToVarArgs.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeArrayReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Flex", "StyledSelect", "styled"]
rebuilt        : ScopeId(0): ["StyledSelect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "styled":
after transform: SymbolId(16) "styled"
rebuilt        : <None>
Reference symbol mismatch for "Flex":
after transform: SymbolId(18) "Flex"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["Flex", "styled"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "MyMDXComponent":
after transform: SymbolId(7) "MyMDXComponent"
rebuilt        : SymbolId(0) "MyMDXComponent"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "test1":
after transform: SymbolId(1) "test1"
rebuilt        : SymbolId(0) "test1"
Reference symbol mismatch for "test2":
after transform: SymbolId(6) "test2"
rebuilt        : SymbolId(3) "test2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix5.ts
Bindings mismatch:
after transform: ScopeId(0): ["ThemeSymbol", "app", "inject", "reactive"]
rebuilt        : ScopeId(0): ["inject", "reactive"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "app":
after transform: SymbolId(28) "app"
rebuilt        : <None>
Reference symbol mismatch for "reactive":
after transform: SymbolId(21) "reactive"
rebuilt        : SymbolId(0) "reactive"
Reference symbol mismatch for "inject":
after transform: SymbolId(26) "inject"
rebuilt        : SymbolId(2) "inject"
Reference symbol mismatch for "ThemeSymbol":
after transform: SymbolId(25) "ThemeSymbol"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Readonly", "Record", "Symbol", "ThisType"]
rebuilt        : ["ThemeSymbol", "app"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeCaching.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "MyCompiler", "applyOptimizationDefaults", "emit"]
rebuilt        : ScopeId(0): ["MyCompiler", "applyOptimizationDefaults", "emit"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(4): []
Symbol flags mismatch for "MyCompiler":
after transform: SymbolId(9): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol reference IDs mismatch for "MyCompiler":
after transform: SymbolId(9): [ReferenceId(9), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(5): []
Reference symbol mismatch for "emit":
after transform: SymbolId(3) "emit"
rebuilt        : SymbolId(0) "emit"
Reference symbol mismatch for "A":
after transform: SymbolId(13) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeIterableUnions.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "DMap":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeObjectSpreadExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeOfIndexedAccessParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeOnYield1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Generator", "console"]
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeOnYield2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Generator", "console"]
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeSelfReferencing.ts
Bindings mismatch:
after transform: ScopeId(0): ["parse", "result"]
rebuilt        : ScopeId(0): ["result"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "parse":
after transform: SymbolId(3) "parse"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["parse"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypeShouldBeLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType1.ts
Bindings mismatch:
after transform: ScopeId(0): ["DEFAULT_TABS_TAG", "TabGroup"]
rebuilt        : ScopeId(0): ["DEFAULT_TABS_TAG"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "DEFAULT_TABS_TAG":
after transform: SymbolId(2): [ReferenceId(11), ReferenceId(15)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "TabGroup":
after transform: SymbolId(10) "TabGroup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Event", "Omit", "const"]
rebuilt        : ["TabGroup"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType3.ts
Bindings mismatch:
after transform: ScopeId(0): ["DEFAULT_TABS_TAG", "TabGroup"]
rebuilt        : ScopeId(0): ["DEFAULT_TABS_TAG"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "DEFAULT_TABS_TAG":
after transform: SymbolId(6): [ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "TabGroup":
after transform: SymbolId(14) "TabGroup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Event", "Exclude", "const"]
rebuilt        : ["TabGroup"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping13.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping14.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping22.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTyping23.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingArrayOfLambdas.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingFunctionReturningFunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingFunctionReturningFunction2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfAccessors.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfConditionalExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfLambdaWithMultipleSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfOptionalMembers.tsx
Bindings mismatch:
after transform: ScopeId(0): ["App4", "JSX", "_jsxFileName", "_reactJsxRuntime", "a", "app", "app2", "app3", "foo", "y"]
rebuilt        : ScopeId(0): ["App4", "_jsxFileName", "_reactJsxRuntime", "a", "app", "app2", "app3", "foo", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Reference symbol mismatch for "app":
after transform: SymbolId(5) "app"
rebuilt        : SymbolId(2) "app"
Reference symbol mismatch for "foo":
after transform: SymbolId(13) "foo"
rebuilt        : SymbolId(7) "foo"
Reference symbol mismatch for "app2":
after transform: SymbolId(21) "app2"
rebuilt        : SymbolId(11) "app2"
Reference symbol mismatch for "app3":
after transform: SymbolId(30) "app3"
rebuilt        : SymbolId(16) "app3"
Reference symbol mismatch for "App4":
after transform: SymbolId(42) "App4"
rebuilt        : SymbolId(21) "App4"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfTooShortOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingReturnStatementWithReturnTypeAnnotation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "getPropFromRaw":
after transform: SymbolId(4) "getPropFromRaw"
rebuilt        : SymbolId(2) "getPropFromRaw"
Reference symbol mismatch for "isString":
after transform: SymbolId(2) "isString"
rebuilt        : SymbolId(0) "isString"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextualTypingTwoInstancesOfSameTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypeAsyncFunctionReturnTypeFromUnion.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(13), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(16)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(16), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(16), ScopeId(19)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(9): [ScopeId(10)]
Symbol flags mismatch for "StateMachine":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "StateMachine":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(10)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "createMachine":
after transform: SymbolId(2) "createMachine"
rebuilt        : SymbolId(3) "createMachine"
Reference symbol mismatch for "load":
after transform: SymbolId(6) "load"
rebuilt        : SymbolId(8) "load"
Reference symbol mismatch for "load":
after transform: SymbolId(6) "load"
rebuilt        : SymbolId(8) "load"
Reference symbol mismatch for "load":
after transform: SymbolId(6) "load"
rebuilt        : SymbolId(8) "load"
Unresolved references mismatch:
after transform: ["Promise", "Record", "arguments", "require"]
rebuilt        : ["Promise", "arguments", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(2), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(5), ReferenceId(9), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypeGeneratorReturnTypeFromUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Promise", "require"]
rebuilt        : ["Promise", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedBooleanLiterals.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(11), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : SymbolId(0) "box"
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : SymbolId(0) "box"
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : SymbolId(0) "box"
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : SymbolId(0) "box"
Reference symbol mismatch for "observable":
after transform: SymbolId(11) "observable"
rebuilt        : SymbolId(6) "observable"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedByDiscriminableUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedGenericAssignment.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxAttribute.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "Test":
after transform: SymbolId(3) "Test"
rebuilt        : SymbolId(2) "Test"
Reference symbol mismatch for "Test":
after transform: SymbolId(3) "Test"
rebuilt        : SymbolId(2) "Test"
Reference symbol mismatch for "Test":
after transform: SymbolId(3) "Test"
rebuilt        : SymbolId(2) "Test"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxAttribute2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["ComponentPropsWithRef", "ElementType", "React", "UnwrappedLink", "UnwrappedLink2", "_jsxFileName"]
rebuilt        : ScopeId(0): ["React", "UnwrappedLink", "UnwrappedLink2", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxChildren.tsx
Bindings mismatch:
after transform: ScopeId(0): ["DropdownMenu", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(15), ReferenceId(16), ReferenceId(18), ReferenceId(21), ReferenceId(22), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(8), ReferenceId(10), ReferenceId(12)]
Reference symbol mismatch for "DropdownMenu":
after transform: SymbolId(1) "DropdownMenu"
rebuilt        : <None>
Reference symbol mismatch for "DropdownMenu":
after transform: SymbolId(1) "DropdownMenu"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : ["DropdownMenu"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedOptionalProperty.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(2) "foo"
Reference symbol mismatch for "match":
after transform: SymbolId(0) "match"
rebuilt        : SymbolId(0) "match"
Reference symbol mismatch for "foo2":
after transform: SymbolId(6) "foo2"
rebuilt        : SymbolId(5) "foo2"
Reference symbol mismatch for "match":
after transform: SymbolId(0) "match"
rebuilt        : SymbolId(0) "match"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers2.ts
Bindings mismatch:
after transform: ScopeId(0): ["num", "test1", "test2", "test3"]
rebuilt        : ScopeId(0): ["test1", "test2", "test3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "test1":
after transform: SymbolId(0) "test1"
rebuilt        : SymbolId(0) "test1"
Reference symbol mismatch for "num":
after transform: SymbolId(9) "num"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : ["num"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers3.ts
Bindings mismatch:
after transform: ScopeId(0): ["create", "takesDirection"]
rebuilt        : ScopeId(0): ["takesDirection"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "create":
after transform: SymbolId(2) "create"
rebuilt        : <None>
Reference symbol mismatch for "takesDirection":
after transform: SymbolId(5) "takesDirection"
rebuilt        : SymbolId(0) "takesDirection"
Unresolved references mismatch:
after transform: []
rebuilt        : ["create"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedSymbolNamedProperties.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "ab", "f", "x"]
rebuilt        : ScopeId(0): ["A", "B", "f", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(8)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(6)]
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : SymbolId(2) "f"
Reference symbol mismatch for "ab":
after transform: SymbolId(3) "ab"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : ["Symbol", "ab"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contravariantInferenceAndTypeGuard.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "List":
after transform: SymbolId(10): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "List":
after transform: SymbolId(10): [ReferenceId(5), ReferenceId(11), ReferenceId(15), ReferenceId(21), ReferenceId(30), ReferenceId(36), ReferenceId(42), ReferenceId(46), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contravariantOnlyInferenceFromAnnotatedFunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contravariantOnlyInferenceWithAnnotatedOptionalParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "filter":
after transform: SymbolId(0) "filter"
rebuilt        : SymbolId(0) "filter"
Reference symbol mismatch for "filter":
after transform: SymbolId(0) "filter"
rebuilt        : SymbolId(0) "filter"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/contravariantTypeAliasInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "f1", "f2", "foo", "g1", "g2"]
rebuilt        : ScopeId(0): ["bar", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "f1":
after transform: SymbolId(4) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : <None>
Reference symbol mismatch for "bar":
after transform: SymbolId(12) "bar"
rebuilt        : SymbolId(3) "bar"
Reference symbol mismatch for "f1":
after transform: SymbolId(4) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : <None>
Reference symbol mismatch for "bar":
after transform: SymbolId(12) "bar"
rebuilt        : SymbolId(3) "bar"
Reference symbol mismatch for "g1":
after transform: SymbolId(10) "g1"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(11) "g2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f1", "f2", "g1", "g2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowAnalysisOnBareThisKeyword.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "isBig":
after transform: SymbolId(0) "isBig"
rebuilt        : SymbolId(0) "isBig"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowArrays.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(40)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(40)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : SymbolId(0) "cond"
Reference symbol mismatch for "foo":
after transform: SymbolId(38) "foo"
rebuilt        : SymbolId(38) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowBreakContinueWithLabel.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "User"]
rebuilt        : ScopeId(1): ["User"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "User":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "User":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowCommaExpressionAssertionWithinTernary.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "assert":
after transform: SymbolId(0) "assert"
rebuilt        : SymbolId(0) "assert"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowDestructuringLoop.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowFavorAssertedTypeThroughTypePredicate.ts
Bindings mismatch:
after transform: ScopeId(0): ["isObject1", "isObject2", "obj1", "obj2", "obj3", "obj4"]
rebuilt        : ScopeId(0): ["isObject1", "isObject2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Reference symbol mismatch for "isObject1":
after transform: SymbolId(0) "isObject1"
rebuilt        : SymbolId(0) "isObject1"
Reference symbol mismatch for "obj1":
after transform: SymbolId(2) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(2) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(2) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(2) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "isObject1":
after transform: SymbolId(0) "isObject1"
rebuilt        : SymbolId(0) "isObject1"
Reference symbol mismatch for "obj2":
after transform: SymbolId(3) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(3) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(3) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(3) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "isObject2":
after transform: SymbolId(4) "isObject2"
rebuilt        : SymbolId(2) "isObject2"
Reference symbol mismatch for "obj3":
after transform: SymbolId(6) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(6) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(6) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(6) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "isObject2":
after transform: SymbolId(4) "isObject2"
rebuilt        : SymbolId(2) "isObject2"
Reference symbol mismatch for "obj4":
after transform: SymbolId(7) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(7) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(7) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(7) "obj4"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : ["obj1", "obj2", "obj3", "obj4"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowForCatchAndFinally.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(9), SymbolId(10)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(13), ScopeId(15), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(10): []
Symbol flags mismatch for "Aborter":
after transform: SymbolId(8): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(9): SymbolFlags(Class)
Symbol reference IDs mismatch for "Aborter":
after transform: SymbolId(8): [ReferenceId(23), ReferenceId(27)]
rebuilt        : SymbolId(9): [ReferenceId(29)]
Reference symbol mismatch for "test1":
after transform: SymbolId(2) "test1"
rebuilt        : SymbolId(2) "test1"
Reference symbol mismatch for "test2":
after transform: SymbolId(3) "test2"
rebuilt        : SymbolId(3) "test2"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require", "undefined"]
rebuilt        : ["arguments", "require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowInitializedDestructuringVariables.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "obj"]
rebuilt        : ScopeId(0): ["a", "b"]
Reference symbol mismatch for "obj":
after transform: SymbolId(0) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["obj"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowInstanceof.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "Y", "_defineProperty", "ctor", "f1", "f2", "f3", "f4", "foo", "goo", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "Y", "_defineProperty", "f1", "f2", "f3", "f4", "foo", "goo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(25), ScopeId(27), ScopeId(29)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(8): [ReferenceId(36), ReferenceId(37), ReferenceId(38)]
rebuilt        : SymbolId(9): [ReferenceId(29), ReferenceId(32)]
Reference symbol mismatch for "x":
after transform: SymbolId(17) "x"
rebuilt        : <None>
Reference symbol mismatch for "ctor":
after transform: SymbolId(18) "ctor"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(17) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Promise", "Set"]
rebuilt        : ["Promise", "Set", "ctor", "x"]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(33)]
rebuilt        : [ReferenceId(1), ReferenceId(4), ReferenceId(9), ReferenceId(18), ReferenceId(22), ReferenceId(25)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowInstanceofWithSymbolHasInstance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(26), ScopeId(28)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(13): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(10): [ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(10): [ReferenceId(36), ReferenceId(39)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(40), ReferenceId(45)]
rebuilt        : [ReferenceId(30), ReferenceId(34)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(1), ReferenceId(20)]
rebuilt        : [ReferenceId(13)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(10), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(31), ReferenceId(32), ReferenceId(34), ReferenceId(37)]
rebuilt        : [ReferenceId(2), ReferenceId(5), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowManyConsecutiveConditionsNoTimeout.ts
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "One", "Two"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowPropertyDeclarations.ts
Bindings mismatch:
after transform: ScopeId(0): ["HTMLDOMPropertyConfig", "HTMLtoJSX", "StyleParser", "_defineProperty", "endsWith", "hyphenToCamelCase", "isConvertiblePixelValue", "isEmpty", "mapFrom", "propname", "repeatString", "require", "trimEnd"]
rebuilt        : ScopeId(0): ["HTMLDOMPropertyConfig", "HTMLtoJSX", "StyleParser", "_defineProperty", "endsWith", "hyphenToCamelCase", "isConvertiblePixelValue", "isEmpty", "mapFrom", "propname", "repeatString", "trimEnd"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "JSON"]
rebuilt        : ["Error", "JSON", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowUnionContainingTypeParameter1.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/controlFlowWithIncompleteTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["cond", "foo1", "foo2"]
rebuilt        : ScopeId(0): ["foo1", "foo2"]
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : <None>
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["cond"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/correctOrderOfPromiseMethod.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(11), ReferenceId(22)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/correlatedUnions.ts
Bindings mismatch:
after transform: ScopeId(0): ["ALL_BARS", "BAR_LOOKUP", "bar", "call", "clickEvent", "createEventListener", "data", "f1", "f2", "f3", "f4", "ff1", "foo", "func", "getConfigOrDefault", "getStringAndNumberFromOriginalAndMapped", "getValueConcrete", "handlers", "makeCompleteLookupMapping", "process", "processEvents", "processRecord", "r1", "r2", "ref", "renderField", "renderFuncs", "renderSelectField", "renderTextField", "scrollEvent", "xx"]
rebuilt        : ScopeId(0): ["ALL_BARS", "BAR_LOOKUP", "bar", "call", "clickEvent", "createEventListener", "data", "f1", "f2", "f3", "f4", "ff1", "foo", "func", "getConfigOrDefault", "getStringAndNumberFromOriginalAndMapped", "getValueConcrete", "handlers", "makeCompleteLookupMapping", "process", "processEvents", "processRecord", "ref", "renderField", "renderFuncs", "renderSelectField", "renderTextField", "scrollEvent"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(44), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(61), ScopeId(62), ScopeId(64), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(79), ScopeId(80), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92), ScopeId(93)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
Scope children mismatch:
after transform: ScopeId(53): [ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(58), ScopeId(59), ScopeId(60)]
rebuilt        : ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24)]
Symbol reference IDs mismatch for "BAR_LOOKUP":
after transform: SymbolId(139): [ReferenceId(232)]
rebuilt        : SymbolId(79): []
Reference symbol mismatch for "r1":
after transform: SymbolId(7) "r1"
rebuilt        : <None>
Reference symbol mismatch for "r2":
after transform: SymbolId(8) "r2"
rebuilt        : <None>
Reference symbol mismatch for "xx":
after transform: SymbolId(55) "xx"
rebuilt        : <None>
Reference symbol mismatch for "bar":
after transform: SymbolId(130) "bar"
rebuilt        : SymbolId(73) "bar"
Reference symbol mismatch for "makeCompleteLookupMapping":
after transform: SymbolId(132) "makeCompleteLookupMapping"
rebuilt        : SymbolId(75) "makeCompleteLookupMapping"
Unresolved references mismatch:
after transform: ["DocumentEventMap", "Partial", "ReadonlyArray", "Record", "Required", "console", "const", "document", "undefined"]
rebuilt        : ["console", "document", "r1", "r2", "undefined", "xx"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/covariance1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "XX":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/crashInGetTextOfComputedPropertyName.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/crashInResolveInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/curiousNestedConditionalEvaluationResult.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/customAsyncIterator.ts
Unresolved references mismatch:
after transform: ["AsyncIterator", "Error", "IteratorResult", "Promise", "require"]
rebuilt        : ["Error", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/customEventDetail.ts
Unresolved references mismatch:
after transform: ["CustomEvent"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cyclicGenericTypeInstantiation.ts
Symbol reference IDs mismatch for "z":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "z":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(5): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cyclicGenericTypeInstantiationInference.ts
Symbol reference IDs mismatch for "z":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "z":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(5): [ReferenceId(3)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(8): [ReferenceId(10)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cyclicModuleImport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/cyclicTypeInstantiation.ts
Symbol reference IDs mismatch for "x":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileAliasUseBeforeDeclaration2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileAmbientExternalModuleWithSingleExportedModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileConstructors.ts
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(7): [ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileEnumUsedAsValue.ts
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e"]
rebuilt        : ScopeId(1): ["e"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "e":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["a", "b", "c", "e2"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(3): ["e3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "d", "e", "e4"]
rebuilt        : ScopeId(4): ["e4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["Friday", "Saturday", "Sunday", "Weekend days", "e5"]
rebuilt        : ScopeId(5): ["e5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e3":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e4":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e5":
after transform: SymbolId(18): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileExportAssignmentImportInternalModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileExportAssignmentOfGenericInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Foo", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileExportImportChain.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(1): Span { start: 30, end: 32 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileExportImportChain2.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(1): Span { start: 30, end: 32 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileForClassWithMultipleBaseClasses.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileForClassWithPrivateOverloadedFunction.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileForFunctionTypeAsTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileForInterfaceWithOptionalFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileForInterfaceWithRestParams.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["x"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileFunctions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol span mismatch for "fooWithOverloads":
after transform: SymbolId(8): Span { start: 373, end: 389 }
rebuilt        : SymbolId(8): Span { start: 479, end: 495 }
Symbol redeclarations mismatch for "fooWithOverloads":
after transform: SymbolId(8): [Span { start: 373, end: 389 }, Span { start: 426, end: 442 }, Span { start: 479, end: 495 }]
rebuilt        : SymbolId(8): []
Symbol span mismatch for "fooWithSingleOverload":
after transform: SymbolId(12): Span { start: 544, end: 565 }
rebuilt        : SymbolId(10): Span { start: 602, end: 623 }
Symbol redeclarations mismatch for "fooWithSingleOverload":
after transform: SymbolId(12): [Span { start: 544, end: 565 }, Span { start: 602, end: 623 }]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileGenericClassWithGenericExtendedClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(7)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Baz":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileGenericType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(12), ScopeId(13)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(13), ReferenceId(14), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(60), ReferenceId(61)]
rebuilt        : SymbolId(0): [ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(16), ReferenceId(43)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(10), ReferenceId(17), ReferenceId(45)]
rebuilt        : SymbolId(3): [ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileGenericType2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "templa"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(15), ScopeId(19), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6)]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(24): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "dom":
after transform: SymbolId(16): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "dom":
after transform: SymbolId(16): Span { start: 643, end: 646 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "mvc":
after transform: SymbolId(17): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "mvc":
after transform: SymbolId(17): Span { start: 647, end: 650 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "dom":
after transform: SymbolId(20): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "dom":
after transform: SymbolId(20): Span { start: 913, end: 916 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol flags mismatch for "mvc":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "mvc":
after transform: SymbolId(21): Span { start: 917, end: 920 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "composite":
after transform: SymbolId(22): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "composite":
after transform: SymbolId(22): Span { start: 921, end: 930 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Reference symbol mismatch for "templa":
after transform: SymbolId(0) "templa"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["IElementController", "require"]
rebuilt        : ["require", "templa"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileImportChainInExportAssignment.ts
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "c":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "c":
after transform: SymbolId(1): Span { start: 29, end: 30 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileImportModuleWithExportAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 229, end: 322 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 229, end: 322 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileImportedTypeUseInTypeArgPosition.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileIndexSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileInternalAliases.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileMethods.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileModuleAssignmentInObjectLiteralProperty.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileModuleContinuation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(10), ReferenceId(11)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 54, end: 55 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "B":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(3): Span { start: 56, end: 57 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 58, end: 59 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileModuleWithPropertyOfTypeModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileOptionalInterfaceMethod.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFilePrivateMethodOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(4): []
Symbol flags mismatch for "c2":
after transform: SymbolId(12): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileRestParametersOfFunctionAndFunctionType.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationArrayType.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(14): [ScopeId(15)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(12), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]
Symbol flags mismatch for "m":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(1): Span { start: 19, end: 20 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(19), ReferenceId(20)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationStringLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTupleType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(7), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(11)]
Symbol flags mismatch for "m":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(1): Span { start: 19, end: 20 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(9), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(10)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeAlias.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "g":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "m":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(3): Span { start: 34, end: 35 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(10), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeQuery.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7)]
Symbol flags mismatch for "m":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(1): Span { start: 19, end: 20 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeReference.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7)]
Symbol flags mismatch for "m":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(1): Span { start: 19, end: 20 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationUnionType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(8), ScopeId(10), ScopeId(11)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(20)]
Symbol flags mismatch for "m":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(1): Span { start: 42, end: 43 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(10), ReferenceId(13), ReferenceId(19), ReferenceId(20)]
rebuilt        : SymbolId(2): [ReferenceId(8), ReferenceId(9), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(19)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(15), ReferenceId(18)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorAccessors.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(2): [ReferenceId(6), ReferenceId(7)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(22)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(9)]
Symbol flags mismatch for "m2":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(3): Span { start: 84, end: 86 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(3): [ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(25), ReferenceId(26)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorParameterOfFunction.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(11)]
Symbol flags mismatch for "m2":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(19): Span { start: 534, end: 536 }
rebuilt        : SymbolId(20): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(19): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(20): [ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorReturnTypeOfFunction.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(11)]
Symbol flags mismatch for "m2":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(11): Span { start: 613, end: 615 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(11): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(12): [ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorTypeAlias.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorTypeLiteral.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorVariableDeclaration.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeofClass.ts
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(6), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeofEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["days", "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"]
rebuilt        : ScopeId(1): ["days"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "days":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "days":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(18)]
rebuilt        : SymbolId(0): [ReferenceId(15), ReferenceId(16), ReferenceId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeofFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Symbol reference IDs mismatch for "f":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(8): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeofInAnonymousType.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["e", "holiday", "weekday", "weekend"]
rebuilt        : ScopeId(3): ["e"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19)]
Symbol flags mismatch for "e":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileTypeofModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithClassNameConflictingWithClassReferredByExtendsClause.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "_defineProperty"]
rebuilt        : ScopeId(0): ["X", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "X":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(4): Span { start: 82, end: 83 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "X":
after transform: SymbolId(4): [Span { start: 82, end: 83 }, Span { start: 172, end: 173 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Y":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(5): Span { start: 84, end: 85 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "base":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "base":
after transform: SymbolId(6): Span { start: 86, end: 90 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "Y":
after transform: SymbolId(8): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(8): Span { start: 174, end: 175 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "base":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "base":
after transform: SymbolId(9): Span { start: 176, end: 180 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol flags mismatch for "Z":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(10): Span { start: 181, end: 182 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["A", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithExtendsClauseThatHasItsContainerNameConflict.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_defineProperty"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol flags mismatch for "B":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(4): Span { start: 55, end: 56 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(6): Span { start: 130, end: 131 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(7): Span { start: 132, end: 133 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["EventManager", "require"]
rebuilt        : ["A", "EventManager", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "W", "_C"]
rebuilt        : ScopeId(4): ["W", "_C"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(14), ReferenceId(15)]
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 55, end: 56 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "A":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(4): Span { start: 57, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(5): Span { start: 59, end: 60 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(6): Span { start: 61, end: 62 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 55, end: 56 }, Span { start: 152, end: 153 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "A":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(4): Span { start: 57, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(4): [ReferenceId(0), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11)]
Symbol flags mismatch for "B":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(5): Span { start: 59, end: 60 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(6): Span { start: 61, end: 62 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(14), ReferenceId(15)]
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 55, end: 56 }, Span { start: 179, end: 180 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "A":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(4): Span { start: 57, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(5): Span { start: 59, end: 60 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(6): Span { start: 61, end: 62 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declInput-2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(3): [ReferenceId(10)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(5), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declInput.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "bar":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "bar":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 26, end: 29 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 26, end: 29 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declInput3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declInput4.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2), ReferenceId(6)]
rebuilt        : SymbolId(4): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationAssertionNodeNotReusedWhenTypeNotEquivalent1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(10), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "objWrapper":
after transform: SymbolId(3) "objWrapper"
rebuilt        : SymbolId(1) "objWrapper"
Reference symbol mismatch for "stringWrapper":
after transform: SymbolId(2) "stringWrapper"
rebuilt        : SymbolId(0) "stringWrapper"
Reference symbol mismatch for "unwrap":
after transform: SymbolId(10) "unwrap"
rebuilt        : SymbolId(4) "unwrap"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasExportStar.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasFromIndirectFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["FlatpickrFn", "fp"]
rebuilt        : ScopeId(0): ["fp"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasInlineing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitArrayTypesFromGenericArrayUsage.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitArrowFunctionNoRenaming.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitBindingPatternWithReservedWord.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Partial", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitBindingPatternsFunctionExpr.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "value":
after transform: SymbolId(12): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(11): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitBundlePreservesHasNoDefaultLibDirective.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitBundleWithAmbientReferences.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberNameConflict.ts
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberNameConflict2.ts
Bindings mismatch:
after transform: ScopeId(1): ["Hello", "World"]
rebuilt        : ScopeId(1): ["Hello"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["Hello1", "World1"]
rebuilt        : ScopeId(2): ["Hello1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Hello":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "Hello1":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberWithComputedPropertyName.ts
Unresolved references mismatch:
after transform: ["Symbol", "const"]
rebuilt        : ["Symbol"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMixinLocalClassDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(10): [ReferenceId(11), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassPrivateConstructor.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassPrivateConstructor2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedNameCausesImportToBePainted.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "Key":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedNameConstEnumAlias.ts
Bindings mismatch:
after transform: ScopeId(1): ["EnumExample", "TEST"]
rebuilt        : ScopeId(1): ["EnumExample"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "EnumExample":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedNameWithQuestionToken.ts
Bindings mismatch:
after transform: ScopeId(0): ["WithData", "a", "dataSomething", "something"]
rebuilt        : ScopeId(0): ["WithData", "a", "dataSomething"]
Reference symbol mismatch for "something":
after transform: SymbolId(0) "something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : ["something"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyName1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "create":
after transform: SymbolId(0) "create"
rebuilt        : SymbolId(0) "create"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameEnum1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Enum"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitCrossFileCopiedGeneratedImportType.ts
Unresolved references mismatch:
after transform: ["Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringArrayPattern3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringOptionalBindingParametersInOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringPrivacyError.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDistributiveConditionalWithInfer.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["FlatArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitDoesNotUseReexportedNamespaceAsLocal.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "add":
after transform: SymbolId(1) "add"
rebuilt        : SymbolId(1) "add"
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitEnumReadonlyProperty.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitEnumReferenceViaImportEquals.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Translation"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["_Translation"]
rebuilt        : ScopeId(1): ["TranslationKeyEnum", "_Translation"]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Translation":
after transform: SymbolId(0): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Translation":
after transform: SymbolId(0): Span { start: 17, end: 28 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Translation":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2)]
Symbol redeclarations mismatch for "Translation":
after transform: SymbolId(0): [Span { start: 17, end: 28 }, Span { start: 101, end: 112 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): Span { start: 129, end: 147 }
rebuilt        : SymbolId(2): Span { start: 198, end: 216 }
Symbol reference IDs mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol redeclarations mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): [Span { start: 129, end: 147 }, Span { start: 198, end: 216 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExactOptionalPropertyTypesNodeNotReused.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpandoWithGenericConstraint.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Point", "Rect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(0): Span { start: 17, end: 22 }
rebuilt        : SymbolId(0): Span { start: 171, end: 176 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(6), ReferenceId(13), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 17, end: 22 }, Span { start: 171, end: 176 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Rect":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Rect":
after transform: SymbolId(1): Span { start: 93, end: 97 }
rebuilt        : SymbolId(3): Span { start: 237, end: 241 }
Symbol reference IDs mismatch for "Rect":
after transform: SymbolId(1): [ReferenceId(9)]
rebuilt        : SymbolId(3): []
Symbol redeclarations mismatch for "Rect":
after transform: SymbolId(1): [Span { start: 93, end: 97 }, Span { start: 237, end: 241 }]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAliasVisibiilityMarking.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAssignedNamespaceNoTripleSlashTypesReference.ts
Bindings mismatch:
after transform: ScopeId(0): ["Component", "getComp"]
rebuilt        : ScopeId(0): ["getComp"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Q":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends5.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Test":
after transform: SymbolId(0): Span { start: 10, end: 14 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitFirstTypeArgumentGenericFunctionType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(5): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Y":
after transform: SymbolId(12): [ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(19)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitForDefaultExportClassExtendingExpression01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitForGlobalishSpecifierSymlink.ts
Bindings mismatch:
after transform: ScopeId(0): ["_whatever", "a", "getA"]
rebuilt        : ScopeId(0): ["a", "getA"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitForGlobalishSpecifierSymlink2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_whatever", "a", "getA"]
rebuilt        : ScopeId(0): ["a", "getA"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitForModuleImportingModuleAugmentationRetainsImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["ParentThing", "child1"]
rebuilt        : ScopeId(0): ["child1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitForTypesWhichNeedImportTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitFunctionDuplicateNamespace.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitGenericTypeParamerSerialization2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitGenericTypeParamerSerialization3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitGlobalThisPreserved.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(37), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(49), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(37), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(46)]
Symbol reference IDs mismatch for "a4":
after transform: SymbolId(8): [ReferenceId(28)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "aObj":
after transform: SymbolId(10): [ReferenceId(31)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "b4":
after transform: SymbolId(27): [ReferenceId(52)]
rebuilt        : SymbolId(26): []
Symbol reference IDs mismatch for "bObj":
after transform: SymbolId(29): [ReferenceId(55)]
rebuilt        : SymbolId(28): []
Symbol reference IDs mismatch for "c4":
after transform: SymbolId(46): [ReferenceId(76)]
rebuilt        : SymbolId(43): []
Symbol reference IDs mismatch for "cObj":
after transform: SymbolId(48): [ReferenceId(79)]
rebuilt        : SymbolId(45): []
Symbol reference IDs mismatch for "d4":
after transform: SymbolId(68): [ReferenceId(101)]
rebuilt        : SymbolId(63): []
Unresolved references mismatch:
after transform: ["ReturnType", "globalThis"]
rebuilt        : ["globalThis"]
Unresolved reference IDs mismatch for "globalThis":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(25), ReferenceId(32), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(47), ReferenceId(49), ReferenceId(56), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(64), ReferenceId(65), ReferenceId(67), ReferenceId(68), ReferenceId(71), ReferenceId(73), ReferenceId(80), ReferenceId(81), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(90), ReferenceId(91), ReferenceId(94), ReferenceId(95), ReferenceId(102), ReferenceId(104), ReferenceId(105), ReferenceId(108), ReferenceId(110), ReferenceId(111), ReferenceId(113), ReferenceId(114), ReferenceId(116), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(122)]
rebuilt        : [ReferenceId(6), ReferenceId(13), ReferenceId(20), ReferenceId(27), ReferenceId(34), ReferenceId(41), ReferenceId(51), ReferenceId(59)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitHasTypesRefOnNamespaceUse.ts
Unresolved references mismatch:
after transform: ["NS"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitHigherOrderRetainedGenerics.ts
Bindings mismatch:
after transform: ScopeId(0): ["SK", "Types", "URI", "dual", "zipRight", "zipWith"]
rebuilt        : ScopeId(0): ["SK", "zipRight", "zipWith"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(9), ScopeId(10), ScopeId(16), ScopeId(20), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(32): []
rebuilt        : ScopeId(2): ["F"]
Scope children mismatch:
after transform: ScopeId(32): [ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(36): [ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(39): []
rebuilt        : ScopeId(5): ["F"]
Scope children mismatch:
after transform: ScopeId(39): [ScopeId(40), ScopeId(41)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol flags mismatch for "F":
after transform: SymbolId(62): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "F":
after transform: SymbolId(62): Span { start: 2588, end: 2589 }
rebuilt        : SymbolId(4): Span { start: 2610, end: 2631 }
Symbol reference IDs mismatch for "F":
after transform: SymbolId(62): [ReferenceId(159), ReferenceId(161), ReferenceId(170), ReferenceId(176), ReferenceId(185), ReferenceId(191), ReferenceId(200), ReferenceId(210), ReferenceId(216), ReferenceId(225), ReferenceId(233), ReferenceId(234)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(62): [Span { start: 2588, end: 2589 }, Span { start: 2610, end: 2631 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "F":
after transform: SymbolId(90): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "F":
after transform: SymbolId(90): Span { start: 3332, end: 3333 }
rebuilt        : SymbolId(11): Span { start: 3354, end: 3375 }
Symbol reference IDs mismatch for "F":
after transform: SymbolId(90): [ReferenceId(242), ReferenceId(244), ReferenceId(250), ReferenceId(256), ReferenceId(265), ReferenceId(271), ReferenceId(277), ReferenceId(287), ReferenceId(293), ReferenceId(299), ReferenceId(308)]
rebuilt        : SymbolId(11): [ReferenceId(11)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(90): [Span { start: 3332, end: 3333 }, Span { start: 3354, end: 3375 }]
rebuilt        : SymbolId(11): []
Reference symbol mismatch for "dual":
after transform: SymbolId(58) "dual"
rebuilt        : <None>
Reference symbol mismatch for "dual":
after transform: SymbolId(58) "dual"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "IArguments", "Iterable", "Parameters"]
rebuilt        : ["dual"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitImportInExportAssignmentModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias4.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitInlinedDistributiveConditional.ts
Bindings mismatch:
after transform: ScopeId(0): ["excludePrivateKeys1", "excludePrivateKeys2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitKeywordDestructuring.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitLocalClassDeclarationMixin.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(13)]
rebuilt        : ScopeId(7): [ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitLocalClassHasRequiredDeclare.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 25, end: 26 }
rebuilt        : SymbolId(2): Span { start: 78, end: 79 }
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 25, end: 26 }, Span { start: 78, end: 79 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "Y":
after transform: SymbolId(3): SymbolFlags(Class | NamespaceModule | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "Y":
after transform: SymbolId(3): Span { start: 128, end: 129 }
rebuilt        : SymbolId(3): Span { start: 149, end: 150 }
Symbol redeclarations mismatch for "Y":
after transform: SymbolId(3): [Span { start: 128, end: 129 }, Span { start: 149, end: 150 }]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypeDistributivityPreservesConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Parameters", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypePreservesTypeParameterConstraint.ts
Bindings mismatch:
after transform: ScopeId(0): ["ZodLiteral", "ZodType", "_defineProperty", "buildSchema"]
rebuilt        : ScopeId(0): ["ZodLiteral", "ZodType", "_defineProperty", "buildSchema", "entriesOf"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(22): []
rebuilt        : ScopeId(5): ["o"]
Symbol flags mismatch for "ZodType":
after transform: SymbolId(11): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "ZodType":
after transform: SymbolId(11): [ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol flags mismatch for "ZodLiteral":
after transform: SymbolId(13): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "ZodLiteral":
after transform: SymbolId(13): [ReferenceId(35)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "entriesOf":
after transform: SymbolId(31): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "entriesOf":
after transform: SymbolId(31): Span { start: 1339, end: 1348 }
rebuilt        : SymbolId(5): Span { start: 1406, end: 1415 }
Symbol reference IDs mismatch for "entriesOf":
after transform: SymbolId(31): [ReferenceId(54)]
rebuilt        : SymbolId(5): []
Symbol redeclarations mismatch for "entriesOf":
after transform: SymbolId(31): [Span { start: 1339, end: 1348 }, Span { start: 1406, end: 1415 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "o":
after transform: SymbolId(33): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "o":
after transform: SymbolId(33): Span { start: 1419, end: 1420 }
rebuilt        : SymbolId(6): Span { start: 1437, end: 1441 }
Symbol reference IDs mismatch for "o":
after transform: SymbolId(33): [ReferenceId(51), ReferenceId(53), ReferenceId(55)]
rebuilt        : SymbolId(6): [ReferenceId(3)]
Symbol redeclarations mismatch for "o":
after transform: SymbolId(33): [Span { start: 1419, end: 1420 }, Span { start: 1437, end: 1441 }]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["Object", "Partial", "Pick", "Required"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypePropertyFromNumericStringKey.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMergedAliasWithConst.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Color"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol reference IDs mismatch for "Color":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "Color":
after transform: SymbolId(0): [Span { start: 13, end: 18 }, Span { start: 100, end: 105 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitModuleWithScopeMarker.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMonorepoBaseUrl.ts
Bindings mismatch:
after transform: ScopeId(0): ["PluginConfig"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitMultipleComputedNamesSameDomain.ts
Bindings mismatch:
after transform: ScopeId(0): ["Test", "_defineProperty", "x", "y"]
rebuilt        : ScopeId(0): ["Test", "_defineProperty"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts.ts
Symbol flags mismatch for "f":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "f":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflictsWithAlias.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNamespaceMergedWithInterfaceNestedFunction.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Bar":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Bar":
after transform: SymbolId(1): Span { start: 51, end: 54 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(1): [Span { start: 51, end: 54 }, Span { start: 87, end: 90 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNestedAnonymousMappedType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNestedGenerics.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "p":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNoInvalidCommentReuse3.ts
Bindings mismatch:
after transform: ScopeId(0): ["_", "id", "object"]
rebuilt        : ScopeId(0): ["_", "object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNoNonRequiredParens.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Test"]
rebuilt        : ScopeId(1): ["Test"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitNonExportedBindingPattern.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "renamed":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "c":
after transform: SymbolId(6): [ReferenceId(5)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOfFuncspace.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "ExpandoMerge":
after transform: SymbolId(0): SymbolFlags(Function | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol redeclarations mismatch for "ExpandoMerge":
after transform: SymbolId(0): [Span { start: 19, end: 31 }, Span { start: 71, end: 83 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMappedTypePropertyNoStrictNullChecks1.ts
Bindings mismatch:
after transform: ScopeId(0): ["createApi"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMappedTypePropertyNoStrictNullChecks2.ts
Bindings mismatch:
after transform: ScopeId(0): ["createApi"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMappedTypePropertyNoStrictNullChecks3.ts
Bindings mismatch:
after transform: ScopeId(0): ["createApi"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMappedTypePropertyNoStrictNullChecks4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMethod.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitOverloadedPrivateInference.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialNodeReuseTypeOf.ts
Symbol reference IDs mismatch for "nImported":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "nNotImported":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "nPrivate":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialNodeReuseTypeReferences.ts
Bindings mismatch:
after transform: ScopeId(0): ["N", "o"]
rebuilt        : ScopeId(0): ["o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialReuseComputedProperty.ts
Symbol reference IDs mismatch for "n":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "poz":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "neg":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPathMappingMonorepo2.ts
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrefersPathKindBasedOnBundling.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrefersPathKindBasedOnBundling2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPreserveReferencedImports.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPreservesHasNoDefaultLibDirective.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrivateNameCausesError.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPromise.ts
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(6): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(11): []
Symbol reference IDs mismatch for "bluebird":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(60)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(6), ReferenceId(23)]
Symbol reference IDs mismatch for "func":
after transform: SymbolId(15): [ReferenceId(28), ReferenceId(29)]
rebuilt        : SymbolId(17): [ReferenceId(15)]
Symbol reference IDs mismatch for "func":
after transform: SymbolId(32): [ReferenceId(57), ReferenceId(58)]
rebuilt        : SymbolId(34): [ReferenceId(32)]
Unresolved references mismatch:
after transform: ["Array", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitPropertyNumericStringKey.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitQualifiedAliasTypeArgument.ts
Bindings mismatch:
after transform: ScopeId(0): ["Q", "T", "create", "fun", "fun2"]
rebuilt        : ScopeId(0): ["create", "fun", "fun2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitRecursiveConditionalAliasPreserved.ts
Bindings mismatch:
after transform: ScopeId(0): ["Power", "power"]
rebuilt        : ScopeId(0): ["power"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitRedundantTripleSlashModuleAugmentation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitResolveTypesIfNotReusable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "u":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitRetainedAnnotationRetainsImportInOutput.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitRetainsJsdocyComments.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitReusesLambdaParameterNodes.ts
Unresolved references mismatch:
after transform: ["Omit", "Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitScopeConsistency.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitScopeConsistency3.ts
Symbol reference IDs mismatch for "v":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitShadowing.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(4): [ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitShadowingInferNotRenamed.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitSpreadStringlyKeyedEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["0-17", "18-22", "23-27", "28-34", "35-44", "45-59", "60-150", "AgeGroups"]
rebuilt        : ScopeId(1): ["AgeGroups"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AgeGroups":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitStringEnumUsedInNonlocalSpread.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["Test1", "Test2", "TestEnum"]
rebuilt        : ScopeId(1): ["TestEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TestEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "TestEnum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitSymlinkPaths.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitToDeclarationDirWithCompositeOption.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitToDeclarationDirWithDeclarationOption.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTopLevelNodeFromCrossFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameInOuterScope.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameReusedInOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(11)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(8)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameShadowedInternally.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeofRest.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUnnessesaryTypeReferenceNotAdded.ts
Symbol reference IDs mismatch for "minimist":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingAlternativeContainingModules1.ts
Unresolved references mismatch:
after transform: ["Error", "Promise", "Readonly", "ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingAlternativeContainingModules2.ts
Unresolved references mismatch:
after transform: ["Error", "Promise", "Readonly", "ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingTypeAlias2.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "goodDeclaration", "shouldBeElided", "shouldReuseLocalName"]
rebuilt        : ScopeId(0): ["bar", "goodDeclaration"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithComposite.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithDefaultAsComputedName.ts
Bindings mismatch:
after transform: ScopeId(0): ["createExperiment"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "createExperiment":
after transform: SymbolId(2) "createExperiment"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["createExperiment"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithDefaultAsComputedName2.ts
Bindings mismatch:
after transform: ScopeId(0): ["createExperiment"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "createExperiment":
after transform: SymbolId(2) "createExperiment"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["createExperiment"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithInvalidPackageJsonTypings.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFilesGeneratingTypeReferences.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences1.ts
Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences2.ts
Unresolved references mismatch:
after transform: ["Error2", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences3.ts
Unresolved references mismatch:
after transform: ["Error2", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences4.ts
Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationFunctionTypeNonlocalShouldNotBeAnError.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationImportTypeAliasInferredAndEmittable.ts
Bindings mismatch:
after transform: ScopeId(0): ["Wrap", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["Wrap", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationMaps.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 230, end: 323 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 230, end: 323 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationMerging1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationMerging2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationQuotedMembers.ts
Bindings mismatch:
after transform: ScopeId(0): ["example", "mapped"]
rebuilt        : ScopeId(0): ["example"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "mapped":
after transform: SymbolId(0) "mapped"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["mapped"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationTypecheckNoUseBeforeReferenceCheck.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationsForFileShadowingGlobalNoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Node"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationsForIndirectTypeAliasReference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declarationsWithRecursiveInternalTypesProduceUniqueTypeParams.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(6): []
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(16), ReferenceId(34), ReferenceId(51), ReferenceId(54)]
rebuilt        : [ReferenceId(0), ReferenceId(6), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareDottedExtend.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "D", "E", "ab"]
rebuilt        : ScopeId(0): ["D", "E", "ab"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareDottedModuleName.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "T"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareExternalModuleWithExportAssignedFundule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareFileExportAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 230, end: 323 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 230, end: 323 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareFileExportAssignmentWithVarFromVariableStatement.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(1): Span { start: 238, end: 331 }
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 238, end: 331 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declareModifierOnTypeAlias.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declaredExternalModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/declaredExternalModuleWithExportAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataConditionalType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Reference symbol mismatch for "d":
after transform: SymbolId(0) "d"
rebuilt        : SymbolId(3) "d"
Reference symbol mismatch for "d":
after transform: SymbolId(0) "d"
rebuilt        : SymbolId(3) "d"
Unresolved references mismatch:
after transform: ["Boolean", "Object", "PropertyDecorator", "require"]
rebuilt        : ["Boolean", "Object", "require"]
Unresolved reference IDs mismatch for "Boolean":
after transform: [ReferenceId(11), ReferenceId(12)]
rebuilt        : [ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataElidedImport.ts
Symbol reference IDs mismatch for "Observable":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(12), ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataElidedImportOnDeclare.ts
Symbol reference IDs mismatch for "Observable":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataForMethodWithNoReturnTypeAnnotation01.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "_decorate", "_decorateMetadata", "decorator"]
rebuilt        : ScopeId(0): ["MyClass", "_decorate", "_decorateMetadata"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataNoStrictNull.ts
Unresolved reference IDs mismatch for "String":
after transform: [ReferenceId(5), ReferenceId(10)]
rebuilt        : [ReferenceId(14)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataOnInferredType.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_decorate", "_decorateMetadata", "_defineProperty", "console", "decorator"]
rebuilt        : ScopeId(0): ["A", "B", "_decorate", "_decorateMetadata", "_defineProperty", "decorator"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "console"]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(1), ReferenceId(5)]
rebuilt        : [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataPromise.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_asyncToGenerator", "_decorate", "_decorateMetadata", "_ref", "_ref2", "decorator"]
rebuilt        : ScopeId(0): ["A", "_asyncToGenerator", "_decorate", "_decorateMetadata", "_ref", "_ref2"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference flags mismatch for "Promise":
after transform: ReferenceId(26): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(28): ReferenceFlags(Read)
Reference flags mismatch for "Promise":
after transform: ReferenceId(27): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(29): ReferenceFlags(Read)
Reference flags mismatch for "Promise":
after transform: ReferenceId(32): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(34): ReferenceFlags(Read)
Reference flags mismatch for "Promise":
after transform: ReferenceId(33): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(35): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["Function", "MethodDecorator", "Object", "Promise", "require"]
rebuilt        : ["Function", "Object", "Promise", "decorator", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(11), ReferenceId(19), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33)]
rebuilt        : [ReferenceId(12), ReferenceId(20), ReferenceId(28), ReferenceId(29), ReferenceId(34), ReferenceId(35)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataRestParameterWithImportedType.ts
Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "SomeClass1", "_decorate", "_decorateMetadata", "_defineProperty", "annotation", "annotation1"]
rebuilt        : ScopeId(0): ["ClassA", "_decorate", "_decorateMetadata", "_defineProperty", "annotation", "annotation1"]
Symbol span mismatch for "ClassA":
after transform: SymbolId(6): Span { start: 266, end: 272 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "ClassA":
after transform: SymbolId(12): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 266, end: 272 }
Unresolved references mismatch:
after transform: ["Array", "ClassDecorator", "Function", "MethodDecorator"]
rebuilt        : ["Array", "Function"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataTypeOnlyExport.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithConstructorType.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_decorate", "_decorateMetadata", "_defineProperty", "_ref", "console", "decorator"]
rebuilt        : ScopeId(0): ["A", "B", "_decorate", "_decorateMetadata", "_defineProperty", "_ref", "decorator"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(7), ReferenceId(8)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "console"]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(1), ReferenceId(10)]
rebuilt        : [ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision.ts
Symbol reference IDs mismatch for "db":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(8), ReferenceId(9)]
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 100, end: 107 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 100, end: 107 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision2.ts
Symbol reference IDs mismatch for "Database":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(8), ReferenceId(9)]
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 112, end: 119 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 112, end: 119 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision3.ts
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 104, end: 111 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 104, end: 111 }
Reference symbol mismatch for "db":
after transform: SymbolId(0) "db"
rebuilt        : <None>
Reference symbol mismatch for "db":
after transform: SymbolId(0) "db"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "db"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision5.ts
Symbol reference IDs mismatch for "db":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(8), ReferenceId(9)]
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 98, end: 105 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 98, end: 105 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision6.ts
Symbol reference IDs mismatch for "database":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(8), ReferenceId(9)]
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 104, end: 111 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 104, end: 111 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision8.ts
Symbol span mismatch for "MyClass":
after transform: SymbolId(3): Span { start: 110, end: 117 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol span mismatch for "MyClass":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 110, end: 117 }
Reference symbol mismatch for "database":
after transform: SymbolId(0) "database"
rebuilt        : <None>
Reference symbol mismatch for "database":
after transform: SymbolId(0) "database"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "database"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorReferenceOnOtherProperty.ts
Symbol reference IDs mismatch for "Yoha":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(8), ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorReferences.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 198, end: 199 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(10): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 198, end: 199 }
Symbol reference IDs mismatch for "y":
after transform: SymbolId(6): [ReferenceId(5)]
rebuilt        : SymbolId(8): []
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : SymbolId(3) "y"
Reference symbol mismatch for "y":
after transform: SymbolId(6) "y"
rebuilt        : SymbolId(3) "y"
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : SymbolId(3) "y"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/decoratorWithUnderscoreMethod.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_decorate", "_decorateMetadata", "console", "dec"]
rebuilt        : ScopeId(0): ["A", "_decorate", "_decorateMetadata", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "PropertyDescriptor", "String", "require"]
rebuilt        : ["Function", "String", "console", "require"]
Unresolved reference IDs mismatch for "Function":
after transform: [ReferenceId(0), ReferenceId(6)]
rebuilt        : [ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedConditionalTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(102), ScopeId(103)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["ArrayLike", "Extract", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deeplyNestedTemplateLiteralIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitDefaultImport.ts
Symbol reference IDs mismatch for "Something":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitNamedCorrectly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitShadowedNamedCorrectly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Something":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Something":
after transform: SymbolId(10): Span { start: 294, end: 303 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType1.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 5, end: 8 }
rebuilt        : SymbolId(0): Span { start: 32, end: 35 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 5, end: 8 }, Span { start: 32, end: 35 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType2.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 5, end: 8 }
rebuilt        : SymbolId(0): Span { start: 25, end: 28 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 5, end: 8 }, Span { start: 25, end: 28 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType3.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 30, end: 33 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 30, end: 33 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType4.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 23, end: 26 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 23, end: 26 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/defaultParameterAddsUndefinedWithStrictNullChecks.ts
Bindings mismatch:
after transform: ScopeId(0): ["allowsNull", "cond", "f", "foo1", "foo2", "foo3", "foo4", "g", "removeNothing", "removeUndefinedButNotFalse", "total"]
rebuilt        : ScopeId(0): ["allowsNull", "f", "foo1", "foo2", "foo3", "foo4", "g", "removeNothing", "removeUndefinedButNotFalse", "total"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
Reference symbol mismatch for "cond":
after transform: SymbolId(24) "cond"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["cond", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deferredConditionalTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(39), ScopeId(42)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deferredConditionalTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deferredLookupTypeResolution.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(11), SymbolId(17), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f1":
after transform: SymbolId(11) "f1"
rebuilt        : SymbolId(0) "f1"
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deferredLookupTypeResolution2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deferredTypeReferenceWithinArrayWithinTuple.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/definiteAssignmentOfDestructuredVariable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deleteExpressionMustBeOptional.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "f"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(5) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(5) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(6) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(6) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "f"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/deleteExpressionMustBeOptional_exactOptionalPropertyTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "f", "g"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(6) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(6) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(7) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(7) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["a", "b", "f", "g"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructureOfVariableSameAsShorthand.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(5), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(1) "get"
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(1) "get"
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(1) "get"
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(1) "get"
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(1) "get"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructureOptionalParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["ParameterDecorator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructuredMaappedTypeIsNotImplicitlyAny.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructuringInitializerContextualTypeFromContext.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7), SymbolId(11), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(9), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "f":
after transform: SymbolId(11) "f"
rebuilt        : SymbolId(14) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructuringTypeGuardFlow.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructuringWithConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/destructuringWithGenericParameter.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "GenericClass":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/detachedCommentAtStartOfLambdaFunction1.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/detachedCommentAtStartOfLambdaFunction2.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminableUnionWithIntersectedMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantElementAccessCheck.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantNarrowingCouldBeCircular.ts
Bindings mismatch:
after transform: ScopeId(0): ["getImplicitAriaRole", "is", "isPlainObject2", "kPresentationInheritanceParents", "myObj2", "o", "parentElementOrShadowHost"]
rebuilt        : ScopeId(0): ["getImplicitAriaRole", "is", "isPlainObject2", "o", "parentElementOrShadowHost"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
Reference symbol mismatch for "is":
after transform: SymbolId(0) "is"
rebuilt        : SymbolId(0) "is"
Reference symbol mismatch for "parentElementOrShadowHost":
after transform: SymbolId(8) "parentElementOrShadowHost"
rebuilt        : SymbolId(5) "parentElementOrShadowHost"
Reference symbol mismatch for "kPresentationInheritanceParents":
after transform: SymbolId(7) "kPresentationInheritanceParents"
rebuilt        : <None>
Reference symbol mismatch for "isPlainObject2":
after transform: SymbolId(15) "isPlainObject2"
rebuilt        : SymbolId(12) "isPlainObject2"
Reference symbol mismatch for "myObj2":
after transform: SymbolId(18) "myObj2"
rebuilt        : <None>
Reference symbol mismatch for "myObj2":
after transform: SymbolId(18) "myObj2"
rebuilt        : <None>
Reference symbol mismatch for "isPlainObject2":
after transform: SymbolId(15) "isPlainObject2"
rebuilt        : SymbolId(12) "isPlainObject2"
Unresolved references mismatch:
after transform: ["Object", "PropertyKey", "Record"]
rebuilt        : ["Object", "kPresentationInheritanceParents", "myObj2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantPropertyCheck.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(26), SymbolId(28), SymbolId(34), SymbolId(40), SymbolId(42), SymbolId(44), SymbolId(46), SymbolId(52), SymbolId(57), SymbolId(59), SymbolId(62), SymbolId(69)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(23), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36), SymbolId(39), SymbolId(42)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(57), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(33), ScopeId(34), ScopeId(36), ScopeId(39)]
Bindings mismatch:
after transform: ScopeId(21): ["Num", "Str", "Types"]
rebuilt        : ScopeId(17): ["Types"]
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode)
rebuilt        : ScopeId(17): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(44): ["BarEnum", "bar1", "bar2"]
rebuilt        : ScopeId(29): ["BarEnum"]
Scope flags mismatch:
after transform: ScopeId(44): ScopeFlags(StrictMode)
rebuilt        : ScopeId(29): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Types":
after transform: SymbolId(20): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(16): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Types":
after transform: SymbolId(20): [ReferenceId(46), ReferenceId(47), ReferenceId(50), ReferenceId(52), ReferenceId(119)]
rebuilt        : SymbolId(16): [ReferenceId(37), ReferenceId(39), ReferenceId(41)]
Symbol flags mismatch for "BarEnum":
after transform: SymbolId(46): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(30): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "BarEnum":
after transform: SymbolId(46): [ReferenceId(78), ReferenceId(79), ReferenceId(85), ReferenceId(86), ReferenceId(125)]
rebuilt        : SymbolId(30): [ReferenceId(62), ReferenceId(66), ReferenceId(67)]
Reference symbol mismatch for "never":
after transform: SymbolId(44) "never"
rebuilt        : SymbolId(28) "never"
Reference symbol mismatch for "isType":
after transform: SymbolId(57) "isType"
rebuilt        : SymbolId(34) "isType"
Unresolved references mismatch:
after transform: ["Partial", "Record", "console", "undefined"]
rebuilt        : ["console", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantPropertyInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "f":
after transform: SymbolId(3) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(3) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(3) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(3) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantUsingEvaluatableTemplateExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantsAndNullOrUndefined.ts
Bindings mismatch:
after transform: ScopeId(0): ["c", "never", "useA", "useB"]
rebuilt        : ScopeId(0): ["never", "useA", "useB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["Error", "c", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantsAndPrimitives.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15)]
Bindings mismatch:
after transform: ScopeId(15): ["Disjunction", "EnumTypeNode", "Pattern"]
rebuilt        : ScopeId(13): ["EnumTypeNode"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Symbol flags mismatch for "EnumTypeNode":
after transform: SymbolId(10): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "EnumTypeNode":
after transform: SymbolId(10): [ReferenceId(26), ReferenceId(28), ReferenceId(36)]
rebuilt        : SymbolId(8): [ReferenceId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminantsAndTypePredicates.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateObjectTypesOnly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithDivergentAccessors1.ts
Bindings mismatch:
after transform: ScopeId(0): ["weirdoBox", "weirdoBox2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "weirdoBox":
after transform: SymbolId(2) "weirdoBox"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox":
after transform: SymbolId(2) "weirdoBox"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox2":
after transform: SymbolId(5) "weirdoBox2"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox2":
after transform: SymbolId(5) "weirdoBox2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["weirdoBox", "weirdoBox2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithMissingProperty.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved reference IDs mismatch for "Uint8Array":
after transform: [ReferenceId(0), ReferenceId(3)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty1.ts
Bindings mismatch:
after transform: ScopeId(0): ["box"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : <None>
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["box"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(24), ScopeId(25)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(17), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(20), ScopeId(21)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "AsyncIterable", "IteratorResult", "Promise", "Symbol", "arguments", "require", "undefined"]
rebuilt        : ["Promise", "Symbol", "arguments", "require", "undefined"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(20), ReferenceId(34), ReferenceId(54)]
rebuilt        : [ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(6), SymbolId(8), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "GraphQLError":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "GraphQLError":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "getVariableValues":
after transform: SymbolId(6) "getVariableValues"
rebuilt        : SymbolId(3) "getVariableValues"
Unresolved references mismatch:
after transform: ["Error", "ReadonlyArray"]
rebuilt        : ["Error"]
Unresolved reference IDs mismatch for "Error":
after transform: [ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminatedUnionJsxElement.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(4): ["Avatar", "ListItemVariant", "OneLine"]
rebuilt        : ScopeId(2): ["ListItemVariant"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "ListItemVariant":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "ListItemVariant":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(12), ReferenceId(24)]
rebuilt        : SymbolId(6): [ReferenceId(5), ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminatedUnionWithIndexSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/discriminatingUnionWithUnionPropertyAgainstUndefinedWithoutStrictNullChecks.ts
Bindings mismatch:
after transform: ScopeId(0): ["opts", "testMethod"]
rebuilt        : ScopeId(0): ["testMethod"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "opts":
after transform: SymbolId(2) "opts"
rebuilt        : <None>
Reference symbol mismatch for "opts":
after transform: SymbolId(2) "opts"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["opts"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/distributiveConditionalTypeNeverIntersection1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessors1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes3.ts
Bindings mismatch:
after transform: ScopeId(0): ["One", "Two", "_defineProperty", "u1"]
rebuilt        : ScopeId(0): ["One", "Two", "_defineProperty"]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(4): [ReferenceId(1)]
rebuilt        : SymbolId(5): []
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["require", "u1"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes7.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/divideAndConquerIntersections.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "EventHub":
after transform: SymbolId(30): [ReferenceId(80), ReferenceId(92), ReferenceId(99)]
rebuilt        : SymbolId(3): [ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Array", "Exclude", "Omit", "Partial", "Promise", "Record", "console"]
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doNotEmitPinnedCommentOnNotEmittedNode.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "OData", "x"]
rebuilt        : ScopeId(0): ["C", "x"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doNotEmitPinnedCommentOnNotEmittedNodets.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "OData"]
rebuilt        : ScopeId(0): ["C"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doNotEmitTripleSlashCommentsOnNotEmittedNode.ts
Bindings mismatch:
after transform: ScopeId(0): ["OData"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doNotInferUnrelatedTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["alt", "dearray", "foo"]
rebuilt        : ScopeId(0): ["dearray", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "dearray":
after transform: SymbolId(0) "dearray"
rebuilt        : SymbolId(0) "dearray"
Reference symbol mismatch for "alt":
after transform: SymbolId(4) "alt"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray"]
rebuilt        : ["alt"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doNotWidenAtObjectLiteralPropertyAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/dottedModuleName2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/dottedNamesInSystem.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 17, end: 18 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 19, end: 20 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 21, end: 22 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/dottedSymbolResolution1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(5): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doubleMixinConditionalTypeBaseClassWorks.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
Symbol reference IDs mismatch for "Mixin1":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(10)]
rebuilt        : SymbolId(1): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreEnumEmit.ts
Bindings mismatch:
after transform: ScopeId(1): ["(Anonymous class)", "(Anonymous function)", "Foo", "__a", "__call"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 5, end: 8 }, Span { start: 117, end: 120 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(6): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(Function)
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(6): [Span { start: 198, end: 201 }, Span { start: 235, end: 238 }]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreMappedTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreReactNamespace.ts
Bindings mismatch:
after transform: ScopeId(0): ["__foot", "_jsxFileName", "thing"]
rebuilt        : ScopeId(0): ["_jsxFileName", "thing"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "__foot":
after transform: SymbolId(2) "__foot"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["React"]
rebuilt        : ["React", "__foot"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst13.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst14.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(12), SymbolId(13), SymbolId(18), SymbolId(19)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(12), SymbolId(13), SymbolId(18), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst15.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(12), SymbolId(13), SymbolId(18), SymbolId(19)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(12), SymbolId(13), SymbolId(18), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst17.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/dtsEmitTripleSlashAvoidUnnecessaryResolutionMode.ts
Unresolved references mismatch:
after transform: ["NodeJS", "Promise", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateAnonymousInners1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateAnonymousModuleClasses.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol flags mismatch for "F":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "F":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "F":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 50, end: 51 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 126, end: 129 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(3): [Span { start: 126, end: 129 }, Span { start: 171, end: 174 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "Gar":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Gar":
after transform: SymbolId(6): Span { start: 249, end: 252 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "Foo":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(7): Span { start: 266, end: 269 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(7): [Span { start: 266, end: 269 }, Span { start: 327, end: 330 }]
rebuilt        : SymbolId(12): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateConstructSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateConstructSignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateConstructorOverloadSignature.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateConstructorOverloadSignature2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierShouldNotShortCircuitBaseTypeBinding.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Shapes":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Shapes":
after transform: SymbolId(1): Span { start: 42, end: 48 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateOverloadInTypeAugmentation1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_packageIdIncludesSubModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_referenceTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "a", "foo"]
rebuilt        : ScopeId(0): ["a", "foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_subModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "a", "o"]
rebuilt        : ScopeId(0): ["a", "o"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateVarAndImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): ["a"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Import)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "a":
after transform: SymbolId(0): [Span { start: 50, end: 51 }, Span { start: 73, end: 74 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["M"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/duplicateVariablesByScope.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 71, end: 72 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/dynamicNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "c0":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(6), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol reference IDs mismatch for "s0":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(7), ReferenceId(11)]
rebuilt        : SymbolId(3): [ReferenceId(6)]
Symbol flags mismatch for "T1":
after transform: SymbolId(4): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol flags mismatch for "T2":
after transform: SymbolId(5): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol reference IDs mismatch for "T2":
after transform: SymbolId(5): [ReferenceId(4)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/elidedEmbeddedStatementsReplacedWithSemicolon.ts
'with' statements are not allowed

semantic Error: tasks/coverage/typescript/tests/cases/compiler/elidingImportNames.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitClassExpressionInDeclarationFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(14)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "FooItem":
after transform: SymbolId(5): [ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitDecoratorMetadata_object.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "MyClassDecorator", "MyMethodDecorator", "_decorate", "_decorateMetadata"]
rebuilt        : ScopeId(0): ["A", "_decorate", "_decorateMetadata"]
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 123, end: 124 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 123, end: 124 }
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ClassDecorator", "Function", "MethodDecorator", "Object", "require"]
rebuilt        : ["Function", "MyClassDecorator", "MyMethodDecorator", "Object", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitDecoratorMetadata_restArgs.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "MyClassDecorator", "MyMethodDecorator", "_decorate", "_decorateMetadata"]
rebuilt        : ScopeId(0): ["A", "B", "_decorate", "_decorateMetadata"]
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 123, end: 124 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(10): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 123, end: 124 }
Symbol span mismatch for "B":
after transform: SymbolId(5): Span { start: 228, end: 229 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol span mismatch for "B":
after transform: SymbolId(11): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 228, end: 229 }
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "ClassDecorator", "Function", "MethodDecorator", "Object", "require"]
rebuilt        : ["Array", "Function", "MyClassDecorator", "MyMethodDecorator", "Object", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitHelpersWithLocalCollisions.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "__decorate", "__decorate2", "_objectSpread", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "__decorate2", "_objectSpread", "o", "y"]
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 57, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 57, end: 58 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitMemberAccessExpression.ts
Symbol flags mismatch for "Microsoft":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Microsoft":
after transform: SymbolId(0): Span { start: 82, end: 91 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "PeopleAtWork":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "PeopleAtWork":
after transform: SymbolId(1): Span { start: 92, end: 104 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "Model":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Model":
after transform: SymbolId(2): Span { start: 105, end: 110 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitSkipsThisWithRestParameter.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emitTopOfFileTripleSlashCommentOnNotEmittedNodeIfRemoveCommentsIsFalse.ts
Bindings mismatch:
after transform: ScopeId(0): ["OData"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyAnonymousObjectNarrowing.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "foo", "nonNull", "obj", "union"]
rebuilt        : ScopeId(0): ["f1", "f2", "foo"]
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(8) "union"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["nonNull", "obj", "undefined", "union"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyArgumentsListComment.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyDeclarationEmitIsModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "i"]
rebuilt        : ScopeId(0): ["Foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyEnum.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyIndexer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/emptyOptionalBindingPatternInDeclarationSignature.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "_defineProperty", "fn1", "fn2", "fn3", "fn4", "val1", "val2"]
rebuilt        : ScopeId(0): ["C1", "_defineProperty", "fn1", "fn2", "fn3", "fn4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(5): []
Symbol flags mismatch for "C1":
after transform: SymbolId(6): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(7): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumCodeGenNewLines1.ts
Bindings mismatch:
after transform: ScopeId(1): ["b", "c", "d", "foo"]
rebuilt        : ScopeId(1): ["foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumDecl1.ts
Bindings mismatch:
after transform: ScopeId(0): ["mAmbient"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumDeclarationEmitInitializerHasImport.ts
Bindings mismatch:
after transform: ScopeId(1): ["Enum", "Value1", "Value2"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumFromExternalModule.ts
Bindings mismatch:
after transform: ScopeId(1): ["Mode", "Open"]
rebuilt        : ScopeId(1): ["Mode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Mode":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumIndexer.ts
Bindings mismatch:
after transform: ScopeId(1): ["MyEnumType", "bar", "foo"]
rebuilt        : ScopeId(1): ["MyEnumType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "MyEnumType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumInitializersWithExponents.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumKeysQuotedAsObjectPropertiesInDeclarationEmit.ts
Bindings mismatch:
after transform: ScopeId(1): ["LEFT_BUTTON", "MIDDLE_BUTTON", "MouseButton", "NO_BUTTON", "RIGHT_BUTTON", "XBUTTON1_BUTTON", "XBUTTON2_BUTTON"]
rebuilt        : ScopeId(1): ["MouseButton"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MouseButton":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumLiteralUnionNotWidened.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "one", "two"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["B", "bar", "foo"]
rebuilt        : ScopeId(2): ["B"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol flags mismatch for "B":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(8)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(8): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(14)]
rebuilt        : SymbolId(5): [ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumLiteralsSubtypeReduction.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "E0", "E1", "E10", "E100", "E1000", "E1001", "E1002", "E1003", "E1004", "E1005", "E1006", "E1007", "E1008", "E1009", "E101", "E1010", "E1011", "E1012", "E1013", "E1014", "E1015", "E1016", "E1017", "E1018", "E1019", "E102", "E1020", "E1021", "E1022", "E1023", "E103", "E104", "E105", "E106", "E107", "E108", "E109", "E11", "E110", "E111", "E112", "E113", "E114", "E115", "E116", "E117", "E118", "E119", "E12", "E120", "E121", "E122", "E123", "E124", "E125", "E126", "E127", "E128", "E129", "E13", "E130", "E131", "E132", "E133", "E134", "E135", "E136", "E137", "E138", "E139", "E14", "E140", "E141", "E142", "E143", "E144", "E145", "E146", "E147", "E148", "E149", "E15", "E150", "E151", "E152", "E153", "E154", "E155", "E156", "E157", "E158", "E159", "E16", "E160", "E161", "E162", "E163", "E164", "E165", "E166", "E167", "E168", "E169", "E17", "E170", "E171", "E172", "E173", "E174", "E175", "E176", "E177", "E178", "E179", "E18", "E180", "E181", "E182", "E183", "E184", "E185", "E186", "E187", "E188", "E189", "E19", "E190", "E191", "E192", "E193", "E194", "E195", "E196", "E197", "E198", "E199", "E2", "E20", "E200", "E201", "E202", "E203", "E204", "E205", "E206", "E207", "E208", "E209", "E21", "E210", "E211", "E212", "E213", "E214", "E215", "E216", "E217", "E218", "E219", "E22", "E220", "E221", "E222", "E223", "E224", "E225", "E226", "E227", "E228", "E229", "E23", "E230", "E231", "E232", "E233", "E234", "E235", "E236", "E237", "E238", "E239", "E24", "E240", "E241", "E242", "E243", "E244", "E245", "E246", "E247", "E248", "E249", "E25", "E250", "E251", "E252", "E253", "E254", "E255", "E256", "E257", "E258", "E259", "E26", "E260", "E261", "E262", "E263", "E264", "E265", "E266", "E267", "E268", "E269", "E27", "E270", "E271", "E272", "E273", "E274", "E275", "E276", "E277", "E278", "E279", "E28", "E280", "E281", "E282", "E283", "E284", "E285", "E286", "E287", "E288", "E289", "E29", "E290", "E291", "E292", "E293", "E294", "E295", "E296", "E297", "E298", "E299", "E3", "E30", "E300", "E301", "E302", "E303", "E304", "E305", "E306", "E307", "E308", "E309", "E31", "E310", "E311", "E312", "E313", "E314", "E315", "E316", "E317", "E318", "E319", "E32", "E320", "E321", "E322", "E323", "E324", "E325", "E326", "E327", "E328", "E329", "E33", "E330", "E331", "E332", "E333", "E334", "E335", "E336", "E337", "E338", "E339", "E34", "E340", "E341", "E342", "E343", "E344", "E345", "E346", "E347", "E348", "E349", "E35", "E350", "E351", "E352", "E353", "E354", "E355", "E356", "E357", "E358", "E359", "E36", "E360", "E361", "E362", "E363", "E364", "E365", "E366", "E367", "E368", "E369", "E37", "E370", "E371", "E372", "E373", "E374", "E375", "E376", "E377", "E378", "E379", "E38", "E380", "E381", "E382", "E383", "E384", "E385", "E386", "E387", "E388", "E389", "E39", "E390", "E391", "E392", "E393", "E394", "E395", "E396", "E397", "E398", "E399", "E4", "E40", "E400", "E401", "E402", "E403", "E404", "E405", "E406", "E407", "E408", "E409", "E41", "E410", "E411", "E412", "E413", "E414", "E415", "E416", "E417", "E418", "E419", "E42", "E420", "E421", "E422", "E423", "E424", "E425", "E426", "E427", "E428", "E429", "E43", "E430", "E431", "E432", "E433", "E434", "E435", "E436", "E437", "E438", "E439", "E44", "E440", "E441", "E442", "E443", "E444", "E445", "E446", "E447", "E448", "E449", "E45", "E450", "E451", "E452", "E453", "E454", "E455", "E456", "E457", "E458", "E459", "E46", "E460", "E461", "E462", "E463", "E464", "E465", "E466", "E467", "E468", "E469", "E47", "E470", "E471", "E472", "E473", "E474", "E475", "E476", "E477", "E478", "E479", "E48", "E480", "E481", "E482", "E483", "E484", "E485", "E486", "E487", "E488", "E489", "E49", "E490", "E491", "E492", "E493", "E494", "E495", "E496", "E497", "E498", "E499", "E5", "E50", "E500", "E501", "E502", "E503", "E504", "E505", "E506", "E507", "E508", "E509", "E51", "E510", "E511", "E512", "E513", "E514", "E515", "E516", "E517", "E518", "E519", "E52", "E520", "E521", "E522", "E523", "E524", "E525", "E526", "E527", "E528", "E529", "E53", "E530", "E531", "E532", "E533", "E534", "E535", "E536", "E537", "E538", "E539", "E54", "E540", "E541", "E542", "E543", "E544", "E545", "E546", "E547", "E548", "E549", "E55", "E550", "E551", "E552", "E553", "E554", "E555", "E556", "E557", "E558", "E559", "E56", "E560", "E561", "E562", "E563", "E564", "E565", "E566", "E567", "E568", "E569", "E57", "E570", "E571", "E572", "E573", "E574", "E575", "E576", "E577", "E578", "E579", "E58", "E580", "E581", "E582", "E583", "E584", "E585", "E586", "E587", "E588", "E589", "E59", "E590", "E591", "E592", "E593", "E594", "E595", "E596", "E597", "E598", "E599", "E6", "E60", "E600", "E601", "E602", "E603", "E604", "E605", "E606", "E607", "E608", "E609", "E61", "E610", "E611", "E612", "E613", "E614", "E615", "E616", "E617", "E618", "E619", "E62", "E620", "E621", "E622", "E623", "E624", "E625", "E626", "E627", "E628", "E629", "E63", "E630", "E631", "E632", "E633", "E634", "E635", "E636", "E637", "E638", "E639", "E64", "E640", "E641", "E642", "E643", "E644", "E645", "E646", "E647", "E648", "E649", "E65", "E650", "E651", "E652", "E653", "E654", "E655", "E656", "E657", "E658", "E659", "E66", "E660", "E661", "E662", "E663", "E664", "E665", "E666", "E667", "E668", "E669", "E67", "E670", "E671", "E672", "E673", "E674", "E675", "E676", "E677", "E678", "E679", "E68", "E680", "E681", "E682", "E683", "E684", "E685", "E686", "E687", "E688", "E689", "E69", "E690", "E691", "E692", "E693", "E694", "E695", "E696", "E697", "E698", "E699", "E7", "E70", "E700", "E701", "E702", "E703", "E704", "E705", "E706", "E707", "E708", "E709", "E71", "E710", "E711", "E712", "E713", "E714", "E715", "E716", "E717", "E718", "E719", "E72", "E720", "E721", "E722", "E723", "E724", "E725", "E726", "E727", "E728", "E729", "E73", "E730", "E731", "E732", "E733", "E734", "E735", "E736", "E737", "E738", "E739", "E74", "E740", "E741", "E742", "E743", "E744", "E745", "E746", "E747", "E748", "E749", "E75", "E750", "E751", "E752", "E753", "E754", "E755", "E756", "E757", "E758", "E759", "E76", "E760", "E761", "E762", "E763", "E764", "E765", "E766", "E767", "E768", "E769", "E77", "E770", "E771", "E772", "E773", "E774", "E775", "E776", "E777", "E778", "E779", "E78", "E780", "E781", "E782", "E783", "E784", "E785", "E786", "E787", "E788", "E789", "E79", "E790", "E791", "E792", "E793", "E794", "E795", "E796", "E797", "E798", "E799", "E8", "E80", "E800", "E801", "E802", "E803", "E804", "E805", "E806", "E807", "E808", "E809", "E81", "E810", "E811", "E812", "E813", "E814", "E815", "E816", "E817", "E818", "E819", "E82", "E820", "E821", "E822", "E823", "E824", "E825", "E826", "E827", "E828", "E829", "E83", "E830", "E831", "E832", "E833", "E834", "E835", "E836", "E837", "E838", "E839", "E84", "E840", "E841", "E842", "E843", "E844", "E845", "E846", "E847", "E848", "E849", "E85", "E850", "E851", "E852", "E853", "E854", "E855", "E856", "E857", "E858", "E859", "E86", "E860", "E861", "E862", "E863", "E864", "E865", "E866", "E867", "E868", "E869", "E87", "E870", "E871", "E872", "E873", "E874", "E875", "E876", "E877", "E878", "E879", "E88", "E880", "E881", "E882", "E883", "E884", "E885", "E886", "E887", "E888", "E889", "E89", "E890", "E891", "E892", "E893", "E894", "E895", "E896", "E897", "E898", "E899", "E9", "E90", "E900", "E901", "E902", "E903", "E904", "E905", "E906", "E907", "E908", "E909", "E91", "E910", "E911", "E912", "E913", "E914", "E915", "E916", "E917", "E918", "E919", "E92", "E920", "E921", "E922", "E923", "E924", "E925", "E926", "E927", "E928", "E929", "E93", "E930", "E931", "E932", "E933", "E934", "E935", "E936", "E937", "E938", "E939", "E94", "E940", "E941", "E942", "E943", "E944", "E945", "E946", "E947", "E948", "E949", "E95", "E950", "E951", "E952", "E953", "E954", "E955", "E956", "E957", "E958", "E959", "E96", "E960", "E961", "E962", "E963", "E964", "E965", "E966", "E967", "E968", "E969", "E97", "E970", "E971", "E972", "E973", "E974", "E975", "E976", "E977", "E978", "E979", "E98", "E980", "E981", "E982", "E983", "E984", "E985", "E986", "E987", "E988", "E989", "E99", "E990", "E991", "E992", "E993", "E994", "E995", "E996", "E997", "E998", "E999"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumMapBackIntoItself.ts
Bindings mismatch:
after transform: ScopeId(1): ["Large", "Medium", "Small", "TShirtSize"]
rebuilt        : ScopeId(1): ["TShirtSize"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TShirtSize":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumMemberReduction.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "MyEnum"]
rebuilt        : ScopeId(1): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "MyStringEnum"]
rebuilt        : ScopeId(2): ["MyStringEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(3): ["A", "B", "C", "MyStringEnumWithEmpty"]
rebuilt        : ScopeId(3): ["MyStringEnumWithEmpty"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyEnum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(21), ReferenceId(23), ReferenceId(27), ReferenceId(29)]
Symbol flags mismatch for "MyStringEnum":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyStringEnum":
after transform: SymbolId(4): [ReferenceId(12), ReferenceId(14), ReferenceId(30)]
rebuilt        : SymbolId(2): [ReferenceId(12), ReferenceId(31)]
Symbol flags mismatch for "MyStringEnumWithEmpty":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyStringEnumWithEmpty":
after transform: SymbolId(8): [ReferenceId(15), ReferenceId(17), ReferenceId(35)]
rebuilt        : SymbolId(4): [ReferenceId(17), ReferenceId(33)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumNegativeLiteral1.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumNumbering1.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E", "Test"]
rebuilt        : ScopeId(1): ["Test"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumOperations.ts
Bindings mismatch:
after transform: ScopeId(1): ["Enum", "None"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithInfinityProperty.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "Infinity"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithNaNProperty.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "NaN"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithNegativeInfinityProperty.ts
Bindings mismatch:
after transform: ScopeId(1): ["-Infinity", "A"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithQuotedElementName1.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "fo\"o"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithQuotedElementName2.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "fo'o"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithUnicodeEscape1.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "gold ✰"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumWithoutInitializerAfterComputedMember.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/enumsWithMultipleDeclarations3.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Reference symbol mismatch for "E":
after transform: SymbolId(0) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(0) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["E"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/errorConstructorSubtypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Function", "Object", "RangeError"]
rebuilt        : ["Error", "RangeError", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es2017basicAsync.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es2018ObjectAssign.ts
Bindings mismatch:
after transform: ScopeId(0): ["p", "test"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "Promise"]
rebuilt        : ["Object", "p"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunction.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_empty", "_singleAwait", "empty", "singleAwait", "x"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_empty", "_singleAwait", "empty", "singleAwait"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionArrayLiterals.ts
Bindings mismatch:
after transform: ScopeId(0): ["_arrayLiteral", "_arrayLiteral2", "_arrayLiteral3", "_arrayLiteral4", "_arrayLiteral5", "_arrayLiteral6", "_arrayLiteral7", "_arrayLiteral8", "_asyncToGenerator", "a", "arrayLiteral0", "arrayLiteral1", "arrayLiteral2", "arrayLiteral3", "arrayLiteral4", "arrayLiteral5", "arrayLiteral6", "arrayLiteral7", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_arrayLiteral", "_arrayLiteral2", "_arrayLiteral3", "_arrayLiteral4", "_arrayLiteral5", "_arrayLiteral6", "_arrayLiteral7", "_arrayLiteral8", "_asyncToGenerator", "arrayLiteral0", "arrayLiteral1", "arrayLiteral2", "arrayLiteral3", "arrayLiteral4", "arrayLiteral5", "arrayLiteral6", "arrayLiteral7"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionBinaryExpressions.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_binaryAssignment", "_binaryAssignment10", "_binaryAssignment11", "_binaryAssignment12", "_binaryAssignment13", "_binaryAssignment14", "_binaryAssignment2", "_binaryAssignment3", "_binaryAssignment4", "_binaryAssignment5", "_binaryAssignment6", "_binaryAssignment7", "_binaryAssignment8", "_binaryAssignment9", "_binaryComma", "_binaryComma2", "_binaryCompoundAssignment", "_binaryCompoundAssignment2", "_binaryCompoundAssignment3", "_binaryCompoundAssignment4", "_binaryCompoundAssignment5", "_binaryCompoundAssignment6", "_binaryCompoundAssignment7", "_binaryCompoundAssignment8", "_binaryCompoundAssignment9", "_binaryExponentiation", "_binaryLogicalAnd", "_binaryLogicalAnd2", "_binaryPlus", "_binaryPlus2", "a", "b", "binaryAssignment0", "binaryAssignment1", "binaryAssignment10", "binaryAssignment11", "binaryAssignment12", "binaryAssignment13", "binaryAssignment2", "binaryAssignment3", "binaryAssignment4", "binaryAssignment5", "binaryAssignment6", "binaryAssignment7", "binaryAssignment8", "binaryAssignment9", "binaryComma0", "binaryComma1", "binaryCompoundAssignment0", "binaryCompoundAssignment1", "binaryCompoundAssignment2", "binaryCompoundAssignment3", "binaryCompoundAssignment4", "binaryCompoundAssignment5", "binaryCompoundAssignment6", "binaryCompoundAssignment7", "binaryCompoundAssignment8", "binaryExponentiation", "binaryLogicalAnd0", "binaryLogicalAnd1", "binaryPlus0", "binaryPlus1", "c", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_binaryAssignment", "_binaryAssignment10", "_binaryAssignment11", "_binaryAssignment12", "_binaryAssignment13", "_binaryAssignment14", "_binaryAssignment2", "_binaryAssignment3", "_binaryAssignment4", "_binaryAssignment5", "_binaryAssignment6", "_binaryAssignment7", "_binaryAssignment8", "_binaryAssignment9", "_binaryComma", "_binaryComma2", "_binaryCompoundAssignment", "_binaryCompoundAssignment2", "_binaryCompoundAssignment3", "_binaryCompoundAssignment4", "_binaryCompoundAssignment5", "_binaryCompoundAssignment6", "_binaryCompoundAssignment7", "_binaryCompoundAssignment8", "_binaryCompoundAssignment9", "_binaryExponentiation", "_binaryLogicalAnd", "_binaryLogicalAnd2", "_binaryPlus", "_binaryPlus2", "binaryAssignment0", "binaryAssignment1", "binaryAssignment10", "binaryAssignment11", "binaryAssignment12", "binaryAssignment13", "binaryAssignment2", "binaryAssignment3", "binaryAssignment4", "binaryAssignment5", "binaryAssignment6", "binaryAssignment7", "binaryAssignment8", "binaryAssignment9", "binaryComma0", "binaryComma1", "binaryCompoundAssignment0", "binaryCompoundAssignment1", "binaryCompoundAssignment2", "binaryCompoundAssignment3", "binaryCompoundAssignment4", "binaryCompoundAssignment5", "binaryCompoundAssignment6", "binaryCompoundAssignment7", "binaryCompoundAssignment8", "binaryExponentiation", "binaryLogicalAnd0", "binaryLogicalAnd1", "binaryPlus0", "binaryPlus1"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Promise", "arguments", "require"]
rebuilt        : ["Math", "a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionCallExpressions.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_callExpression", "_callExpression10", "_callExpression11", "_callExpression12", "_callExpression13", "_callExpression14", "_callExpression15", "_callExpression16", "_callExpression17", "_callExpression18", "_callExpression19", "_callExpression2", "_callExpression20", "_callExpression21", "_callExpression3", "_callExpression4", "_callExpression5", "_callExpression6", "_callExpression7", "_callExpression8", "_callExpression9", "a", "b", "c", "callExpression0", "callExpression1", "callExpression10", "callExpression11", "callExpression12", "callExpression13", "callExpression14", "callExpression15", "callExpression16", "callExpression17", "callExpression18", "callExpression19", "callExpression2", "callExpression20", "callExpression3", "callExpression4", "callExpression5", "callExpression6", "callExpression7", "callExpression8", "callExpression9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_callExpression", "_callExpression10", "_callExpression11", "_callExpression12", "_callExpression13", "_callExpression14", "_callExpression15", "_callExpression16", "_callExpression17", "_callExpression18", "_callExpression19", "_callExpression2", "_callExpression20", "_callExpression21", "_callExpression3", "_callExpression4", "_callExpression5", "_callExpression6", "_callExpression7", "_callExpression8", "_callExpression9", "callExpression0", "callExpression1", "callExpression10", "callExpression11", "callExpression12", "callExpression13", "callExpression14", "callExpression15", "callExpression16", "callExpression17", "callExpression18", "callExpression19", "callExpression2", "callExpression20", "callExpression3", "callExpression4", "callExpression5", "callExpression6", "callExpression7", "callExpression8", "callExpression9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionConditionals.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_conditional", "_conditional2", "_conditional3", "a", "b", "c", "conditional0", "conditional1", "conditional2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_conditional", "_conditional2", "_conditional3", "conditional0", "conditional1", "conditional2"]
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionDoStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_doStatement", "_doStatement10", "_doStatement11", "_doStatement12", "_doStatement13", "_doStatement14", "_doStatement15", "_doStatement16", "_doStatement17", "_doStatement18", "_doStatement19", "_doStatement2", "_doStatement3", "_doStatement4", "_doStatement5", "_doStatement6", "_doStatement7", "_doStatement8", "_doStatement9", "a", "b", "c", "doStatement0", "doStatement1", "doStatement10", "doStatement11", "doStatement12", "doStatement13", "doStatement14", "doStatement15", "doStatement16", "doStatement17", "doStatement18", "doStatement2", "doStatement3", "doStatement4", "doStatement5", "doStatement6", "doStatement7", "doStatement8", "doStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_doStatement", "_doStatement10", "_doStatement11", "_doStatement12", "_doStatement13", "_doStatement14", "_doStatement15", "_doStatement16", "_doStatement17", "_doStatement18", "_doStatement19", "_doStatement2", "_doStatement3", "_doStatement4", "_doStatement5", "_doStatement6", "_doStatement7", "_doStatement8", "_doStatement9", "doStatement0", "doStatement1", "doStatement10", "doStatement11", "doStatement12", "doStatement13", "doStatement14", "doStatement15", "doStatement16", "doStatement17", "doStatement18", "doStatement2", "doStatement3", "doStatement4", "doStatement5", "doStatement6", "doStatement7", "doStatement8", "doStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionElementAccess.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_elementAccess", "_elementAccess2", "_elementAccess3", "a", "b", "c", "elementAccess0", "elementAccess1", "elementAccess2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_elementAccess", "_elementAccess2", "_elementAccess3", "elementAccess0", "elementAccess1", "elementAccess2"]
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForInStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forInStatement", "_forInStatement2", "_forInStatement3", "_forInStatement4", "_forInStatement5", "_forInStatement6", "_forInStatement7", "_forInStatement8", "_forInStatement9", "a", "b", "c", "forInStatement0", "forInStatement1", "forInStatement2", "forInStatement3", "forInStatement4", "forInStatement5", "forInStatement6", "forInStatement7", "forInStatement8", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forInStatement", "_forInStatement2", "_forInStatement3", "_forInStatement4", "_forInStatement5", "_forInStatement6", "_forInStatement7", "_forInStatement8", "_forInStatement9", "forInStatement0", "forInStatement1", "forInStatement2", "forInStatement3", "forInStatement4", "forInStatement5", "forInStatement6", "forInStatement7", "forInStatement8"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForOfStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forOfStatement", "_forOfStatement10", "_forOfStatement11", "_forOfStatement12", "_forOfStatement13", "_forOfStatement14", "_forOfStatement15", "_forOfStatement16", "_forOfStatement17", "_forOfStatement18", "_forOfStatement19", "_forOfStatement2", "_forOfStatement3", "_forOfStatement4", "_forOfStatement5", "_forOfStatement6", "_forOfStatement7", "_forOfStatement8", "_forOfStatement9", "a", "b", "c", "forOfStatement0", "forOfStatement1", "forOfStatement10", "forOfStatement11", "forOfStatement12", "forOfStatement13", "forOfStatement14", "forOfStatement15", "forOfStatement16", "forOfStatement17", "forOfStatement18", "forOfStatement2", "forOfStatement3", "forOfStatement4", "forOfStatement5", "forOfStatement6", "forOfStatement7", "forOfStatement8", "forOfStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forOfStatement", "_forOfStatement10", "_forOfStatement11", "_forOfStatement12", "_forOfStatement13", "_forOfStatement14", "_forOfStatement15", "_forOfStatement16", "_forOfStatement17", "_forOfStatement18", "_forOfStatement19", "_forOfStatement2", "_forOfStatement3", "_forOfStatement4", "_forOfStatement5", "_forOfStatement6", "_forOfStatement7", "_forOfStatement8", "_forOfStatement9", "forOfStatement0", "forOfStatement1", "forOfStatement10", "forOfStatement11", "forOfStatement12", "forOfStatement13", "forOfStatement14", "forOfStatement15", "forOfStatement16", "forOfStatement17", "forOfStatement18", "forOfStatement2", "forOfStatement3", "forOfStatement4", "forOfStatement5", "forOfStatement6", "forOfStatement7", "forOfStatement8", "forOfStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forStatement", "_forStatement2", "_forStatement3", "_forStatement4", "_forStatement5", "_forStatement6", "_forStatement7", "a", "b", "c", "forStatement0", "forStatement1", "forStatement2", "forStatement3", "forStatement4", "forStatement5", "forStatement6", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forStatement", "_forStatement2", "_forStatement3", "_forStatement4", "_forStatement5", "_forStatement6", "_forStatement7", "forStatement0", "forStatement1", "forStatement2", "forStatement3", "forStatement4", "forStatement5", "forStatement6"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionHoisting.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_hoisting", "_hoistingWithAwait", "hoisting", "hoistingWithAwait", "y"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_hoisting", "_hoistingWithAwait", "hoisting", "hoistingWithAwait"]
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionIfStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_ifStatement", "_ifStatement2", "_ifStatement3", "a", "b", "c", "ifStatement1", "ifStatement2", "ifStatement3", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_ifStatement", "_ifStatement2", "_ifStatement3", "ifStatement1", "ifStatement2", "ifStatement3"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionNestedLoops.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_nestedLoops", "a", "b", "c", "nestedLoops", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_nestedLoops", "nestedLoops"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionNewExpressions.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_newExpression", "_newExpression10", "_newExpression11", "_newExpression12", "_newExpression13", "_newExpression14", "_newExpression15", "_newExpression16", "_newExpression17", "_newExpression18", "_newExpression19", "_newExpression2", "_newExpression20", "_newExpression21", "_newExpression3", "_newExpression4", "_newExpression5", "_newExpression6", "_newExpression7", "_newExpression8", "_newExpression9", "a", "b", "c", "newExpression0", "newExpression1", "newExpression10", "newExpression11", "newExpression12", "newExpression13", "newExpression14", "newExpression15", "newExpression16", "newExpression17", "newExpression18", "newExpression19", "newExpression2", "newExpression20", "newExpression3", "newExpression4", "newExpression5", "newExpression6", "newExpression7", "newExpression8", "newExpression9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_newExpression", "_newExpression10", "_newExpression11", "_newExpression12", "_newExpression13", "_newExpression14", "_newExpression15", "_newExpression16", "_newExpression17", "_newExpression18", "_newExpression19", "_newExpression2", "_newExpression20", "_newExpression21", "_newExpression3", "_newExpression4", "_newExpression5", "_newExpression6", "_newExpression7", "_newExpression8", "_newExpression9", "newExpression0", "newExpression1", "newExpression10", "newExpression11", "newExpression12", "newExpression13", "newExpression14", "newExpression15", "newExpression16", "newExpression17", "newExpression18", "newExpression19", "newExpression2", "newExpression20", "newExpression3", "newExpression4", "newExpression5", "newExpression6", "newExpression7", "newExpression8", "newExpression9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionObjectLiterals.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_objectLiteral", "_objectLiteral2", "_objectLiteral3", "_objectLiteral4", "_objectLiteral5", "_objectLiteral6", "_objectLiteral7", "a", "b", "c", "objectLiteral0", "objectLiteral1", "objectLiteral2", "objectLiteral3", "objectLiteral4", "objectLiteral5", "objectLiteral6", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_objectLiteral", "_objectLiteral2", "_objectLiteral3", "_objectLiteral4", "_objectLiteral5", "_objectLiteral6", "_objectLiteral7", "objectLiteral0", "objectLiteral1", "objectLiteral2", "objectLiteral3", "objectLiteral4", "objectLiteral5", "objectLiteral6"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "b", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionPropertyAccess.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_callExpression", "_propertyAccess", "_propertyAccess2", "a", "b", "c", "callExpression0", "propertyAccess0", "propertyAccess1", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_callExpression", "_propertyAccess", "_propertyAccess2", "callExpression0", "propertyAccess0", "propertyAccess1"]
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionReturnStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_returnStatement", "_returnStatement2", "_returnStatement3", "_returnStatement4", "_returnStatement5", "_returnStatement6", "a", "b", "c", "returnStatement0", "returnStatement1", "returnStatement2", "returnStatement3", "returnStatement4", "returnStatement5", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_returnStatement", "_returnStatement2", "_returnStatement3", "_returnStatement4", "_returnStatement5", "_returnStatement6", "returnStatement0", "returnStatement1", "returnStatement2", "returnStatement3", "returnStatement4", "returnStatement5"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionSwitchStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_switchStatement", "_switchStatement2", "_switchStatement3", "_switchStatement4", "_switchStatement5", "_switchStatement6", "_switchStatement7", "_switchStatement8", "_switchStatement9", "a", "b", "c", "switchStatement0", "switchStatement1", "switchStatement2", "switchStatement3", "switchStatement4", "switchStatement5", "switchStatement6", "switchStatement7", "switchStatement8", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_switchStatement", "_switchStatement2", "_switchStatement3", "_switchStatement4", "_switchStatement5", "_switchStatement6", "_switchStatement7", "_switchStatement8", "_switchStatement9", "switchStatement0", "switchStatement1", "switchStatement2", "switchStatement3", "switchStatement4", "switchStatement5", "switchStatement6", "switchStatement7", "switchStatement8"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "require", "x", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionTryStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_tryCatch", "_tryCatch2", "_tryCatch3", "_tryCatch4", "_tryCatchFinally", "_tryCatchFinally2", "_tryCatchFinally3", "_tryCatchFinally4", "_tryFinally", "_tryFinally2", "_tryFinally3", "a", "b", "c", "tryCatch0", "tryCatch1", "tryCatch2", "tryCatch3", "tryCatchFinally0", "tryCatchFinally1", "tryCatchFinally2", "tryCatchFinally3", "tryFinally0", "tryFinally1", "tryFinally2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_tryCatch", "_tryCatch2", "_tryCatch3", "_tryCatch4", "_tryCatchFinally", "_tryCatchFinally2", "_tryCatchFinally3", "_tryCatchFinally4", "_tryFinally", "_tryFinally2", "_tryFinally3", "tryCatch0", "tryCatch1", "tryCatch2", "tryCatch3", "tryCatchFinally0", "tryCatchFinally1", "tryCatchFinally2", "tryCatchFinally3", "tryFinally0", "tryFinally1", "tryFinally2"]
Unresolved references mismatch:
after transform: ["Function", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionWhileStatements.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_whileStatement", "_whileStatement10", "_whileStatement11", "_whileStatement12", "_whileStatement13", "_whileStatement14", "_whileStatement15", "_whileStatement16", "_whileStatement17", "_whileStatement18", "_whileStatement19", "_whileStatement2", "_whileStatement3", "_whileStatement4", "_whileStatement5", "_whileStatement6", "_whileStatement7", "_whileStatement8", "_whileStatement9", "a", "b", "c", "whileStatement0", "whileStatement1", "whileStatement10", "whileStatement11", "whileStatement12", "whileStatement13", "whileStatement14", "whileStatement15", "whileStatement16", "whileStatement17", "whileStatement18", "whileStatement2", "whileStatement3", "whileStatement4", "whileStatement5", "whileStatement6", "whileStatement7", "whileStatement8", "whileStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_whileStatement", "_whileStatement10", "_whileStatement11", "_whileStatement12", "_whileStatement13", "_whileStatement14", "_whileStatement15", "_whileStatement16", "_whileStatement17", "_whileStatement18", "_whileStatement19", "_whileStatement2", "_whileStatement3", "_whileStatement4", "_whileStatement5", "_whileStatement6", "_whileStatement7", "_whileStatement8", "_whileStatement9", "whileStatement0", "whileStatement1", "whileStatement10", "whileStatement11", "whileStatement12", "whileStatement13", "whileStatement14", "whileStatement15", "whileStatement16", "whileStatement17", "whileStatement18", "whileStatement2", "whileStatement3", "whileStatement4", "whileStatement5", "whileStatement6", "whileStatement7", "whileStatement8", "whileStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-commonjs7.ts
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5-importHelpersAsyncFunctions.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultClassDeclaration4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultFunctionDeclaration3.ts
Symbol reference IDs mismatch for "func":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultFunctionDeclaration4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es5ExportEqualsDts.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 6, end: 7 }, Span { start: 82, end: 83 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(10), ScopeId(16), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(38), ScopeId(40)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(23), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(35), ScopeId(37)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(10): [ScopeId(11), ScopeId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest3.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest4.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1T5", "C2T5", "_defineProperty", "bigClass"]
rebuilt        : ScopeId(0): ["C1T5", "_defineProperty", "bigClass"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest7.ts
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "M"]
rebuilt        : ScopeId(0): ["Bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["M"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ClassTest8.ts
Symbol reference IDs mismatch for "Vector":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(36)]
rebuilt        : SymbolId(6): [ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(25)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAll.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAllInEs5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment3.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment4.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportClause.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseInEs5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseWithoutModuleSpecifier.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseWithoutModuleSpecifierInEs5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBinding.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingAmd.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingDts.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "defaultBinding1", "defaultBinding2", "defaultBinding3", "defaultBinding4", "defaultBinding5", "defaultBinding6", "m", "x", "x1", "y", "z"]
rebuilt        : ScopeId(0): ["a", "b", "m", "x", "x1", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding1.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding1InEs5.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBindingDts1.ts
Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportEqualsDeclaration2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportAmd.ts
Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportDts.ts
Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportInEs5.ts
Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportNoNamedExports.ts
Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportAmd.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportDts.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "xxxx1", "xxxx2", "xxxx3", "xxxx4", "xxxx5", "xxxx6", "xxxx7", "xxxx8", "xxxx9", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "xxxx1", "xxxx2", "xxxx3", "xxxx4", "xxxx5", "xxxx6", "xxxx7", "xxxx8", "xxxx9", "y", "z", "z1", "z111", "z2", "z3"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportInEs5.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportInIndirectExportAssignment.ts
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportWithTypesAndValues.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ImportWithoutFromClauseNonInstantiatedModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleClassDeclaration.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(2): Span { start: 538, end: 540 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 1240, end: 1242 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleConst.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(6): Span { start: 116, end: 118 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(13): Span { start: 245, end: 247 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleConstEnumDeclaration.ts
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "m1":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(10): Span { start: 125, end: 127 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "m2":
after transform: SymbolId(23): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(23): Span { start: 338, end: 340 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleConstEnumDeclaration2.ts
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "m1":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(10): Span { start: 125, end: 127 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "m2":
after transform: SymbolId(23): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(23): Span { start: 338, end: 340 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleEnumDeclaration.ts
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "m1":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(10): Span { start: 113, end: 115 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "m2":
after transform: SymbolId(23): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(23): Span { start: 314, end: 316 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleFunctionDeclaration.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(2): Span { start: 76, end: 78 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 200, end: 202 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleInternalImport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleLet.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleModuleDeclaration.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/es6ModuleVariableStatement.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/esDecoratorsClassFieldsCrash.ts
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(10): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "dec":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["DecoratorContext", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/esNextWeakRefs_IterableWeakMap.ts
Unresolved references mismatch:
after transform: ["FinalizationRegistry", "Generator", "Iterable", "Object", "Set", "Symbol", "WeakMap", "WeakRef", "undefined"]
rebuilt        : ["FinalizationRegistry", "Object", "Set", "Symbol", "WeakMap", "WeakRef", "undefined"]
Unresolved reference IDs mismatch for "WeakRef":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(11), ReferenceId(15), ReferenceId(33)]
rebuilt        : [ReferenceId(26)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(1), ReferenceId(14)]
rebuilt        : [ReferenceId(10)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(8), ReferenceId(55), ReferenceId(69), ReferenceId(72)]
rebuilt        : [ReferenceId(81), ReferenceId(84)]
Unresolved reference IDs mismatch for "WeakMap":
after transform: [ReferenceId(5), ReferenceId(9), ReferenceId(108), ReferenceId(109), ReferenceId(110)]
rebuilt        : [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/escapedIdentifiers.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/eventEmitterPatternWithRecordOfFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithNestedArrayIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckingIntersectionWithConditional.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exhaustiveSwitchWithWideningLiteralTypes.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionContextualTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionExpressionsWithDynamicNames2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "mySymbol":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["Symbol", "const"]
rebuilt        : ["Symbol"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionNestedAssigmentsDeclared.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(13)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Function | ValueModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 9, end: 12 }, Span { start: 44, end: 47 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionNullishProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionSymbolProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "symb":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/expandoFunctionSymbolPropertyJs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "symb":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignClassAndModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 6, end: 9 }, Span { start: 37, end: 40 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignValueAndType.ts
Bindings mismatch:
after transform: ScopeId(0): ["http", "x"]
rebuilt        : ScopeId(0): ["server", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "server":
after transform: SymbolId(2): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "server":
after transform: SymbolId(2): Span { start: 82, end: 88 }
rebuilt        : SymbolId(1): Span { start: 152, end: 158 }
Symbol redeclarations mismatch for "server":
after transform: SymbolId(2): [Span { start: 82, end: 88 }, Span { start: 152, end: 158 }]
rebuilt        : SymbolId(1): []
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignedTypeAsTypeAnnotation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference flags mismatch for "x":
after transform: ReferenceId(1): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["Date", "module"]
rebuilt        : ["module", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentError.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference flags mismatch for "A":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["A", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentInternalModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentMembersVisibleInAugmentation.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["T"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentOfGenericType1.ts
Symbol reference IDs mismatch for "M":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithImportStatementPrivacyError.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithPrivacyError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportClassExtendingIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDeclarationForModuleOrEnumWithMemberOfSameName.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 67, end: 68 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDeclarationsInAmbientNamespaces.ts
Bindings mismatch:
after transform: ScopeId(0): ["Q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "Q":
after transform: SymbolId(0) "Q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : ["Q"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultAsyncFunction.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultForNonInstantiatedModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["m"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultImportedType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceAndFunctionOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 24, end: 27 }
rebuilt        : SymbolId(0): Span { start: 126, end: 129 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 24, end: 27 }, Span { start: 75, end: 78 }, Span { start: 126, end: 129 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceAndValue.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultProperty.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 31, end: 32 }, Span { start: 84, end: 85 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 83, end: 84 }, Span { start: 121, end: 122 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportDefaultVariable.ts
Bindings mismatch:
after transform: ScopeId(0): ["io"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualNamespaces.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): ["server", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "server":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface | NamespaceModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "server":
after transform: SymbolId(0): Span { start: 15, end: 21 }
rebuilt        : SymbolId(1): Span { start: 149, end: 155 }
Symbol reference IDs mismatch for "server":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol redeclarations mismatch for "server":
after transform: SymbolId(0): [Span { start: 15, end: 21 }, Span { start: 77, end: 83 }, Span { start: 149, end: 155 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Date", "Object", "module"]
rebuilt        : ["Date", "module"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualsOfModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualsProperty.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 31, end: 32 }, Span { start: 84, end: 85 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportEqualsProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 78, end: 79 }, Span { start: 116, end: 117 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportImport.ts
Symbol reference IDs mismatch for "e":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportImportAndClodule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportImportCanSubstituteConstEnumForValue.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(4): ["Abort", "Cancel", "DialogResult", "Ignore", "No", "Ok", "Retry", "Yes"]
rebuilt        : ScopeId(4): ["DialogResult"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["AbortRetryIgnore", "MessageBoxButtons", "OK", "OKCancel", "RetryCancel", "YesNo", "YesNoCancel"]
rebuilt        : ScopeId(6): ["MessageBoxButtons"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "MsPortalFx":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "MsPortalFx":
after transform: SymbolId(0): Span { start: 7, end: 17 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "MsPortalFx":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(24), ReferenceId(25), ReferenceId(36), ReferenceId(37)]
rebuilt        : SymbolId(0): [ReferenceId(42), ReferenceId(43), ReferenceId(63), ReferenceId(64)]
Symbol redeclarations mismatch for "MsPortalFx":
after transform: SymbolId(0): [Span { start: 7, end: 17 }, Span { start: 526, end: 536 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "ViewModels":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ViewModels":
after transform: SymbolId(1): Span { start: 18, end: 28 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "Dialogs":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Dialogs":
after transform: SymbolId(2): Span { start: 29, end: 36 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "DialogResult":
after transform: SymbolId(3): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "MessageBoxButtons":
after transform: SymbolId(13): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "ViewModels":
after transform: SymbolId(20): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ViewModels":
after transform: SymbolId(20): Span { start: 537, end: 547 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportImportNonInstantiatedModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "x"]
rebuilt        : ScopeId(0): ["B", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "B":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(2): Span { start: 58, end: 59 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportImportNonInstantiatedModule2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Widget1":
after transform: SymbolId(0) "Widget1"
rebuilt        : <None>
Reference flags mismatch for "Widget1":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Widget1", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportNamespaceDeclarationRetainsVisibility.ts
Bindings mismatch:
after transform: ScopeId(0): ["X"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "X":
after transform: SymbolId(0) "X"
rebuilt        : <None>
Reference flags mismatch for "X":
after transform: ReferenceId(2): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["X", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportPrivateType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportRedeclarationTypeAliases.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Function | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 12, end: 15 }
rebuilt        : SymbolId(0): Span { start: 73, end: 76 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 12, end: 15 }, Span { start: 42, end: 45 }, Span { start: 73, end: 76 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportSpecifierAndExportedMemberDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues10.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValues9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportStarForValuesInSystem.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportTwoInterfacesWithSameName.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportVisibility.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportedInterfaceInaccessibleInCallbackInModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "TPromise":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "TPromise":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportingContainingVisibleType.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportsInAmbientModules1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/exportsInAmbientModules2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/extBaseClass1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 104, end: 105 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "N":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(4): Span { start: 156, end: 157 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/extendAndImplementTheSameBaseType.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/extendConstructSignatureInInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/extendedInterfaceGenericType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externFunc.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "parseInt":
after transform: SymbolId(0) "parseInt"
rebuilt        : SymbolId(0) "parseInt"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externModuleClobber.ts
Bindings mismatch:
after transform: ScopeId(0): ["EM", "ec", "x"]
rebuilt        : ScopeId(0): ["ec", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "EM":
after transform: SymbolId(0) "EM"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["EM"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleAssignToVar.ts
Symbol reference IDs mismatch for "ext":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(3)]
Symbol reference IDs mismatch for "ext2":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(5), ReferenceId(7)]
Symbol reference IDs mismatch for "ext3":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(4): [ReferenceId(9), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleQualification.ts
Symbol reference IDs mismatch for "DiffEditor":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "NavigateAction":
after transform: SymbolId(6): [ReferenceId(0)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleReferenceDoubleUnderscore1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleResolution.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleResolution2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/externalModuleWithoutCompilerFlag1.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fakeInfinity2.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "X":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(3): Span { start: 62, end: 63 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fakeInfinity3.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "X":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(3): Span { start: 62, end: 63 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fallFromLastCase1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fallbackToBindingPatternForTypeInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Reference symbol mismatch for "trans":
after transform: SymbolId(0) "trans"
rebuilt        : SymbolId(0) "trans"
Reference symbol mismatch for "trans":
after transform: SymbolId(0) "trans"
rebuilt        : SymbolId(0) "trans"
Reference symbol mismatch for "trans":
after transform: SymbolId(0) "trans"
rebuilt        : SymbolId(0) "trans"
Reference symbol mismatch for "trans":
after transform: SymbolId(0) "trans"
rebuilt        : SymbolId(0) "trans"
Reference symbol mismatch for "trans":
after transform: SymbolId(0) "trans"
rebuilt        : SymbolId(0) "trans"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fatArrowSelf.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "Events":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Events":
after transform: SymbolId(0): Span { start: 7, end: 13 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Events":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol flags mismatch for "Consumer":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Consumer":
after transform: SymbolId(5): Span { start: 217, end: 225 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fatArrowfunctionAsType.ts
Bindings mismatch:
after transform: ScopeId(0): ["b", "c"]
rebuilt        : ScopeId(0): ["c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["b"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fatarrowfunctions.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(39), SymbolId(44), SymbolId(48)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(39), SymbolId(44), SymbolId(48)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(22), ScopeId(23)]
Reference symbol mismatch for "setTimeout":
after transform: SymbolId(44) "setTimeout"
rebuilt        : SymbolId(44) "setTimeout"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fatarrowfunctionsInFunctions.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "setTimeout":
after transform: SymbolId(0) "setTimeout"
rebuilt        : SymbolId(0) "setTimeout"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fillInMissingTypeArgsOnConstructCalls.ts
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fixCrashAliasLookupForDefauledImport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fixingTypeParametersRepeatedly1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "g":
after transform: SymbolId(7) "g"
rebuilt        : SymbolId(6) "g"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/fixingTypeParametersRepeatedly3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(3), SymbolId(7), SymbolId(9), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(6), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(9) "bar"
rebuilt        : SymbolId(6) "bar"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/flowAfterFinally1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "openFile":
after transform: SymbolId(0) "openFile"
rebuilt        : SymbolId(0) "openFile"
Reference symbol mismatch for "someOperation":
after transform: SymbolId(2) "someOperation"
rebuilt        : SymbolId(2) "someOperation"
Reference symbol mismatch for "closeFile":
after transform: SymbolId(1) "closeFile"
rebuilt        : SymbolId(1) "closeFile"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/flowControlTypeGuardThenSwitch.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Kind"]
rebuilt        : ScopeId(1): ["Kind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Kind":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Kind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(14), ReferenceId(17), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(10), ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/flowInFinally1.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forAwaitForUnion.ts
Unresolved references mismatch:
after transform: ["AsyncIterable", "Iterable", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forInModule.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forLoopEndingMultilineComments.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "consoleTestResultHandler"]
rebuilt        : ScopeId(0): ["consoleTestResultHandler"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forOfStringConstituents.ts
Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "y":
after transform: SymbolId(7) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forStatementInnerComments.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/forwardRefInTypeDeclaration.ts
Bindings mismatch:
after transform: ScopeId(0): ["Cls1", "Cls2", "Foo5", "_defineProperty", "foo4", "obj1", "obj2", "s", "s1", "s2", "s3", "s4", "s5"]
rebuilt        : ScopeId(0): ["Cls1", "Cls2", "Foo5", "_defineProperty", "obj2", "s1", "s2", "s3", "s4", "s5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "s1":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "s2":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "s3":
after transform: SymbolId(5): [ReferenceId(2)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "s4":
after transform: SymbolId(7): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "Foo5":
after transform: SymbolId(8): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol flags mismatch for "Cls1":
after transform: SymbolId(11): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol reference IDs mismatch for "Cls1":
after transform: SymbolId(11): [ReferenceId(5), ReferenceId(12)]
rebuilt        : SymbolId(7): [ReferenceId(4)]
Symbol reference IDs mismatch for "Cls2":
after transform: SymbolId(12): [ReferenceId(6), ReferenceId(14)]
rebuilt        : SymbolId(8): [ReferenceId(6)]
Symbol reference IDs mismatch for "obj2":
after transform: SymbolId(14): [ReferenceId(8)]
rebuilt        : SymbolId(9): []
Unresolved references mismatch:
after transform: ["const", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/freshLiteralInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : SymbolId(4) "f2"
Reference symbol mismatch for "f3":
after transform: SymbolId(10) "f3"
rebuilt        : SymbolId(8) "f3"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/freshLiteralTypesInIntersections.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "func":
after transform: SymbolId(0) "func"
rebuilt        : SymbolId(0) "func"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/funcdecl.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(17), SymbolId(22), SymbolId(23), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(35), SymbolId(36), SymbolId(38), SymbolId(42), SymbolId(44), SymbolId(47)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(17), SymbolId(22), SymbolId(23), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(35), SymbolId(36), SymbolId(38), SymbolId(43), SymbolId(45), SymbolId(48)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(13): []
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(15): []
Symbol flags mismatch for "m2":
after transform: SymbolId(38): SymbolFlags(ValueModule)
rebuilt        : SymbolId(38): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(38): Span { start: 1207, end: 1209 }
rebuilt        : SymbolId(38): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionAssignabilityWithArrayLike01.ts
Unresolved references mismatch:
after transform: ["ArrayLike"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionCall4.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionCall5.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionDeclarationWithResolutionOfTypeNamedArguments01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionDeclarationWithResolutionOfTypeOfSameName01.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "f":
after transform: SymbolId(0): SymbolFlags(Function | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol span mismatch for "f":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 26, end: 27 }
Symbol reference IDs mismatch for "f":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol redeclarations mismatch for "f":
after transform: SymbolId(0): [Span { start: 10, end: 11 }, Span { start: 26, end: 27 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionExpressionAndLambdaMatchesFunction.ts
Unresolved references mismatch:
after transform: ["Function", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeNamedArguments01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeOfSameName01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeOfSameName02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionInIfStatementInModule.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Midori":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Midori":
after transform: SymbolId(0): Span { start: 9, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionMergedWithModule.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 9, end: 12 }, Span { start: 56, end: 59 }, Span { start: 108, end: 111 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Bar":
after transform: SymbolId(3): Span { start: 60, end: 63 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "Baz":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Baz":
after transform: SymbolId(5): Span { start: 112, end: 115 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads10.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads12.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads13.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads14.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads15.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads16.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads21.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads22.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads23.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads24.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads25.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads26.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads28.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads30.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads31.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads32.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads33.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads35.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads36.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads38.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads39.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads42.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads43.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads44.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads45.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads6.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads7.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloads9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadsOnGenericArity1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadsOnGenericArity2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionOverloadsRecursiveGenericReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionReturnTypeQuery.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo", "test1", "test2"]
rebuilt        : ScopeId(0): ["test1", "test2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionSubtypingOfVarArgs.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionSubtypingOfVarArgs2.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionTypeArgumentArrayAssignment.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "test":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionWithAnyReturnTypeAndNoReturnExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/functionsWithImplicitReturnTypeAssignableToUndefined.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["Math", "Record"]
rebuilt        : ["Math"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/funduleExportedClassIsUsedBeforeDeclaration.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "B":
after transform: SymbolId(1) "B"
rebuilt        : SymbolId(0) "B"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/funduleOfFunctionWithoutReturnTypeAnnotation.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/funduleUsedAcrossFileBoundary.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generativeRecursionWithTypeOf.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(3): Span { start: 66, end: 67 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(6): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericAndNonGenericOverload1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericBaseClassLiteralProperty.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericBaseClassLiteralProperty2.ts
Symbol reference IDs mismatch for "CollectionItem2":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallAtYieldExpressionInGenericCall2.ts
Bindings mismatch:
after transform: ScopeId(0): ["fn", "offer"]
rebuilt        : ScopeId(0): ["fn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "fn":
after transform: SymbolId(5) "fn"
rebuilt        : SymbolId(0) "fn"
Reference symbol mismatch for "offer":
after transform: SymbolId(3) "offer"
rebuilt        : <None>
Reference symbol mismatch for "fn":
after transform: SymbolId(5) "fn"
rebuilt        : SymbolId(0) "fn"
Reference symbol mismatch for "offer":
after transform: SymbolId(3) "offer"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Generator", "IteratorResult", "ReadonlyArray", "Symbol"]
rebuilt        : ["offer"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceConditionalType1.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "h"]
rebuilt        : ScopeId(0): ["h"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "h":
after transform: SymbolId(4): [ReferenceId(8)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(2) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f", "g"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceConditionalType2.ts
Bindings mismatch:
after transform: ScopeId(0): ["WrappedComponent", "f", "g", "h", "wrapComponent"]
rebuilt        : ScopeId(0): ["WrappedComponent", "h", "wrapComponent"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "WrappedComponent":
after transform: SymbolId(6): [ReferenceId(7)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "h":
after transform: SymbolId(14): [ReferenceId(16)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "wrapComponent":
after transform: SymbolId(3) "wrapComponent"
rebuilt        : SymbolId(0) "wrapComponent"
Reference symbol mismatch for "f":
after transform: SymbolId(10) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(12) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f", "g"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceInConditionalTypes1.ts
Bindings mismatch:
after transform: ScopeId(0): ["ComponentWithForwardRef", "ComponentWithForwardRef2", "forwardRef"]
rebuilt        : ScopeId(0): ["ComponentWithForwardRef", "forwardRef"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "ComponentWithForwardRef":
after transform: SymbolId(15): [ReferenceId(34), ReferenceId(36)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "forwardRef":
after transform: SymbolId(11) "forwardRef"
rebuilt        : SymbolId(0) "forwardRef"
Unresolved references mismatch:
after transform: ["HTMLElement", "Omit"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceUsingThisTypeNoInvalidCacheReuseAfterMappedTypeApplication1.ts
Bindings mismatch:
after transform: ScopeId(0): ["EffectTypeId", "XXX", "_defineProperty", "a", "b", "implement", "inner", "outer", "succeed"]
rebuilt        : ScopeId(0): ["XXX", "_defineProperty", "a", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "XXX":
after transform: SymbolId(31): [ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "implement":
after transform: SymbolId(27) "implement"
rebuilt        : <None>
Reference symbol mismatch for "succeed":
after transform: SymbolId(15) "succeed"
rebuilt        : <None>
Reference symbol mismatch for "inner":
after transform: SymbolId(34) "inner"
rebuilt        : <None>
Reference symbol mismatch for "outer":
after transform: SymbolId(35) "outer"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : ["implement", "inner", "outer", "succeed"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceWithGenericLocalFunction.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallWithFixedArguments.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallWithinOwnBodyCastTypeParameterIdentity.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(4): [ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCallbacksAndClassHierarchy.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(17), ReferenceId(22)]
rebuilt        : SymbolId(4): [ReferenceId(6)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(7): [ReferenceId(6), ReferenceId(24)]
rebuilt        : SymbolId(5): [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClassImplementingGenericInterfaceFromAnotherModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "bar":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(3): Span { start: 55, end: 58 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClassPropertyInheritanceSpecialization.ts
Bindings mismatch:
after transform: ScopeId(0): ["Portal", "PortalFx", "ViewModel", "_defineProperty", "ko"]
rebuilt        : ScopeId(0): ["Portal", "PortalFx", "ViewModel", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(32), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(14)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(33): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(34): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(35): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Symbol flags mismatch for "Portal":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Portal":
after transform: SymbolId(10): Span { start: 1075, end: 1081 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol flags mismatch for "Controls":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Controls":
after transform: SymbolId(11): Span { start: 1082, end: 1090 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "Validators":
after transform: SymbolId(12): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Validators":
after transform: SymbolId(12): Span { start: 1091, end: 1101 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "PortalFx":
after transform: SymbolId(17): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "PortalFx":
after transform: SymbolId(17): Span { start: 1491, end: 1499 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "PortalFx":
after transform: SymbolId(17): [ReferenceId(42), ReferenceId(47), ReferenceId(50), ReferenceId(78), ReferenceId(79)]
rebuilt        : SymbolId(10): [ReferenceId(33), ReferenceId(34)]
Symbol flags mismatch for "ViewModels":
after transform: SymbolId(18): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ViewModels":
after transform: SymbolId(18): Span { start: 1500, end: 1510 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol flags mismatch for "Controls":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Controls":
after transform: SymbolId(19): Span { start: 1511, end: 1519 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Symbol flags mismatch for "Validators":
after transform: SymbolId(20): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Validators":
after transform: SymbolId(20): Span { start: 1520, end: 1530 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Reference symbol mismatch for "ko":
after transform: SymbolId(8) "ko"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["ko", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClassWithStaticFactory.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Editor":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Editor":
after transform: SymbolId(0): Span { start: 7, end: 13 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "List":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(10), ReferenceId(18), ReferenceId(28), ReferenceId(46), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(61), ReferenceId(63), ReferenceId(72), ReferenceId(74), ReferenceId(82), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(98), ReferenceId(100), ReferenceId(102), ReferenceId(110), ReferenceId(112), ReferenceId(122)]
rebuilt        : SymbolId(3): [ReferenceId(56), ReferenceId(57), ReferenceId(63)]
Symbol reference IDs mismatch for "ListFactory":
after transform: SymbolId(19): [ReferenceId(4), ReferenceId(7), ReferenceId(124)]
rebuilt        : SymbolId(20): [ReferenceId(6), ReferenceId(78)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClasses0.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClasses2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClasses3.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClasses4.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(4): []
Symbol reference IDs mismatch for "Vec2_T":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(10), ReferenceId(12), ReferenceId(16), ReferenceId(19), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClassesInModule.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericClassesInModule2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(8): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(5): [ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericCloduleInModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraint3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraintDeclaration.ts
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraintOnExtendedBuiltinTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "EndGate":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "EndGate":
after transform: SymbolId(0): Span { start: 15, end: 22 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "EndGate":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(13), ReferenceId(14), ReferenceId(21), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(10), ReferenceId(19), ReferenceId(20)]
Symbol redeclarations mismatch for "EndGate":
after transform: SymbolId(0): [Span { start: 15, end: 22 }, Span { start: 146, end: 153 }, Span { start: 335, end: 342 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Tweening":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Tweening":
after transform: SymbolId(3): Span { start: 154, end: 162 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "Tweening":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Tweening":
after transform: SymbolId(7): Span { start: 343, end: 351 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["ICloneable", "Tween", "require"]
rebuilt        : ["Tween", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericConstraintOnExtendedBuiltinTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "EndGate":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "EndGate":
after transform: SymbolId(0): Span { start: 7, end: 14 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "EndGate":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(14), ReferenceId(15), ReferenceId(22), ReferenceId(23)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(10), ReferenceId(19), ReferenceId(20)]
Symbol redeclarations mismatch for "EndGate":
after transform: SymbolId(0): [Span { start: 7, end: 14 }, Span { start: 138, end: 145 }, Span { start: 326, end: 333 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Tweening":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Tweening":
after transform: SymbolId(3): Span { start: 146, end: 154 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "Tweening":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Tweening":
after transform: SymbolId(7): Span { start: 334, end: 342 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["ICloneable", "Tween", "require"]
rebuilt        : ["Tween", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericConstructSignatureInInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionHasFreshTypeArgs.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionInference2.ts
Bindings mismatch:
after transform: ScopeId(0): ["combineReducers", "enhancer4", "foo", "myReducer1", "myReducer2", "withH"]
rebuilt        : ScopeId(0): ["combineReducers", "enhancer4", "myReducer1", "myReducer2", "withH"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "combineReducers":
after transform: SymbolId(2) "combineReducers"
rebuilt        : SymbolId(0) "combineReducers"
Reference symbol mismatch for "combineReducers":
after transform: SymbolId(2) "combineReducers"
rebuilt        : SymbolId(0) "combineReducers"
Reference symbol mismatch for "foo":
after transform: SymbolId(7) "foo"
rebuilt        : <None>
Reference symbol mismatch for "combineReducers":
after transform: SymbolId(2) "combineReducers"
rebuilt        : SymbolId(0) "combineReducers"
Reference symbol mismatch for "combineReducers":
after transform: SymbolId(2) "combineReducers"
rebuilt        : SymbolId(0) "combineReducers"
Reference symbol mismatch for "foo":
after transform: SymbolId(7) "foo"
rebuilt        : <None>
Reference symbol mismatch for "withH":
after transform: SymbolId(10) "withH"
rebuilt        : SymbolId(4) "withH"
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionSpecializations1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctions2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctions3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionsAndConditionalInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(6), SymbolId(10), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "unboxify":
after transform: SymbolId(3) "unboxify"
rebuilt        : SymbolId(0) "unboxify"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionsNotContextSensitive.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionsWithOptionalParameters1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericFunctionsWithOptionalParameters3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Collection":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(8), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericIndexedAccessMethodIntersectionCanBeAccessed.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInference2.ts
Bindings mismatch:
after transform: ScopeId(0): ["age_v", "ko", "name_v", "o", "rr_v", "x_v", "yy_v", "zz_v"]
rebuilt        : ScopeId(0): ["age_v", "name_v", "o", "rr_v", "x_v", "yy_v", "zz_v"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ko":
after transform: SymbolId(0) "ko"
rebuilt        : <None>
Reference symbol mismatch for "ko":
after transform: SymbolId(0) "ko"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["ko"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInferenceDefaultTypeParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "f1":
after transform: SymbolId(1) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(1) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(1) "f1"
rebuilt        : SymbolId(0) "f1"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInferenceDefaultTypeParameterJsxReact.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Component", "ComponentPropsWithRef", "ElementType", "React", "ReactNode", "_jsxFileName", "v1"]
rebuilt        : ScopeId(0): ["Component", "React", "_jsxFileName", "v1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInheritedDefaultConstructors.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(2): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInstanceOf.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInterfaceFunctionTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInterfaceImplementation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericInterfaceTypeCall.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericMethodOverspecialization.ts
Bindings mismatch:
after transform: ScopeId(0): ["document", "elements", "names", "widths", "xxx"]
rebuilt        : ScopeId(0): ["elements", "names", "widths", "xxx"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "document":
after transform: SymbolId(2) "document"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["document"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericNumberIndex.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericObjectLitReturnType.ts
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericObjectSpreadResultInSwitch.ts
Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_objectWithoutProperties", "getType", "params"]
rebuilt        : ScopeId(0): ["_excluded", "_objectWithoutProperties", "getType"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["params", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericOfACloduleType1.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(3): Span { start: 45, end: 46 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(12)]
Symbol flags mismatch for "C":
after transform: SymbolId(4): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(8), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(4): [Span { start: 66, end: 67 }, Span { start: 100, end: 101 }]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericOfACloduleType2.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(3): Span { start: 45, end: 46 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(12)]
Symbol flags mismatch for "C":
after transform: SymbolId(4): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(8), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(4): [Span { start: 66, end: 67 }, Span { start: 100, end: 101 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "N":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(7): Span { start: 217, end: 218 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericOverloadSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(13): [ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericPrototypeProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "BaseEvent":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "MyEvent":
after transform: SymbolId(2): [ReferenceId(6)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericPrototypeProperty3.ts
Symbol reference IDs mismatch for "BaseEvent":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "MyEvent":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericRecursiveImplicitConstructorErrors2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(5): ["Private", "Public", "PullSymbolVisibility"]
rebuilt        : ScopeId(2): ["PullSymbolVisibility"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "TypeScript2":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TypeScript2":
after transform: SymbolId(0): Span { start: 7, end: 18 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "PullSymbolVisibility":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "PullSymbol":
after transform: SymbolId(7): [ReferenceId(1), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(4): [ReferenceId(9), ReferenceId(10)]
Symbol reference IDs mismatch for "PullTypeSymbol":
after transform: SymbolId(18): [ReferenceId(3), ReferenceId(14)]
rebuilt        : SymbolId(9): [ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericReversingTypeParameters.ts
Symbol reference IDs mismatch for "BiMap":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericReversingTypeParameters2.ts
Symbol reference IDs mismatch for "BiMap":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericSignatureInheritance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericSignatureInheritance2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericSpecializationToTypeLiteral1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(27)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTemplateOverloadResolution.ts
Bindings mismatch:
after transform: ScopeId(0): ["expect", "fooFn"]
rebuilt        : ScopeId(0): ["expect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "expect":
after transform: SymbolId(3) "expect"
rebuilt        : SymbolId(0) "expect"
Reference symbol mismatch for "fooFn":
after transform: SymbolId(2) "fooFn"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "TemplateStringsArray"]
rebuilt        : ["fooFn"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTupleWithSimplifiableElements.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeAssertions3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeParameterEquivalence2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(10): [ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(13): []
Scope children mismatch:
after transform: ScopeId(24): [ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(14): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithCallableMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithCallableMembers2.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericWithCallSignatureReturningSpecialization.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericWithCallSignatures1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericWithIndexerOfTypeParameterType2.ts
Symbol reference IDs mismatch for "CollectionItem":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol reference IDs mismatch for "ListItem":
after transform: SymbolId(4): [ReferenceId(3)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generics0.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generics1NoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generics2NoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generics3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/generics4NoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericsAndHigherOrderFunctions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(22): [ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(24): [ScopeId(25), ScopeId(29)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(29): [ScopeId(30)]
rebuilt        : ScopeId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/genericsManyTypeParameters.ts
Bindings mismatch:
after transform: ScopeId(1): ["a10", "a11", "a12", "a13", "a14", "a15", "a16", "a17", "a18", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b1", "b10", "b11", "b12", "b13", "b14", "b15", "b16", "b17", "b18", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "c1", "c10", "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "x1", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "y1", "y10", "y12", "y13", "y14", "y15", "y16", "y17", "y18", "y19", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9"]
rebuilt        : ScopeId(1): ["a1", "a10", "a11", "a12", "a13", "a14", "a15", "a16", "a17", "a18", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b1", "b10", "b11", "b12", "b13", "b14", "b15", "b16", "b17", "b18", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "c1", "c10", "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "x1", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "y1", "y10", "y12", "y13", "y14", "y15", "y16", "y17", "y18", "y19", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9"]
Symbol flags mismatch for "a1":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "a1":
after transform: SymbolId(1): Span { start: 18, end: 20 }
rebuilt        : SymbolId(4): Span { start: 724, end: 731 }
Symbol reference IDs mismatch for "a1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(111)]
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol redeclarations mismatch for "a1":
after transform: SymbolId(1): [Span { start: 18, end: 20 }, Span { start: 724, end: 731 }]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getAccessorWithImpliedReturnTypeAndFunctionClassMerge.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "_":
after transform: SymbolId(0): SymbolFlags(Class | Function | ValueModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class | Function)
Symbol reference IDs mismatch for "_":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(5), ReferenceId(10)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "_":
after transform: SymbolId(0): [Span { start: 17, end: 18 }, Span { start: 63, end: 64 }, Span { start: 101, end: 102 }, Span { start: 352, end: 353 }]
rebuilt        : SymbolId(0): [Span { start: 17, end: 18 }, Span { start: 63, end: 64 }, Span { start: 352, end: 353 }]
Symbol flags mismatch for "MyModule":
after transform: SymbolId(14): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "MyModule":
after transform: SymbolId(14): Span { start: 435, end: 443 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getAndSetAsMemberNames.ts
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(14)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(12), ScopeId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getParameterNameAtPosition.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "cases":
after transform: SymbolId(3) "cases"
rebuilt        : SymbolId(0) "cases"
Reference symbol mismatch for "fn":
after transform: SymbolId(5) "fn"
rebuilt        : SymbolId(2) "fn"
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getterErrorMessageNotDuplicated.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getterSetterNonAccessor.ts
Unresolved references mismatch:
after transform: ["Object", "PropertyDescriptor"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/getterSetterSubtypeAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(18)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/global.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/globalFunctionAugmentationOverload.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/globalIsContextualKeyword.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo", "global", "obj"]
rebuilt        : ScopeId(0): ["a", "b", "foo", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/hidingCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/hidingConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/hidingIndexSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/higherOrderMappedIndexLookupInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "f1", "f2", "f3", "g", "h"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "h"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(12), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(3): []
Reference symbol mismatch for "f":
after transform: SymbolId(22) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeIntersectionAssignability.ts
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeNesting.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeWithNonHomomorphicInstantiationSpreadable1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "func1":
after transform: SymbolId(3) "func1"
rebuilt        : SymbolId(0) "func1"
Unresolved references mismatch:
after transform: ["PropertyKey", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/icomparable.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "sort":
after transform: SymbolId(2) "sort"
rebuilt        : SymbolId(0) "sort"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/identicalGenericConditionalsWithInferRelated.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["Boolean", "Error", "Number", "String"]
rebuilt        : ["Error"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/identicalTypesNoDifferByCheckOrder.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Omit", "Pick", "Required"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/identityAndDivergentNormalizedTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Extract", "Omit", "RequestInit", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/identityRelationNeverTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(13)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(4): []
Symbol flags mismatch for "State":
after transform: SymbolId(5): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "State":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "state":
after transform: SymbolId(10): [ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(4), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/illegalGenericWrapping1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/implementInterfaceAnyMemberWithVoid.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/implementsInClassExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/implicitAnyGenerics.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(6): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/implicitIndexSignatures.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(9), SymbolId(12), SymbolId(17), SymbolId(22), SymbolId(27), SymbolId(34)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(14), SymbolId(19), SymbolId(24), SymbolId(31)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "E1"]
rebuilt        : ScopeId(8): ["E1"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "E2"]
rebuilt        : ScopeId(9): ["E2"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["A", "B", "E3"]
rebuilt        : ScopeId(10): ["E3"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(35): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(32): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(38): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(34): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E3":
after transform: SymbolId(41): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(36): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getNumberIndexValue":
after transform: SymbolId(9) "getNumberIndexValue"
rebuilt        : SymbolId(7) "getNumberIndexValue"
Reference symbol mismatch for "getNumberIndexValue":
after transform: SymbolId(9) "getNumberIndexValue"
rebuilt        : SymbolId(7) "getNumberIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getStringIndexValue":
after transform: SymbolId(6) "getStringIndexValue"
rebuilt        : SymbolId(5) "getStringIndexValue"
Reference symbol mismatch for "getNumberIndexValue":
after transform: SymbolId(9) "getNumberIndexValue"
rebuilt        : SymbolId(7) "getNumberIndexValue"
Reference symbol mismatch for "getNumberIndexValue":
after transform: SymbolId(9) "getNumberIndexValue"
rebuilt        : SymbolId(7) "getNumberIndexValue"
Reference symbol mismatch for "getNumberIndexValue":
after transform: SymbolId(9) "getNumberIndexValue"
rebuilt        : SymbolId(7) "getNumberIndexValue"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importAliasAnExternalModuleInsideAnInternalModule.ts
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importAliasFromNamespace.ts
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "WhichThing"]
rebuilt        : ScopeId(4): ["WhichThing"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "My":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "My":
after transform: SymbolId(0): Span { start: 10, end: 12 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Internal":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Internal":
after transform: SymbolId(1): Span { start: 13, end: 21 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "WhichThing":
after transform: SymbolId(3): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importAliasWithDottedName.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importAndVariableDeclarationConflict2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importDecl.ts
Symbol reference IDs mismatch for "d":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importDeclWithExportModifierInAmbientContext.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["x"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importElisionEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["MyEnum", "a", "b", "c", "d"]
rebuilt        : ScopeId(1): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importElisionExportNonExportAndDefault.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["MyFunction"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "MyFunction":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "MyFunction":
after transform: SymbolId(0): Span { start: 10, end: 20 }
rebuilt        : SymbolId(0): Span { start: 52, end: 62 }
Symbol reference IDs mismatch for "MyFunction":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol redeclarations mismatch for "MyFunction":
after transform: SymbolId(0): [Span { start: 10, end: 20 }, Span { start: 52, end: 62 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpers.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata", "_decorateParam", "dec", "id", "result"]
rebuilt        : ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata", "_decorateParam", "id", "result"]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 83, end: 84 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(12): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 83, end: 84 }
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Number"]
rebuilt        : ["Function", "Number", "dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersAmd.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersES6.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_asyncToGenerator", "_checkInRHS", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_decorate", "_objectSpread", "_x", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "_asyncToGenerator", "_checkInRHS", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_decorate", "_objectSpread", "_x", "o", "y"]
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 40, end: 41 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(12): Span { start: 0, end: 0 }
rebuilt        : SymbolId(9): Span { start: 40, end: 41 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["WeakMap"]
rebuilt        : ["WeakMap", "dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersInAmbientContext.ts
Bindings mismatch:
after transform: ScopeId(0): ["N"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersInIsolatedModules.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata", "_decorateParam", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata", "_decorateParam"]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 83, end: 84 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 83, end: 84 }
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Number"]
rebuilt        : ["Function", "Number", "dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersInTsx.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "_objectSpread", "o", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "x"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(1) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React", "o"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersOutFile.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersSystem.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importHelpersWithLocalCollisions.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "__decorate", "__decorate2", "_objectSpread", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "__decorate2", "_objectSpread", "o", "y"]
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 57, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 57, end: 58 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importInTypePosition.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember12.ts
Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importOnAliasedIdentifiers.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importPropertyFromMappedType.ts
Bindings mismatch:
after transform: ScopeId(0): ["NotFound"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importTypeGenericArrowTypeParenthesized.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importUsedInExtendsList1.ts
Symbol reference IDs mismatch for "Sub":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/import_reference-exported-alias.ts
Symbol flags mismatch for "App":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "App":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Services":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Services":
after transform: SymbolId(1): Span { start: 31, end: 39 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/import_reference-to-type-alias.ts
Symbol flags mismatch for "App":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "App":
after transform: SymbolId(0): Span { start: 14, end: 17 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Services":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Services":
after transform: SymbolId(1): Span { start: 38, end: 46 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/import_unneeded-require-when-referenecing-aliased-type-throug-array.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importedAliasedConditionalTypeInstantiation.ts
Unresolved references mismatch:
after transform: ["Error", "Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importedAliasesInTypePositions.ts
Symbol flags mismatch for "elaborate":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "elaborate":
after transform: SymbolId(0): Span { start: 14, end: 23 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "nested":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "nested":
after transform: SymbolId(1): Span { start: 24, end: 30 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "mod":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "mod":
after transform: SymbolId(2): Span { start: 31, end: 34 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "name":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "name":
after transform: SymbolId(3): Span { start: 35, end: 39 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importedModuleClassNameClash.ts
Bindings mismatch:
after transform: ScopeId(0): ["m1"]
rebuilt        : ScopeId(0): ["foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | Import)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 48, end: 51 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 7, end: 10 }, Span { start: 48, end: 51 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["m1"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inKeywordAndIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inKeywordNarrowingWithNoUncheckedIndexedAccess.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(8)]
Reference symbol mismatch for "invariant":
after transform: SymbolId(0) "invariant"
rebuilt        : SymbolId(0) "invariant"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inKeywordTypeguard.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "AWithMethod", "AWithOptionalProp", "B", "BWithMethod", "BWithOptionalProp", "C", "ClassWithUnionProp", "D", "NegativeClassTest", "UnreachableCodeDetection", "_defineProperty", "checkIsTouchDevice", "error", "f", "f1", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "foo", "isAOrB", "isHTMLTable", "narrowsToNever", "negativeClassesTest", "negativeIntersectionTest", "negativeMultipleClassesTest", "negativePropTest", "negativeTestClassesWithMemberMissingInBothClasses", "negativeTestClassesWithMembers", "positiveClassesTest", "positiveIntersectionTest", "positiveTestClassesWithOptionalProperties", "sym", "test1", "test2", "test3", "x"]
rebuilt        : ScopeId(0): ["A", "AWithMethod", "AWithOptionalProp", "B", "BWithMethod", "BWithOptionalProp", "C", "ClassWithUnionProp", "D", "NegativeClassTest", "UnreachableCodeDetection", "_defineProperty", "checkIsTouchDevice", "f", "f1", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "foo", "isAOrB", "isHTMLTable", "narrowsToNever", "negativeClassesTest", "negativeIntersectionTest", "negativeMultipleClassesTest", "negativePropTest", "negativeTestClassesWithMemberMissingInBothClasses", "negativeTestClassesWithMembers", "positiveClassesTest", "positiveIntersectionTest", "positiveTestClassesWithOptionalProperties", "sym", "test1", "test2", "test3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(33), ScopeId(37), ScopeId(41), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(56), ScopeId(59), ScopeId(64), ScopeId(67), ScopeId(72), ScopeId(75), ScopeId(79), ScopeId(83), ScopeId(88), ScopeId(90), ScopeId(92), ScopeId(95), ScopeId(98), ScopeId(101), ScopeId(104), ScopeId(107), ScopeId(110), ScopeId(111), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(119), ScopeId(122)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(35), ScopeId(37), ScopeId(40), ScopeId(45), ScopeId(50), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(59), ScopeId(60), ScopeId(64), ScopeId(67), ScopeId(72), ScopeId(75), ScopeId(80), ScopeId(83), ScopeId(87), ScopeId(91), ScopeId(96), ScopeId(98), ScopeId(100), ScopeId(103), ScopeId(106), ScopeId(109), ScopeId(112), ScopeId(115), ScopeId(118), ScopeId(119), ScopeId(121), ScopeId(122), ScopeId(123), ScopeId(124), ScopeId(127), ScopeId(130)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(27), ReferenceId(34), ReferenceId(40)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(6), ReferenceId(28), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "AWithOptionalProp":
after transform: SymbolId(6): [ReferenceId(10)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "BWithOptionalProp":
after transform: SymbolId(7): [ReferenceId(11)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "AWithMethod":
after transform: SymbolId(10): [ReferenceId(15), ReferenceId(20)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "BWithMethod":
after transform: SymbolId(11): [ReferenceId(16), ReferenceId(21)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(16): [ReferenceId(29)]
rebuilt        : SymbolId(17): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(17): [ReferenceId(30)]
rebuilt        : SymbolId(18): []
Symbol reference IDs mismatch for "ClassWithUnionProp":
after transform: SymbolId(20): [ReferenceId(36)]
rebuilt        : SymbolId(21): []
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "isAOrB":
after transform: SymbolId(39) "isAOrB"
rebuilt        : SymbolId(38) "isAOrB"
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(41) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Error", "Record", "Symbol", "Window", "globalThis", "require", "window"]
rebuilt        : ["Array", "Symbol", "error", "require", "window", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/incrementOnNullAssertion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexIntoEnum.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexTypeNoSubstitutionTemplateLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessAndNullableNarrowing.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(16), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "hasOwnProperty":
after transform: SymbolId(16) "hasOwnProperty"
rebuilt        : SymbolId(8) "hasOwnProperty"
Unresolved references mismatch:
after transform: ["Partial", "PropertyKey", "Record", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessCanBeHighOrder.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(9), SymbolId(15), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(9), SymbolId(10)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "get":
after transform: SymbolId(0) "get"
rebuilt        : SymbolId(0) "get"
Reference symbol mismatch for "find":
after transform: SymbolId(5) "find"
rebuilt        : SymbolId(3) "find"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessKeyofNestedSimplifiedSubstituteUnwrapped.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Extract", "Parameters", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessNormalization.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(6), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "g":
after transform: SymbolId(3) "g"
rebuilt        : SymbolId(0) "g"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessRetainsIndexSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessToThisTypeOnIntersection01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexedAccessTypeConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexer2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexer3.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexerA.ts
Symbol reference IDs mismatch for "JQueryElement":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "JQuery":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexerReturningTypeParameter1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indexingTypesWithNever.ts
Bindings mismatch:
after transform: ScopeId(0): ["genericFn1", "genericFn2", "genericFn3", "key", "o0NameTest", "o0Test", "o1NameTest", "o1Test", "o2NameTest", "o2Test", "o3NameTest", "o3Test", "obj", "p0NameTest", "p0Test", "p1NameTest", "p1Test", "p2NameTest", "p2Test", "p3NameTest", "p3Test", "result3", "result4", "result5", "result6"]
rebuilt        : ScopeId(0): ["genericFn1", "genericFn2", "genericFn3", "result3", "result4", "result5", "result6"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "genericFn1":
after transform: SymbolId(4) "genericFn1"
rebuilt        : SymbolId(0) "genericFn1"
Reference symbol mismatch for "genericFn2":
after transform: SymbolId(8) "genericFn2"
rebuilt        : SymbolId(3) "genericFn2"
Reference symbol mismatch for "genericFn3":
after transform: SymbolId(12) "genericFn3"
rebuilt        : SymbolId(6) "genericFn3"
Reference symbol mismatch for "obj":
after transform: SymbolId(21) "obj"
rebuilt        : <None>
Reference symbol mismatch for "key":
after transform: SymbolId(22) "key"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "Required"]
rebuilt        : ["key", "obj"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indirectTypeParameterReferences.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(9), SymbolId(10), SymbolId(13), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(6), SymbolId(7), SymbolId(10), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []
Reference symbol mismatch for "f":
after transform: SymbolId(13) "f"
rebuilt        : SymbolId(10) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/indirectUniqueSymbolDeclarationEmit.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "rand":
after transform: SymbolId(2) "rand"
rebuilt        : SymbolId(2) "rand"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferConditionalConstraintMappedMember.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferFromGenericFunctionReturnTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7), SymbolId(11), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(50), SymbolId(65), SymbolId(72), SymbolId(78), SymbolId(79), SymbolId(84), SymbolId(87), SymbolId(91)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(39), SymbolId(48), SymbolId(53), SymbolId(58), SymbolId(59), SymbolId(64), SymbolId(66)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(30), ScopeId(36), ScopeId(41), ScopeId(46), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(24), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41)]
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26)]
rebuilt        : ScopeId(21): []
Scope children mismatch:
after transform: ScopeId(27): [ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(22): [ScopeId(23)]
Scope children mismatch:
after transform: ScopeId(36): [ScopeId(37), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(25): [ScopeId(26)]
Scope children mismatch:
after transform: ScopeId(41): [ScopeId(42), ScopeId(43), ScopeId(44)]
rebuilt        : ScopeId(28): [ScopeId(29)]
Scope children mismatch:
after transform: ScopeId(46): [ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(31): [ScopeId(32)]
Symbol reference IDs mismatch for "SetOf":
after transform: SymbolId(42): [ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(107), ReferenceId(109), ReferenceId(111), ReferenceId(118), ReferenceId(120), ReferenceId(122), ReferenceId(124), ReferenceId(132)]
rebuilt        : SymbolId(33): [ReferenceId(44), ReferenceId(50), ReferenceId(57)]
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "arrayize":
after transform: SymbolId(7) "arrayize"
rebuilt        : SymbolId(3) "arrayize"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "combine":
after transform: SymbolId(11) "combine"
rebuilt        : SymbolId(5) "combine"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "foo":
after transform: SymbolId(17) "foo"
rebuilt        : SymbolId(8) "foo"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "arrayize":
after transform: SymbolId(7) "arrayize"
rebuilt        : SymbolId(3) "arrayize"
Reference symbol mismatch for "combine":
after transform: SymbolId(11) "combine"
rebuilt        : SymbolId(5) "combine"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "combine":
after transform: SymbolId(11) "combine"
rebuilt        : SymbolId(5) "combine"
Reference symbol mismatch for "identity":
after transform: SymbolId(84) "identity"
rebuilt        : SymbolId(64) "identity"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "combine":
after transform: SymbolId(11) "combine"
rebuilt        : SymbolId(5) "combine"
Reference symbol mismatch for "wrap":
after transform: SymbolId(3) "wrap"
rebuilt        : SymbolId(1) "wrap"
Reference symbol mismatch for "identity":
after transform: SymbolId(84) "identity"
rebuilt        : SymbolId(64) "identity"
Reference symbol mismatch for "identity":
after transform: SymbolId(84) "identity"
rebuilt        : SymbolId(64) "identity"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferObjectTypeFromStringLiteralToKeyof.ts
Bindings mismatch:
after transform: ScopeId(0): ["inference1", "inference2", "two", "x", "y"]
rebuilt        : ScopeId(0): ["inference1", "inference2", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "inference1":
after transform: SymbolId(0) "inference1"
rebuilt        : SymbolId(0) "inference1"
Reference symbol mismatch for "two":
after transform: SymbolId(7) "two"
rebuilt        : <None>
Reference symbol mismatch for "inference2":
after transform: SymbolId(3) "inference2"
rebuilt        : SymbolId(2) "inference2"
Reference symbol mismatch for "two":
after transform: SymbolId(7) "two"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["two"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferParameterWithMethodCallInitializer.ts
Symbol reference IDs mismatch for "Example":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(2): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferPropertyWithContextSensitiveReturnStatement.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "repro":
after transform: SymbolId(0) "repro"
rebuilt        : SymbolId(0) "repro"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferRestArgumentsMappedTuple.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(6), SymbolId(9), SymbolId(14), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "extractPrimitivesOld":
after transform: SymbolId(6) "extractPrimitivesOld"
rebuilt        : SymbolId(0) "extractPrimitivesOld"
Reference symbol mismatch for "extractPrimitivesNew":
after transform: SymbolId(14) "extractPrimitivesNew"
rebuilt        : SymbolId(3) "extractPrimitivesNew"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferSecondaryParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferStringLiteralUnionForBindingElement.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(8), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(7), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "func":
after transform: SymbolId(0) "func"
rebuilt        : SymbolId(0) "func"
Reference symbol mismatch for "func":
after transform: SymbolId(0) "func"
rebuilt        : SymbolId(0) "func"
Reference symbol mismatch for "func":
after transform: SymbolId(0) "func"
rebuilt        : SymbolId(0) "func"
Reference symbol mismatch for "func":
after transform: SymbolId(0) "func"
rebuilt        : SymbolId(0) "func"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferTInParentheses.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(23), ScopeId(26)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferTupleFromBindingPattern.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferTypeConstraintInstantiationCircularity.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferTypeParameterConstraints.ts
Bindings mismatch:
after transform: ScopeId(0): ["BaseClass", "Klass", "_defineProperty", "m"]
rebuilt        : ScopeId(0): ["BaseClass", "Klass", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "BaseClass":
after transform: SymbolId(17): [ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Klass":
after transform: SymbolId(19): [ReferenceId(28)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "m":
after transform: SymbolId(29) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "require"]
rebuilt        : ["Error", "m", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferTypesWithFixedTupleExtendsAtVariadicPosition.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceAndHKTs.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "map", "typeClass", "x1", "x2"]
rebuilt        : ScopeId(0): ["x1", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "map":
after transform: SymbolId(9) "map"
rebuilt        : <None>
Reference symbol mismatch for "typeClass":
after transform: SymbolId(13) "typeClass"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(9) "map"
rebuilt        : <None>
Reference symbol mismatch for "typeClass":
after transform: SymbolId(13) "typeClass"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(14) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "map", "typeClass"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceAndSelfReferentialConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceDoesNotAddUndefinedOrNull.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(9), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Reference symbol mismatch for "toArray":
after transform: SymbolId(4) "toArray"
rebuilt        : SymbolId(0) "toArray"
Reference symbol mismatch for "toArray":
after transform: SymbolId(4) "toArray"
rebuilt        : SymbolId(0) "toArray"
Unresolved references mismatch:
after transform: ["ReadonlyArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceDoesntCompareAgainstUninstantiatedTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "ConcreteClass":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceErasedSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(23), ScopeId(25), ScopeId(30), ScopeId(32), ScopeId(33)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(34)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "SomeBaseClass":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "SomeAbstractClass":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(12), ReferenceId(15), ReferenceId(18)]
rebuilt        : SymbolId(3): [ReferenceId(6)]
Symbol reference IDs mismatch for "SomeClass":
after transform: SymbolId(9): [ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Promise", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceExactOptionalProperties1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceFromParameterlessLambda.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceLimit.ts
Bindings mismatch:
after transform: ScopeId(0): ["BrokenClass", "MyModule", "_asyncToGenerator"]
rebuilt        : ScopeId(0): ["BrokenClass", "_asyncToGenerator"]
Unresolved references mismatch:
after transform: ["Array", "Promise"]
rebuilt        : ["Promise"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceOfNullableObjectTypesWithCommonBase.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalProperties.ts
Bindings mismatch:
after transform: ScopeId(0): ["test", "v1", "v2", "v3", "v4", "v5", "v6", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["test", "v1", "v2", "v3", "v4", "v5", "v6", "y1", "y2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "x1":
after transform: SymbolId(3) "x1"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "x2":
after transform: SymbolId(4) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial", "Required"]
rebuilt        : ["x1", "x2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalPropertiesStrict.ts
Bindings mismatch:
after transform: ScopeId(0): ["test", "v1", "v2", "v3", "v4", "v5", "v6", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["test", "v1", "v2", "v3", "v4", "v5", "v6", "y1", "y2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "x1":
after transform: SymbolId(3) "x1"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "x2":
after transform: SymbolId(4) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial", "Required"]
rebuilt        : ["x1", "x2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalPropertiesToIndexSignatures.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a1", "a2", "a3", "a4", "foo", "obj", "param2", "query", "x1", "x2", "x3", "x4"]
rebuilt        : ScopeId(0): ["_objectSpread", "a1", "a2", "a3", "a4", "foo", "obj", "param2", "query"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "x1":
after transform: SymbolId(3) "x1"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "x2":
after transform: SymbolId(4) "x2"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "x3":
after transform: SymbolId(5) "x3"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "x4":
after transform: SymbolId(6) "x4"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Object", "encodeURIComponent", "require"]
rebuilt        : ["Math", "Object", "encodeURIComponent", "require", "x1", "x2", "x3", "x4"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceOuterResultNotIncorrectlyInstantiatedWithInnerResult.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(23): [ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(10): [ReferenceId(11)]
Unresolved references mismatch:
after transform: ["Object", "Omit"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferenceUnionOfObjectsMappedContextualType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingObjectLiteralMethod1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingObjectLiteralMethod2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingUsingApparentType1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingUsingApparentType2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingUsingApparentType3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionTypeNested.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionTypeSyntacticScenarios.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "identity":
after transform: SymbolId(5) "identity"
rebuilt        : SymbolId(3) "identity"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionTypeZip.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferentiallyTypingAnEmptyArray.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferredRestTypeFixedOnce.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferredReturnTypeIncorrectReuse1.ts
Bindings mismatch:
after transform: ScopeId(0): ["out", "out2", "t", "t2"]
rebuilt        : ScopeId(0): ["out", "out2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "t":
after transform: SymbolId(6) "t"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(18) "t2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReturnType", "parseInt"]
rebuilt        : ["parseInt", "t", "t2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferrenceInfiniteLoopWithSubtyping.ts
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferringAnyFunctionType1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferringAnyFunctionType2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferringAnyFunctionType3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferringAnyFunctionType4.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inferringAnyFunctionType5.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infiniteExpandingTypeThroughInheritanceInstantiation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingBaseTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingBaseTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "Validator2":
after transform: SymbolId(8): [ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "ViewModel":
after transform: SymbolId(10): [ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(2): []
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(12), ReferenceId(15)]
rebuilt        : [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypeAssignability.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypesNonGenericBase.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
Symbol reference IDs mismatch for "Functionality":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/infinitelyGenerativeInheritance1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritSameNamePrivatePropertiesFromSameOrigin.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberPropertyOverridingMethod.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceMemberPropertyOverridingProperty.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceOfGenericConstructorMethod1.ts
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceOfGenericConstructorMethod2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "N":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(4): Span { start: 69, end: 70 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticFuncOverridingAccessorOfFuncType.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticFuncOverridingPropertyOfFuncType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticMembersCompatible.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticPropertyOverridingAccessor.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticPropertyOverridingProperty.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritedConstructorPropertyContextualType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritedFunctionAssignmentCompatibility.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritedGenericCallSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritedMembersAndIndexSignaturesFromDifferentBases2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inheritedOverloadedSpecializedSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/initializersInAmbientEnums.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inlineConditionalHasSimilarAssignability.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inlineMappedTypeModifierDeclarationEmit.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/inlinedAliasAssignableToConstraintSameAsAlias.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(5): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(8), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(21), ReferenceId(24)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerAliases2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "_provider":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "_provider":
after transform: SymbolId(0): Span { start: 7, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "consumer":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "consumer":
after transform: SymbolId(2): Span { start: 171, end: 179 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "provider":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(5): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerBoundLambdaEmit.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerExtern.ts
Bindings mismatch:
after transform: ScopeId(1): ["B", "BB", "_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(3): Span { start: 95, end: 96 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Reference symbol mismatch for "BB":
after transform: SymbolId(1) "BB"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["BB", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerFunc.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(2): Span { start: 82, end: 83 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerOverloads.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/innerTypeArgumentInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instanceAndStaticDeclarations1.ts
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(10), ReferenceId(9), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(2): [ReferenceId(13), ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instanceOfAssignability.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(14), ReferenceId(21), ReferenceId(23)]
rebuilt        : SymbolId(1): [ReferenceId(15), ReferenceId(21)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(16), ReferenceId(19), ReferenceId(25)]
rebuilt        : SymbolId(2): [ReferenceId(18), ReferenceId(24)]
Symbol reference IDs mismatch for "Animal":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(27)]
rebuilt        : SymbolId(3): [ReferenceId(5)]
Symbol reference IDs mismatch for "Mammal":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(28)]
rebuilt        : SymbolId(4): [ReferenceId(8)]
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(32), ReferenceId(33), ReferenceId(35)]
rebuilt        : [ReferenceId(12), ReferenceId(30)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instanceSubtypeCheck1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instanceofTypeAliasToGenericClass.ts
Bindings mismatch:
after transform: ScopeId(0): ["TableClass", "_defineProperty", "fn", "fn2", "o"]
rebuilt        : ScopeId(0): ["TableClass", "_defineProperty", "fn", "fn2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "TableClass":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "TableClass":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(4), ReferenceId(6)]
Reference symbol mismatch for "o":
after transform: SymbolId(9) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiateConstraintsToTypeArguments2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiateContextualTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["Component", "GenericComponent", "Interesting", "N1", "NON_VOID_ACTION", "VOID_ACTION", "_defineProperty", "assignPartial", "createReducer", "defaultState", "fn", "handler", "handlers", "invoke", "obj", "outerBoxOfString", "passContentsToFunc", "useStringOrNumber", "x", "xx"]
rebuilt        : ScopeId(0): ["Component", "GenericComponent", "Interesting", "N1", "NON_VOID_ACTION", "VOID_ACTION", "_defineProperty", "assignPartial", "createReducer", "defaultState", "fn", "handler", "invoke", "obj", "passContentsToFunc", "useStringOrNumber", "xx"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(30), ScopeId(32), ScopeId(33), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(64), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(70)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(33): [SymbolId(52), SymbolId(60), SymbolId(64), SymbolId(68), SymbolId(97)]
rebuilt        : ScopeId(15): [SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(32), SymbolId(35)]
Scope children mismatch:
after transform: ScopeId(33): [ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(45), ScopeId(46)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Scope children mismatch:
after transform: ScopeId(34): [ScopeId(35)]
rebuilt        : ScopeId(16): []
Scope children mismatch:
after transform: ScopeId(43): [ScopeId(44)]
rebuilt        : ScopeId(19): []
Symbol flags mismatch for "Component":
after transform: SymbolId(10): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol flags mismatch for "GenericComponent":
after transform: SymbolId(13): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(6): SymbolFlags(Class)
Symbol flags mismatch for "N1":
after transform: SymbolId(51): SymbolFlags(ValueModule)
rebuilt        : SymbolId(26): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N1":
after transform: SymbolId(51): Span { start: 1772, end: 1774 }
rebuilt        : SymbolId(26): Span { start: 0, end: 0 }
Symbol flags mismatch for "Component":
after transform: SymbolId(52): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(28): SymbolFlags(Class)
Symbol reference IDs mismatch for "Component":
after transform: SymbolId(52): [ReferenceId(65), ReferenceId(79)]
rebuilt        : SymbolId(28): [ReferenceId(19)]
Reference symbol mismatch for "handlers":
after transform: SymbolId(6) "handlers"
rebuilt        : <None>
Reference symbol mismatch for "useStringOrNumber":
after transform: SymbolId(17) "useStringOrNumber"
rebuilt        : SymbolId(9) "useStringOrNumber"
Reference symbol mismatch for "createReducer":
after transform: SymbolId(35) "createReducer"
rebuilt        : SymbolId(16) "createReducer"
Reference symbol mismatch for "handler":
after transform: SymbolId(30) "handler"
rebuilt        : SymbolId(13) "handler"
Reference symbol mismatch for "handler":
after transform: SymbolId(30) "handler"
rebuilt        : SymbolId(13) "handler"
Reference symbol mismatch for "x":
after transform: SymbolId(49) "x"
rebuilt        : <None>
Reference symbol mismatch for "createElement":
after transform: SymbolId(60) "createElement"
rebuilt        : SymbolId(29) "createElement"
Reference symbol mismatch for "createElement2":
after transform: SymbolId(64) "createElement2"
rebuilt        : SymbolId(32) "createElement2"
Reference symbol mismatch for "passContentsToFunc":
after transform: SymbolId(78) "passContentsToFunc"
rebuilt        : SymbolId(38) "passContentsToFunc"
Reference symbol mismatch for "outerBoxOfString":
after transform: SymbolId(82) "outerBoxOfString"
rebuilt        : <None>
Reference symbol mismatch for "invoke":
after transform: SymbolId(86) "invoke"
rebuilt        : SymbolId(43) "invoke"
Reference symbol mismatch for "assignPartial":
after transform: SymbolId(90) "assignPartial"
rebuilt        : SymbolId(46) "assignPartial"
Unresolved references mismatch:
after transform: ["Partial", "Promise", "alert"]
rebuilt        : ["Promise", "alert", "handlers", "outerBoxOfString", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(100), ReferenceId(102), ReferenceId(103), ReferenceId(105), ReferenceId(106), ReferenceId(108)]
rebuilt        : [ReferenceId(32), ReferenceId(34), ReferenceId(36)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiateContextuallyTypedGenericThis.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiateCrossFileMerge.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "P":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiatedBaseTypeConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiatedBaseTypeConstraints2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiatedReturnTypeContravariance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/instantiatedTypeAliasDisplay.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7), SymbolId(9), SymbolId(19), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f1":
after transform: SymbolId(7) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(9) "f2"
rebuilt        : SymbolId(1) "f2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces0.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 30, end: 31 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 30, end: 31 }, Span { start: 136, end: 137 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces1.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 33, end: 34 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 33, end: 34 }, Span { start: 107, end: 108 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces2.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 33, end: 34 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 33, end: 34 }, Span { start: 100, end: 101 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces3.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 23, end: 24 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 23, end: 24 }, Span { start: 129, end: 130 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces4.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 30, end: 31 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 30, end: 31 }, Span { start: 134, end: 135 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces5.ts
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Interface | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 26, end: 27 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 26, end: 27 }, Span { start: 100, end: 101 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interface0.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceClassMerging.ts
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "_defineProperty", "bar", "obj"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "_defineProperty", "bar", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 149, end: 152 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 149, end: 152 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceClassMerging2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "bar", "foo"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "_defineProperty", "bar", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 89, end: 92 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 89, end: 92 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "Bar":
after transform: SymbolId(1): Span { start: 194, end: 197 }
rebuilt        : SymbolId(2): Span { start: 273, end: 276 }
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(1): [Span { start: 194, end: 197 }, Span { start: 273, end: 276 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceContextualType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration2.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["I2", "I3", "I4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "I2":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "I2":
after transform: SymbolId(1): Span { start: 42, end: 44 }
rebuilt        : SymbolId(0): Span { start: 55, end: 57 }
Symbol redeclarations mismatch for "I2":
after transform: SymbolId(1): [Span { start: 42, end: 44 }, Span { start: 55, end: 57 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "I3":
after transform: SymbolId(2): SymbolFlags(Function | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Function)
Symbol span mismatch for "I3":
after transform: SymbolId(2): Span { start: 73, end: 75 }
rebuilt        : SymbolId(1): Span { start: 89, end: 91 }
Symbol redeclarations mismatch for "I3":
after transform: SymbolId(2): [Span { start: 73, end: 75 }, Span { start: 89, end: 91 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "I4":
after transform: SymbolId(3): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "I4":
after transform: SymbolId(3): Span { start: 109, end: 111 }
rebuilt        : SymbolId(2): Span { start: 120, end: 129 }
Symbol redeclarations mismatch for "I4":
after transform: SymbolId(3): [Span { start: 109, end: 111 }, Span { start: 120, end: 129 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceExtendsClass1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Control":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceInReopenedModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "m":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 93, end: 94 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceInheritance2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceMergedUnconstrainedNoErrorIrrespectiveOfOrder.ts
Bindings mismatch:
after transform: ScopeId(0): ["ns"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceOnly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfacePropertiesWithSameName1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceSubtyping.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceWithCommaSeparators.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfaceWithOptionalProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/interfacedecl.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClass.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideTopLevelModuleWithExport.ts
Symbol flags mismatch for "x":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "x":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideTopLevelModuleWithoutExport.ts
Symbol flags mismatch for "x":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "x":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnum.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideTopLevelModuleWithExport.ts
Bindings mismatch:
after transform: ScopeId(2): ["Friday", "Saturday", "Sunday", "weekend"]
rebuilt        : ScopeId(2): ["weekend"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "weekend":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(4): [ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideTopLevelModuleWithoutExport.ts
Bindings mismatch:
after transform: ScopeId(2): ["Friday", "Saturday", "Sunday", "weekend"]
rebuilt        : ScopeId(2): ["weekend"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "weekend":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(4): [ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunction.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideTopLevelModuleWithExport.ts
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideTopLevelModuleWithoutExport.ts
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideTopLevelModuleWithExport.ts
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "b":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "b":
after transform: SymbolId(1): Span { start: 36, end: 37 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "b":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(5): [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideTopLevelModuleWithoutExport.ts
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "b":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "b":
after transform: SymbolId(1): Span { start: 36, end: 37 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "b":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(5): [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterface.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideTopLevelModuleWithExport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideTopLevelModuleWithoutExport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideTopLevelModuleWithExport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideTopLevelModuleWithoutExport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVar.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideLocalModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideLocalModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideTopLevelModuleWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideTopLevelModuleWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalAliasWithDottedNameEmit.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalImportInstantiatedModuleMergedWithClassNotReferencingInstanceNoConflict.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalImportUnInstantiatedModuleMergedWithClassNotReferencingInstanceNoConflict.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_defineProperty"]
rebuilt        : ScopeId(0): ["A", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 6, end: 7 }, Span { start: 38, end: 39 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/internalImportUnInstantiatedModuleNotReferencingInstanceNoConflict.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B"]
rebuilt        : ScopeId(0): ["B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "B":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(2): Span { start: 58, end: 59 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionApparentTypeCaching.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionConstraintReduction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10), ScopeId(15), ScopeId(19)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionOfMixinConstructorTypeAndNonConstructorType.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionOfTypeVariableHasApparentSignatures.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(3) "f"
rebuilt        : SymbolId(0) "f"
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionReductionGenericStringLikeType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionSatisfiesConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionTypeInference1.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionTypeNormalization.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7)]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(26): [ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(27): ["A", "a1", "a2", "a3", "a75", "a76", "a77"]
rebuilt        : ScopeId(4): ["A"]
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(28): ["B", "b1", "b2", "b86", "b87"]
rebuilt        : ScopeId(5): ["B"]
Scope flags mismatch:
after transform: ScopeId(28): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(29): ["C", "c1", "c2", "c210", "c211"]
rebuilt        : ScopeId(6): ["C"]
Scope flags mismatch:
after transform: ScopeId(29): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "enums":
after transform: SymbolId(27): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "enums":
after transform: SymbolId(27): Span { start: 1443, end: 1448 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "enums":
after transform: SymbolId(27): [ReferenceId(103), ReferenceId(104), ReferenceId(117), ReferenceId(118)]
rebuilt        : SymbolId(5): [ReferenceId(40), ReferenceId(41)]
Symbol flags mismatch for "A":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(28): [ReferenceId(100), ReferenceId(112)]
rebuilt        : SymbolId(7): [ReferenceId(17)]
Symbol flags mismatch for "B":
after transform: SymbolId(35): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(35): [ReferenceId(101), ReferenceId(114)]
rebuilt        : SymbolId(9): [ReferenceId(28)]
Symbol flags mismatch for "C":
after transform: SymbolId(40): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(40): [ReferenceId(102), ReferenceId(116)]
rebuilt        : SymbolId(11): [ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionTypeWithLeadingOperator.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionType_useDefineForClassFields.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionWithConstructSignaturePrototypeResult.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "EmberObject":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "EmberObject":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsAndOptionalProperties2.ts
Bindings mismatch:
after transform: ScopeId(0): ["ab_disabled_read", "ab_obj", "ab_primitive", "ab_prop_read", "ac_disabled_read", "ac_obj", "ac_primitive", "ac_prop_read"]
rebuilt        : ScopeId(0): ["ab_disabled_read", "ab_prop_read", "ac_disabled_read", "ac_prop_read"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["ab_obj", "ab_primitive", "ac_obj", "ac_primitive", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/intersectionsAndOptionalProperties3.ts
Bindings mismatch:
after transform: ScopeId(0): ["ab_disabled_read", "ab_obj", "ab_primitive", "ab_prop_read", "ac_disabled_read", "ac_obj", "ac_primitive", "ac_prop_read"]
rebuilt        : ScopeId(0): ["ab_disabled_read", "ab_prop_read", "ac_disabled_read", "ac_prop_read"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["ab_obj", "ab_primitive", "ac_obj", "ac_primitive", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/invalidThisEmitInContextualObjectLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ipromise2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Windows", "p", "p2", "x"]
rebuilt        : ScopeId(0): ["p", "p2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ipromise3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ipromise4.ts
Bindings mismatch:
after transform: ScopeId(0): ["Windows", "p"]
rebuilt        : ScopeId(0): ["p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isDeclarationVisibleNodeKinds.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(6): []
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(8): []
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(10): []
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(23): [ScopeId(24)]
rebuilt        : ScopeId(19): []
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26)]
rebuilt        : ScopeId(20): []
Symbol flags mismatch for "schema":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "schema":
after transform: SymbolId(0): Span { start: 25, end: 31 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "schema":
after transform: SymbolId(0): [Span { start: 25, end: 31 }, Span { start: 168, end: 174 }, Span { start: 309, end: 315 }, Span { start: 464, end: 470 }, Span { start: 613, end: 619 }, Span { start: 756, end: 762 }, Span { start: 908, end: 914 }, Span { start: 1055, end: 1061 }, Span { start: 1187, end: 1193 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationOutFile.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsLiterals.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsStrictBuiltinIteratorReturn.ts
Bindings mismatch:
after transform: ScopeId(0): ["a1", "a10", "a11", "a12", "a13", "a14", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "f1", "f10", "f11", "f12", "f13", "f14", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "x1", "x10", "x11", "x12", "x13", "x14", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9"]
rebuilt        : ScopeId(0): ["a1", "a10", "a11", "a12", "a13", "a14", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "f1", "f10", "f11", "f12", "f13", "f14", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Unresolved references mismatch:
after transform: ["BuiltinIteratorReturn", "Iterable", "IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesConstEnum.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["EventName"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesDontElideReExportStar.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesImportConstEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["BAR", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesImportConstEnumTypeOnly.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesNonAmbientConstEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "X"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-AMD.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "run":
after transform: SymbolId(0) "run"
rebuilt        : SymbolId(0) "run"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-CommonJS.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "run":
after transform: SymbolId(0) "run"
rebuilt        : SymbolId(0) "run"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "run":
after transform: SymbolId(0) "run"
rebuilt        : SymbolId(0) "run"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-System.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "run":
after transform: SymbolId(0) "run"
rebuilt        : SymbolId(0) "run"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-UMD.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "run":
after transform: SymbolId(0) "run"
rebuilt        : SymbolId(0) "run"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesShadowGlobalTypeNotValue.ts
Bindings mismatch:
after transform: ScopeId(0): ["Event"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModulesSketchyAliasLocalMerge.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/isolatedModules_resolveJsonModule_strict_outDir_commonJs.ts
Bindings mismatch:
after transform: ScopeId(0): ["j"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/iterableTReturnTNext.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyMap", "_source", "_wrapAsyncGenerator", "doubles", "map", "r1", "r2", "r3", "set", "source"]
rebuilt        : ScopeId(0): ["MyMap", "_source", "_wrapAsyncGenerator", "doubles", "r1", "r2", "r3", "source"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(7): []
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(1) "set"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Map", "MapIterator", "Set", "Symbol", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Symbol", "arguments", "map", "require", "set", "undefined"]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(10), ReferenceId(17)]
rebuilt        : [ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jqueryInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["p1", "p2", "shouldBeIdentity"]
rebuilt        : ScopeId(0): ["p2", "shouldBeIdentity"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "shouldBeIdentity":
after transform: SymbolId(6) "shouldBeIdentity"
rebuilt        : SymbolId(0) "shouldBeIdentity"
Reference symbol mismatch for "p1":
after transform: SymbolId(10) "p1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["p1"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsDeclarationsWithDefaultAsNamespaceLikeMerge.ts
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsDocDeclarationEmitDoesNotUseNodeModulesPathWithoutError.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsEmitIntersectionProperty.ts
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsFileCompilationDecoratorSyntax.ts
Symbol span mismatch for "C":
after transform: SymbolId(0): Span { start: 16, end: 17 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 16, end: 17 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsdocAccessEnumType.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsonFileImportChecksCallCorrectlyTwice.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxCallbackWithDestructuring.tsx
Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "_defineProperty", "_jsx", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Component", "MyComponent", "_defineProperty", "_jsx", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(14), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Component":
after transform: SymbolId(0): SymbolFlags(Class | Interface | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "Component":
after transform: SymbolId(0): Span { start: 31, end: 40 }
rebuilt        : SymbolId(3): Span { start: 75, end: 84 }
Symbol redeclarations mismatch for "Component":
after transform: SymbolId(0): [Span { start: 31, end: 40 }, Span { start: 75, end: 84 }]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxChildrenSingleChildConfusableWithMultipleChildrenNoError.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxComplexSignatureHasApplicabilityError.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(54), ScopeId(56), ScopeId(58), ScopeId(60), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(66), ScopeId(68), ScopeId(69), ScopeId(71), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(84), ScopeId(85), ScopeId(86)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(5): []
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(17), ReferenceId(19), ReferenceId(44), ReferenceId(50), ReferenceId(54), ReferenceId(82), ReferenceId(85), ReferenceId(88), ReferenceId(102), ReferenceId(180), ReferenceId(196), ReferenceId(206), ReferenceId(209), ReferenceId(233), ReferenceId(236), ReferenceId(242)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(12)]
Symbol flags mismatch for "ReactSelectClass":
after transform: SymbolId(19): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol reference IDs mismatch for "ReactSelectClass":
after transform: SymbolId(19): [ReferenceId(22), ReferenceId(197)]
rebuilt        : SymbolId(7): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Array", "Exclude", "HTMLAnchorElement", "HTMLDivElement", "HTMLInputElement", "JSX", "Pick", "Promise", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxContainsOnlyTriviaWhiteSpacesNotCountedAsChild.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "NoticeList", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["NoticeList", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxElementClassTooManyParams.tsx
Bindings mismatch:
after transform: ScopeId(0): ["ElemClass", "JSX", "_jsxFileName", "_reactJsxRuntime", "elem"]
rebuilt        : ScopeId(0): ["ElemClass", "_jsxFileName", "_reactJsxRuntime", "elem"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxElementsAsIdentifierNames.tsx
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["A", "B", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxEmitAttributeWithPreserve.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxEmitWithAttributes.ts
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Element":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Element":
after transform: SymbolId(2): Span { start: 358, end: 365 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxEmptyExpressionNotCountedAsChild.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndJsxFragmentFactory.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Frag", "_jsxFileName", "h"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndJsxFragmentFactoryNull.tsx
Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "h"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryIdentifier.ts
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Element":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Element":
after transform: SymbolId(2): Span { start: 358, end: 365 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryIdentifierAsParameter.ts
Bindings mismatch:
after transform: ScopeId(0): ["AppComponent", "JSX", "_jsxFileName"]
rebuilt        : ScopeId(0): ["AppComponent", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFactoryQualifiedName.ts
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Element":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Element":
after transform: SymbolId(2): Span { start: 358, end: 365 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFragmentAndFactoryUsedOnFragmentUse.tsx
Bindings mismatch:
after transform: ScopeId(0): ["a", "element", "fragment"]
rebuilt        : ScopeId(0): ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxFragmentFactoryNoUnusedLocals.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Counter", "Fragment", "_jsxFileName", "createElement"]
rebuilt        : ScopeId(0): ["Counter", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxGenericComponentWithSpreadingResultOfGenericFunction.tsx
Bindings mismatch:
after transform: ScopeId(0): ["GenericComponent", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "omit", "otherProps"]
rebuilt        : ScopeId(0): ["GenericComponent", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "omit"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "GenericComponent":
after transform: SymbolId(9) "GenericComponent"
rebuilt        : SymbolId(7) "GenericComponent"
Reference symbol mismatch for "omit":
after transform: SymbolId(0) "omit"
rebuilt        : SymbolId(3) "omit"
Reference symbol mismatch for "otherProps":
after transform: SymbolId(8) "otherProps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Omit", "require"]
rebuilt        : ["otherProps", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxHasLiteralType.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxInExtendsClause.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "React", "_jsxFileName", "createComponentClass"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName", "createComponentClass"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "createComponentClass":
after transform: SymbolId(6) "createComponentClass"
rebuilt        : SymbolId(1) "createComponentClass"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxInferenceProducesLiteralAsExpected.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "TestObject":
after transform: SymbolId(4): [ReferenceId(11), ReferenceId(15)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Function", "React"]
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicElementsCompatability.tsx
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicElementsExtendsRecord.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxLibraryManagedAttributesUnusedGeneric.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Comp", "React", "_jsxFileName", "jsx"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(12)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Comp":
after transform: SymbolId(16) "Comp"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Comp"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxLocalNamespaceIndexSignatureNoCrash.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 13, end: 14 }, Span { start: 106, end: 107 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxMultilineAttributeValuesReact.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "a", "b", "c"]
rebuilt        : ScopeId(0): ["_jsxFileName", "a", "b", "c"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceGlobalReexport.tsx
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Partial", "Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceImplicitImportJSXNamespace.tsx
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Partial", "Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceImplicitImportJSXNamespaceFromConfigPickedOverGlobalOne.tsx
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceImplicitImportJSXNamespaceFromPragmaPickedOverGlobalOne.tsx
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceReexports.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "createElement"]
rebuilt        : ScopeId(0): ["createElement"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxNamespacedNameNotComparedToNonMatchingIndexSignature.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxPartialSpread.tsx
Symbol reference IDs mismatch for "Select":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(3): [ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Parameters", "Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxPropsAsIdentifierNames.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsx", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/jsxSpreadFirstUnionNoErrors.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Info", "React", "_jsxFileName", "_objectSpread", "a", "b", "c", "infoProps"]
rebuilt        : ScopeId(0): ["Info", "React", "_jsxFileName", "_objectSpread", "a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "infoProps":
after transform: SymbolId(6) "infoProps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["infoProps"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/keyRemappingKeyofResult.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "sym", "x"]
rebuilt        : ScopeId(0): ["f", "g", "sym"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "sym":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(12), ReferenceId(14), ReferenceId(20), ReferenceId(29), ReferenceId(31), ReferenceId(37), ReferenceId(53)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(6), ReferenceId(9), ReferenceId(13), ReferenceId(16)]
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "PropertyKey", "Record", "Symbol"]
rebuilt        : ["Symbol", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/keyofGenericExtendingClassDoubleLayer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "PersonModel":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["Date", "Omit", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/keyofModuleObjectHasCorrectKeys.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(1) "test"
rebuilt        : SymbolId(1) "test"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/keyofObjectWithGlobalSymbolIncluded.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "obj":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/keywordInJsxIdentifier.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/lambdaParameterWithTupleArgsHasCorrectAssignability.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "GenericClass":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/largeTupleTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(14), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(18): [ScopeId(19)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "ArrayValidator":
after transform: SymbolId(20): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "ArrayValidator":
after transform: SymbolId(20): [ReferenceId(56)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array", "Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/letConstMatchingParameterNames.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/letDeclarations2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/letKeepNamesOfTopLevelItems.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(3): Span { start: 45, end: 46 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/libdtsFix.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/library_RegExpExecArraySlice.ts
Unresolved references mismatch:
after transform: ["RegExpExecArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/listFailure.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Editor":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Editor":
after transform: SymbolId(0): Span { start: 7, end: 13 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "List":
after transform: SymbolId(13): [ReferenceId(0), ReferenceId(4), ReferenceId(10), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(29)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(17): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(41)]
rebuilt        : SymbolId(15): [ReferenceId(3), ReferenceId(20)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/literalWideningWithCompoundLikeAssignments.ts
Bindings mismatch:
after transform: ScopeId(0): ["empty", "foo", "literalUnion", "numLiteral", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["empty", "foo", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "literalUnion":
after transform: SymbolId(12) "literalUnion"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math"]
rebuilt        : ["Math", "literalUnion", "numLiteral"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/localClassesInLoop.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/localClassesInLoop_ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/localImportNameVsGlobalName.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["DOWN", "Key", "LEFT", "RIGHT", "UP"]
rebuilt        : ScopeId(2): ["Key"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Keyboard":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Keyboard":
after transform: SymbolId(0): Span { start: 7, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Key":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "App":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "App":
after transform: SymbolId(6): Span { start: 72, end: 75 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Key":
after transform: SymbolId(7): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(6): [ReferenceId(17), ReferenceId(19), ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/localTypeParameterInferencePriority.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "Table":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(17), ReferenceId(22), ReferenceId(25)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Array", "Pick", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/m7Bugs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(3): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mapConstructor.ts
Unresolved references mismatch:
after transform: ["Iterable", "Map"]
rebuilt        : ["Map"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mapConstructorOnReadonlyTuple.ts
Unresolved references mismatch:
after transform: ["Map", "WeakMap", "const"]
rebuilt        : ["Map", "WeakMap"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mapGroupBy.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(4), ReferenceId(6)]
rebuilt        : [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mapOnTupleTypes02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedArrayTupleIntersections.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedToToIndexSignatureInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "a", "enumValues", "fn", "x"]
rebuilt        : ScopeId(0): ["E", "enumValues", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "E"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(9): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(9): [ReferenceId(8), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(5), ReferenceId(7)]
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "enumValues":
after transform: SymbolId(5) "enumValues"
rebuilt        : SymbolId(0) "enumValues"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : ["a", "fn"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeAndIndexSignatureRelation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["PropertyKey", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeCircularReferenceInAccessor.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeContextualTypesApplied.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(9), SymbolId(13), SymbolId(17), SymbolId(22), SymbolId(26), SymbolId(30), SymbolId(34)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Reference symbol mismatch for "mapped1":
after transform: SymbolId(1) "mapped1"
rebuilt        : SymbolId(0) "mapped1"
Reference symbol mismatch for "mapped2":
after transform: SymbolId(5) "mapped2"
rebuilt        : SymbolId(2) "mapped2"
Reference symbol mismatch for "mapped3":
after transform: SymbolId(9) "mapped3"
rebuilt        : SymbolId(4) "mapped3"
Reference symbol mismatch for "mapped4":
after transform: SymbolId(13) "mapped4"
rebuilt        : SymbolId(6) "mapped4"
Reference symbol mismatch for "mapped5":
after transform: SymbolId(17) "mapped5"
rebuilt        : SymbolId(8) "mapped5"
Reference symbol mismatch for "mapped6":
after transform: SymbolId(22) "mapped6"
rebuilt        : SymbolId(10) "mapped6"
Reference symbol mismatch for "mapped7":
after transform: SymbolId(26) "mapped7"
rebuilt        : SymbolId(12) "mapped7"
Reference symbol mismatch for "mapped8":
after transform: SymbolId(30) "mapped8"
rebuilt        : SymbolId(14) "mapped8"
Reference symbol mismatch for "mapped9":
after transform: SymbolId(34) "mapped9"
rebuilt        : SymbolId(16) "mapped9"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericIndexedAccess.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericInstantiationPreservesHomomorphism.ts
Bindings mismatch:
after transform: ScopeId(0): ["usePrivateType"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericInstantiationPreservesInlineForm.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Unresolved references mismatch:
after transform: ["Record", "Required"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceAliasSubstitution.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceCircularity.ts
Bindings mismatch:
after transform: ScopeId(0): ["h"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "h":
after transform: SymbolId(5) "h"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(5) "h"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["h"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceToMappedType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "Base":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol flags mismatch for "Derived":
after transform: SymbolId(5): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeMultiInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "mergeStyleSets":
after transform: SymbolId(1) "mergeStyleSets"
rebuilt        : SymbolId(0) "mergeStyleSets"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeNestedGenericInstantiation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "chain":
after transform: SymbolId(4) "chain"
rebuilt        : SymbolId(0) "chain"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeOverArrayWithBareAnyRestCanBeUsedAsRestParam1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeParameterConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypePartialConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "MyClass":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypePartialNonHomomorphicBaseConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeRecursiveInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "type":
after transform: SymbolId(6) "type"
rebuilt        : SymbolId(0) "type"
Reference symbol mismatch for "type":
after transform: SymbolId(6) "type"
rebuilt        : SymbolId(0) "type"
Reference symbol mismatch for "type":
after transform: SymbolId(6) "type"
rebuilt        : SymbolId(0) "type"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeTupleConstraintAssignability.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7), SymbolId(9), SymbolId(23), SymbolId(29)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(4): []
Symbol flags mismatch for "ZodEnum":
after transform: SymbolId(7): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "ZodEnum":
after transform: SymbolId(7): [ReferenceId(12)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "TupleSchema":
after transform: SymbolId(23): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithAsClauseAndLateBoundProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithNameClauseAppliedToArrayType.ts
Bindings mismatch:
after transform: ScopeId(0): ["doArrayStuff", "x"]
rebuilt        : ScopeId(0): ["doArrayStuff"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "doArrayStuff":
after transform: SymbolId(4) "doArrayStuff"
rebuilt        : SymbolId(0) "doArrayStuff"
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/memberAccessMustUseModuleInstances.ts
Symbol reference IDs mismatch for "Promise":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/memberVariableDeclarations1.ts
Symbol reference IDs mismatch for "Employee":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Employee2":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergeMultipleInterfacesReexported.ts
Bindings mismatch:
after transform: ScopeId(0): ["EventList", "p012", "t"]
rebuilt        : ScopeId(0): ["t"]
Reference symbol mismatch for "p012":
after transform: SymbolId(1) "p012"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["p012"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedEnumDeclarationCodeGen.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E", "c"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "E":
after transform: SymbolId(0): [Span { start: 5, end: 6 }, Span { start: 33, end: 34 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedInstantiationAssignment.ts
Symbol reference IDs mismatch for "GenericObject":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "GenericObjectWithoutSetter":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol reference IDs mismatch for "NormalObject":
after transform: SymbolId(7): [ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(5): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedInterfaceFromMultipleFiles1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen.ts
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 14, end: 15 }, Span { start: 163, end: 164 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Y":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(1): Span { start: 36, end: 37 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "Y":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(4): Span { start: 185, end: 186 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "my":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "my":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "my":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 60, end: 62 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "data":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(1): Span { start: 10, end: 14 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "foo":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(2): Span { start: 15, end: 18 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "data":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(4): Span { start: 63, end: 67 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen3.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "my":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "my":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "my":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 56, end: 58 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "data":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(1): Span { start: 10, end: 14 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "data":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(3): Span { start: 59, end: 63 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "foo":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(4): Span { start: 64, end: 67 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen4.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "superContain":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "superContain":
after transform: SymbolId(0): Span { start: 7, end: 19 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "contain":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "contain":
after transform: SymbolId(1): Span { start: 40, end: 47 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "my":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "my":
after transform: SymbolId(2): Span { start: 72, end: 74 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "my":
after transform: SymbolId(2): [Span { start: 72, end: 74 }, Span { start: 202, end: 204 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "buz":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "buz":
after transform: SymbolId(3): Span { start: 75, end: 78 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "data":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(4): Span { start: 107, end: 111 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol flags mismatch for "buz":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "buz":
after transform: SymbolId(6): Span { start: 205, end: 208 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol flags mismatch for "data":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "data":
after transform: SymbolId(7): Span { start: 237, end: 241 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationWithSharedExportedVar.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromAlias.ts
Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "_decorate", "_decorateMetadata", "_defineProperty", "annotation"]
rebuilt        : ScopeId(0): ["ClassA", "_decorate", "_decorateMetadata", "_defineProperty", "annotation"]
Unresolved references mismatch:
after transform: ["Object", "PropertyDecorator"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromAlias2.ts
Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "_decorate", "_decorateMetadata", "_defineProperty", "annotation"]
rebuilt        : ScopeId(0): ["ClassA", "_decorate", "_decorateMetadata", "_defineProperty", "annotation"]
Unresolved references mismatch:
after transform: ["Object", "PropertyDecorator"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromModule.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "MyModule":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "MyModule":
after transform: SymbolId(0): Span { start: 7, end: 15 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Leg":
after transform: SymbolId(4): [ReferenceId(1), ReferenceId(5), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(9): [ReferenceId(6), ReferenceId(12), ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfEventAlias.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfStringLiteral.ts
Unresolved references mismatch:
after transform: ["Object", "String", "require"]
rebuilt        : ["String", "require"]
Unresolved reference IDs mismatch for "String":
after transform: [ReferenceId(3), ReferenceId(4)]
rebuilt        : [ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfUnion.ts
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(5): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(7): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(42), ReferenceId(47), ReferenceId(48)]
rebuilt        : SymbolId(9): [ReferenceId(30), ReferenceId(39), ReferenceId(40)]
Unresolved references mismatch:
after transform: ["Boolean", "Number", "Object", "String", "require"]
rebuilt        : ["Boolean", "Number", "Object", "require"]
Unresolved reference IDs mismatch for "Boolean":
after transform: [ReferenceId(22), ReferenceId(23), ReferenceId(28)]
rebuilt        : [ReferenceId(14)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(18), ReferenceId(29), ReferenceId(51), ReferenceId(55), ReferenceId(63)]
rebuilt        : [ReferenceId(9), ReferenceId(19), ReferenceId(42), ReferenceId(47), ReferenceId(57)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataOfUnionWithNull.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(10), ReferenceId(12)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(31), ReferenceId(35), ReferenceId(40), ReferenceId(43), ReferenceId(46), ReferenceId(49), ReferenceId(52), ReferenceId(57), ReferenceId(62), ReferenceId(66), ReferenceId(70), ReferenceId(75)]
rebuilt        : SymbolId(7): [ReferenceId(19), ReferenceId(24), ReferenceId(29), ReferenceId(33), ReferenceId(37), ReferenceId(41), ReferenceId(45), ReferenceId(50), ReferenceId(55), ReferenceId(60), ReferenceId(65), ReferenceId(70)]
Unresolved references mismatch:
after transform: ["Boolean", "Object", "String", "Symbol", "require"]
rebuilt        : ["Boolean", "Object", "require"]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(29), ReferenceId(38), ReferenceId(55), ReferenceId(60), ReferenceId(64), ReferenceId(68), ReferenceId(73)]
rebuilt        : [ReferenceId(18), ReferenceId(28), ReferenceId(49), ReferenceId(54), ReferenceId(59), ReferenceId(64), ReferenceId(69)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/metadataReferencedWithinFilteredUnion.ts
Bindings mismatch:
after transform: ScopeId(0): ["Class1", "Class2", "_decorate", "_decorateMetadata", "decorate"]
rebuilt        : ScopeId(0): ["Class2", "_decorate", "_decorateMetadata", "decorate"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/methodContainingLocalFunction.ts
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(16): ["A", "E"]
rebuilt        : ScopeId(16): ["E"]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(0x0)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(19): Span { start: 758, end: 759 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(23): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(19): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/methodSignatureDeclarationEmit1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/missingImportAfterModuleImport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/missingSemicolonInModuleSpecifier.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/missingTypeArguments3.ts
Bindings mismatch:
after transform: ScopeId(0): ["linq"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixedExports.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "M", "M1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixedTypeEnumComparison.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "E2", "someNumber", "someString", "someValue", "unionOfEnum"]
rebuilt        : ScopeId(0): ["E", "E2", "someValue"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["E", "N1", "N2", "S1", "S2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["C1", "E2", "N1", "S1"]
rebuilt        : ScopeId(6): ["E2"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(28)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
Symbol flags mismatch for "E2":
after transform: SymbolId(9): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "unionOfEnum":
after transform: SymbolId(6) "unionOfEnum"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someValue":
after transform: SymbolId(8) "someValue"
rebuilt        : SymbolId(2) "someValue"
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["someNumber", "someString", "unionOfEnum"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixinIntersectionIsValidbaseType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixinOverMappedTypeNoCrash.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixingApparentTypeOverrides.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mixingFunctionAndAmbientModule1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(10), SymbolId(26)]
rebuilt        : ScopeId(6): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(14), SymbolId(27)]
rebuilt        : ScopeId(8): [SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(8): [ScopeId(9), ScopeId(10)]
Binding symbols mismatch:
after transform: ScopeId(15): [SymbolId(19), SymbolId(28)]
rebuilt        : ScopeId(11): [SymbolId(19), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(13)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "My":
after transform: SymbolId(1): SymbolFlags(Function | ValueModule | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Function)
Symbol span mismatch for "My":
after transform: SymbolId(1): Span { start: 30, end: 32 }
rebuilt        : SymbolId(2): Span { start: 84, end: 86 }
Symbol redeclarations mismatch for "My":
after transform: SymbolId(1): [Span { start: 30, end: 32 }, Span { start: 84, end: 86 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "B":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(4): Span { start: 112, end: 113 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "My":
after transform: SymbolId(5): SymbolFlags(Function | ValueModule | Ambient)
rebuilt        : SymbolId(6): SymbolFlags(Function)
Symbol span mismatch for "My":
after transform: SymbolId(5): Span { start: 135, end: 137 }
rebuilt        : SymbolId(6): Span { start: 189, end: 191 }
Symbol redeclarations mismatch for "My":
after transform: SymbolId(5): [Span { start: 135, end: 137 }, Span { start: 189, end: 191 }, Span { start: 218, end: 220 }]
rebuilt        : SymbolId(6): [Span { start: 189, end: 191 }, Span { start: 218, end: 220 }]
Symbol flags mismatch for "C":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 243, end: 244 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol flags mismatch for "D":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(13): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "D":
after transform: SymbolId(13): Span { start: 354, end: 355 }
rebuilt        : SymbolId(13): Span { start: 0, end: 0 }
Symbol flags mismatch for "E":
after transform: SymbolId(18): SymbolFlags(ValueModule)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "E":
after transform: SymbolId(18): Span { start: 499, end: 500 }
rebuilt        : SymbolId(18): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modFunctionCrash.ts
Bindings mismatch:
after transform: ScopeId(0): ["Q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "Q":
after transform: SymbolId(0) "Q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Q"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_TargetES5UsingES6Lib.ts
Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAliasInterface.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(14): [ScopeId(15)]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Symbol flags mismatch for "_modes":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "_modes":
after transform: SymbolId(0): Span { start: 7, end: 13 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "_modes":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol flags mismatch for "editor":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "editor":
after transform: SymbolId(3): Span { start: 165, end: 171 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol flags mismatch for "editor2":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "editor2":
after transform: SymbolId(11): Span { start: 493, end: 500 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "Foo":
after transform: SymbolId(16): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(16): Span { start: 685, end: 688 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(16): [ReferenceId(9), ReferenceId(22), ReferenceId(23)]
rebuilt        : SymbolId(16): [ReferenceId(8), ReferenceId(9)]
Symbol flags mismatch for "A1":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(22): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A1":
after transform: SymbolId(21): Span { start: 799, end: 801 }
rebuilt        : SymbolId(22): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(21): [ReferenceId(11), ReferenceId(28), ReferenceId(29)]
rebuilt        : SymbolId(22): [ReferenceId(14), ReferenceId(15)]
Symbol flags mismatch for "B1":
after transform: SymbolId(24): SymbolFlags(ValueModule)
rebuilt        : SymbolId(25): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B1":
after transform: SymbolId(24): Span { start: 868, end: 870 }
rebuilt        : SymbolId(25): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName.ts
Bindings mismatch:
after transform: ScopeId(0): ["X", "z", "z2"]
rebuilt        : ScopeId(0): ["z", "z2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName3.ts
Bindings mismatch:
after transform: ScopeId(0): ["X", "z", "z2"]
rebuilt        : ScopeId(0): ["z", "z2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName4.ts
Bindings mismatch:
after transform: ScopeId(0): ["D3"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationCollidingNamesInAugmentation1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDeclarationEmit1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDeclarationEmit2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesInterfaceMergeOfReexport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesNamespaceEnumMergeOfReexport.ts
Bindings mismatch:
after transform: ScopeId(0): ["Root"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesNamespaceMergeOfReexport.ts
Bindings mismatch:
after transform: ScopeId(0): ["Root"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDuringSyntheticDefaultCheck.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendAmbientModule1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendAmbientModule2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendFileModule1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendFileModule2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal1.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal2.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal3.ts
Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports1.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports4.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "N"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["N", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports5.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "N"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["N", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports6.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "N"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["N", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule3.ts
Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule4.ts
Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationNoNewNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationOfAlias.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsBundledOutput1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports1.ts
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports2.ts
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports3.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "Cls"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports4.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleCodeGenTest3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleCodeGenTest5.ts
Bindings mismatch:
after transform: ScopeId(7): ["A", "E1"]
rebuilt        : ScopeId(9): ["E1"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(9): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["B", "E2"]
rebuilt        : ScopeId(10): ["E2"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(10): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(9): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleCodegenTest4.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleDeclarationExportStarShadowingGlobalIsNameable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleIdentifiers.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleImportedForTypeArgumentPosition.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleLocalImportNotIncorrectlyRedirected.ts
Bindings mismatch:
after transform: ScopeId(0): ["ISpinButton"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleMemberWithoutTypeAnnotation1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Symbol flags mismatch for "TypeScript":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TypeScript":
after transform: SymbolId(0): Span { start: 7, end: 17 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "TypeScript":
after transform: SymbolId(0): [Span { start: 7, end: 17 }, Span { start: 146, end: 156 }, Span { start: 535, end: 545 }, Span { start: 879, end: 889 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Parser":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Parser":
after transform: SymbolId(1): Span { start: 18, end: 24 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "PositionedElement":
after transform: SymbolId(5): [ReferenceId(3), ReferenceId(19)]
rebuilt        : SymbolId(6): [ReferenceId(8)]
Symbol flags mismatch for "Syntax":
after transform: SymbolId(18): SymbolFlags(ValueModule)
rebuilt        : SymbolId(21): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Syntax":
after transform: SymbolId(18): Span { start: 890, end: 896 }
rebuilt        : SymbolId(21): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["ISyntaxToken", "PositionedElement", "PositionedToken", "Syntax", "SyntaxNode"]
rebuilt        : ["PositionedToken", "Syntax"]
Unresolved reference IDs mismatch for "PositionedToken":
after transform: [ReferenceId(5), ReferenceId(9)]
rebuilt        : [ReferenceId(20)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleMemberWithoutTypeAnnotation2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleMerge.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 101, end: 102 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 101, end: 102 }, Span { start: 227, end: 228 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleMergeConstructor.ts
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleNoEmit.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleOuterQualification.ts
Bindings mismatch:
after transform: ScopeId(0): ["outer"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modulePreserve2.ts
Bindings mismatch:
after transform: ScopeId(0): ["esm"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modulePreserve5.ts
Bindings mismatch:
after transform: ScopeId(0): ["data1", "data2"]
rebuilt        : ScopeId(0): ["data2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/modulePreserveImportHelpers.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_decorate", "dec"]
rebuilt        : ScopeId(0): ["A", "_decorate"]
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 42, end: 43 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 42, end: 43 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleRedifinitionErrors.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 6, end: 7 }, Span { start: 19, end: 20 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleReopenedTypeOtherBlock.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 82, end: 83 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["I"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleReopenedTypeSameBlock.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 40, end: 41 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionAsTypeReferenceDirective.ts
Bindings mismatch:
after transform: ScopeId(0): ["a2"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionAsTypeReferenceDirectiveAmbient.ts
Bindings mismatch:
after transform: ScopeId(0): ["a2"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionPackageIdWithRelativeAndAbsolutePath.ts
Bindings mismatch:
after transform: ScopeId(0): ["makeSharedOption", "t"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_notSupported3.ts
Bindings mismatch:
after transform: ScopeId(0): ["jsx"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_withAmbientPresent.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_withPaths.ts
Bindings mismatch:
after transform: ScopeId(0): ["relative", "relative2", "test", "test2"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithRequire.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo", "require"]
rebuilt        : ScopeId(0): ["foo"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithRequireAndImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "foo", "require"]
rebuilt        : ScopeId(0): ["a", "foo"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_empty.ts
Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_notSpecified.ts
Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_oneBlank.ts
Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_dirModuleWithIndex.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModulePath.ts
Bindings mismatch:
after transform: ScopeId(0): ["iosfoo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModule_withPaths.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios", "ios2", "ios3"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalTSModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_jsModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank1.ts
Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank2.ts
Bindings mismatch:
after transform: ScopeId(0): ["native"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank3.ts
Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSymlinks.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "MyClass2", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSymlinks_withOutDir.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "MyClass2", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_classicPrefersTs.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_explicitNodeModulesImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_explicitNodeModulesImport_implicitAny.ts
Bindings mismatch:
after transform: ScopeId(0): ["y"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_notAtPackageRoot.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_notAtPackageRoot_fakeScopedPackage.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_scopedPackage.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_fakeScopedPackage.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_mainFieldInSubDirectory.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleResolution_relativeImportJsFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSameValueDuplicateExportedBindings2.ts
Bindings mismatch:
after transform: ScopeId(1): ["Animals", "Cat", "Dog"]
rebuilt        : ScopeId(1): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Animals":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleScopingBug.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "X":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(6): Span { start: 207, end: 208 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "Z":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 9, end: 10 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "A":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(3): Span { start: 75, end: 76 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(4): Span { start: 77, end: 78 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "Z":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 9, end: 10 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "A":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(3): Span { start: 75, end: 76 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(4): Span { start: 77, end: 78 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt4.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["_M2", "bar"]
rebuilt        : ScopeId(5): ["M", "_M2", "bar"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol flags mismatch for "Z":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 9, end: 10 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "A":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(3): Span { start: 75, end: 76 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(4): Span { start: 77, end: 78 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(5): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(5): Span { start: 95, end: 96 }
rebuilt        : SymbolId(9): Span { start: 112, end: 113 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(5): [Span { start: 95, end: 96 }, Span { start: 112, end: 113 }]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt6.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "Z":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Z":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7)]
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 9, end: 10 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "A":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(3): Span { start: 75, end: 76 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "M":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(4): Span { start: 77, end: 78 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleSymbolMerging.ts
Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleUnassignedVariable.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleVariables.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleVisibilityTest1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduleWithTryStatement1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/module_augmentUninstantiatedModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/module_augmentUninstantiatedModule2.ts
Bindings mismatch:
after transform: ScopeId(0): ["ng"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ng":
after transform: SymbolId(0) "ng"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "ng"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/moduledecl.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multiCallOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multiExtendsSplitInterfaces2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multiModuleClodule1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multiModuleFundule1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multiSignatureTypeInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "ok1", "ok2", "ok3", "ok4", "ok5", "ok6"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(20), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/multipleInferenceContexts.ts
Bindings mismatch:
after transform: ScopeId(0): ["Moon", "r2"]
rebuilt        : ScopeId(0): ["r2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "Moon":
after transform: SymbolId(7) "Moon"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ThisType"]
rebuilt        : ["Moon"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mutrec.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveGenericBaseTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveGenericBaseTypes2.ts
Symbol reference IDs mismatch for "foo2":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveInference.ts
Symbol reference IDs mismatch for "X":
after transform: SymbolId(4): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveInterfaceDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nameCollisionWithBlockScopedVariable1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 43, end: 44 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/namedFunctionExpressionInModule.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Variables":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Variables":
after transform: SymbolId(0): Span { start: 7, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/namespaces1.ts
Bindings mismatch:
after transform: ScopeId(0): ["X", "x", "x2"]
rebuilt        : ScopeId(0): ["x", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/namespaces2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 29, end: 30 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/namespacesDeclaration1.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/namespacesWithTypeAliasOnlyExportsMerge.ts
Bindings mismatch:
after transform: ScopeId(0): ["Q", "Q2", "Q3", "Q4", "try1", "try2", "try3", "try4"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByBooleanComparison.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30)]
Symbol reference IDs mismatch for "ACTOR_TYPE":
after transform: SymbolId(16): [ReferenceId(46), ReferenceId(50)]
rebuilt        : SymbolId(13): [ReferenceId(43)]
Unresolved references mismatch:
after transform: ["Array", "Error", "Function", "URIError", "console", "require"]
rebuilt        : ["Array", "Error", "URIError", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9)]
Reference symbol mismatch for "isSomeType":
after transform: SymbolId(13) "isSomeType"
rebuilt        : SymbolId(9) "isSomeType"
Unresolved reference IDs mismatch for "RegExp":
after transform: [ReferenceId(25), ReferenceId(30)]
rebuilt        : [ReferenceId(19)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue2.ts
Bindings mismatch:
after transform: ScopeId(0): ["f"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue4.ts
Bindings mismatch:
after transform: ScopeId(0): ["f"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(15), ScopeId(18), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9), ScopeId(12), ScopeId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByInstanceof.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(15), ScopeId(17)]
Symbol reference IDs mismatch for "Person":
after transform: SymbolId(16): [ReferenceId(28), ReferenceId(33), ReferenceId(39)]
rebuilt        : SymbolId(11): [ReferenceId(19)]
Symbol reference IDs mismatch for "Car":
after transform: SymbolId(17): [ReferenceId(34)]
rebuilt        : SymbolId(12): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowByParenthesizedSwitchExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowBySwitchDiscriminantUndefinedCase1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Error", "Math", "const", "undefined"]
rebuilt        : ["Error", "Math", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowRefinedConstLikeParameterBIndingElementNameInInnerScope.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowTypeByInstanceof.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "Match":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(11)]
Symbol reference IDs mismatch for "FileMatch":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowUnknownByTypePredicate.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_defineProperty", "isA", "isNotNullish", "isNullish", "value1", "value2", "value3", "value4", "value5", "value6"]
rebuilt        : ScopeId(0): ["A", "_defineProperty", "isA", "isNotNullish", "isNullish"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
Symbol flags mismatch for "A":
after transform: SymbolId(8): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(8): [ReferenceId(12)]
rebuilt        : SymbolId(5): []
Reference symbol mismatch for "isNotNullish":
after transform: SymbolId(0) "isNotNullish"
rebuilt        : SymbolId(1) "isNotNullish"
Reference symbol mismatch for "value1":
after transform: SymbolId(4) "value1"
rebuilt        : <None>
Reference symbol mismatch for "value1":
after transform: SymbolId(4) "value1"
rebuilt        : <None>
Reference symbol mismatch for "isNotNullish":
after transform: SymbolId(0) "isNotNullish"
rebuilt        : SymbolId(1) "isNotNullish"
Reference symbol mismatch for "value2":
after transform: SymbolId(5) "value2"
rebuilt        : <None>
Reference symbol mismatch for "value2":
after transform: SymbolId(5) "value2"
rebuilt        : <None>
Reference symbol mismatch for "isNullish":
after transform: SymbolId(2) "isNullish"
rebuilt        : SymbolId(3) "isNullish"
Reference symbol mismatch for "value3":
after transform: SymbolId(6) "value3"
rebuilt        : <None>
Reference symbol mismatch for "value3":
after transform: SymbolId(6) "value3"
rebuilt        : <None>
Reference symbol mismatch for "isNullish":
after transform: SymbolId(2) "isNullish"
rebuilt        : SymbolId(3) "isNullish"
Reference symbol mismatch for "value4":
after transform: SymbolId(7) "value4"
rebuilt        : <None>
Reference symbol mismatch for "value4":
after transform: SymbolId(7) "value4"
rebuilt        : <None>
Reference symbol mismatch for "isA":
after transform: SymbolId(9) "isA"
rebuilt        : SymbolId(6) "isA"
Reference symbol mismatch for "value5":
after transform: SymbolId(11) "value5"
rebuilt        : <None>
Reference symbol mismatch for "value5":
after transform: SymbolId(11) "value5"
rebuilt        : <None>
Reference symbol mismatch for "isA":
after transform: SymbolId(9) "isA"
rebuilt        : SymbolId(6) "isA"
Reference symbol mismatch for "value6":
after transform: SymbolId(12) "value6"
rebuilt        : <None>
Reference symbol mismatch for "value6":
after transform: SymbolId(12) "value6"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["require", "value1", "value2", "value3", "value4", "value5", "value6"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingAssignmentReadonlyRespectsAssertion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "console"]
rebuilt        : ["Array", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingByDiscriminantInLoop.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(11), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(10), ScopeId(13), ScopeId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingByTypeofInSwitch.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(47), ScopeId(49), ScopeId(51), ScopeId(55), ScopeId(57), ScopeId(59), ScopeId(61), ScopeId(63), ScopeId(67)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(50), ScopeId(52), ScopeId(54), ScopeId(56), ScopeId(58), ScopeId(61)]
Scope children mismatch:
after transform: ScopeId(51): [ScopeId(52), ScopeId(53), ScopeId(54)]
rebuilt        : ScopeId(47): [ScopeId(48), ScopeId(49)]
Scope children mismatch:
after transform: ScopeId(63): [ScopeId(64), ScopeId(65), ScopeId(66)]
rebuilt        : ScopeId(58): [ScopeId(59), ScopeId(60)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingConstrainedTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingDestructuring.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingNoInfer1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(4), SymbolId(9), SymbolId(11), SymbolId(18)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "test2":
after transform: SymbolId(11) "test2"
rebuilt        : SymbolId(7) "test2"
Unresolved references mismatch:
after transform: ["NoInfer", "const", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingPastLastAssignmentInModule.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingRestGenericCall.ts
Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_objectWithoutProperties", "call", "obj"]
rebuilt        : ScopeId(0): ["_excluded", "_objectWithoutProperties", "call"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "obj":
after transform: SymbolId(5) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["console", "require"]
rebuilt        : ["console", "obj", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofDiscriminant.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofObject.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofParenthesized1.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofUndefined1.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofUndefined2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "takeArray":
after transform: SymbolId(0) "takeArray"
rebuilt        : SymbolId(0) "takeArray"
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingUnionToUnion.ts
Bindings mismatch:
after transform: ScopeId(0): ["TEST_CASES", "X", "XS", "Y", "YS", "_defineProperty", "assert", "assertRelationIsNullOrStringArray", "broken", "check1", "check2", "example1", "example2", "example3", "f1", "f1x", "f2", "fx1", "fx10", "fx2", "fx3", "fx4", "fx5", "isA", "isEmpty", "isEmptyArray", "isEmptyStrOrUndefined", "isEmptyString", "isFalsy", "isMaybeEmptyArray", "isMaybeEmptyString", "isMaybeZero", "isMyDiscriminatedUnion", "isXSorY", "isZero", "test", "test1", "test3", "v1", "v2", "working", "workingAgain"]
rebuilt        : ScopeId(0): ["TEST_CASES", "X", "XS", "Y", "YS", "_defineProperty", "assert", "assertRelationIsNullOrStringArray", "check1", "check2", "example1", "example2", "example3", "f1", "f1x", "f2", "fx1", "fx10", "fx2", "fx3", "fx4", "fx5", "isA", "isEmpty", "isEmptyArray", "isEmptyStrOrUndefined", "isEmptyString", "isFalsy", "isMaybeEmptyArray", "isMaybeEmptyString", "isMaybeZero", "isMyDiscriminatedUnion", "isXSorY", "isZero", "test", "test1", "test3", "v1", "v2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(38), ScopeId(41), ScopeId(46), ScopeId(49), ScopeId(54), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(80)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(41), ScopeId(44), ScopeId(49), ScopeId(52), ScopeId(57), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(80)]
Symbol flags mismatch for "X":
after transform: SymbolId(15): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(13): SymbolFlags(Class)
Symbol reference IDs mismatch for "X":
after transform: SymbolId(15): [ReferenceId(15), ReferenceId(19), ReferenceId(20)]
rebuilt        : SymbolId(13): [ReferenceId(14)]
Symbol flags mismatch for "XS":
after transform: SymbolId(16): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(14): SymbolFlags(Class)
Symbol reference IDs mismatch for "XS":
after transform: SymbolId(16): [ReferenceId(17), ReferenceId(22)]
rebuilt        : SymbolId(14): []
Symbol flags mismatch for "Y":
after transform: SymbolId(17): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(16): SymbolFlags(Class)
Symbol reference IDs mismatch for "Y":
after transform: SymbolId(17): [ReferenceId(16), ReferenceId(18), ReferenceId(23)]
rebuilt        : SymbolId(16): [ReferenceId(18)]
Symbol flags mismatch for "YS":
after transform: SymbolId(18): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(17): SymbolFlags(Class)
Symbol reference IDs mismatch for "YS":
after transform: SymbolId(18): [ReferenceId(21)]
rebuilt        : SymbolId(17): []
Reference symbol mismatch for "isFalsy":
after transform: SymbolId(1) "isFalsy"
rebuilt        : SymbolId(1) "isFalsy"
Reference symbol mismatch for "isFalsy":
after transform: SymbolId(1) "isFalsy"
rebuilt        : SymbolId(1) "isFalsy"
Reference symbol mismatch for "isFalsy":
after transform: SymbolId(1) "isFalsy"
rebuilt        : SymbolId(1) "isFalsy"
Reference symbol mismatch for "isA":
after transform: SymbolId(11) "isA"
rebuilt        : SymbolId(9) "isA"
Reference symbol mismatch for "isXSorY":
after transform: SymbolId(19) "isXSorY"
rebuilt        : SymbolId(19) "isXSorY"
Reference symbol mismatch for "isEmptyStrOrUndefined":
after transform: SymbolId(25) "isEmptyStrOrUndefined"
rebuilt        : SymbolId(24) "isEmptyStrOrUndefined"
Reference symbol mismatch for "isEmptyString":
after transform: SymbolId(35) "isEmptyString"
rebuilt        : SymbolId(34) "isEmptyString"
Reference symbol mismatch for "isMaybeEmptyString":
after transform: SymbolId(37) "isMaybeEmptyString"
rebuilt        : SymbolId(36) "isMaybeEmptyString"
Reference symbol mismatch for "isMaybeEmptyString":
after transform: SymbolId(37) "isMaybeEmptyString"
rebuilt        : SymbolId(36) "isMaybeEmptyString"
Reference symbol mismatch for "isZero":
after transform: SymbolId(39) "isZero"
rebuilt        : SymbolId(38) "isZero"
Reference symbol mismatch for "isMaybeZero":
after transform: SymbolId(41) "isMaybeZero"
rebuilt        : SymbolId(40) "isMaybeZero"
Reference symbol mismatch for "isMaybeZero":
after transform: SymbolId(41) "isMaybeZero"
rebuilt        : SymbolId(40) "isMaybeZero"
Reference symbol mismatch for "isEmptyArray":
after transform: SymbolId(43) "isEmptyArray"
rebuilt        : SymbolId(42) "isEmptyArray"
Reference symbol mismatch for "isMaybeEmptyArray":
after transform: SymbolId(46) "isMaybeEmptyArray"
rebuilt        : SymbolId(44) "isMaybeEmptyArray"
Reference symbol mismatch for "isMaybeEmptyArray":
after transform: SymbolId(46) "isMaybeEmptyArray"
rebuilt        : SymbolId(44) "isMaybeEmptyArray"
Reference symbol mismatch for "assert":
after transform: SymbolId(60) "assert"
rebuilt        : SymbolId(56) "assert"
Reference symbol mismatch for "isMyDiscriminatedUnion":
after transform: SymbolId(76) "isMyDiscriminatedUnion"
rebuilt        : SymbolId(70) "isMyDiscriminatedUnion"
Reference symbol mismatch for "working":
after transform: SymbolId(78) "working"
rebuilt        : <None>
Reference symbol mismatch for "working":
after transform: SymbolId(78) "working"
rebuilt        : <None>
Reference symbol mismatch for "working":
after transform: SymbolId(78) "working"
rebuilt        : <None>
Reference symbol mismatch for "isMyDiscriminatedUnion":
after transform: SymbolId(76) "isMyDiscriminatedUnion"
rebuilt        : SymbolId(70) "isMyDiscriminatedUnion"
Reference symbol mismatch for "broken":
after transform: SymbolId(79) "broken"
rebuilt        : <None>
Reference symbol mismatch for "broken":
after transform: SymbolId(79) "broken"
rebuilt        : <None>
Reference symbol mismatch for "broken":
after transform: SymbolId(79) "broken"
rebuilt        : <None>
Reference symbol mismatch for "isMyDiscriminatedUnion":
after transform: SymbolId(76) "isMyDiscriminatedUnion"
rebuilt        : SymbolId(70) "isMyDiscriminatedUnion"
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(80) "workingAgain"
rebuilt        : <None>
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(80) "workingAgain"
rebuilt        : <None>
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(80) "workingAgain"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "require", "undefined"]
rebuilt        : ["broken", "require", "undefined", "working", "workingAgain"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/narrowingUnionWithBang.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nearbyIdenticalGenericLambdasAssignable.ts
Bindings mismatch:
after transform: ScopeId(0): ["accA", "accB", "accC", "accL", "fA", "fB", "fC"]
rebuilt        : ScopeId(0): ["accA", "accB", "accC", "accL", "fB", "fC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "fB":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(14), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(9), ReferenceId(15), ReferenceId(21)]
Symbol reference IDs mismatch for "fC":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(16), ReferenceId(22), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(11), ReferenceId(17), ReferenceId(23)]
Reference symbol mismatch for "accA":
after transform: SymbolId(11) "accA"
rebuilt        : SymbolId(2) "accA"
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "accA":
after transform: SymbolId(11) "accA"
rebuilt        : SymbolId(2) "accA"
Reference symbol mismatch for "accA":
after transform: SymbolId(11) "accA"
rebuilt        : SymbolId(2) "accA"
Reference symbol mismatch for "accB":
after transform: SymbolId(13) "accB"
rebuilt        : SymbolId(4) "accB"
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "accB":
after transform: SymbolId(13) "accB"
rebuilt        : SymbolId(4) "accB"
Reference symbol mismatch for "accB":
after transform: SymbolId(13) "accB"
rebuilt        : SymbolId(4) "accB"
Reference symbol mismatch for "accC":
after transform: SymbolId(15) "accC"
rebuilt        : SymbolId(6) "accC"
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "accC":
after transform: SymbolId(15) "accC"
rebuilt        : SymbolId(6) "accC"
Reference symbol mismatch for "accC":
after transform: SymbolId(15) "accC"
rebuilt        : SymbolId(6) "accC"
Reference symbol mismatch for "accL":
after transform: SymbolId(17) "accL"
rebuilt        : SymbolId(8) "accL"
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "accL":
after transform: SymbolId(17) "accL"
rebuilt        : SymbolId(8) "accL"
Reference symbol mismatch for "accL":
after transform: SymbolId(17) "accL"
rebuilt        : SymbolId(8) "accL"
Unresolved references mismatch:
after transform: []
rebuilt        : ["fA"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedGenericConditionalTypeWithGenericImportType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedGenericSpreadInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "call":
after transform: SymbolId(3) "call"
rebuilt        : SymbolId(2) "call"
Reference symbol mismatch for "wrap":
after transform: SymbolId(0) "wrap"
rebuilt        : SymbolId(0) "wrap"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedGenerics.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedHomomorphicMappedTypesWithArrayConstraint1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedInfinitelyExpandedRecursiveTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedLoopWithOnlyInnerLetCaptured.ts
Bindings mismatch:
after transform: ScopeId(0): ["doSomething"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "doSomething":
after transform: SymbolId(0) "doSomething"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["doSomething"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedLoops.ts
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(7): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedModulePrivateAccess.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "a":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "b":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "b":
after transform: SymbolId(2): Span { start: 45, end: 46 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedObjectRest.ts
Bindings mismatch:
after transform: ScopeId(0): ["_extends", "_objectDestructuringEmpty", "_ref", "_ref2", "x", "y"]
rebuilt        : ScopeId(0): ["_extends", "_objectDestructuringEmpty", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "x", "y"]
Bindings mismatch:
after transform: ScopeId(1): ["_ref3"]
rebuilt        : ScopeId(1): []
Bindings mismatch:
after transform: ScopeId(2): ["_ref4", "_ref5"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_ref3":
after transform: SymbolId(6): ScopeId(1)
rebuilt        : SymbolId(6): ScopeId(0)
Symbol scope ID mismatch for "_ref4":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(7): ScopeId(0)
Symbol scope ID mismatch for "_ref5":
after transform: SymbolId(8): ScopeId(2)
rebuilt        : SymbolId(8): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedSelf.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedSuperCallEmit.ts
Unresolved reference IDs mismatch for "Error":
after transform: [ReferenceId(1), ReferenceId(6)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedThisContainer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nestedTypeVariableInfersLiteral.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "direct":
after transform: SymbolId(0) "direct"
rebuilt        : SymbolId(0) "direct"
Reference symbol mismatch for "direct":
after transform: SymbolId(0) "direct"
rebuilt        : SymbolId(0) "direct"
Reference symbol mismatch for "nested":
after transform: SymbolId(3) "nested"
rebuilt        : SymbolId(2) "nested"
Reference symbol mismatch for "nestedUnion":
after transform: SymbolId(6) "nestedUnion"
rebuilt        : SymbolId(4) "nestedUnion"
Reference symbol mismatch for "nestedUnion":
after transform: SymbolId(6) "nestedUnion"
rebuilt        : SymbolId(4) "nestedUnion"
Reference symbol mismatch for "hasZField":
after transform: SymbolId(14) "hasZField"
rebuilt        : SymbolId(11) "hasZField"
Reference symbol mismatch for "hasZField":
after transform: SymbolId(14) "hasZField"
rebuilt        : SymbolId(11) "hasZField"
Reference symbol mismatch for "hasZField":
after transform: SymbolId(14) "hasZField"
rebuilt        : SymbolId(11) "hasZField"
Reference symbol mismatch for "hasZField":
after transform: SymbolId(14) "hasZField"
rebuilt        : SymbolId(11) "hasZField"
Reference symbol mismatch for "hasZField":
after transform: SymbolId(14) "hasZField"
rebuilt        : SymbolId(11) "hasZField"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/neverAsDiscriminantType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(14): ["DISPATCH", "GatewayOpcode", "HEARTBEAT", "HEARTBEAT_ACK", "HELLO", "IDENTIFY", "INVALID_SESSION", "PRESENCE_UPDATE", "RECONNECT", "REQUEST_GUILD_MEMBERS", "RESUME", "VOICE_STATE_UPDATE"]
rebuilt        : ScopeId(5): ["GatewayOpcode"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "GatewayOpcode":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "GatewayOpcode":
after transform: SymbolId(14): [ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(27), ReferenceId(28)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/newArrays.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/newExpressionWithTypeParameterConstrainedToOuterTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/newLineInTypeofInstantiation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noAsConstNameLookup.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8)]
Symbol reference IDs mismatch for "FeatureRunner":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["Promise", "const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noBundledEmitFromNodeModules.ts
Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCircularDefinitionOnExportOfPrivateInMergedNamespace.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "cat":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(1): SymbolFlags(Class | ValueModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(1): [Span { start: 22, end: 25 }, Span { start: 61, end: 64 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCircularitySelfReferentialGetter1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(14), SymbolId(17), SymbolId(18), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "object":
after transform: SymbolId(14) "object"
rebuilt        : SymbolId(0) "object"
Reference symbol mismatch for "string":
after transform: SymbolId(17) "string"
rebuilt        : SymbolId(2) "string"
Reference symbol mismatch for "optional":
after transform: SymbolId(18) "optional"
rebuilt        : SymbolId(3) "optional"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCircularitySelfReferentialGetter2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(14), SymbolId(17), SymbolId(18), SymbolId(21), SymbolId(22), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "object":
after transform: SymbolId(14) "object"
rebuilt        : SymbolId(1) "object"
Reference symbol mismatch for "string":
after transform: SymbolId(17) "string"
rebuilt        : SymbolId(3) "string"
Reference symbol mismatch for "optional":
after transform: SymbolId(18) "optional"
rebuilt        : SymbolId(4) "optional"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionAndLocalVarInFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionAndLocalVarInLambda.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "alert":
after transform: SymbolId(0) "alert"
rebuilt        : SymbolId(0) "alert"
Reference symbol mismatch for "alert":
after transform: SymbolId(0) "alert"
rebuilt        : SymbolId(0) "alert"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionInFunctionAndVarInGlobal.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noConstraintInReturnType1.ts
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCrashOnThisTypeUsage.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(4): []
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noCrashUMDMergedWithGlobalValue.ts
Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noEmitHelpers2.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_decorate", "_decorateMetadata", "_decorateParam", "decorator"]
rebuilt        : ScopeId(0): ["A", "_decorate", "_decorateMetadata", "_decorateParam"]
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 46, end: 47 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 46, end: 47 }
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Number", "String", "require"]
rebuilt        : ["Number", "String", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyDestructuringInPrivateMethod.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "Bar2":
after transform: SymbolId(3): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyFunctionExpressionAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsWithProtectedBlocks1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "get":
after transform: SymbolId(2) "get"
rebuilt        : SymbolId(2) "get"
Reference symbol mismatch for "log":
after transform: SymbolId(0) "log"
rebuilt        : SymbolId(0) "log"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noIterationTypeErrorsInCFA.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noSubtypeReduction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noUncheckedIndexAccess.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bacon", "Meat", "Sausage"]
rebuilt        : ScopeId(1): ["Meat"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "a", "b", "c"]
rebuilt        : ScopeId(2): ["A"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["B", "x", "y", "z"]
rebuilt        : ScopeId(3): ["B"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Meat":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Meat":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(21)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(15), ReferenceId(16)]
Symbol flags mismatch for "A":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "B":
after transform: SymbolId(16): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/noUsedBeforeDefinedErrorInTypeContext.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "qwe":
after transform: SymbolId(5): [ReferenceId(8)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nodeModuleReexportFromDottedPath.ts
Bindings mismatch:
after transform: ScopeId(0): ["EnhancedPrisma", "PrismaClient", "enhancePrisma"]
rebuilt        : ScopeId(0): ["EnhancedPrisma", "PrismaClient"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "enhancePrisma":
after transform: SymbolId(1) "enhancePrisma"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["enhancePrisma"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonConflictingRecursiveBaseTypeMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonContextuallyTypedLogicalOr.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation1.ts
Bindings mismatch:
after transform: ScopeId(0): ["box", "createAndUnbox", "log", "map", "result1", "result2", "tap", "thing"]
rebuilt        : ScopeId(0): ["box", "createAndUnbox", "log", "map", "result1", "result2", "tap"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9)]
Reference symbol mismatch for "createAndUnbox":
after transform: SymbolId(20) "createAndUnbox"
rebuilt        : SymbolId(6) "createAndUnbox"
Reference symbol mismatch for "thing":
after transform: SymbolId(9) "thing"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(10) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "box":
after transform: SymbolId(17) "box"
rebuilt        : SymbolId(4) "box"
Reference symbol mismatch for "tap":
after transform: SymbolId(14) "tap"
rebuilt        : SymbolId(2) "tap"
Reference symbol mismatch for "log":
after transform: SymbolId(23) "log"
rebuilt        : SymbolId(8) "log"
Reference symbol mismatch for "createAndUnbox":
after transform: SymbolId(20) "createAndUnbox"
rebuilt        : SymbolId(6) "createAndUnbox"
Reference symbol mismatch for "thing":
after transform: SymbolId(9) "thing"
rebuilt        : <None>
Reference symbol mismatch for "tap":
after transform: SymbolId(14) "tap"
rebuilt        : SymbolId(2) "tap"
Reference symbol mismatch for "log":
after transform: SymbolId(23) "log"
rebuilt        : SymbolId(8) "log"
Reference symbol mismatch for "map":
after transform: SymbolId(10) "map"
rebuilt        : SymbolId(0) "map"
Reference symbol mismatch for "box":
after transform: SymbolId(17) "box"
rebuilt        : SymbolId(4) "box"
Unresolved references mismatch:
after transform: []
rebuilt        : ["thing"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation2.ts
Bindings mismatch:
after transform: ScopeId(0): ["es", "exists", "filter", "pipe", "x"]
rebuilt        : ScopeId(0): ["exists", "pipe", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "pipe":
after transform: SymbolId(16) "pipe"
rebuilt        : SymbolId(0) "pipe"
Reference symbol mismatch for "es":
after transform: SymbolId(25) "es"
rebuilt        : <None>
Reference symbol mismatch for "filter":
after transform: SymbolId(12) "filter"
rebuilt        : <None>
Reference symbol mismatch for "exists":
after transform: SymbolId(21) "exists"
rebuilt        : SymbolId(3) "exists"
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : ["es", "filter"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "factory":
after transform: SymbolId(4) "factory"
rebuilt        : SymbolId(0) "factory"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullMappedType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullParameterExtendingStringAssignableToString.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullReferenceMatching.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["HTMLElement", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullableAndObjectIntersections.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullableReduction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullableReductionNonStrict.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonNullableWithNullableGenericIndexedAccessArg.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "StateNode":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "StateNode":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["NonNullable", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nondistributiveConditionalTypeInfer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nongenericConditionalNotPartiallyComputed.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nongenericPartialInstantiationsRelatedInBothDirections.ts
Bindings mismatch:
after transform: ScopeId(0): ["cafoo", "cfoo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "cfoo":
after transform: SymbolId(4) "cfoo"
rebuilt        : <None>
Reference symbol mismatch for "cafoo":
after transform: SymbolId(3) "cafoo"
rebuilt        : <None>
Reference symbol mismatch for "cafoo":
after transform: SymbolId(3) "cafoo"
rebuilt        : <None>
Reference symbol mismatch for "cfoo":
after transform: SymbolId(4) "cfoo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["cafoo", "cfoo"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nonnullAssertionPropegatesContextualType.ts
Unresolved references mismatch:
after transform: ["SVGRectElement", "document"]
rebuilt        : ["document"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/nounusedTypeParameterConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/numberAssignableToEnumInsideUnion.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/numericEnumMappedType.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "E1", "E2", "N1", "N2", "b1", "b2", "e", "e1", "e2", "val", "x"]
rebuilt        : ScopeId(0): ["E1", "N1", "N2", "b1", "b2", "e", "e1", "e2", "val", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(1): ["E1", "ONE", "THREE", "TWO"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "N1"]
rebuilt        : ScopeId(3): ["N1"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["C", "D", "N2"]
rebuilt        : ScopeId(4): ["N2"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5), ReferenceId(32)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8)]
Symbol flags mismatch for "N1":
after transform: SymbolId(17): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "N1":
after transform: SymbolId(17): [ReferenceId(18), ReferenceId(38)]
rebuilt        : SymbolId(7): [ReferenceId(23)]
Symbol flags mismatch for "N2":
after transform: SymbolId(20): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "N2":
after transform: SymbolId(20): [ReferenceId(19), ReferenceId(44)]
rebuilt        : SymbolId(9): [ReferenceId(31)]
Reference symbol mismatch for "E2":
after transform: SymbolId(4) "E2"
rebuilt        : <None>
Reference symbol mismatch for "val":
after transform: SymbolId(16) "val"
rebuilt        : SymbolId(6) "val"
Reference symbol mismatch for "val":
after transform: SymbolId(16) "val"
rebuilt        : SymbolId(6) "val"
Reference symbol mismatch for "val":
after transform: SymbolId(16) "val"
rebuilt        : SymbolId(6) "val"
Reference symbol mismatch for "val":
after transform: SymbolId(16) "val"
rebuilt        : SymbolId(6) "val"
Reference symbol mismatch for "E":
after transform: SymbolId(25) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["E", "E2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint3.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint4.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectAssignLikeNonUnionResult.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "data1":
after transform: SymbolId(7): [ReferenceId(13), ReferenceId(17)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "assign":
after transform: SymbolId(2) "assign"
rebuilt        : SymbolId(1) "assign"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectBindingPatternContextuallyTypesArgument.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "id":
after transform: SymbolId(0) "id"
rebuilt        : SymbolId(0) "id"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectCreate.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "e", "n", "o", "t", "u", "union"]
rebuilt        : ScopeId(0): ["a", "e", "n", "o", "t", "u"]
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "union"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectCreate2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "e", "n", "o", "t", "u", "union"]
rebuilt        : ScopeId(0): ["a", "e", "n", "o", "t", "u"]
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "union"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectIndexer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectInstantiationFromUnionSpread.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectLitGetterSetter.ts
Unresolved references mismatch:
after transform: ["Object", "PropertyDescriptor", "eval"]
rebuilt        : ["Object", "eval"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralArraySpecialization.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "create":
after transform: SymbolId(0) "create"
rebuilt        : SymbolId(0) "create"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralEnumPropertyNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Strs"]
rebuilt        : ScopeId(1): ["Strs"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "Nums"]
rebuilt        : ScopeId(2): ["Nums"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Strs":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Strs":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
Symbol flags mismatch for "Nums":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralIndexerNoImplicitAny.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectLiteralIndexers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectMembersOnTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "AAA":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectRestBindingContextualInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectWithoutProperties", "_setupImages", "prepare", "rest", "setupImages", "test"]
rebuilt        : ScopeId(0): ["_objectWithoutProperties", "_setupImages", "prepare", "rest", "setupImages"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "setupImages":
after transform: SymbolId(9) "setupImages"
rebuilt        : SymbolId(1) "setupImages"
Reference symbol mismatch for "test":
after transform: SymbolId(14) "test"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["File", "require"]
rebuilt        : ["require", "test"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/objectRestSpread.ts
Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_extends", "_obj", "_objectDestructuringEmpty", "_objectSpread", "_objectWithoutProperties", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "_ref6", "_toPropertyKey", "_wrapAsyncGenerator", "fn", "more", "nestedProp", "nestedRest", "obj", "other", "prop", "props", "test"]
rebuilt        : ScopeId(0): ["_excluded", "_extends", "_objectDestructuringEmpty", "_objectSpread", "_objectWithoutProperties", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "_ref6", "_toPropertyKey", "_wrapAsyncGenerator", "fn", "more", "nestedProp", "nestedRest", "obj", "other", "prop", "props", "test"]
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["_obj", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/observableInferenceCanBeMade.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(13), SymbolId(18)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(10), ScopeId(11), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "Observable":
after transform: SymbolId(13): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "Observable":
after transform: SymbolId(13): [ReferenceId(1), ReferenceId(5), ReferenceId(19)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "of":
after transform: SymbolId(0) "of"
rebuilt        : SymbolId(0) "of"
Reference symbol mismatch for "from":
after transform: SymbolId(3) "from"
rebuilt        : SymbolId(2) "from"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/omitTypeTests01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/optionalAccessorsInInterface1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "defineMyProperty":
after transform: SymbolId(1) "defineMyProperty"
rebuilt        : SymbolId(0) "defineMyProperty"
Reference symbol mismatch for "defineMyProperty2":
after transform: SymbolId(6) "defineMyProperty2"
rebuilt        : SymbolId(4) "defineMyProperty2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/optionalChainWithInstantiationExpression2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/optionalConstructorArgInSuper.ts
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/optionalParameterRetainsNull.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/optionalTupleElementsAndUndefined.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/outModuleTripleSlashRefs.ts
Unresolved references mismatch:
after transform: ["GlobalFoo"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overload2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadBindingAcrossDeclarationBoundaries.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadBindingAcrossDeclarationBoundaries2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadCallTest.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadCrash.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadEquivalenceWithStatics.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadGenericFunctionWithRestArgs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstAsTypeAnnotation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(9): [ScopeId(10)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Symbol reference IDs mismatch for "Z":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(4), ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstDuplicateOverloads1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInBaseWithBadImplementationInDerived.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInCallback1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInObjectLiteralImplementingAnInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoNonSpecializedSignature.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoStringImplementation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnGenericArity.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadOnGenericClassAndNonGenericClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "X1":
after transform: SymbolId(5): [ReferenceId(1)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOverNonCTLambdas.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []
Symbol flags mismatch for "Bugs":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Bugs":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOverNonCTObjectLit.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Bugs":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Bugs":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadResolutionWithAny.ts
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadRet.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadReturnTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "Accessor":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadWithCallbacksWithDifferingOptionalityOnArgs.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadedConstructorFixesInferencesAppropriately.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadedStaticMethodSpecialization.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadingOnConstantsInImplementation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadsAndTypeArgumentArity.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "Callbacks":
after transform: SymbolId(0) "Callbacks"
rebuilt        : SymbolId(0) "Callbacks"
Reference symbol mismatch for "Callbacks":
after transform: SymbolId(0) "Callbacks"
rebuilt        : SymbolId(0) "Callbacks"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overloadsWithConstraints.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Unresolved references mismatch:
after transform: ["Number", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/overrideBaseIntersectionMethod.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(7): [ReferenceId(2), ReferenceId(8)]
rebuilt        : SymbolId(4): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parameterReferenceInInitializer1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parameterReferencesOtherParameter1.ts
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parameterReferencesOtherParameter2.ts
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parenthesisDoesNotBlockAliasSymbolCreation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parseArrowFunctionWithFunctionReturnType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parseEntityNameWithReservedWord.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bool", "false"]
rebuilt        : ScopeId(1): ["Bool"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Bool":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Bool":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parseGenericArrowRatherThanLeftShift.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo"]
rebuilt        : ScopeId(0): ["b", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parseJsxExtends1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/parseShortform.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/partialOfLargeAPIIsAbleToBeWorkedWith.ts
Bindings mismatch:
after transform: ScopeId(0): ["keys", "obj", "obj2"]
rebuilt        : ScopeId(0): ["obj", "obj2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(54), ScopeId(57), ScopeId(59)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Reference symbol mismatch for "keys":
after transform: SymbolId(2) "keys"
rebuilt        : <None>
Reference symbol mismatch for "keys":
after transform: SymbolId(2) "keys"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["keys"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/partialTypeNarrowedToByTypeGuard.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/partiallyAmbientClodule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 59, end: 62 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 15, end: 18 }, Span { start: 59, end: 62 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/partiallyAmbientFundule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Function | ValueModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 62, end: 65 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 15, end: 18 }, Span { start: 62, end: 65 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/partiallyDiscriminantedUnions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Square":
after transform: SymbolId(5): [ReferenceId(9)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Circle":
after transform: SymbolId(6): [ReferenceId(8), ReferenceId(21)]
rebuilt        : SymbolId(3): []
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(11), ReferenceId(15)]
rebuilt        : [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution3_classic.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution3_node.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution4_classic.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution4_node.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution5_classic.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution5_node.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(4) "use"
rebuilt        : SymbolId(4) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution6_classic.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution6_node.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution7_classic.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution7_node.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(2) "use"
rebuilt        : SymbolId(2) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution8_classic.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution8_node.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_differentRootTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar1", "bar2", "bar3", "bar4", "bar5", "bar6", "bar7", "bar8", "bar9", "foo1", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_multipleAliases.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_realRootFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_noAliasWithRoot.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_noAliasWithRoot_realRootFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtensionInName.ts
Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension_MapedToNodeModules.ts
Bindings mismatch:
after transform: ScopeId(0): ["foobar"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingInheritedBaseUrl.ts
Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingWithoutBaseUrl1.ts
Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pathMappingWithoutBaseUrl2.ts
Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(20), ScopeId(34), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(35): [ScopeId(36)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(37): [ScopeId(38)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(47): [ReferenceId(111), ReferenceId(116), ReferenceId(121), ReferenceId(126), ReferenceId(131), ReferenceId(136), ReferenceId(141), ReferenceId(146), ReferenceId(151), ReferenceId(156), ReferenceId(161), ReferenceId(166), ReferenceId(171)]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["PromiseLike", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/pickOfLargeObjectUnionWorks.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/preserveConstEnums.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "Value", "Value2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/prespecializedGenericMembers1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAsmoduleName.ts
Bindings mismatch:
after transform: ScopeId(0): ["string"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/primitiveUnionDetection.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "getInterfaceFromString":
after transform: SymbolId(1) "getInterfaceFromString"
rebuilt        : SymbolId(0) "getInterfaceFromString"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyAccessorDeclFile.ts
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15)]
Symbol flags mismatch for "publicModule":
after transform: SymbolId(34): SymbolFlags(ValueModule)
rebuilt        : SymbolId(34): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(34): Span { start: 5395, end: 5407 }
rebuilt        : SymbolId(34): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(35): [ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103)]
rebuilt        : SymbolId(36): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(36): [ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107), ReferenceId(181)]
rebuilt        : SymbolId(37): [ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(69): SymbolFlags(ValueModule)
rebuilt        : SymbolId(70): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(69): Span { start: 11550, end: 11563 }
rebuilt        : SymbolId(70): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(69): [ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(210), ReferenceId(211)]
rebuilt        : SymbolId(70): [ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(53), ReferenceId(82), ReferenceId(83), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(70): [ReferenceId(120), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(139), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163)]
rebuilt        : SymbolId(72): [ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(71): [ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(134), ReferenceId(135), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(197)]
rebuilt        : SymbolId(73): [ReferenceId(57), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCannotNameAccessorDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCannotNameVarTypeDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckAnonymousFunctionParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Symbol flags mismatch for "Query":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Query":
after transform: SymbolId(3): Span { start: 86, end: 91 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckAnonymousFunctionParameter2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Symbol flags mismatch for "Q":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Q":
after transform: SymbolId(3): Span { start: 92, end: 93 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "Q":
after transform: SymbolId(3): [Span { start: 92, end: 93 }, Span { start: 190, end: 191 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckCallbackOfInterfaceMethodWithTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckExportAssignmentOnExportedGenericInterface1.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface | NamespaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 74, end: 107 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 7, end: 10 }, Span { start: 59, end: 62 }, Span { start: 74, end: 107 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckExportAssignmentOnExportedGenericInterface2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckExternalModuleExportAssignmentOfGenericClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Bar":
after transform: SymbolId(1) "Bar"
rebuilt        : <None>
Reference flags mismatch for "Bar":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Bar", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckOnTypeParameterReferenceInConstructorParameter.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfFunction.ts
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfInvisibleModuleError.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfInvisibleModuleNoError.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(19), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(33), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(17): [ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 14, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(17): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(17): Span { start: 1045, end: 1047 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyClassImplementsClauseDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol flags mismatch for "publicModule":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(0): Span { start: 14, end: 26 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "privateModule":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(10): Span { start: 1050, end: 1063 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(10): [ReferenceId(4), ReferenceId(5), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(19), ReferenceId(36), ReferenceId(37)]
rebuilt        : SymbolId(9): [ReferenceId(16), ReferenceId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyFunc.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Scope children mismatch:
after transform: ScopeId(58): [ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66)]
rebuilt        : ScopeId(54): [ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(40), ReferenceId(41), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(71)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(28), ReferenceId(29), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(43), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(32), ReferenceId(33), ReferenceId(40), ReferenceId(41)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(43): [ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69)]
rebuilt        : SymbolId(40): [ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyFunctionCannotNameParameterTypeDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyFunctionCannotNameReturnTypeDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyFunctionParameterDeclFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "privateModule", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes", "publicModule"]
rebuilt        : ScopeId(0): ["privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "privateModule", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes", "publicModule"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(21), ScopeId(27), ScopeId(33), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(50), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(59), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(130)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(15), ScopeId(21), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(37), ScopeId(38), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(88)]
Bindings mismatch:
after transform: ScopeId(65): ["_publicModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes"]
rebuilt        : ScopeId(44): ["_publicModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes"]
Scope children mismatch:
after transform: ScopeId(65): [ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(71), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(86), ScopeId(92), ScopeId(98), ScopeId(104), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(115), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(124), ScopeId(128), ScopeId(129)]
rebuilt        : ScopeId(44): [ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(53), ScopeId(59), ScopeId(65), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(81), ScopeId(82), ScopeId(86), ScopeId(87)]
Bindings mismatch:
after transform: ScopeId(130): ["_privateModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes"]
rebuilt        : ScopeId(88): ["_privateModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPublicParmeterTypes"]
Scope children mismatch:
after transform: ScopeId(130): [ScopeId(131), ScopeId(132), ScopeId(133), ScopeId(136), ScopeId(139), ScopeId(142), ScopeId(145), ScopeId(151), ScopeId(157), ScopeId(163), ScopeId(169), ScopeId(170), ScopeId(171), ScopeId(172), ScopeId(173), ScopeId(174), ScopeId(175), ScopeId(176), ScopeId(177), ScopeId(180), ScopeId(184), ScopeId(185), ScopeId(186), ScopeId(189), ScopeId(193), ScopeId(194)]
rebuilt        : ScopeId(88): [ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(97), ScopeId(103), ScopeId(109), ScopeId(115), ScopeId(116), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(125), ScopeId(126), ScopeId(130), ScopeId(131)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(69), ReferenceId(71)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "publicModule":
after transform: SymbolId(76): SymbolFlags(ValueModule)
rebuilt        : SymbolId(64): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(76): Span { start: 4743, end: 4755 }
rebuilt        : SymbolId(64): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(77): [ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(128), ReferenceId(130), ReferenceId(132), ReferenceId(134)]
rebuilt        : SymbolId(66): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(78): [ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(107), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(129), ReferenceId(131), ReferenceId(133), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(149), ReferenceId(151), ReferenceId(241)]
rebuilt        : SymbolId(67): [ReferenceId(13)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(153): SymbolFlags(ValueModule)
rebuilt        : SymbolId(130): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(153): Span { start: 9961, end: 9974 }
rebuilt        : SymbolId(130): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(153): [ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(136), ReferenceId(138), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(148), ReferenceId(150), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(221), ReferenceId(222), ReferenceId(223), ReferenceId(224), ReferenceId(225), ReferenceId(226), ReferenceId(227), ReferenceId(228), ReferenceId(230), ReferenceId(232), ReferenceId(233), ReferenceId(234), ReferenceId(235), ReferenceId(236), ReferenceId(237), ReferenceId(238), ReferenceId(239), ReferenceId(270), ReferenceId(271)]
rebuilt        : SymbolId(130): [ReferenceId(66), ReferenceId(67)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(154): [ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(194), ReferenceId(195), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(208), ReferenceId(210), ReferenceId(212), ReferenceId(214)]
rebuilt        : SymbolId(132): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(155): [ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(168), ReferenceId(169), ReferenceId(175), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(187), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(209), ReferenceId(211), ReferenceId(213), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(229), ReferenceId(231), ReferenceId(257)]
rebuilt        : SymbolId(133): [ReferenceId(41)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyFunctionReturnTypeDeclFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "privateModule", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1", "publicModule"]
rebuilt        : ScopeId(0): ["privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "privateModule", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1", "publicModule"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(24), ScopeId(33), ScopeId(42), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(66), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(170)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(12), ScopeId(21), ScopeId(30), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(128)]
Bindings mismatch:
after transform: ScopeId(85): ["_publicModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1"]
rebuilt        : ScopeId(64): ["_publicModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1"]
Scope children mismatch:
after transform: ScopeId(85): [ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(91), ScopeId(94), ScopeId(97), ScopeId(100), ScopeId(109), ScopeId(118), ScopeId(127), ScopeId(136), ScopeId(137), ScopeId(138), ScopeId(139), ScopeId(140), ScopeId(141), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147), ScopeId(148), ScopeId(151), ScopeId(156), ScopeId(157), ScopeId(158), ScopeId(159), ScopeId(162), ScopeId(167), ScopeId(168), ScopeId(169)]
rebuilt        : ScopeId(64): [ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(76), ScopeId(85), ScopeId(94), ScopeId(103), ScopeId(104), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(125), ScopeId(126), ScopeId(127)]
Bindings mismatch:
after transform: ScopeId(170): ["_privateModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "publicAmbientFunctionWithPrivateModuleParameterTypes", "publicAmbientFunctionWithPrivateParmeterTypes", "publicAmbientFunctionWithPublicParmeterTypes", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1"]
rebuilt        : ScopeId(128): ["_privateModule", "privateAmbientFunctionWithPrivateModuleParameterTypes", "privateAmbientFunctionWithPrivateParmeterTypes", "privateAmbientFunctionWithPublicParmeterTypes", "privateClass", "privateClassWithPrivateModuleParameterTypes", "privateClassWithWithPrivateParmeterTypes", "privateClassWithWithPublicParmeterTypes", "privateFunctionWithPrivateModuleParameterTypes", "privateFunctionWithPrivateModuleParameterTypes1", "privateFunctionWithPrivateParmeterTypes", "privateFunctionWithPrivateParmeterTypes1", "privateFunctionWithPublicParmeterTypes", "privateFunctionWithPublicParmeterTypes1", "publicClass", "publicClassWithPrivateModuleParameterTypes", "publicClassWithWithPrivateParmeterTypes", "publicClassWithWithPublicParmeterTypes", "publicFunctionWithPrivateModuleParameterTypes", "publicFunctionWithPrivateModuleParameterTypes1", "publicFunctionWithPrivateParmeterTypes", "publicFunctionWithPrivateParmeterTypes1", "publicFunctionWithPublicParmeterTypes", "publicFunctionWithPublicParmeterTypes1"]
Scope children mismatch:
after transform: ScopeId(170): [ScopeId(171), ScopeId(172), ScopeId(173), ScopeId(176), ScopeId(179), ScopeId(182), ScopeId(185), ScopeId(194), ScopeId(203), ScopeId(212), ScopeId(221), ScopeId(222), ScopeId(223), ScopeId(224), ScopeId(225), ScopeId(226), ScopeId(227), ScopeId(228), ScopeId(229), ScopeId(230), ScopeId(231), ScopeId(232), ScopeId(233), ScopeId(236), ScopeId(241), ScopeId(242), ScopeId(243), ScopeId(244), ScopeId(247), ScopeId(252), ScopeId(253), ScopeId(254)]
rebuilt        : ScopeId(128): [ScopeId(129), ScopeId(130), ScopeId(131), ScopeId(140), ScopeId(149), ScopeId(158), ScopeId(167), ScopeId(168), ScopeId(169), ScopeId(170), ScopeId(171), ScopeId(172), ScopeId(173), ScopeId(174), ScopeId(175), ScopeId(176), ScopeId(177), ScopeId(182), ScopeId(183), ScopeId(184), ScopeId(189), ScopeId(190), ScopeId(191)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(56), ReferenceId(58)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(18)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
Symbol flags mismatch for "publicModule":
after transform: SymbolId(32): SymbolFlags(ValueModule)
rebuilt        : SymbolId(23): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(32): Span { start: 6483, end: 6495 }
rebuilt        : SymbolId(23): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(33): [ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(98), ReferenceId(99), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(130), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(138), ReferenceId(140)]
rebuilt        : SymbolId(25): [ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(52), ReferenceId(58)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(34): [ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(94), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(106), ReferenceId(107), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(131), ReferenceId(133), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(141), ReferenceId(247)]
rebuilt        : SymbolId(26): [ReferenceId(27), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(55), ReferenceId(59)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(65): SymbolFlags(ValueModule)
rebuilt        : SymbolId(48): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(65): Span { start: 13824, end: 13837 }
rebuilt        : SymbolId(48): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(65): [ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(142), ReferenceId(143), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163), ReferenceId(224), ReferenceId(225), ReferenceId(226), ReferenceId(227), ReferenceId(228), ReferenceId(229), ReferenceId(230), ReferenceId(231), ReferenceId(232), ReferenceId(233), ReferenceId(234), ReferenceId(235), ReferenceId(236), ReferenceId(237), ReferenceId(238), ReferenceId(239), ReferenceId(240), ReferenceId(241), ReferenceId(242), ReferenceId(243), ReferenceId(244), ReferenceId(245), ReferenceId(288), ReferenceId(289)]
rebuilt        : SymbolId(48): [ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(60), ReferenceId(61), ReferenceId(66), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(108), ReferenceId(109), ReferenceId(114), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(121)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(66): [ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(187), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(212), ReferenceId(214), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222)]
rebuilt        : SymbolId(50): [ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(100), ReferenceId(106)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(67): [ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(195), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(208), ReferenceId(209), ReferenceId(210), ReferenceId(211), ReferenceId(213), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(221), ReferenceId(223), ReferenceId(269)]
rebuilt        : SymbolId(51): [ReferenceId(75), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(103), ReferenceId(107)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGetter.ts
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 14, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(55)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]
Symbol flags mismatch for "m2":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(13): Span { start: 1449, end: 1451 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m2_C1_public":
after transform: SymbolId(14): [ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(61)]
rebuilt        : SymbolId(16): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(22), ReferenceId(23)]
Symbol reference IDs mismatch for "m2_C2_private":
after transform: SymbolId(15): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35)]
rebuilt        : SymbolId(17): [ReferenceId(18), ReferenceId(19), ReferenceId(24), ReferenceId(25)]
Symbol reference IDs mismatch for "C5_private":
after transform: SymbolId(26): [ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53)]
rebuilt        : SymbolId(28): [ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(35)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(27): [ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48)]
rebuilt        : SymbolId(29): [ReferenceId(28), ReferenceId(29), ReferenceId(32), ReferenceId(33)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloFunc.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Scope children mismatch:
after transform: ScopeId(61): [ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76)]
rebuilt        : ScopeId(57): [ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70)]
Scope children mismatch:
after transform: ScopeId(77): [ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92)]
rebuilt        : ScopeId(71): [ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84)]
Scope children mismatch:
after transform: ScopeId(116): [ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(122), ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(129), ScopeId(130), ScopeId(131)]
rebuilt        : ScopeId(108): [ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121)]
Scope children mismatch:
after transform: ScopeId(132): [ScopeId(133), ScopeId(134), ScopeId(135), ScopeId(136), ScopeId(137), ScopeId(138), ScopeId(139), ScopeId(140), ScopeId(141), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147)]
rebuilt        : ScopeId(122): [ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(129), ScopeId(130), ScopeId(131), ScopeId(132), ScopeId(133), ScopeId(134), ScopeId(135)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 14, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(40), ReferenceId(41), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(169)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(28), ReferenceId(29), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(43), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(32), ReferenceId(33), ReferenceId(40), ReferenceId(41)]
Symbol flags mismatch for "m2":
after transform: SymbolId(43): SymbolFlags(ValueModule)
rebuilt        : SymbolId(40): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(43): Span { start: 3609, end: 3611 }
rebuilt        : SymbolId(40): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "m2_C1_public":
after transform: SymbolId(44): [ReferenceId(56), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(80), ReferenceId(81), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(92), ReferenceId(93), ReferenceId(96), ReferenceId(97), ReferenceId(100), ReferenceId(101), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107), ReferenceId(191)]
rebuilt        : SymbolId(42): [ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(52), ReferenceId(53), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(63), ReferenceId(74), ReferenceId(75), ReferenceId(82), ReferenceId(83)]
Symbol reference IDs mismatch for "m2_C2_private":
after transform: SymbolId(45): [ReferenceId(57), ReferenceId(60), ReferenceId(61), ReferenceId(64), ReferenceId(65), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(75), ReferenceId(78), ReferenceId(79), ReferenceId(82), ReferenceId(83), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(94), ReferenceId(95), ReferenceId(98), ReferenceId(99), ReferenceId(102), ReferenceId(103), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111)]
rebuilt        : SymbolId(43): [ReferenceId(50), ReferenceId(51), ReferenceId(54), ReferenceId(55), ReferenceId(60), ReferenceId(61), ReferenceId(64), ReferenceId(65), ReferenceId(78), ReferenceId(79), ReferenceId(86), ReferenceId(87)]
Symbol reference IDs mismatch for "C5_private":
after transform: SymbolId(86): [ReferenceId(112), ReferenceId(116), ReferenceId(117), ReferenceId(120), ReferenceId(121), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(134), ReferenceId(135), ReferenceId(138), ReferenceId(139), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167)]
rebuilt        : SymbolId(80): [ReferenceId(94), ReferenceId(95), ReferenceId(98), ReferenceId(99), ReferenceId(102), ReferenceId(103), ReferenceId(106), ReferenceId(107), ReferenceId(110), ReferenceId(111), ReferenceId(114), ReferenceId(115)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(87): [ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(118), ReferenceId(119), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(136), ReferenceId(137), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(148), ReferenceId(149), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163)]
rebuilt        : SymbolId(81): [ReferenceId(92), ReferenceId(93), ReferenceId(96), ReferenceId(97), ReferenceId(100), ReferenceId(101), ReferenceId(104), ReferenceId(105), ReferenceId(108), ReferenceId(109), ReferenceId(112), ReferenceId(113)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloGetter.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(23)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(13): [ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21)]
rebuilt        : SymbolId(14): [ReferenceId(14), ReferenceId(15)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloImport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["C5_public", "m1", "m3"]
rebuilt        : ScopeId(0): ["C5_public", "m1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(25), ScopeId(30), ScopeId(41), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(14)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(55)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(5): [ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyGloVar.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyImport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["C5_public", "C6_private", "m1", "m2", "m3", "m4"]
rebuilt        : ScopeId(0): ["C5_public", "C6_private", "m1", "m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(57), ScopeId(66), ScopeId(77), ScopeId(88), ScopeId(90), ScopeId(92), ScopeId(93), ScopeId(94), ScopeId(95), ScopeId(96), ScopeId(97)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(14)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(23): [ScopeId(24), ScopeId(26), ScopeId(27), ScopeId(36)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8)]
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 14, end: 16 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(133)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35)]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "m2":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(5): Span { start: 1205, end: 1207 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(6): [ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(137)]
rebuilt        : SymbolId(6): [ReferenceId(5)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(7): [ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(67), ReferenceId(69), ReferenceId(71)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(10): [ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(100), ReferenceId(102), ReferenceId(104), ReferenceId(106)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "C6_private":
after transform: SymbolId(11): [ReferenceId(73), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(87), ReferenceId(89), ReferenceId(91), ReferenceId(93), ReferenceId(95), ReferenceId(97), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(105), ReferenceId(107)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyInterfaceExtendsClauseDeclFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["privateModule", "publicModule"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyLocalInternalReferenceImportWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyLocalInternalReferenceImportWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelInternalReferenceImportWithExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelInternalReferenceImportWithoutExport.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParameterOfFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(20), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(50), ScopeId(55), ScopeId(56)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(32), ScopeId(37), ScopeId(38)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParameterOfFunctionDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(20), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(50), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(60), ScopeId(63), ScopeId(64), ScopeId(67), ScopeId(70), ScopeId(71), ScopeId(142)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(32), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(46), ScopeId(47), ScopeId(94)]
Scope children mismatch:
after transform: ScopeId(71): [ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(83), ScopeId(86), ScopeId(91), ScopeId(96), ScopeId(101), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(113), ScopeId(116), ScopeId(121), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(131), ScopeId(134), ScopeId(135), ScopeId(138), ScopeId(141)]
rebuilt        : ScopeId(47): [ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(55), ScopeId(60), ScopeId(65), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(79), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(89), ScopeId(90), ScopeId(93)]
Scope children mismatch:
after transform: ScopeId(142): [ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(148), ScopeId(151), ScopeId(154), ScopeId(157), ScopeId(162), ScopeId(167), ScopeId(172), ScopeId(177), ScopeId(178), ScopeId(179), ScopeId(180), ScopeId(181), ScopeId(184), ScopeId(187), ScopeId(192), ScopeId(197), ScopeId(198)]
rebuilt        : ScopeId(94): [ScopeId(95), ScopeId(96), ScopeId(97), ScopeId(102), ScopeId(107), ScopeId(112), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(126), ScopeId(131), ScopeId(132)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "publicModule":
after transform: SymbolId(86): SymbolFlags(ValueModule)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(86): Span { start: 4738, end: 4750 }
rebuilt        : SymbolId(18): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(87): [ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(108), ReferenceId(110)]
rebuilt        : SymbolId(20): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(88): [ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107), ReferenceId(109), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(187)]
rebuilt        : SymbolId(21): [ReferenceId(1)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(173): SymbolFlags(ValueModule)
rebuilt        : SymbolId(38): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(173): Span { start: 10023, end: 10036 }
rebuilt        : SymbolId(38): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(173): [ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(134), ReferenceId(135), ReferenceId(220), ReferenceId(221)]
rebuilt        : SymbolId(38): [ReferenceId(34), ReferenceId(35)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(174): [ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(139), ReferenceId(140), ReferenceId(141), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163), ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(176), ReferenceId(178)]
rebuilt        : SymbolId(40): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(175): [ReferenceId(142), ReferenceId(143), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(177), ReferenceId(179), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(207)]
rebuilt        : SymbolId(41): [ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfClass.ts
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfClassDeclFile.ts
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "publicModule":
after transform: SymbolId(26): SymbolFlags(ValueModule)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(26): Span { start: 1169, end: 1181 }
rebuilt        : SymbolId(18): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClassInPublicModule":
after transform: SymbolId(27): [ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(20): []
Symbol reference IDs mismatch for "publicClassInPublicModule":
after transform: SymbolId(28): [ReferenceId(34), ReferenceId(42), ReferenceId(83)]
rebuilt        : SymbolId(21): [ReferenceId(9)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(53): SymbolFlags(ValueModule)
rebuilt        : SymbolId(38): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(53): Span { start: 2605, end: 2618 }
rebuilt        : SymbolId(38): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(53): [ReferenceId(22), ReferenceId(26), ReferenceId(52), ReferenceId(56), ReferenceId(102), ReferenceId(103)]
rebuilt        : SymbolId(38): [ReferenceId(42), ReferenceId(43)]
Symbol reference IDs mismatch for "privateClassInPrivateModule":
after transform: SymbolId(54): [ReferenceId(60), ReferenceId(68)]
rebuilt        : SymbolId(40): []
Symbol reference IDs mismatch for "publicClassInPrivateModule":
after transform: SymbolId(55): [ReferenceId(64), ReferenceId(72), ReferenceId(95)]
rebuilt        : SymbolId(41): [ReferenceId(29)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(12), ScopeId(19), ScopeId(26), ScopeId(33), ScopeId(36)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(32), ReferenceId(36), ReferenceId(45), ReferenceId(49)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(25), ReferenceId(34), ReferenceId(38), ReferenceId(39), ReferenceId(47), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClassT":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(31), ReferenceId(33), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "publicClassT":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(48), ReferenceId(50), ReferenceId(54), ReferenceId(58)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfInterfaceDeclFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(12), ScopeId(19), ScopeId(26), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(82)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(41): [ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(53), ScopeId(60), ScopeId(67), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(81)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(82): [ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(94), ScopeId(101), ScopeId(108), ScopeId(115), ScopeId(118)]
rebuilt        : ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(32), ReferenceId(36), ReferenceId(45), ReferenceId(49)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(25), ReferenceId(34), ReferenceId(38), ReferenceId(39), ReferenceId(47), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClassT":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(31), ReferenceId(33), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "publicClassT":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(48), ReferenceId(50), ReferenceId(54), ReferenceId(58)]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "publicModule":
after transform: SymbolId(22): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "publicModule":
after transform: SymbolId(22): Span { start: 1973, end: 1985 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateClassInPublicModule":
after transform: SymbolId(23): [ReferenceId(62), ReferenceId(68), ReferenceId(72), ReferenceId(81), ReferenceId(85), ReferenceId(88), ReferenceId(94), ReferenceId(98), ReferenceId(107), ReferenceId(111)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "publicClassInPublicModule":
after transform: SymbolId(24): [ReferenceId(70), ReferenceId(74), ReferenceId(75), ReferenceId(83), ReferenceId(87), ReferenceId(96), ReferenceId(100), ReferenceId(101), ReferenceId(109), ReferenceId(113), ReferenceId(185)]
rebuilt        : SymbolId(7): [ReferenceId(1)]
Symbol reference IDs mismatch for "privateClassInPublicModuleT":
after transform: SymbolId(25): [ReferenceId(67), ReferenceId(69), ReferenceId(80), ReferenceId(82), ReferenceId(93), ReferenceId(95), ReferenceId(106), ReferenceId(108)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "publicClassInPublicModuleT":
after transform: SymbolId(27): [ReferenceId(65), ReferenceId(71), ReferenceId(73), ReferenceId(78), ReferenceId(84), ReferenceId(86), ReferenceId(91), ReferenceId(97), ReferenceId(99), ReferenceId(104), ReferenceId(110), ReferenceId(112), ReferenceId(116), ReferenceId(120), ReferenceId(187)]
rebuilt        : SymbolId(9): [ReferenceId(3)]
Symbol flags mismatch for "privateModule":
after transform: SymbolId(45): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "privateModule":
after transform: SymbolId(45): Span { start: 4805, end: 4818 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "privateModule":
after transform: SymbolId(45): [ReferenceId(60), ReferenceId(61), ReferenceId(122), ReferenceId(123), ReferenceId(194), ReferenceId(195)]
rebuilt        : SymbolId(10): [ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "privateClassInPrivateModule":
after transform: SymbolId(46): [ReferenceId(124), ReferenceId(130), ReferenceId(134), ReferenceId(143), ReferenceId(147), ReferenceId(150), ReferenceId(156), ReferenceId(160), ReferenceId(169), ReferenceId(173)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "publicClassInPrivateModule":
after transform: SymbolId(47): [ReferenceId(132), ReferenceId(136), ReferenceId(137), ReferenceId(145), ReferenceId(149), ReferenceId(158), ReferenceId(162), ReferenceId(163), ReferenceId(171), ReferenceId(175), ReferenceId(191)]
rebuilt        : SymbolId(13): [ReferenceId(7)]
Symbol reference IDs mismatch for "privateClassInPrivateModuleT":
after transform: SymbolId(48): [ReferenceId(129), ReferenceId(131), ReferenceId(142), ReferenceId(144), ReferenceId(155), ReferenceId(157), ReferenceId(168), ReferenceId(170)]
rebuilt        : SymbolId(14): []
Symbol reference IDs mismatch for "publicClassInPrivateModuleT":
after transform: SymbolId(50): [ReferenceId(127), ReferenceId(133), ReferenceId(135), ReferenceId(140), ReferenceId(146), ReferenceId(148), ReferenceId(153), ReferenceId(159), ReferenceId(161), ReferenceId(166), ReferenceId(172), ReferenceId(174), ReferenceId(178), ReferenceId(182), ReferenceId(193)]
rebuilt        : SymbolId(15): [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyVar.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privacyVarDeclFile.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privateInstanceVisibility.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Test":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(1)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privatePropertyInUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "SyncableObject":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/privatePropertyUsingObjectType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseChaining.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "Chain":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseTest.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseType.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9"]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Promise", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Promise", "arguments", "p", "require", "undefined", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(9), ReferenceId(18), ReferenceId(34), ReferenceId(36), ReferenceId(49), ReferenceId(51), ReferenceId(73), ReferenceId(76), ReferenceId(89), ReferenceId(91), ReferenceId(104), ReferenceId(106), ReferenceId(128), ReferenceId(131), ReferenceId(153), ReferenceId(156), ReferenceId(169), ReferenceId(171), ReferenceId(184), ReferenceId(186), ReferenceId(199), ReferenceId(201), ReferenceId(203), ReferenceId(206), ReferenceId(208), ReferenceId(210), ReferenceId(213), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222), ReferenceId(223), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(238), ReferenceId(241), ReferenceId(243), ReferenceId(245), ReferenceId(247), ReferenceId(248), ReferenceId(250), ReferenceId(251), ReferenceId(252), ReferenceId(254), ReferenceId(255), ReferenceId(257), ReferenceId(258), ReferenceId(259), ReferenceId(261), ReferenceId(262), ReferenceId(263), ReferenceId(265), ReferenceId(266), ReferenceId(267), ReferenceId(268), ReferenceId(270), ReferenceId(271), ReferenceId(272)]
rebuilt        : [ReferenceId(43), ReferenceId(70), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(127), ReferenceId(130), ReferenceId(143), ReferenceId(145), ReferenceId(158), ReferenceId(160), ReferenceId(182), ReferenceId(185), ReferenceId(207), ReferenceId(210), ReferenceId(223), ReferenceId(225), ReferenceId(238), ReferenceId(240), ReferenceId(253), ReferenceId(255), ReferenceId(257), ReferenceId(260), ReferenceId(262), ReferenceId(264), ReferenceId(267), ReferenceId(270), ReferenceId(272), ReferenceId(274), ReferenceId(276), ReferenceId(277), ReferenceId(279), ReferenceId(280), ReferenceId(282), ReferenceId(285), ReferenceId(287), ReferenceId(289), ReferenceId(292), ReferenceId(295), ReferenceId(297), ReferenceId(299), ReferenceId(301), ReferenceId(302), ReferenceId(304), ReferenceId(305), ReferenceId(306), ReferenceId(308), ReferenceId(310), ReferenceId(312), ReferenceId(314)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseTypeInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(9), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "CPromise":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "CPromise":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(10)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "load":
after transform: SymbolId(7) "load"
rebuilt        : SymbolId(1) "load"
Reference symbol mismatch for "convert":
after transform: SymbolId(9) "convert"
rebuilt        : SymbolId(3) "convert"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseTypeInferenceUnion.ts
Unresolved references mismatch:
after transform: ["Promise", "PromiseLike"]
rebuilt        : ["Promise"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseTypeStrictNull.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9"]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Promise", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Promise", "arguments", "p", "require", "undefined", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(9), ReferenceId(18), ReferenceId(34), ReferenceId(36), ReferenceId(49), ReferenceId(51), ReferenceId(73), ReferenceId(76), ReferenceId(89), ReferenceId(91), ReferenceId(104), ReferenceId(106), ReferenceId(128), ReferenceId(131), ReferenceId(153), ReferenceId(156), ReferenceId(169), ReferenceId(171), ReferenceId(184), ReferenceId(186), ReferenceId(199), ReferenceId(201), ReferenceId(203), ReferenceId(206), ReferenceId(208), ReferenceId(210), ReferenceId(213), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222), ReferenceId(223), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(238), ReferenceId(241), ReferenceId(243), ReferenceId(245), ReferenceId(247), ReferenceId(248), ReferenceId(250), ReferenceId(251)]
rebuilt        : [ReferenceId(43), ReferenceId(70), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(127), ReferenceId(130), ReferenceId(143), ReferenceId(145), ReferenceId(158), ReferenceId(160), ReferenceId(182), ReferenceId(185), ReferenceId(207), ReferenceId(210), ReferenceId(223), ReferenceId(225), ReferenceId(238), ReferenceId(240), ReferenceId(253), ReferenceId(255), ReferenceId(257), ReferenceId(260), ReferenceId(262), ReferenceId(264), ReferenceId(267), ReferenceId(270), ReferenceId(272), ReferenceId(274), ReferenceId(276), ReferenceId(277), ReferenceId(279), ReferenceId(280), ReferenceId(282), ReferenceId(285), ReferenceId(287), ReferenceId(289), ReferenceId(292), ReferenceId(295), ReferenceId(297), ReferenceId(299), ReferenceId(301), ReferenceId(302), ReferenceId(304), ReferenceId(305)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseVoidErrorCallback.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Error", "Promise"]
rebuilt        : ["Promise"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promiseWithResolvers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/promises.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propTypeValidatorInference.ts
Unresolved references mismatch:
after transform: ["Error", "Exclude", "NonNullable", "Partial", "Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propagateNonInferrableType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "wrapResolver":
after transform: SymbolId(2) "wrapResolver"
rebuilt        : SymbolId(1) "wrapResolver"
Reference symbol mismatch for "resolver":
after transform: SymbolId(0) "resolver"
rebuilt        : SymbolId(0) "resolver"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propagationOfPromiseInitialization.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propertyAccessOnObjectLiteral.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propertyNamesWithStringLiteral.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/propertyOverridingPrototype.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/prototypeOnConstructorFunctions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/qualifiedName_ImportDeclarations-entity-names-referencing-a-var.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ramdaToolsNoInfinite.ts
Bindings mismatch:
after transform: ScopeId(0): ["Curry", "R", "Tools"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(33), ScopeId(35)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable", "Parameters", "Record", "ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/ramdaToolsNoInfinite2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(13), ScopeId(19), ScopeId(21), ScopeId(25), ScopeId(31), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(44), ScopeId(48), ScopeId(51), ScopeId(53), ScopeId(56), ScopeId(62), ScopeId(64), ScopeId(71), ScopeId(73), ScopeId(81), ScopeId(88), ScopeId(92), ScopeId(98), ScopeId(100), ScopeId(103), ScopeId(108), ScopeId(110), ScopeId(115), ScopeId(117), ScopeId(119), ScopeId(124), ScopeId(131), ScopeId(136), ScopeId(145), ScopeId(147), ScopeId(149), ScopeId(152), ScopeId(156), ScopeId(160), ScopeId(162), ScopeId(168), ScopeId(173), ScopeId(177), ScopeId(179), ScopeId(181), ScopeId(183), ScopeId(186), ScopeId(188), ScopeId(190), ScopeId(192), ScopeId(196)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude", "Function", "ReadonlyArray", "Required"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reExportUndefined2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reachabilityCheckWithEmptyDefault.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "print":
after transform: SymbolId(0) "print"
rebuilt        : SymbolId(0) "print"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactHOCSpreadprops.tsx
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(11)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactNamespaceImportPresevation.tsx
Bindings mismatch:
after transform: ScopeId(0): ["_jsx", "_jsxFileName", "foo", "myReactLib"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactNamespaceJSXEmit.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "_Bar", "_jsxFileName", "_objectSpread", "foo", "myReactLib", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "_Bar":
after transform: SymbolId(3) "_Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["React"]
rebuilt        : ["Bar", "React", "_Bar", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactReadonlyHOCAssignabilityReal.tsx
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactSFCAndFunctionResolvable.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Checkbox", "OtherRadio", "Radio", "RandomComponent", "React", "_jsxFileName", "condition1", "condition2", "condition3"]
rebuilt        : ScopeId(0): ["RandomComponent", "React", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(14), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(10)]
Reference symbol mismatch for "condition1":
after transform: SymbolId(4) "condition1"
rebuilt        : <None>
Reference symbol mismatch for "Radio":
after transform: SymbolId(1) "Radio"
rebuilt        : <None>
Reference symbol mismatch for "Checkbox":
after transform: SymbolId(3) "Checkbox"
rebuilt        : <None>
Reference symbol mismatch for "condition2":
after transform: SymbolId(5) "condition2"
rebuilt        : <None>
Reference symbol mismatch for "OtherRadio":
after transform: SymbolId(2) "OtherRadio"
rebuilt        : <None>
Reference symbol mismatch for "Checkbox":
after transform: SymbolId(3) "Checkbox"
rebuilt        : <None>
Reference symbol mismatch for "condition1":
after transform: SymbolId(4) "condition1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Checkbox", "OtherRadio", "Radio", "condition1", "condition2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactTagNameComponentWithPropsNoOOM.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "Tag", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Tag":
after transform: SymbolId(1) "Tag"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Tag"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactTagNameComponentWithPropsNoOOM2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "Tag", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Tag":
after transform: SymbolId(1) "Tag"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : ["Tag"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reactTransitiveImportHasValidDeclaration.ts
Unresolved references mismatch:
after transform: ["HTMLDivElement", "React"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/readonlyFloat32ArrayAssignableWithFloat32Array.ts
Unresolved references mismatch:
after transform: ["Float32Array", "Readonly"]
rebuilt        : ["Float32Array"]
Unresolved reference IDs mismatch for "Float32Array":
after transform: [ReferenceId(1), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15)]
rebuilt        : [ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/readonlyInDeclarationFile.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(21), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(21), ScopeId(25)]
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reboundBaseClassSymbol.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 34, end: 37 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/rectype.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveArrayNotCircular.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["ActionType", "Bar", "Batch", "Baz", "Foo"]
rebuilt        : ScopeId(1): ["ActionType"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "ActionType":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "ActionType":
after transform: SymbolId(3): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(36)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseConstructorCreation1.ts
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveBaseConstructorCreation2.ts
Symbol flags mismatch for "base":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol flags mismatch for "abc":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol flags mismatch for "xyz":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "xyz":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(4): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveClassBaseType.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "Base1", "C", "Derived1", "p"]
rebuilt        : ScopeId(0): ["Base1", "C", "Derived1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(6)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(6): [ReferenceId(7)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "Base":
after transform: SymbolId(2) "Base"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["Base", "p", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveClassInstantiationsWithDefaultConstructors.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TypeScript2":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TypeScript2":
after transform: SymbolId(0): Span { start: 7, end: 18 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveCloduleReference.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveComplicatedClasses.ts
Symbol reference IDs mismatch for "Symbol":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "ParameterSymbol":
after transform: SymbolId(6): [ReferenceId(0)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "TypeSymbol":
after transform: SymbolId(7): [ReferenceId(2)]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(16), ScopeId(24), ScopeId(25), ScopeId(33), ScopeId(36), ScopeId(37), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalEvaluationNonInfinite.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x", "y"]
rebuilt        : ScopeId(0): ["b", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(18), ScopeId(22), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["NonNullable", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveExcessPropertyChecks.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveFieldSetting.ts
Symbol reference IDs mismatch for "Recursive1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Recursive2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Recursive3":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveFunctionTypes1.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveGenericMethodCall.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveGenericTypeHierarchy.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveGenericUnionType1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Test1", "Test2", "s1", "s2", "x"]
rebuilt        : ScopeId(0): ["s1", "s2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveGenericUnionType2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Test1", "Test2", "s1", "s2", "x"]
rebuilt        : ScopeId(0): ["s1", "s2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveIdenticalAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveIdenticalOverloadResolution.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveInheritance2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "x", "y", "z"]
rebuilt        : ScopeId(0): ["x", "y", "z"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(7) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveMods.ts
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 14, end: 17 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 14, end: 17 }, Span { start: 56, end: 59 }]
rebuilt        : SymbolId(0): []
Unresolved reference IDs mismatch for "C":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6)]
rebuilt        : [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveResolveDeclaredMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["E"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveReverseMappedType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveSpecializationOfExtendedTypeWithError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveSpecializationOfSignatures.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "S0":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTupleTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTupleTypes2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeAliasWithSpreadConditionalReturnNotCircular.ts
Bindings mismatch:
after transform: ScopeId(0): ["opt1", "opt2", "opt3", "zipped1", "zipped2", "zipped3"]
rebuilt        : ScopeId(0): ["zipped1", "zipped2", "zipped3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["opt1", "opt2", "opt3"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeComparison.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeIdentity.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeParameterReferenceError1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypeParameterReferenceError2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursiveUnionTypeInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/recursivelySpecializedConstructorDeclaration.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(7)]
Symbol flags mismatch for "MsPortal":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "MsPortal":
after transform: SymbolId(0): Span { start: 7, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Controls":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Controls":
after transform: SymbolId(1): Span { start: 16, end: 24 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "Base":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Base":
after transform: SymbolId(2): Span { start: 25, end: 29 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol flags mismatch for "ItemList":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ItemList":
after transform: SymbolId(3): Span { start: 30, end: 38 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "ViewModel":
after transform: SymbolId(9): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(10): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/redeclarationOfVarWithGenericType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reducibleIndexedAccessTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Type"]
rebuilt        : ScopeId(1): ["Type"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Type":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(14), ReferenceId(33)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reexportNameAliasedAndHoisted.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Sizing"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Sizing":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Sizing":
after transform: SymbolId(0): Span { start: 12, end: 18 }
rebuilt        : SymbolId(0): Span { start: 39, end: 45 }
Symbol redeclarations mismatch for "Sizing":
after transform: SymbolId(0): [Span { start: 12, end: 18 }, Span { start: 39, end: 45 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reexportWrittenCorrectlyInDeclaration.ts
Bindings mismatch:
after transform: ScopeId(0): ["Test", "_defineProperty", "things"]
rebuilt        : ScopeId(0): ["Test", "_defineProperty"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/regexpExecAndMatchTypeUsages.ts
Unresolved references mismatch:
after transform: ["Math", "RegExpExecArray", "RegExpMatchArray", "undefined"]
rebuilt        : ["Math", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/relatedViaDiscriminatedTypeNoError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(3)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/relatedViaDiscriminatedTypeNoError2.ts
Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(5) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(6) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(6) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(5) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/renamingDestructuredPropertyInFunctionType2.ts
Unresolved references mismatch:
after transform: ["number", "string"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reorderProperties.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireEmitSemicolon.ts
Symbol flags mismatch for "Models":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Models":
after transform: SymbolId(0): Span { start: 14, end: 20 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleEmitUndefined.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitAmd.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitAmdOutFile.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitEs2015.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitEsNext.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitUndefined.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutEsModuleInterop.ts
Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFile_PathMapping.ts
Bindings mismatch:
after transform: ScopeId(0): ["foobar"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/requiredInitializedParameter3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reservedNameOnModuleImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["mstring"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolutionCandidateFromPackageJsonField2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveInterfaceNameWithSameLetDeclarationName1.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "bar":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 22, end: 30 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 22, end: 30 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveInterfaceNameWithSameLetDeclarationName2.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "bar":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(1): Span { start: 28, end: 31 }
rebuilt        : SymbolId(0): Span { start: 40, end: 54 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(1): [Span { start: 28, end: 31 }, Span { start: 40, end: 54 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 60, end: 74 }
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 10, end: 13 }, Span { start: 60, end: 74 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveModuleNameWithSameLetDeclarationName1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | NamespaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 56, end: 68 }
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 15, end: 18 }, Span { start: 56, end: 68 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveModuleNameWithSameLetDeclarationName2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveNameWithNamspace.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/resolveTypeAliasWithSameLetDeclarationName1.ts
Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): ["C", "baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "baz":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | TypeAlias)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "baz":
after transform: SymbolId(1): Span { start: 17, end: 20 }
rebuilt        : SymbolId(1): Span { start: 30, end: 38 }
Symbol reference IDs mismatch for "baz":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "baz":
after transform: SymbolId(1): [Span { start: 17, end: 20 }, Span { start: 30, end: 38 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/restParamUsingMappedTypeOverUnionConstraint.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/restParameterAssignmentCompatibility.ts
Symbol reference IDs mismatch for "T":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "S":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "T1":
after transform: SymbolId(7): [ReferenceId(4)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/restParameterTypeInstantiation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/restTypeRetainsMappyness.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/restUnion2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_extends", "_objectDestructuringEmpty", "nullUnion", "rest2", "rest3", "undefinedUnion"]
rebuilt        : ScopeId(0): ["_extends", "_objectDestructuringEmpty", "rest2", "rest3"]
Reference symbol mismatch for "undefinedUnion":
after transform: SymbolId(0) "undefinedUnion"
rebuilt        : <None>
Reference symbol mismatch for "undefinedUnion":
after transform: SymbolId(0) "undefinedUnion"
rebuilt        : <None>
Reference symbol mismatch for "nullUnion":
after transform: SymbolId(2) "nullUnion"
rebuilt        : <None>
Reference symbol mismatch for "nullUnion":
after transform: SymbolId(2) "nullUnion"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["nullUnion", "require", "undefinedUnion"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/returnInfiniteIntersection.ts
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/returnTypeInferenceNotTooBroad.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "sepsis":
after transform: SymbolId(5) "sepsis"
rebuilt        : SymbolId(0) "sepsis"
Reference symbol mismatch for "unwrap":
after transform: SymbolId(8) "unwrap"
rebuilt        : SymbolId(2) "unwrap"
Reference symbol mismatch for "unwrap":
after transform: SymbolId(8) "unwrap"
rebuilt        : SymbolId(2) "unwrap"
Reference symbol mismatch for "sepsis":
after transform: SymbolId(5) "sepsis"
rebuilt        : SymbolId(0) "sepsis"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/returnTypeParameterWithModules.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol flags mismatch for "M1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "M2":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(6): Span { start: 149, end: 151 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/returnTypePredicateIsInstantiateInContextOfTarget.tsx
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reuseInnerModuleMember.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedContravariantInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "conforms":
after transform: SymbolId(0) "conforms"
rebuilt        : SymbolId(0) "conforms"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedIntersectionInference1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(6), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "withKeyedObj":
after transform: SymbolId(6) "withKeyedObj"
rebuilt        : SymbolId(0) "withKeyedObj"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedIntersectionInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(6), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "withTupleLike":
after transform: SymbolId(6) "withTupleLike"
rebuilt        : SymbolId(0) "withTupleLike"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTupleContext.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(9), SymbolId(14), SymbolId(17), SymbolId(18), SymbolId(23), SymbolId(27)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Reference symbol mismatch for "test1":
after transform: SymbolId(0) "test1"
rebuilt        : SymbolId(0) "test1"
Reference symbol mismatch for "test2":
after transform: SymbolId(5) "test2"
rebuilt        : SymbolId(3) "test2"
Reference symbol mismatch for "create":
after transform: SymbolId(14) "create"
rebuilt        : SymbolId(6) "create"
Reference symbol mismatch for "create":
after transform: SymbolId(14) "create"
rebuilt        : SymbolId(6) "create"
Reference symbol mismatch for "test4":
after transform: SymbolId(23) "test4"
rebuilt        : SymbolId(10) "test4"
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeAssignableToIndex.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeContextualTypesPerElementOfTupleConstraint.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "bindAll":
after transform: SymbolId(2) "bindAll"
rebuilt        : SymbolId(0) "bindAll"
Unresolved references mismatch:
after transform: ["EventTarget", "Extract", "HTMLButtonElement", "Parameters"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeDeepDeclarationEmit.ts
Bindings mismatch:
after transform: ScopeId(0): ["ObjValidator", "SimpleStringValidator", "outputExample", "test", "validatorFunc"]
rebuilt        : ScopeId(0): ["outputExample", "test", "validatorFunc"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "SimpleStringValidator":
after transform: SymbolId(7) "SimpleStringValidator"
rebuilt        : <None>
Reference symbol mismatch for "ObjValidator":
after transform: SymbolId(8) "ObjValidator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["ObjValidator", "SimpleStringValidator"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeInferenceSameSource1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(13), SymbolId(19), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "configureStore":
after transform: SymbolId(13) "configureStore"
rebuilt        : SymbolId(0) "configureStore"
Reference symbol mismatch for "configureStore":
after transform: SymbolId(13) "configureStore"
rebuilt        : SymbolId(0) "configureStore"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypePrimitiveConstraintProperty.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeRecursiveInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reverseMappedUnionInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(10), SymbolId(12), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Reference symbol mismatch for "createExtractor":
after transform: SymbolId(5) "createExtractor"
rebuilt        : SymbolId(0) "createExtractor"
Reference symbol mismatch for "isIdentifier":
after transform: SymbolId(10) "isIdentifier"
rebuilt        : SymbolId(2) "isIdentifier"
Reference symbol mismatch for "createExtractor":
after transform: SymbolId(5) "createExtractor"
rebuilt        : SymbolId(0) "createExtractor"
Reference symbol mismatch for "isStringLiteral":
after transform: SymbolId(15) "isStringLiteral"
rebuilt        : SymbolId(6) "isStringLiteral"
Reference symbol mismatch for "unionType":
after transform: SymbolId(19) "unionType"
rebuilt        : SymbolId(10) "unionType"
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/reversedRecusiveTypeInstantiation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/selfInCallback.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/selfInLambdas.ts
Bindings mismatch:
after transform: ScopeId(0): ["X", "_defineProperty", "o", "window"]
rebuilt        : ScopeId(0): ["X", "_defineProperty", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Reference symbol mismatch for "window":
after transform: SymbolId(1) "window"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["require", "window"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/selfReference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "asFunction":
after transform: SymbolId(0) "asFunction"
rebuilt        : SymbolId(0) "asFunction"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/selfReferencingTypeReferenceInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/selfReferentialFunctionType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/separate1-2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/shebangBeforeReferences.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sigantureIsSubTypeIfTheyAreIdentical.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/signatureCombiningRestParameters2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "console":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/signatureInstantiationWithRecursiveConstraints.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/signatureOverloadsWithComments.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/silentNeverPropagation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(9), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "convert":
after transform: SymbolId(9) "convert"
rebuilt        : SymbolId(3) "convert"
Reference symbol mismatch for "createModule":
after transform: SymbolId(4) "createModule"
rebuilt        : SymbolId(0) "createModule"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/simpleRecursionWithBaseCase2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_foo", "_foo2", "_rec", "_rec2", "_rec3", "_rec4", "_rec5", "_rec6", "foo1", "foo2", "ps", "rec1", "rec2", "rec3", "rec4", "rec5", "rec6"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_foo", "_foo2", "_rec", "_rec2", "_rec3", "_rec4", "_rec5", "_rec6", "foo1", "foo2", "rec1", "rec2", "rec3", "rec4", "rec5", "rec6"]
Reference symbol mismatch for "ps":
after transform: SymbolId(6) "ps"
rebuilt        : <None>
Reference symbol mismatch for "ps":
after transform: SymbolId(6) "ps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Promise", "arguments", "require"]
rebuilt        : ["Math", "arguments", "ps", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/simplifyingConditionalWithInteriorConditionalIsRelated.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/singletonLabeledTuple.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sliceResultCast.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMap-Comments.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "sas":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "sas":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "tools":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "tools":
after transform: SymbolId(1): Span { start: 11, end: 16 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMap-FileWithComments.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Shapes":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Shapes":
after transform: SymbolId(1): Span { start: 75, end: 81 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMap-InterfacePrecedingVariableDeclaration1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMap-StringLiteralWithNewLine.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "window"]
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 104, end: 107 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Reference symbol mismatch for "window":
after transform: SymbolId(2) "window"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["window"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapForFunctionInInternalModuleWithCommentPrecedingStatement01.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Q":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Q":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationClasses.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Bar":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Bar":
after transform: SymbolId(1): Span { start: 11, end: 14 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Greeter":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDecorators.ts
Unexpected token

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobot", "robot"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobot", "robot"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobot", "robot"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobot", "robot"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobots", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobots", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobots", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobots", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterNestedObjectBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "hello", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "hello", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "hello", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "hello", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatement.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatement1.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "b", "b1", "c", "c1", "console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["a", "a1", "b", "b1", "c", "c1", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
rebuilt        : ScopeId(0): ["nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
rebuilt        : ScopeId(0): ["multiRobotA", "multiRobotAInfo", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern3.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
rebuilt        : ScopeId(0): ["getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
rebuilt        : ScopeId(0): ["nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues2.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "multiRobotA", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
rebuilt        : ScopeId(0): ["multiRobotA", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
rebuilt        : ScopeId(0): ["getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
rebuilt        : ScopeId(0): ["nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.ts
Bindings mismatch:
after transform: ScopeId(0): ["console", "nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
rebuilt        : ScopeId(0): ["nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationImport.ts
Symbol flags mismatch for "m":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(0): Span { start: 14, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourceMapWithMultipleFilesWithFileEndingWithInterface.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/sourcemapValidationDuplicateNames.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "m1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "m1":
after transform: SymbolId(0): [Span { start: 7, end: 9 }, Span { start: 64, end: 66 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specedNoStackBlown.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(14), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "Partial", "ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializationError.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializationOfExportedClass.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializationsShouldNotAffectEachOther.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializeVarArgs1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializedInheritedConstructors1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializedLambdaTypeArguments.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializedOverloadWithRestParameters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializedSignatureInInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/specializedSignatureOverloadReturnTypeWithIndexers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadBooleanRespectsFreshness.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo1", "foo2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(3) "foo1"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["Array", "foo1", "foo2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadExpressionContextualType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadIdenticalTypesRemoved.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadIntersectionJsx.tsx
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadObjectNoCircular1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_objectSpread", "b"]
rebuilt        : ScopeId(0): ["Foo", "_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["b", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadObjectPermutations.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c", "v_a", "v_ab", "v_abc", "v_ac", "v_acb", "v_b", "v_ba", "v_bac", "v_bc", "v_bca", "v_c", "v_ca", "v_cab", "v_cb", "v_cba"]
rebuilt        : ScopeId(0): ["_objectSpread", "v_a", "v_ab", "v_abc", "v_ac", "v_acb", "v_b", "v_ba", "v_bac", "v_bc", "v_bca", "v_c", "v_ca", "v_cab", "v_cb", "v_cba"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "b", "c", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadObjectWithIndexDoesNotAddUndefinedToLocalIndex.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "m", "x"]
rebuilt        : ScopeId(0): ["_objectSpread", "x"]
Reference symbol mismatch for "m":
after transform: SymbolId(0) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["m", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadOfObjectLiteralAssignableToIndexSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "require", "undefined"]
rebuilt        : ["require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadParameterTupleType.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadTypeRemovesReadonly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spreadsAndContextualTupleTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "fx1":
after transform: SymbolId(0) "fx1"
rebuilt        : SymbolId(0) "fx1"
Reference symbol mismatch for "fx1":
after transform: SymbolId(0) "fx1"
rebuilt        : SymbolId(0) "fx1"
Reference symbol mismatch for "fx2":
after transform: SymbolId(3) "fx2"
rebuilt        : SymbolId(2) "fx2"
Reference symbol mismatch for "fx2":
after transform: SymbolId(3) "fx2"
rebuilt        : SymbolId(2) "fx2"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(14) "foo"
rebuilt        : SymbolId(12) "foo"
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/spuriousCircularityOnTypeImport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/stackDepthLimitCastingType.ts
Unresolved references mismatch:
after transform: ["Model"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticAnonymousTypeNotReferencingTypeParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(13), SymbolId(24), SymbolId(124), SymbolId(125), SymbolId(127), SymbolId(133)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(11), SymbolId(19), SymbolId(102), SymbolId(103), SymbolId(105)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(13), ScopeId(16), ScopeId(60), ScopeId(61), ScopeId(63)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(12), ScopeId(53), ScopeId(54)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(16): [ScopeId(17)]
Scope children mismatch:
after transform: ScopeId(47): [ScopeId(48), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(42): [ScopeId(43), ScopeId(44)]
Scope children mismatch:
after transform: ScopeId(53): [ScopeId(54), ScopeId(55), ScopeId(56)]
rebuilt        : ScopeId(47): [ScopeId(48), ScopeId(49)]
Symbol reference IDs mismatch for "ListWrapper2":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(5): [ReferenceId(7)]
Symbol flags mismatch for "tessst":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "tessst":
after transform: SymbolId(13): Span { start: 503, end: 509 }
rebuilt        : SymbolId(11): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "ListWrapper":
after transform: SymbolId(24): [ReferenceId(34), ReferenceId(37), ReferenceId(40), ReferenceId(44), ReferenceId(54), ReferenceId(59), ReferenceId(66), ReferenceId(72), ReferenceId(77), ReferenceId(80), ReferenceId(90), ReferenceId(93), ReferenceId(99), ReferenceId(107), ReferenceId(118), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(137), ReferenceId(147), ReferenceId(155), ReferenceId(161), ReferenceId(170), ReferenceId(173), ReferenceId(177), ReferenceId(200), ReferenceId(201)]
rebuilt        : SymbolId(19): [ReferenceId(50), ReferenceId(133), ReferenceId(134)]
Reference symbol mismatch for "isPresent":
after transform: SymbolId(127) "isPresent"
rebuilt        : SymbolId(105) "isPresent"
Reference symbol mismatch for "isBlank":
after transform: SymbolId(125) "isBlank"
rebuilt        : SymbolId(103) "isBlank"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticFieldWithInterfaceContext.ts
Bindings mismatch:
after transform: ScopeId(0): ["_Class", "_Class10", "_Class11", "_Class12", "_Class13", "_Class14", "_Class15", "_Class2", "_Class4", "_Class5", "_Class6", "_Class7", "_Class8", "_Class9", "_defineProperty", "c", "c10", "c11", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ex", "f"]
rebuilt        : ScopeId(0): ["_Class", "_Class10", "_Class11", "_Class12", "_Class13", "_Class14", "_Class15", "_Class2", "_Class3", "_Class4", "_Class5", "_Class6", "_Class7", "_Class8", "_Class9", "_defineProperty", "c", "c10", "c11", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ex", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Bindings mismatch:
after transform: ScopeId(4): ["_Class3", "c"]
rebuilt        : ScopeId(3): ["c"]
Symbol scope ID mismatch for "_Class3":
after transform: SymbolId(18): ScopeId(4)
rebuilt        : SymbolId(3): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticInitializersAndLegacyClassDecorators.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "_C", "_C2", "_decorate", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "_C", "_C2", "_decorate", "_defineProperty"]
Symbol span mismatch for "C1":
after transform: SymbolId(1): Span { start: 90, end: 92 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(5), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(6), ReferenceId(10)]
Symbol span mismatch for "C1":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 90, end: 92 }
Symbol span mismatch for "C2":
after transform: SymbolId(2): Span { start: 141, end: 143 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(6): [ReferenceId(13), ReferenceId(17)]
Symbol span mismatch for "C2":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 141, end: 143 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution.ts
Symbol reference IDs mismatch for "Comment":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution3.ts
Symbol reference IDs mismatch for "Promise":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticInterfaceAssignmentCompat.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Shape":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticMethodWithTypeParameterExtendsClauseDeclFile.ts
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/staticPrototypePropertyOnClass.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(5): [ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/strictFunctionTypes1.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "acceptA", "acceptUnion", "b", "coAndContra", "coAndContraArray", "f1", "f2", "f3", "f4", "fo", "foo", "fs", "fx", "never", "t1", "t2", "t3", "t4", "t5", "t6", "x", "x1", "x10", "x11", "x2", "x3", "x4"]
rebuilt        : ScopeId(0): ["acceptA", "acceptUnion", "coAndContra", "coAndContraArray", "f1", "f2", "f3", "f4", "fo", "foo", "fs", "fx", "t1", "t2", "t3", "t4", "t5", "t6", "x", "x1", "x10", "x11", "x2", "x3", "x4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fs":
after transform: SymbolId(22) "fs"
rebuilt        : SymbolId(16) "fs"
Reference symbol mismatch for "f2":
after transform: SymbolId(4) "f2"
rebuilt        : SymbolId(3) "f2"
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fs":
after transform: SymbolId(22) "fs"
rebuilt        : SymbolId(16) "fs"
Reference symbol mismatch for "f3":
after transform: SymbolId(9) "f3"
rebuilt        : SymbolId(7) "f3"
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fx":
after transform: SymbolId(24) "fx"
rebuilt        : SymbolId(18) "fx"
Reference symbol mismatch for "f4":
after transform: SymbolId(16) "f4"
rebuilt        : SymbolId(11) "f4"
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fs":
after transform: SymbolId(22) "fs"
rebuilt        : SymbolId(16) "fs"
Reference symbol mismatch for "f2":
after transform: SymbolId(4) "f2"
rebuilt        : SymbolId(3) "f2"
Reference symbol mismatch for "never":
after transform: SymbolId(30) "never"
rebuilt        : <None>
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fs":
after transform: SymbolId(22) "fs"
rebuilt        : SymbolId(16) "fs"
Reference symbol mismatch for "f3":
after transform: SymbolId(9) "f3"
rebuilt        : SymbolId(7) "f3"
Reference symbol mismatch for "never":
after transform: SymbolId(30) "never"
rebuilt        : <None>
Reference symbol mismatch for "fo":
after transform: SymbolId(20) "fo"
rebuilt        : SymbolId(14) "fo"
Reference symbol mismatch for "fx":
after transform: SymbolId(24) "fx"
rebuilt        : SymbolId(18) "fx"
Reference symbol mismatch for "foo":
after transform: SymbolId(33) "foo"
rebuilt        : SymbolId(26) "foo"
Reference symbol mismatch for "coAndContra":
after transform: SymbolId(45) "coAndContra"
rebuilt        : SymbolId(33) "coAndContra"
Reference symbol mismatch for "a":
after transform: SymbolId(43) "a"
rebuilt        : <None>
Reference symbol mismatch for "acceptUnion":
after transform: SymbolId(39) "acceptUnion"
rebuilt        : SymbolId(29) "acceptUnion"
Reference symbol mismatch for "coAndContra":
after transform: SymbolId(45) "coAndContra"
rebuilt        : SymbolId(33) "coAndContra"
Reference symbol mismatch for "b":
after transform: SymbolId(44) "b"
rebuilt        : <None>
Reference symbol mismatch for "acceptA":
after transform: SymbolId(41) "acceptA"
rebuilt        : SymbolId(31) "acceptA"
Reference symbol mismatch for "coAndContra":
after transform: SymbolId(45) "coAndContra"
rebuilt        : SymbolId(33) "coAndContra"
Reference symbol mismatch for "never":
after transform: SymbolId(30) "never"
rebuilt        : <None>
Reference symbol mismatch for "acceptA":
after transform: SymbolId(41) "acceptA"
rebuilt        : SymbolId(31) "acceptA"
Reference symbol mismatch for "coAndContraArray":
after transform: SymbolId(52) "coAndContraArray"
rebuilt        : SymbolId(39) "coAndContraArray"
Reference symbol mismatch for "a":
after transform: SymbolId(43) "a"
rebuilt        : <None>
Reference symbol mismatch for "acceptUnion":
after transform: SymbolId(39) "acceptUnion"
rebuilt        : SymbolId(29) "acceptUnion"
Reference symbol mismatch for "coAndContraArray":
after transform: SymbolId(52) "coAndContraArray"
rebuilt        : SymbolId(39) "coAndContraArray"
Reference symbol mismatch for "b":
after transform: SymbolId(44) "b"
rebuilt        : <None>
Reference symbol mismatch for "acceptA":
after transform: SymbolId(41) "acceptA"
rebuilt        : SymbolId(31) "acceptA"
Reference symbol mismatch for "coAndContraArray":
after transform: SymbolId(52) "coAndContraArray"
rebuilt        : SymbolId(39) "coAndContraArray"
Reference symbol mismatch for "acceptA":
after transform: SymbolId(41) "acceptA"
rebuilt        : SymbolId(31) "acceptA"
Unresolved references mismatch:
after transform: ["Object", "ReadonlyArray"]
rebuilt        : ["a", "b", "never"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/strictModeEnumMemberNameReserved.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "static"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/strictNullNotNullIndexTypeShouldWork.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/strictOptionalProperties2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/strictTypeofUnionNarrowing.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/stringLiteralObjectLiteralDeclaration1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/stripMembersOptionality.ts
Bindings mismatch:
after transform: ScopeId(0): ["someVal", "someVal2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "someVal":
after transform: SymbolId(0) "someVal"
rebuilt        : <None>
Reference symbol mismatch for "someVal2":
after transform: SymbolId(1) "someVal2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Required"]
rebuilt        : ["someVal", "someVal2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/structural1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/structuralTypeInDeclareFileForModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/styledComponentsInstantiaionLimitNotReached.ts
Bindings mismatch:
after transform: ScopeId(0): ["React"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(16), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(30), ScopeId(32), ScopeId(35), ScopeId(38)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "JSX", "Omit", "Partial", "Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/subclassThisTypeAssignable02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(12): [ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/subclassWithPolymorphicThisIsAssignable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substituteReturnTypeSatisfiesConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForIndexedAccessType1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForIndexedAccessType2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForNonGenericIndexedAccessType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypeNoMergeOfAssignableType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypePassedToExtends.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Set"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypesCompareCorrectlyInRestrictiveInstances.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/substitutionTypesInIndexedAccessTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "withBoundary":
after transform: SymbolId(5) "withBoundary"
rebuilt        : SymbolId(0) "withBoundary"
Reference symbol mismatch for "withoutBoundary":
after transform: SymbolId(8) "withoutBoundary"
rebuilt        : SymbolId(2) "withoutBoundary"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/subtypeReductionUnionConstraints.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Reference symbol mismatch for "isNode":
after transform: SymbolId(4) "isNode"
rebuilt        : SymbolId(0) "isNode"
Reference symbol mismatch for "isNode":
after transform: SymbolId(4) "isNode"
rebuilt        : SymbolId(0) "isNode"
Reference symbol mismatch for "isBar":
after transform: SymbolId(6) "isBar"
rebuilt        : SymbolId(2) "isBar"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/subtypeRelationForNever.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/subtypingTransitivity.ts
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "D2":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superAccessCastedCall.ts
Unresolved references mismatch:
after transform: ["Number", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superAccessInFatArrow1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []
Symbol flags mismatch for "test":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "test":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericType1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericType2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superElementAccess.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(12)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(9): [ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superHasMethodsFromMergedInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["Sub"]
rebuilt        : ScopeId(0): ["C", "Sub"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 6, end: 7 }, Span { start: 31, end: 32 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superWithGenericSpecialization.ts
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/superWithGenerics.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/switchComparableCompatForBrands.ts
Symbol reference IDs mismatch for "MyBrand":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/symbolLinkDeclarationEmitModuleNames.ts
Bindings mismatch:
after transform: ScopeId(0): ["Constructor"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/symbolLinkDeclarationEmitModuleNamesRootDir.ts
Bindings mismatch:
after transform: ScopeId(0): ["Constructor"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/symbolMergeValueAndImportedType.ts
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Import)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 9, end: 10 }
rebuilt        : SymbolId(0): Span { start: 35, end: 36 }
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 9, end: 10 }, Span { start: 35, end: 36 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/symbolObserverMismatchingPolyfillsWorkTogether.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/symlinkedWorkspaceDependenciesNoDirectLinkGeneratesDeepNonrelativeName.ts
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemExportAssignment.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemExportAssignment3.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModule15.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(1) "use"
rebuilt        : SymbolId(1) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModule17.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModule7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 49, end: 50 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 49, end: 50 }, Span { start: 123, end: 124 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModuleAmbientDeclarations.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "Foo", "Promise", "c", "e", "foo", "promise"]
rebuilt        : ScopeId(0): ["C", "Foo", "Promise", "c", "e", "foo", "promise"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "Promise":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Reference symbol mismatch for "Foo":
after transform: SymbolId(1) "Foo"
rebuilt        : SymbolId(1) "Foo"
Reference symbol mismatch for "E":
after transform: SymbolId(3) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["E"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModuleConstEnums.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(2): ["TopLevelConstEnum", "X"]
rebuilt        : ScopeId(2): ["TopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["NonTopLevelConstEnum", "X"]
rebuilt        : ScopeId(5): ["NonTopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelConstEnum":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "M":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(5): Span { start: 165, end: 166 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(6): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModuleConstEnumsSeparateCompilation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(2): ["TopLevelConstEnum", "X"]
rebuilt        : ScopeId(2): ["TopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["NonTopLevelConstEnum", "X"]
rebuilt        : ScopeId(5): ["NonTopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelConstEnum":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "M":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(5): Span { start: 165, end: 166 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(6): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"
Reference symbol mismatch for "use":
after transform: SymbolId(0) "use"
rebuilt        : SymbolId(0) "use"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModuleDeclarationMerging.ts
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "F":
after transform: SymbolId(0): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol redeclarations mismatch for "F":
after transform: SymbolId(0): [Span { start: 16, end: 17 }, Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(2): [Span { start: 64, end: 65 }, Span { start: 83, end: 84 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "E":
after transform: SymbolId(4): [Span { start: 109, end: 110 }, Span { start: 128, end: 129 }]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemModuleNonTopLevelModuleMembers.ts
Bindings mismatch:
after transform: ScopeId(4): ["E", "TopLevelEnum"]
rebuilt        : ScopeId(4): ["TopLevelEnum"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(9): ["E", "NonTopLevelEnum"]
rebuilt        : ScopeId(9): ["NonTopLevelEnum"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode)
rebuilt        : ScopeId(9): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelModule":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TopLevelModule":
after transform: SymbolId(1): Span { start: 44, end: 58 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol flags mismatch for "TopLevelEnum":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "TopLevelModule2":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TopLevelModule2":
after transform: SymbolId(6): Span { start: 156, end: 171 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol flags mismatch for "NonTopLevelModule":
after transform: SymbolId(8): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NonTopLevelModule":
after transform: SymbolId(8): Span { start: 229, end: 246 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "NonTopLevelEnum":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/systemNamespaceAliasEmit.ts
Bindings mismatch:
after transform: ScopeId(2): ["AnEnum", "ONE", "TWO"]
rebuilt        : ScopeId(2): ["AnEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "ns":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ns":
after transform: SymbolId(0): Span { start: 10, end: 12 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "AnEnum":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/taggedPrimitiveNarrowing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/taggedTemplateStringWithSymbolExpression01.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/taggedTemplatesInDifferentScopes.ts
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/taggedTemplatesInModuleAndGlobal.ts
Symbol flags mismatch for "n":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "n":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tailRecursiveConditionalTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/targetEs6DecoratorMetadataImportNotElided.ts
Bindings mismatch:
after transform: ScopeId(0): ["Input", "MyComponent", "TemplateRef", "_decorate", "_decorateMetadata", "_defineProperty"]
rebuilt        : ScopeId(0): ["Input", "MyComponent", "_decorate", "_decorateMetadata", "_defineProperty"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeArgs.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeCalls.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/targetTypeObjectLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/targetTypingOnFunctions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateExpressionAsPossiblyDiscriminantValue.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateExpressionNoInlininingOfConstantBindingWithInitializer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralConstantEvaluation.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection3.ts
Bindings mismatch:
after transform: ScopeId(0): ["lowercasePath", "options1", "path"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "path":
after transform: SymbolId(1) "path"
rebuilt        : <None>
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "lowercasePath":
after transform: SymbolId(3) "lowercasePath"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Lowercase"]
rebuilt        : ["lowercasePath", "options1", "path"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "createStore":
after transform: SymbolId(5) "createStore"
rebuilt        : SymbolId(0) "createStore"
Unresolved references mismatch:
after transform: ["Capitalize", "Omit"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/templateLiteralsAndDecoratorMetadata.ts
Bindings mismatch:
after transform: ScopeId(0): ["Greeter", "_decorate", "_decorateMetadata", "_defineProperty", "format"]
rebuilt        : ScopeId(0): ["Greeter", "_decorate", "_decorateMetadata", "_defineProperty"]
Reference symbol mismatch for "format":
after transform: SymbolId(0) "format"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : ["String", "format"]
Unresolved reference IDs mismatch for "String":
after transform: [ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/testContainerList.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 35, end: 36 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/testTypings.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisConditionalOnMethodReturnOfGenericInstance.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(3): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisExpressionOfGenericObject.ts
Symbol reference IDs mismatch for "MyClass1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisInGenericStaticMembers.ts
Symbol reference IDs mismatch for "B":
after transform: SymbolId(6): [ReferenceId(7), ReferenceId(8), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisInModuleFunction1.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "bar":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisInPropertyBoundDeclarations.ts
Symbol reference IDs mismatch for "Bug":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisInTupleTypeParameterConstraints.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(13), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(13) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisInTypeQuery.ts
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/thisIndexOnExistingReadonlyFieldIsNotNever.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "Component":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Component":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/this_inside-object-literal-getters-and-setters.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "ObjectLiteral":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ObjectLiteral":
after transform: SymbolId(0): Span { start: 7, end: 20 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tooFewArgumentsInGenericFunctionTypedArgument.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/topLevel.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/topLevelBlockExpando.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/trackedSymbolsNoCrash.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92), ScopeId(93), ScopeId(94), ScopeId(95), ScopeId(96), ScopeId(97), ScopeId(98), ScopeId(99), ScopeId(100), ScopeId(101), ScopeId(102)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["Node0", "Node1", "Node10", "Node11", "Node12", "Node13", "Node14", "Node15", "Node16", "Node17", "Node18", "Node19", "Node2", "Node20", "Node21", "Node22", "Node23", "Node24", "Node25", "Node26", "Node27", "Node28", "Node29", "Node3", "Node30", "Node31", "Node32", "Node33", "Node34", "Node35", "Node36", "Node37", "Node38", "Node39", "Node4", "Node40", "Node41", "Node42", "Node43", "Node44", "Node45", "Node46", "Node47", "Node48", "Node49", "Node5", "Node50", "Node51", "Node52", "Node53", "Node54", "Node55", "Node56", "Node57", "Node58", "Node59", "Node6", "Node60", "Node61", "Node62", "Node63", "Node64", "Node65", "Node66", "Node67", "Node68", "Node69", "Node7", "Node70", "Node71", "Node72", "Node73", "Node74", "Node75", "Node76", "Node77", "Node78", "Node79", "Node8", "Node80", "Node81", "Node82", "Node83", "Node84", "Node85", "Node86", "Node87", "Node88", "Node89", "Node9", "Node90", "Node91", "Node92", "Node93", "Node94", "Node95", "Node96", "Node97", "Node98", "Node99", "SyntaxKind"]
rebuilt        : ScopeId(1): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/transformNestedGeneratorsWithTry.ts
Symbol reference IDs mismatch for "Bluebird":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/transformsElideNullUndefinedType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(25), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(41)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(39)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(35)]
Symbol flags mismatch for "D":
after transform: SymbolId(39): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(39): SymbolFlags(Class)
Reference symbol mismatch for "fn":
after transform: SymbolId(37) "fn"
rebuilt        : SymbolId(38) "fn"
Reference symbol mismatch for "fn":
after transform: SymbolId(37) "fn"
rebuilt        : SymbolId(38) "fn"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/transitiveTypeArgumentInference1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/trivialSubtypeReductionNoStructuralCheck2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Wizard", "_objectSpread", "props"]
rebuilt        : ScopeId(0): ["Wizard", "_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Wizard":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "props":
after transform: SymbolId(0) "props"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["props"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/truthinessCallExpressionCoercion3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tslibReExportHelpers.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_decorate", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_decorate"]
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 52, end: 55 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "Foo":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 52, end: 55 }
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxAttributesHasInferrableIndex.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "createElement":
after transform: SymbolId(2): SymbolFlags(Function | NamespaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Function)
Symbol redeclarations mismatch for "createElement":
after transform: SymbolId(2): [Span { start: 125, end: 138 }, Span { start: 243, end: 256 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Date", "React"]
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxDefaultImports.ts
Bindings mismatch:
after transform: ScopeId(1): ["SomeEnum", "one"]
rebuilt        : ScopeId(1): ["SomeEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SomeEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxDiscriminantPropertyInference.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Comp", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["Comp", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "Comp":
after transform: SymbolId(5) "Comp"
rebuilt        : SymbolId(2) "Comp"
Reference symbol mismatch for "Comp":
after transform: SymbolId(5) "Comp"
rebuilt        : SymbolId(2) "Comp"
Reference symbol mismatch for "Comp":
after transform: SymbolId(5) "Comp"
rebuilt        : SymbolId(2) "Comp"
Reference symbol mismatch for "Comp":
after transform: SymbolId(5) "Comp"
rebuilt        : SymbolId(2) "Comp"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxFragmentChildrenCheck.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["MyComponent", "_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxInferenceShouldNotYieldAnyOnUnions.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "ShouldInferFromData", "_jsxFileName", "_reactJsxRuntime", "f1", "f2", "f3"]
rebuilt        : ScopeId(0): ["ShouldInferFromData", "_jsxFileName", "_reactJsxRuntime", "f1", "f2", "f3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxReactPropsInferenceSucceedsOnIntersections.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol flags mismatch for "Button":
after transform: SymbolId(3): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["HTMLButtonElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxResolveExternalModuleExportsTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Test", "_jsx", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Foo", "_jsx", "_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxStatelessComponentDefaultProps.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxUnionMemberChecksFilterDataProps.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Happy", "NotHappy", "React", "ReactElement", "RootHappy", "RootNotHappy", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Happy", "NotHappy", "React", "RootHappy", "RootNotHappy", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "NotHappy":
after transform: SymbolId(2) "NotHappy"
rebuilt        : SymbolId(2) "NotHappy"
Reference symbol mismatch for "Happy":
after transform: SymbolId(4) "Happy"
rebuilt        : SymbolId(4) "Happy"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tsxUnionSpread.tsx
Bindings mismatch:
after transform: ScopeId(0): ["AnimalComponent", "JSX", "_jsx", "_jsxFileName", "_objectSpread", "component", "component2", "getProps", "props", "props2"]
rebuilt        : ScopeId(0): ["AnimalComponent", "_jsx", "_jsxFileName", "_objectSpread", "component", "component2", "getProps", "props", "props2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tupleTypeInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["$q", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["$q"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/tupleTypeInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(8), SymbolId(15), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "g":
after transform: SymbolId(8) "g"
rebuilt        : SymbolId(2) "g"
Reference symbol mismatch for "h":
after transform: SymbolId(15) "h"
rebuilt        : SymbolId(4) "h"
Reference symbol mismatch for "h2":
after transform: SymbolId(21) "h2"
rebuilt        : SymbolId(6) "h2"
Reference symbol mismatch for "h2":
after transform: SymbolId(21) "h2"
rebuilt        : SymbolId(6) "h2"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/twiceNestedKeyofIndexInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(10), SymbolId(23), SymbolId(24)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "set":
after transform: SymbolId(10) "set"
rebuilt        : SymbolId(0) "set"
Unresolved references mismatch:
after transform: ["Exclude", "Pick", "Required"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasDeclarationEmit2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasDoesntMakeModuleInstantiated.ts
Bindings mismatch:
after transform: ScopeId(0): ["m"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasExport.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasFunctionTypeSharedSymbol.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Mixin"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Mixin":
after transform: SymbolId(0): SymbolFlags(Function | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol reference IDs mismatch for "Mixin":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "Mixin":
after transform: SymbolId(0): [Span { start: 42, end: 47 }, Span { start: 152, end: 157 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAliasInstantiationNoLeak1.ts
Bindings mismatch:
after transform: ScopeId(0): ["x1", "x2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeAnnotationBestCommonTypeInArrayLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgInferenceWithNull.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceApparentType1.ts
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceApparentType2.ts
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceOrdering.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeConstraintsWithConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardConstructorPrimitiveTypes.ts
Unresolved reference IDs mismatch for "BigInt":
after transform: [ReferenceId(16), ReferenceId(22), ReferenceId(36)]
rebuilt        : [ReferenceId(16), ReferenceId(31)]
Unresolved reference IDs mismatch for "Number":
after transform: [ReferenceId(4), ReferenceId(19), ReferenceId(27)]
rebuilt        : [ReferenceId(4), ReferenceId(22)]
Unresolved reference IDs mismatch for "String":
after transform: [ReferenceId(1), ReferenceId(18), ReferenceId(24)]
rebuilt        : [ReferenceId(1), ReferenceId(19)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(13), ReferenceId(21), ReferenceId(33)]
rebuilt        : [ReferenceId(13), ReferenceId(28)]
Unresolved reference IDs mismatch for "Boolean":
after transform: [ReferenceId(7), ReferenceId(20), ReferenceId(30)]
rebuilt        : [ReferenceId(7), ReferenceId(25)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowByMutableUntypedField.ts
Bindings mismatch:
after transform: ScopeId(0): ["arrayLikeOrIterable", "hasOwnProperty"]
rebuilt        : ScopeId(0): ["hasOwnProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "hasOwnProperty":
after transform: SymbolId(0) "hasOwnProperty"
rebuilt        : SymbolId(0) "hasOwnProperty"
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(5) "arrayLikeOrIterable"
rebuilt        : <None>
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(5) "arrayLikeOrIterable"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ArrayLike", "Iterable", "PropertyKey"]
rebuilt        : ["arrayLikeOrIterable"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowByUntypedField.ts
Bindings mismatch:
after transform: ScopeId(0): ["arrayLikeOrIterable", "hasOwnProperty"]
rebuilt        : ScopeId(0): ["hasOwnProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "hasOwnProperty":
after transform: SymbolId(0) "hasOwnProperty"
rebuilt        : SymbolId(0) "hasOwnProperty"
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(5) "arrayLikeOrIterable"
rebuilt        : <None>
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(5) "arrayLikeOrIterable"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ArrayLike", "Iterable", "PropertyKey"]
rebuilt        : ["arrayLikeOrIterable"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty11.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "m"]
rebuilt        : ScopeId(0): ["E"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(7), ReferenceId(9)]
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["m"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty12.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "m"]
rebuilt        : ScopeId(0): ["E"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(5), ReferenceId(7)]
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["m"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty2.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty6.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "aIndex", "b", "bIndex", "c", "cIndex"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "bIndex":
after transform: SymbolId(2) "bIndex"
rebuilt        : <None>
Reference symbol mismatch for "bIndex":
after transform: SymbolId(2) "bIndex"
rebuilt        : <None>
Reference symbol mismatch for "cIndex":
after transform: SymbolId(4) "cIndex"
rebuilt        : <None>
Reference symbol mismatch for "cIndex":
after transform: SymbolId(4) "cIndex"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["aIndex", "bIndex", "cIndex"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty7.ts
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 17, end: 20 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeGuardOnContainerTypeNoHang.ts
Symbol flags mismatch for "TypeGuards":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TypeGuards":
after transform: SymbolId(0): Span { start: 17, end: 27 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceCacheInvalidation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "example":
after transform: SymbolId(3) "example"
rebuilt        : SymbolId(0) "example"
Reference symbol mismatch for "example":
after transform: SymbolId(3) "example"
rebuilt        : SymbolId(0) "example"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceFBoundedTypeParams.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceFixEarly.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceLiteralUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "NumCoercible":
after transform: SymbolId(2): [ReferenceId(13), ReferenceId(15), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(6)]
Unresolved references mismatch:
after transform: ["Array", "Date", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceReturnTypeCallback.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12)]
rebuilt        : ScopeId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceTypePredicate.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithExcessProperties.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithExcessPropertiesJsx.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "T":
after transform: SymbolId(5) "T"
rebuilt        : SymbolId(2) "T"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithTypeAnnotation.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeLiteralCallback.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeOfYieldWithUnionInContextualReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterAndArgumentOfSameName1.ts
Bindings mismatch:
after transform: ScopeId(1): ["r"]
rebuilt        : ScopeId(1): ["A", "r"]
Symbol flags mismatch for "A":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 11, end: 12 }
rebuilt        : SymbolId(1): Span { start: 29, end: 33 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(1): [Span { start: 11, end: 12 }, Span { start: 29, end: 33 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterCompatibilityAccrossDeclarations.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterConstrainedToOuterTypeParameter2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterConstraintInstantiation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterDoesntBlockParameterLookup.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterEquality.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendingUnion1.ts
Symbol reference IDs mismatch for "Animal":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(4)]
Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Dog":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendingUnion2.ts
Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Dog":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendsPrimitive.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterLeak.ts
Bindings mismatch:
after transform: ScopeId(0): ["_f", "b", "f"]
rebuilt        : ScopeId(0): ["_f", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(8) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeParameterOrderReversal.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePartameterConstraintInstantiatedWithDefaultWhenCheckingDefault.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Identity":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(10), ReferenceId(12), ReferenceId(18), ReferenceId(26)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateAcceptingPartialOfRefinedType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateFreshLiteralWidening.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateStructuralMatch.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicateWithThisParameter.ts
Bindings mismatch:
after transform: ScopeId(0): ["isFoo1", "isFoo2", "test"]
rebuilt        : ScopeId(0): ["isFoo1", "isFoo2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["test"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesCanNarrowByDiscriminant.ts
Bindings mismatch:
after transform: ScopeId(0): ["fruit", "fruit2", "isOneOf", "kind"]
rebuilt        : ScopeId(0): ["isOneOf", "kind"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "isOneOf":
after transform: SymbolId(1) "isOneOf"
rebuilt        : SymbolId(0) "isOneOf"
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit2":
after transform: SymbolId(6) "fruit2"
rebuilt        : <None>
Reference symbol mismatch for "isOneOf":
after transform: SymbolId(1) "isOneOf"
rebuilt        : SymbolId(0) "isOneOf"
Reference symbol mismatch for "fruit2":
after transform: SymbolId(6) "fruit2"
rebuilt        : <None>
Reference symbol mismatch for "fruit2":
after transform: SymbolId(6) "fruit2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : ["fruit", "fruit2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : SymbolId(4) "f"
Reference symbol mismatch for "isString":
after transform: SymbolId(0) "isString"
rebuilt        : SymbolId(0) "isString"
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : SymbolId(4) "f"
Reference symbol mismatch for "isNumber":
after transform: SymbolId(2) "isNumber"
rebuilt        : SymbolId(2) "isNumber"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion_noMatch.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["NonNullable", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Reference symbol mismatch for "isNil":
after transform: SymbolId(2) "isNil"
rebuilt        : SymbolId(0) "isNil"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives10.ts
Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives13.ts
Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives4.ts
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives5.ts
Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives6.ts
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives7.ts
Symbol reference IDs mismatch for "$":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives8.ts
Unresolved references mismatch:
after transform: ["Lib"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Lib", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeResolution.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(16), ScopeId(29), ScopeId(31), ScopeId(33)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(14), ScopeId(22), ScopeId(24)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(6), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(27)]
rebuilt        : ScopeId(14): [ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(18), ScopeId(20)]
Symbol flags mismatch for "TopLevelModule1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TopLevelModule1":
after transform: SymbolId(0): Span { start: 14, end: 29 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "TopLevelModule1":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(10), ReferenceId(12), ReferenceId(24), ReferenceId(28), ReferenceId(30), ReferenceId(38), ReferenceId(40), ReferenceId(50), ReferenceId(84), ReferenceId(85)]
rebuilt        : SymbolId(0): [ReferenceId(57), ReferenceId(58)]
Symbol flags mismatch for "SubModule1":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SubModule1":
after transform: SymbolId(1): Span { start: 50, end: 60 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "SubModule1":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(22), ReferenceId(48), ReferenceId(62), ReferenceId(64)]
rebuilt        : SymbolId(2): [ReferenceId(35), ReferenceId(36)]
Symbol flags mismatch for "SubSubModule1":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SubSubModule1":
after transform: SymbolId(2): Span { start: 85, end: 98 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "SubSubModule1":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(16), ReferenceId(20), ReferenceId(36), ReferenceId(46), ReferenceId(52), ReferenceId(58), ReferenceId(60)]
rebuilt        : SymbolId(4): [ReferenceId(27), ReferenceId(28)]
Symbol reference IDs mismatch for "ClassA":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(18), ReferenceId(55)]
rebuilt        : SymbolId(6): [ReferenceId(10)]
Symbol reference IDs mismatch for "ClassB":
after transform: SymbolId(13): [ReferenceId(8), ReferenceId(26), ReferenceId(57)]
rebuilt        : SymbolId(16): [ReferenceId(22)]
Symbol flags mismatch for "SubModule2":
after transform: SymbolId(37): SymbolFlags(ValueModule)
rebuilt        : SymbolId(39): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SubModule2":
after transform: SymbolId(37): Span { start: 3617, end: 3627 }
rebuilt        : SymbolId(39): Span { start: 0, end: 0 }
Symbol flags mismatch for "SubSubModule2":
after transform: SymbolId(38): SymbolFlags(ValueModule)
rebuilt        : SymbolId(41): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SubSubModule2":
after transform: SymbolId(38): Span { start: 3652, end: 3665 }
rebuilt        : SymbolId(41): Span { start: 0, end: 0 }
Symbol flags mismatch for "NotExportedModule":
after transform: SymbolId(47): SymbolFlags(ValueModule)
rebuilt        : SymbolId(47): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NotExportedModule":
after transform: SymbolId(47): Span { start: 4231, end: 4248 }
rebuilt        : SymbolId(47): Span { start: 0, end: 0 }
Symbol flags mismatch for "TopLevelModule2":
after transform: SymbolId(49): SymbolFlags(ValueModule)
rebuilt        : SymbolId(50): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TopLevelModule2":
after transform: SymbolId(49): Span { start: 4299, end: 4314 }
rebuilt        : SymbolId(50): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "TopLevelModule2":
after transform: SymbolId(49): [ReferenceId(32), ReferenceId(44), ReferenceId(92), ReferenceId(93)]
rebuilt        : SymbolId(50): [ReferenceId(65), ReferenceId(66)]
Symbol flags mismatch for "SubModule3":
after transform: SymbolId(50): SymbolFlags(ValueModule)
rebuilt        : SymbolId(52): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SubModule3":
after transform: SymbolId(50): Span { start: 4335, end: 4345 }
rebuilt        : SymbolId(52): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeVal.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["I"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "I":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "I":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 35, end: 38 }
Symbol reference IDs mismatch for "I":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol redeclarations mismatch for "I":
after transform: SymbolId(0): [Span { start: 10, end: 11 }, Span { start: 35, end: 38 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeVariableConstraintIntersections.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(72), SymbolId(74), SymbolId(76), SymbolId(78), SymbolId(86), SymbolId(89)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(48), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10), ScopeId(11), ScopeId(12)]
Reference symbol mismatch for "isA":
after transform: SymbolId(72) "isA"
rebuilt        : SymbolId(0) "isA"
Reference symbol mismatch for "isB":
after transform: SymbolId(74) "isB"
rebuilt        : SymbolId(2) "isB"
Reference symbol mismatch for "isC":
after transform: SymbolId(76) "isC"
rebuilt        : SymbolId(4) "isC"
Reference symbol mismatch for "isA":
after transform: SymbolId(72) "isA"
rebuilt        : SymbolId(0) "isA"
Reference symbol mismatch for "isB":
after transform: SymbolId(74) "isB"
rebuilt        : SymbolId(2) "isB"
Reference symbol mismatch for "isA":
after transform: SymbolId(72) "isA"
rebuilt        : SymbolId(0) "isA"
Reference symbol mismatch for "isB":
after transform: SymbolId(74) "isB"
rebuilt        : SymbolId(2) "isB"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeVariableTypeGuards.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21)]
Unresolved references mismatch:
after transform: ["Partial", "Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typedArrayConstructorOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["ArrayBuffer", "BigInt64ArrayConstructor", "BigUint64ArrayConstructor", "Float32ArrayConstructor", "Float64ArrayConstructor", "Int16ArrayConstructor", "Int32ArrayConstructor", "Int8ArrayConstructor", "Uint16ArrayConstructor", "Uint32ArrayConstructor", "Uint8ArrayConstructor", "Uint8ClampedArrayConstructor"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typedArrays.ts
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(8): []
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(9): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(10): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15)]
rebuilt        : ScopeId(11): []
Unresolved references mismatch:
after transform: ["ArrayLike", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "e1", "e2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofImportInstantiationExpression.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["j", "k"]
rebuilt        : ScopeId(0): ["I", "j", "k"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "I":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "I":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "I":
after transform: SymbolId(0): [Span { start: 4, end: 19 }, Span { start: 32, end: 33 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "k":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofObjectInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(10): [ScopeId(11)]
Symbol reference IDs mismatch for "val":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(15), ReferenceId(17), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofStrictNull.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofStripsFreshness.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ALL":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "ANOTHER":
after transform: SymbolId(7): [ReferenceId(8)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "Collection":
after transform: SymbolId(0) "Collection"
rebuilt        : <None>
Reference symbol mismatch for "Collection":
after transform: SymbolId(0) "Collection"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Collection"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofUndefined.ts
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/typeofUsedBeforeBlockScoped.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "o":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/umdGlobalConflict.ts
Bindings mismatch:
after transform: ScopeId(0): ["v1", "v2"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unaryPlus.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "some", "thing"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/compiler/uncalledFunctionChecksInConditionalPerf.ts
Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["b"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/uncaughtCompilerError1.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "index", "lineTokens", "token", "tokens"]
rebuilt        : ScopeId(0): ["f"]
Reference symbol mismatch for "lineTokens":
after transform: SymbolId(1) "lineTokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "token":
after transform: SymbolId(2) "token"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["index", "lineTokens", "token", "tokens"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/undefinedAsDiscriminantWithUnknown.ts
Bindings mismatch:
after transform: ScopeId(0): ["s"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["s", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/underscoreEscapedNameInEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "__foo", "bar"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(6)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
Reference symbol mismatch for "E":
after transform: SymbolId(0) "E"
rebuilt        : SymbolId(1) "E"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/underscoreMapFirst.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyView", "View", "_", "_defineProperty"]
rebuilt        : ScopeId(0): ["MyView", "View", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "View":
after transform: SymbolId(23): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Reference symbol mismatch for "_":
after transform: SymbolId(0) "_"
rebuilt        : <None>
Reference symbol mismatch for "_":
after transform: SymbolId(0) "_"
rebuilt        : <None>
Reference symbol mismatch for "_":
after transform: SymbolId(0) "_"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["_", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unexportedInstanceClassVariables.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 61, end: 62 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionCallMixedTypeParameterPresence.ts
Bindings mismatch:
after transform: ScopeId(0): ["e", "e2"]
rebuilt        : ScopeId(0): ["e2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "e":
after transform: SymbolId(5) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["e"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionExcessPropertyCheckNoApparentPropTypeMismatchErrors.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "forEach":
after transform: SymbolId(4) "forEach"
rebuilt        : SymbolId(0) "forEach"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionExcessPropsWithPartialMember.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "ab"]
rebuilt        : ScopeId(0): ["_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab":
after transform: SymbolId(2) "ab"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "ab", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionOfArraysFilterCall.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Reference symbol mismatch for "isFizz":
after transform: SymbolId(5) "isFizz"
rebuilt        : SymbolId(3) "isFizz"
Reference symbol mismatch for "isBuzz":
after transform: SymbolId(7) "isBuzz"
rebuilt        : SymbolId(5) "isBuzz"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionOfClassCalls.ts
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "Baz", "Foo", "Test", "_defineProperty", "a", "arr", "arr1", "arr2", "tmp"]
rebuilt        : ScopeId(0): ["Bar", "Baz", "Foo", "Test", "_defineProperty", "arr", "arr1", "arr2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(20)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(13): []
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(31): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(26): SymbolFlags(Class)
Symbol flags mismatch for "Bar":
after transform: SymbolId(32): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(27): SymbolFlags(Class)
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(32): [ReferenceId(30), ReferenceId(33)]
rebuilt        : SymbolId(27): []
Symbol flags mismatch for "Baz":
after transform: SymbolId(33): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(29): SymbolFlags(Class)
Symbol reference IDs mismatch for "Baz":
after transform: SymbolId(33): [ReferenceId(31), ReferenceId(34)]
rebuilt        : SymbolId(29): []
Reference symbol mismatch for "tmp":
after transform: SymbolId(6) "tmp"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(34) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Promise", "require"]
rebuilt        : ["a", "require", "tmp"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionOfEnumInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Enum"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(19)]
rebuilt        : SymbolId(0): [ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionOfFunctionAndSignatureIsCallable.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol reference IDs mismatch for "c2":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionReductionMutualSubtypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["k", "run", "val"]
rebuilt        : ScopeId(0): ["k", "run"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Reference symbol mismatch for "val":
after transform: SymbolId(2) "val"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["val"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionReductionWithStringMappingAndIdenticalBaseTypeExistsNoCrash.tsx
Unresolved references mismatch:
after transform: ["Iterable", "JSX"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionSignaturesWithThisParameter.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeParameterInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "lift":
after transform: SymbolId(2) "lift"
rebuilt        : SymbolId(0) "lift"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexAndMethodSignature.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexAndTuple.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexedLiteralType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithLeadingOperator.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionTypeWithRecursiveSubtypeReduction1.ts
Symbol reference IDs mismatch for "Module":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Namespace":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Class":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Property":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(7)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unionWithIndexSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved reference IDs mismatch for "Int32Array":
after transform: [ReferenceId(6), ReferenceId(8), ReferenceId(11)]
rebuilt        : [ReferenceId(2)]
Unresolved reference IDs mismatch for "Uint8Array":
after transform: [ReferenceId(7), ReferenceId(9), ReferenceId(13)]
rebuilt        : [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "FOO_SYMBOL":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["Promise", "Symbol"]
rebuilt        : ["Symbol"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolPropertyDeclarationEmit.ts
Bindings mismatch:
after transform: ScopeId(0): ["Op"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unknownLikeUnionObjectFlagsNotPropagated.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unknownPropertiesAreAssignableToObjectUnion.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unmatchedParameterPositions.ts
Bindings mismatch:
after transform: ScopeId(0): ["s", "t1", "t2"]
rebuilt        : ScopeId(0): ["t1", "t2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["s"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unreachableDeclarations.ts
A namespace declaration is only allowed at the top level of a namespace or module.
A namespace declaration is only allowed at the top level of a namespace or module.

semantic Error: tasks/coverage/typescript/tests/cases/compiler/untypedArgumentInLambdaExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedImportDeclaration.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(1) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace4.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Validation":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Validation":
after transform: SymbolId(0): Span { start: 10, end: 20 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace5.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalProperty.ts
Bindings mismatch:
after transform: ScopeId(0): ["Animal", "console"]
rebuilt        : ScopeId(0): ["Animal"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersDeferred.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "N":
after transform: SymbolId(29): SymbolFlags(ValueModule)
rebuilt        : SymbolId(29): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(29): Span { start: 2046, end: 2047 }
rebuilt        : SymbolId(29): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersOverloadSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]
Symbol span mismatch for "func":
after transform: SymbolId(0): Span { start: 16, end: 20 }
rebuilt        : SymbolId(0): Span { start: 94, end: 98 }
Symbol redeclarations mismatch for "func":
after transform: SymbolId(0): [Span { start: 16, end: 20 }, Span { start: 94, end: 98 }]
rebuilt        : SymbolId(0): []
Symbol span mismatch for "genericFunc":
after transform: SymbolId(17): Span { start: 523, end: 534 }
rebuilt        : SymbolId(8): Span { start: 606, end: 617 }
Symbol redeclarations mismatch for "genericFunc":
after transform: SymbolId(17): [Span { start: 523, end: 534 }, Span { start: 606, end: 617 }]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersTypeAliases.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedMethodsInInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedParameterUsedInTypeOf.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedParametersThis.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters9.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "C2", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "C1":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C1":
after transform: SymbolId(0): [Span { start: 26, end: 28 }, Span { start: 46, end: 48 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "C2":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol redeclarations mismatch for "C2":
after transform: SymbolId(3): [Span { start: 90, end: 92 }, Span { start: 116, end: 118 }]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unusedTypeParametersNotCheckedByNoUnusedLocals.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/unwitnessedTypeParameterVariance.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo"]
rebuilt        : ScopeId(0): ["foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "b":
after transform: SymbolId(14) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(13) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration.ts
Symbol flags mismatch for "ts":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ts":
after transform: SymbolId(0): Span { start: 10, end: 12 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/usingModuleWithExportImportInValuePosition.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/validUseOfThisInSuper.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/valueOfTypedArray.ts
Unresolved reference IDs mismatch for "Uint16Array":
after transform: [ReferenceId(6), ReferenceId(7)]
rebuilt        : [ReferenceId(3)]
Unresolved reference IDs mismatch for "BigInt64Array":
after transform: [ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(8)]
Unresolved reference IDs mismatch for "Int8Array":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]
Unresolved reference IDs mismatch for "Float32Array":
after transform: [ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(6)]
Unresolved reference IDs mismatch for "Uint8Array":
after transform: [ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(1)]
Unresolved reference IDs mismatch for "Int16Array":
after transform: [ReferenceId(4), ReferenceId(5)]
rebuilt        : [ReferenceId(2)]
Unresolved reference IDs mismatch for "Float64Array":
after transform: [ReferenceId(14), ReferenceId(15)]
rebuilt        : [ReferenceId(7)]
Unresolved reference IDs mismatch for "BigUint64Array":
after transform: [ReferenceId(18), ReferenceId(19)]
rebuilt        : [ReferenceId(9)]
Unresolved reference IDs mismatch for "Int32Array":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(4)]
Unresolved reference IDs mismatch for "Uint32Array":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varArgParamTypeCheck.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varArgsOnConstructorTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/vardecl.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varianceCallbacksAndIndexedAccesses.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["AddEventListenerOptions", "EventListenerOrEventListenerObject", "Window", "WindowEventMap"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varianceCantBeStrictWhileStructureIsnt.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a2", "b", "b2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "a2", "b", "b2"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varianceProblingAndZeroOrderIndexSignatureRelationsAlign.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(14), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(7): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(8): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(10): []
Symbol reference IDs mismatch for "Left":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Right":
after transform: SymbolId(11): [ReferenceId(3), ReferenceId(29)]
rebuilt        : SymbolId(5): [ReferenceId(8)]
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(19): [ReferenceId(51), ReferenceId(60)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varianceProblingAndZeroOrderIndexSignatureRelationsAlign2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(14), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(7): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(8): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(10): []
Symbol reference IDs mismatch for "Left":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Right":
after transform: SymbolId(11): [ReferenceId(3), ReferenceId(29)]
rebuilt        : SymbolId(5): [ReferenceId(8)]
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(19): [ReferenceId(51), ReferenceId(60)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/varianceRepeatedlyPropegatesWithUnreliableFlag.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/verbatim-declarations-parameters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/verbatimModuleSyntaxDefaultValue.ts
Symbol reference IDs mismatch for "Task":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/verifyDefaultLib_dom.ts
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/verifyDefaultLib_webworker.ts
Unresolved references mismatch:
after transform: ["Worker"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/visSyntax.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/compiler/visibilityOfCrossModuleTypeUsage.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/voidConstructor.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/voidFunctionAssignmentCompat.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/voidReturnIndexUnionInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Readonly", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/voidReturnLambdaValue.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/voidUndefinedReduction.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo", "isDefined"]
rebuilt        : ScopeId(0): ["isDefined"]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["console", "undefined"]
rebuilt        : ["console", "foo", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/vueLikeDataAndPropsInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "test":
after transform: SymbolId(15) "test"
rebuilt        : SymbolId(0) "test"
Unresolved references mismatch:
after transform: ["Readonly", "Record", "ThisType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/vueLikeDataAndPropsInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "test":
after transform: SymbolId(15) "test"
rebuilt        : SymbolId(0) "test"
Unresolved references mismatch:
after transform: ["Readonly", "Record", "ThisType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/compiler/weakTypeAndPrimitiveNarrowing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/compiler/wideningWithTopLevelTypeParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(31), SymbolId(32), SymbolId(35), SymbolId(36), SymbolId(39)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(21), SymbolId(23)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(7): []
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21)]
rebuilt        : ScopeId(11): []
Reference symbol mismatch for "f0":
after transform: SymbolId(8) "f0"
rebuilt        : SymbolId(0) "f0"
Reference symbol mismatch for "f1":
after transform: SymbolId(11) "f1"
rebuilt        : SymbolId(2) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(14) "f2"
rebuilt        : SymbolId(4) "f2"
Reference symbol mismatch for "f3":
after transform: SymbolId(17) "f3"
rebuilt        : SymbolId(6) "f3"
Reference symbol mismatch for "f4":
after transform: SymbolId(20) "f4"
rebuilt        : SymbolId(8) "f4"

semantic Error: tasks/coverage/typescript/tests/cases/compiler/withExportDecl.ts
Bindings mismatch:
after transform: ScopeId(0): ["anotherVar", "arrayVar", "deckareVarWithType", "declareVar2", "declaredVar", "eVar1", "eVar2", "eVar22", "eVar3", "eVar4", "eVar5", "exportedArrayVar", "exportedDeclaredVar", "exportedFunction", "exportedSimpleVar", "exportedVarWithInitialValue", "exportedWithComplicatedValue", "m1", "m2", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
rebuilt        : ScopeId(0): ["anotherVar", "arrayVar", "eVar1", "eVar2", "eVar22", "eVar3", "eVar4", "eVar5", "exportedArrayVar", "exportedFunction", "exportedSimpleVar", "exportedVarWithInitialValue", "exportedWithComplicatedValue", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Symbol flags mismatch for "m1":
after transform: SymbolId(17): SymbolFlags(ValueModule)
rebuilt        : SymbolId(13): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(17): Span { start: 843, end: 845 }
rebuilt        : SymbolId(13): Span { start: 0, end: 0 }
Symbol flags mismatch for "m3":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m3":
after transform: SymbolId(21): Span { start: 980, end: 982 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/withImportDecl.ts
Bindings mismatch:
after transform: ScopeId(0): ["anotherVar", "arrayVar", "b", "deckareVarWithType", "declareVar2", "declaredVar", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
rebuilt        : ScopeId(0): ["anotherVar", "arrayVar", "b", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
Symbol flags mismatch for "m1":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(11): Span { start: 504, end: 506 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/compiler/withStatementInternalComments.ts
'with' statements are not allowed

semantic Error: tasks/coverage/typescript/tests/cases/compiler/yieldStarContextualType.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "g"]
rebuilt        : ScopeId(0): ["f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Generator"]
rebuilt        : ["g"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarations.ts
Bindings mismatch:
after transform: ScopeId(0): ["E1", "E2", "E3", "M1", "_defineProperty", "cls", "fn1", "fn10", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "m", "n", "p", "q", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "cls", "fn1", "fn10", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "p", "q", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(11): []
Symbol flags mismatch for "cls":
after transform: SymbolId(27): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(25): SymbolFlags(Class)
Symbol reference IDs mismatch for "cls":
after transform: SymbolId(27): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(25): [ReferenceId(2)]
Reference symbol mismatch for "E3":
after transform: SymbolId(39) "E3"
rebuilt        : <None>
Reference symbol mismatch for "M1":
after transform: SymbolId(43) "M1"
rebuilt        : <None>
Reference symbol mismatch for "M1":
after transform: SymbolId(43) "M1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["E3", "M1", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsExternal.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientEnumDeclaration1.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientEnumDeclaration2.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "E1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleMerging.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientInsideNonAmbient.ts
Bindings mismatch:
after transform: ScopeId(1): ["C", "E", "M", "_M", "f", "x"]
rebuilt        : ScopeId(1): ["_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Bindings mismatch:
after transform: ScopeId(6): ["C", "E", "M", "_M2", "f", "x"]
rebuilt        : ScopeId(2): ["C", "_M2", "f"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "M2":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(6): Span { start: 173, end: 175 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "C":
after transform: SymbolId(9): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientInsideNonAmbientExternalModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "M", "f", "x"]
rebuilt        : ScopeId(0): ["C"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_declarationEmit.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_duplicate.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_merging.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction1_es2017.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es2017.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncAwait_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(33): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(19): Span { start: 913, end: 914 }
rebuilt        : SymbolId(33): Span { start: 0, end: 0 }
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncUseStrict_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression1_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression2_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression3_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression4_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression5_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression1_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression2_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression3_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression4_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "pfn":
after transform: SymbolId(7) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "pfn", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression5_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression6_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression7_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression8_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "po":
after transform: SymbolId(8) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "po", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitClassExpression_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["C", "_asyncToGenerator", "_func", "func"]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitInheritedPromise_es2017.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration11_es2017.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration14_es2017.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration1_es2017.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction1_es5.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAwaitNestedClasses_es5.ts
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAwait_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(33): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(19): Span { start: 913, end: 914 }
rebuilt        : SymbolId(33): Span { start: 0, end: 0 }
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncImportedPromise_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["Task", "Test", "_asyncToGenerator"]
rebuilt        : ScopeId(0): ["Test", "_asyncToGenerator"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncQualifiedReturnType_es5.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncUseStrict_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression1_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression2_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression3_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression4_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression5_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression1_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression2_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression3_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression4_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "pfn":
after transform: SymbolId(7) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "pfn", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression5_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression6_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression7_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression8_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "po":
after transform: SymbolId(8) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "po", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitClassExpression_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["C", "_asyncToGenerator", "_func", "func"]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitUnion_es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "b", "c", "d", "e", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["PromiseLike", "arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "d", "e", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration11_es5.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration14_es5.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration1_es5.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAliasReturnType_es6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction1_es6.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Reference symbol mismatch for "someOtherFunction":
after transform: SymbolId(0) "someOtherFunction"
rebuilt        : SymbolId(1) "someOtherFunction"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAwait_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(19): SymbolFlags(ValueModule)
rebuilt        : SymbolId(33): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(19): Span { start: 913, end: 914 }
rebuilt        : SymbolId(33): Span { start: 0, end: 0 }
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncUseStrict_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts
Identifier `x` has already been declared

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression1_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression2_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression3_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression4_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression5_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "before":
after transform: SymbolId(2) "before"
rebuilt        : SymbolId(1) "before"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(3) "after"
rebuilt        : SymbolId(2) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression1_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression2_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression3_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "fn":
after transform: SymbolId(2) "fn"
rebuilt        : SymbolId(1) "fn"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression4_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "pfn":
after transform: SymbolId(7) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "pfn", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression5_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression6_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression7_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "o":
after transform: SymbolId(6) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "o", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression8_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "after", "before", "fn", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "after", "before", "fn", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "before":
after transform: SymbolId(9) "before"
rebuilt        : SymbolId(5) "before"
Reference symbol mismatch for "po":
after transform: SymbolId(8) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "after":
after transform: SymbolId(10) "after"
rebuilt        : SymbolId(6) "after"
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "po", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitClassExpression_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["C", "_asyncToGenerator", "_func", "func"]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitUnion_es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "b", "c", "d", "e", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["PromiseLike", "arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "d", "e", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration11_es6.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration14_es6.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration1_es6.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/asyncGenerators/asyncGeneratorGenericNonWrappedReturn.ts
Unresolved references mismatch:
after transform: ["AsyncGenerator", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/asyncGenerators/asyncGeneratorPromiseNextType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Promise", "arguments", "console", "require"]
rebuilt        : ["Promise", "arguments", "console", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(10), ReferenceId(19), ReferenceId(20), ReferenceId(22), ReferenceId(27)]
rebuilt        : [ReferenceId(10), ReferenceId(21), ReferenceId(30)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAndInterfaceWithSameName.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "_defineProperty"]
rebuilt        : ScopeId(0): ["C", "M", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["_M"]
rebuilt        : ScopeId(3): ["D", "_M"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 6, end: 7 }, Span { start: 35, end: 36 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 62, end: 63 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "D":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol redeclarations mismatch for "D":
after transform: SymbolId(2): [Span { start: 76, end: 77 }, Span { start: 122, end: 123 }]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classBody/classWithEmptyBody.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classAppearsToHaveMembersOfObject.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingClass.ts
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(8)]
Symbol reference IDs mismatch for "D2":
after transform: SymbolId(12): [ReferenceId(11), ReferenceId(15)]
rebuilt        : SymbolId(12): [ReferenceId(16)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/constructorFunctionTypeIsAssignableToBaseType.ts
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/constructorFunctionTypeIsAssignableToBaseType2.ts
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/derivedTypeDoesNotRequireExtendsClause.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergeClassInterfaceAndModule.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "C4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "C1":
after transform: SymbolId(0): SymbolFlags(Class | Interface | NamespaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "C1":
after transform: SymbolId(0): Span { start: 10, end: 12 }
rebuilt        : SymbolId(0): Span { start: 30, end: 32 }
Symbol redeclarations mismatch for "C1":
after transform: SymbolId(0): [Span { start: 10, end: 12 }, Span { start: 30, end: 32 }, Span { start: 43, end: 45 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "C2":
after transform: SymbolId(1): SymbolFlags(Class | Interface | NamespaceModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C2":
after transform: SymbolId(1): [Span { start: 64, end: 66 }, Span { start: 80, end: 82 }, Span { start: 93, end: 95 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "C3":
after transform: SymbolId(2): SymbolFlags(Class | Interface | NamespaceModule | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol redeclarations mismatch for "C3":
after transform: SymbolId(2): [Span { start: 114, end: 116 }, Span { start: 127, end: 129 }, Span { start: 143, end: 145 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "C4":
after transform: SymbolId(3): SymbolFlags(Class | Interface | NamespaceModule | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "C4":
after transform: SymbolId(3): Span { start: 157, end: 159 }
rebuilt        : SymbolId(3): Span { start: 177, end: 179 }
Symbol redeclarations mismatch for "C4":
after transform: SymbolId(3): [Span { start: 157, end: 159 }, Span { start: 177, end: 179 }, Span { start: 255, end: 257 }]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergedClassInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "c5"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "C4", "C5", "_defineProperty", "c5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol flags mismatch for "C1":
after transform: SymbolId(0): SymbolFlags(Class | Interface | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C1":
after transform: SymbolId(0): [Span { start: 14, end: 16 }, Span { start: 32, end: 34 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "C2":
after transform: SymbolId(1): SymbolFlags(Class | Interface | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "C2":
after transform: SymbolId(1): Span { start: 50, end: 52 }
rebuilt        : SymbolId(2): Span { start: 72, end: 74 }
Symbol redeclarations mismatch for "C2":
after transform: SymbolId(1): [Span { start: 50, end: 52 }, Span { start: 72, end: 74 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "C3":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C3":
after transform: SymbolId(2): [Span { start: 86, end: 88 }, Span { start: 104, end: 106 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "C4":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "C4":
after transform: SymbolId(3): Span { start: 122, end: 124 }
rebuilt        : SymbolId(4): Span { start: 136, end: 138 }
Symbol redeclarations mismatch for "C4":
after transform: SymbolId(3): [Span { start: 122, end: 124 }, Span { start: 136, end: 138 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "C5":
after transform: SymbolId(4): SymbolFlags(Class | Interface | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol span mismatch for "C5":
after transform: SymbolId(4): Span { start: 154, end: 156 }
rebuilt        : SymbolId(5): Span { start: 192, end: 194 }
Symbol reference IDs mismatch for "C5":
after transform: SymbolId(4): [ReferenceId(0)]
rebuilt        : SymbolId(5): []
Symbol redeclarations mismatch for "C5":
after transform: SymbolId(4): [Span { start: 154, end: 156 }, Span { start: 192, end: 194 }, Span { start: 226, end: 228 }, Span { start: 260, end: 262 }]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts
Bindings mismatch:
after transform: ScopeId(0): ["BaseClass", "Grandchild", "_defineProperty", "child", "grandchild"]
rebuilt        : ScopeId(0): ["BaseClass", "Child", "ChildNoBaseClass", "Grandchild", "_defineProperty", "child", "grandchild"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
Symbol flags mismatch for "Child":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "Child":
after transform: SymbolId(2): Span { start: 150, end: 155 }
rebuilt        : SymbolId(2): Span { start: 213, end: 218 }
Symbol reference IDs mismatch for "Child":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol redeclarations mismatch for "Child":
after transform: SymbolId(2): [Span { start: 150, end: 155 }, Span { start: 213, end: 218 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): Span { start: 294, end: 310 }
rebuilt        : SymbolId(4): Span { start: 368, end: 384 }
Symbol redeclarations mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): [Span { start: 294, end: 310 }, Span { start: 368, end: 384 }]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Grandchild":
after transform: SymbolId(4): [ReferenceId(12)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpression.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(4): Span { start: 67, end: 68 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["C", "_Class", "_Class2", "_defineProperty", "x"]
Bindings mismatch:
after transform: ScopeId(2): ["C", "_Class", "b"]
rebuilt        : ScopeId(2): ["C", "b"]
Bindings mismatch:
after transform: ScopeId(4): ["_Class2", "b", "d", "x"]
rebuilt        : ScopeId(4): ["b", "d", "x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(0)
Symbol scope ID mismatch for "_Class2":
after transform: SymbolId(9): ScopeId(4)
rebuilt        : SymbolId(2): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["_Class", "_defineProperty"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "b"]
rebuilt        : ScopeId(1): ["b"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(1): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["C", "_Class", "_Class2", "_defineProperty", "x"]
Bindings mismatch:
after transform: ScopeId(2): ["C", "_Class", "b"]
rebuilt        : ScopeId(2): ["C", "b"]
Bindings mismatch:
after transform: ScopeId(4): ["_Class2", "b", "d", "x"]
rebuilt        : ScopeId(4): ["b", "d", "x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(0)
Symbol scope ID mismatch for "_Class2":
after transform: SymbolId(9): ScopeId(4)
rebuilt        : SymbolId(2): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.ts
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["_Class", "_defineProperty"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "b"]
rebuilt        : ScopeId(1): ["b"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(1): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock11.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock17.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(4): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(24)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorParametersAccessibility3.ts
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorImplementationWithDefaultValues.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorOverloadsWithOptionalParameters.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/classPropertyIsPublicByDefault.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateClassPropertyAccessibleWithinNestedClass.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(16)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedClass.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(16)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/genericSetterInClassType.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Generic":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Generic":
after transform: SymbolId(0): Span { start: 7, end: 14 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/indexersInClassType.ts
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/constructorHasPrototypeProperty.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "NonGeneric":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NonGeneric":
after transform: SymbolId(0): Span { start: 7, end: 17 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol flags mismatch for "Generic":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Generic":
after transform: SymbolId(5): Span { start: 198, end: 205 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassIncludesInheritedMembers.ts
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(4): [ReferenceId(1), ReferenceId(2), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(5): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(13): [ReferenceId(14)]
rebuilt        : SymbolId(14): []
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesIndexersWithAssignmentCompatibility.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(23)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(12)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(26), ReferenceId(29), ReferenceId(33), ReferenceId(36), ReferenceId(40), ReferenceId(45)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(30), ReferenceId(34)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(10): [ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(9): [ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(33)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(28): [ReferenceId(46)]
rebuilt        : SymbolId(25): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesPublicMembers.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(23), ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(12)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(26), ReferenceId(29), ReferenceId(33), ReferenceId(36), ReferenceId(40), ReferenceId(45)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(30), ReferenceId(34)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(10): [ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(9): [ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(33)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(28): [ReferenceId(46)]
rebuilt        : SymbolId(25): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(4): ["_x"]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(13): SymbolFlags(Class)
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require", "undefined"]
rebuilt        : ["_x", "require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(4): ["_x"]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(13): SymbolFlags(Class)
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(6) "_x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require", "undefined"]
rebuilt        : ["_x", "require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers4.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "B":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInInstanceMember2.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(6)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsCallExpression.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameComputedPropertyName1.ts
Unresolved references mismatch:
after transform: ["Record", "WeakMap", "console", "require"]
rebuilt        : ["WeakMap", "console", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameComputedPropertyName2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(1): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(3): Some(ScopeId(2))
rebuilt        : ScopeId(1): Some(ScopeId(0))
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2), ReferenceId(6)]
rebuilt        : SymbolId(6): [ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameConstructorSignature.ts
Bindings mismatch:
after transform: ScopeId(0): ["_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_x"]
rebuilt        : ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(1): [Span { start: 37, end: 38 }, Span { start: 185, end: 186 }]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameFieldDestructuredBinding.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(5): [ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameInLhsReceiverExpression.ts
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAsync.ts
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsCallExpression.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldAssignment.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(26), ReferenceId(25), ReferenceId(24), ReferenceId(23), ReferenceId(22), ReferenceId(21), ReferenceId(20), ReferenceId(19), ReferenceId(18), ReferenceId(17), ReferenceId(16), ReferenceId(15), ReferenceId(14), ReferenceId(13), ReferenceId(54), ReferenceId(57), ReferenceId(58), ReferenceId(62), ReferenceId(66), ReferenceId(67), ReferenceId(71), ReferenceId(75), ReferenceId(76), ReferenceId(80), ReferenceId(84), ReferenceId(85), ReferenceId(89), ReferenceId(93), ReferenceId(94), ReferenceId(98), ReferenceId(105), ReferenceId(106), ReferenceId(110), ReferenceId(114), ReferenceId(115), ReferenceId(119), ReferenceId(123), ReferenceId(124), ReferenceId(128), ReferenceId(132), ReferenceId(133), ReferenceId(137), ReferenceId(141), ReferenceId(142), ReferenceId(146), ReferenceId(150), ReferenceId(151), ReferenceId(155), ReferenceId(159), ReferenceId(160), ReferenceId(164)]
rebuilt        : SymbolId(1): [ReferenceId(29), ReferenceId(30), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(44), ReferenceId(46), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(71), ReferenceId(73), ReferenceId(76), ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(94), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(112), ReferenceId(117), ReferenceId(119), ReferenceId(121), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(142)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDestructuredBinding.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(25), ReferenceId(28)]
rebuilt        : SymbolId(2): [ReferenceId(3), ReferenceId(16), ReferenceId(19)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticsAndStaticMethods.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndMethods.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndStaticMethods.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAssertion.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(10): ScopeFlags(0x0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/typeFromPrivatePropertyAssignment.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClasses.ts
Bindings mismatch:
after transform: ScopeId(0): ["AbstractBase", "ConcreteBase", "DerivedFromAbstract", "DerivedFromConcrete", "wasAbstract", "wasConcrete"]
rebuilt        : ScopeId(0): ["AbstractBase", "ConcreteBase", "DerivedFromAbstract", "DerivedFromConcrete", "Mixin", "wasAbstract", "wasConcrete"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(6): []
Symbol flags mismatch for "Mixin":
after transform: SymbolId(0): SymbolFlags(Function | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol span mismatch for "Mixin":
after transform: SymbolId(0): Span { start: 10, end: 15 }
rebuilt        : SymbolId(0): Span { start: 55, end: 60 }
Symbol reference IDs mismatch for "Mixin":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(7)]
Symbol redeclarations mismatch for "Mixin":
after transform: SymbolId(0): [Span { start: 10, end: 15 }, Span { start: 55, end: 60 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClassesReturnTypeInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(2): [ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessors1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["HTMLElement", "document"]
rebuilt        : ["document"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessors2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessors4.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessors5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(4): []
Symbol flags mismatch for "GetterA":
after transform: SymbolId(5): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol flags mismatch for "GetterB":
after transform: SymbolId(7): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol flags mismatch for "TestB":
after transform: SymbolId(9): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Reference symbol mismatch for "basicMixin":
after transform: SymbolId(0) "basicMixin"
rebuilt        : SymbolId(0) "basicMixin"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesAnnotated.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "Derived", "Thing1", "Thing2", "Thing3", "_defineProperty", "f1", "f2"]
rebuilt        : ScopeId(0): ["Base", "Derived", "Printable", "Tagged", "Thing1", "Thing2", "Thing3", "_defineProperty", "f1", "f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol flags mismatch for "Printable":
after transform: SymbolId(10): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Printable":
after transform: SymbolId(10): Span { start: 247, end: 256 }
rebuilt        : SymbolId(8): Span { start: 287, end: 296 }
Symbol reference IDs mismatch for "Printable":
after transform: SymbolId(10): [ReferenceId(8), ReferenceId(22)]
rebuilt        : SymbolId(8): [ReferenceId(19)]
Symbol redeclarations mismatch for "Printable":
after transform: SymbolId(10): [Span { start: 247, end: 256 }, Span { start: 287, end: 296 }]
rebuilt        : SymbolId(8): []
Symbol flags mismatch for "Tagged":
after transform: SymbolId(14): SymbolFlags(Function | Interface)
rebuilt        : SymbolId(12): SymbolFlags(Function)
Symbol span mismatch for "Tagged":
after transform: SymbolId(14): Span { start: 557, end: 563 }
rebuilt        : SymbolId(12): Span { start: 596, end: 602 }
Symbol reference IDs mismatch for "Tagged":
after transform: SymbolId(14): [ReferenceId(14), ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(12): [ReferenceId(16), ReferenceId(18)]
Symbol redeclarations mismatch for "Tagged":
after transform: SymbolId(14): [Span { start: 557, end: 563 }, Span { start: 596, end: 602 }]
rebuilt        : SymbolId(12): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesAnonymous.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesMembers.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "M1", "M2", "Mixed1", "Mixed2", "Mixed3", "Mixed4", "Mixed5", "_defineProperty", "f1", "f2", "f3", "f4", "f5", "f6"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "M1", "M2", "_defineProperty", "f1", "f2", "f3", "f4", "f5", "f6"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(21)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(22)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(5): []
Symbol flags mismatch for "C1":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "M1":
after transform: SymbolId(3): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "M1":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(8), ReferenceId(10), ReferenceId(52)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Symbol flags mismatch for "M2":
after transform: SymbolId(5): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol reference IDs mismatch for "M2":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(7) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(7) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(8) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(8) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(10) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(10) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(11) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(7) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(7) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(8) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(8) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(10) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(10) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(10) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(11) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(11) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(11) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(7) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(9) "Mixed3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Mixed1", "Mixed2", "Mixed3", "Mixed4", "Mixed5", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): ["B", "C"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 40, end: 41 }
rebuilt        : SymbolId(0): Span { start: 62, end: 63 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 40, end: 41 }, Span { start: 62, end: 63 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty8.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(6), SymbolId(11), SymbolId(13), SymbolId(14), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "classWithProperties":
after transform: SymbolId(6) "classWithProperties"
rebuilt        : SymbolId(0) "classWithProperties"
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty9.ts
Bindings mismatch:
after transform: ScopeId(0): ["ApiEnum", "ApiEnumMember", "ApiItem"]
rebuilt        : ScopeId(0): ["ApiEnum", "ApiEnumMember", "ApiItem", "ApiItemContainerMixin"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Symbol reference IDs mismatch for "ApiItem":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(22), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(5)]
Symbol reference IDs mismatch for "ApiEnumMember":
after transform: SymbolId(8): [ReferenceId(27)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "ApiItemContainerMixin":
after transform: SymbolId(9): SymbolFlags(Function | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Function)
Symbol span mismatch for "ApiItemContainerMixin":
after transform: SymbolId(9): Span { start: 462, end: 483 }
rebuilt        : SymbolId(2): Span { start: 558, end: 579 }
Symbol reference IDs mismatch for "ApiItemContainerMixin":
after transform: SymbolId(9): [ReferenceId(17), ReferenceId(19), ReferenceId(24)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol redeclarations mismatch for "ApiItemContainerMixin":
after transform: SymbolId(9): [Span { start: 462, end: 483 }, Span { start: 558, end: 579 }]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor2.ts
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12)]
rebuilt        : SymbolId(3): [ReferenceId(7)]
Reference symbol mismatch for "":
after transform: SymbolId(0) "C1"
rebuilt        : <None>
Reference symbol mismatch for "":
after transform: SymbolId(0) "C1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor8.ts
Symbol flags mismatch for "C2":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorAllowedModifiers.ts
Symbol flags mismatch for "C3":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializationOrdering1.ts
Symbol reference IDs mismatch for "Helper":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/instanceMemberInitialization.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/accessorsAreNotContextuallyTyped.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/ambientAccessors.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicOverloads.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/typeOfThisInMemberFunctions.ts
Unresolved references mismatch:
after transform: ["Date", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/overrideInterfaceProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Reference symbol mismatch for "Mup":
after transform: SymbolId(0) "Mup"
rebuilt        : <None>
Reference symbol mismatch for "Mup":
after transform: SymbolId(0) "Mup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Mup", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticAutoAccessorsWithDecorators.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(2): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(2): Some(ScopeId(1))
rebuilt        : ScopeId(2): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(3): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(3): Some(ScopeId(1))
rebuilt        : ScopeId(3): Some(ScopeId(0))

semantic Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Symbol flags mismatch for "TestOnDefaultExportedClass_1":
after transform: SymbolId(41): SymbolFlags(ValueModule)
rebuilt        : SymbolId(82): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_1":
after transform: SymbolId(41): Span { start: 6217, end: 6245 }
rebuilt        : SymbolId(82): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_2":
after transform: SymbolId(44): SymbolFlags(ValueModule)
rebuilt        : SymbolId(86): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_2":
after transform: SymbolId(44): Span { start: 6560, end: 6588 }
rebuilt        : SymbolId(86): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_3":
after transform: SymbolId(47): SymbolFlags(ValueModule)
rebuilt        : SymbolId(90): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_3":
after transform: SymbolId(47): Span { start: 6901, end: 6929 }
rebuilt        : SymbolId(90): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_4":
after transform: SymbolId(50): SymbolFlags(ValueModule)
rebuilt        : SymbolId(94): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_4":
after transform: SymbolId(50): Span { start: 7271, end: 7299 }
rebuilt        : SymbolId(94): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_5":
after transform: SymbolId(53): SymbolFlags(ValueModule)
rebuilt        : SymbolId(98): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_5":
after transform: SymbolId(53): Span { start: 7642, end: 7670 }
rebuilt        : SymbolId(98): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_6":
after transform: SymbolId(56): SymbolFlags(ValueModule)
rebuilt        : SymbolId(102): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_6":
after transform: SymbolId(56): Span { start: 7986, end: 8014 }
rebuilt        : SymbolId(102): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_7":
after transform: SymbolId(59): SymbolFlags(ValueModule)
rebuilt        : SymbolId(106): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_7":
after transform: SymbolId(59): Span { start: 8328, end: 8356 }
rebuilt        : SymbolId(106): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_8":
after transform: SymbolId(62): SymbolFlags(ValueModule)
rebuilt        : SymbolId(110): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_8":
after transform: SymbolId(62): Span { start: 8698, end: 8726 }
rebuilt        : SymbolId(110): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_9":
after transform: SymbolId(65): SymbolFlags(ValueModule)
rebuilt        : SymbolId(114): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_9":
after transform: SymbolId(65): Span { start: 9069, end: 9097 }
rebuilt        : SymbolId(114): Span { start: 0, end: 0 }
Symbol flags mismatch for "TestOnDefaultExportedClass_10":
after transform: SymbolId(68): SymbolFlags(ValueModule)
rebuilt        : SymbolId(118): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TestOnDefaultExportedClass_10":
after transform: SymbolId(68): Span { start: 9457, end: 9486 }
rebuilt        : SymbolId(118): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum1.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c", "d", "e", "f", "g", "h"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["TestType", "bar", "foo"]
rebuilt        : ScopeId(1): ["TestType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TestType":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TestType":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(7), ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumPropertyAccess3.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/constLocalsInFunctionExpressions.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(13)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14)]
Reference symbol mismatch for "getStringOrNumber":
after transform: SymbolId(0) "getStringOrNumber"
rebuilt        : SymbolId(0) "getStringOrNumber"
Reference symbol mismatch for "getStringOrNumber":
after transform: SymbolId(0) "getStringOrNumber"
rebuilt        : SymbolId(0) "getStringOrNumber"
Reference symbol mismatch for "getStringOrNumber":
after transform: SymbolId(0) "getStringOrNumber"
rebuilt        : SymbolId(0) "getStringOrNumber"
Reference symbol mismatch for "getStringOrNumber":
after transform: SymbolId(0) "getStringOrNumber"
rebuilt        : SymbolId(0) "getStringOrNumber"
Reference symbol mismatch for "getStringOrNumber":
after transform: SymbolId(0) "getStringOrNumber"
rebuilt        : SymbolId(0) "getStringOrNumber"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAssignmentExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "fn":
after transform: SymbolId(3) "fn"
rebuilt        : SymbolId(2) "fn"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAssignmentPatternOrder.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowBinaryOrExpression.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(6), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "isNodeList":
after transform: SymbolId(4) "isNodeList"
rebuilt        : SymbolId(2) "isNodeList"
Reference symbol mismatch for "isHTMLCollection":
after transform: SymbolId(6) "isHTMLCollection"
rebuilt        : SymbolId(4) "isHTMLCollection"
Reference symbol mismatch for "isNodeList":
after transform: SymbolId(4) "isNodeList"
rebuilt        : SymbolId(2) "isNodeList"
Reference symbol mismatch for "isHTMLCollection":
after transform: SymbolId(6) "isHTMLCollection"
rebuilt        : SymbolId(4) "isHTMLCollection"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowBindingElement.ts
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(12): [ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
Unresolved references mismatch:
after transform: ["Error", "console", "const", "undefined"]
rebuilt        : ["Error", "console", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowComputedPropertyNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(8), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(11)]
Unresolved references mismatch:
after transform: ["Record", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowDoWhileStatement.ts
Unresolved references mismatch:
after transform: ["Function", "RegExp", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowElementAccess2.ts
Bindings mismatch:
after transform: ScopeId(0): ["config"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["config"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowElementAccessNoCrash1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForInStatement.ts
Unresolved references mismatch:
after transform: ["Function", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForInStatement2.ts
Bindings mismatch:
after transform: ScopeId(0): ["c", "keywordA", "keywordB", "stringB"]
rebuilt        : ScopeId(0): ["keywordA", "keywordB", "stringB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "keywordA":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol reference IDs mismatch for "keywordB":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["c"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForOfStatement.ts
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIfStatement.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(15): [ReferenceId(29), ReferenceId(30)]
rebuilt        : SymbolId(11): [ReferenceId(23)]
Unresolved references mismatch:
after transform: ["Error", "JSON", "RegExp"]
rebuilt        : ["Error", "JSON"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInOperator.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "d", "uniqueID_54790", "uniqueID_54790_2", "uniqueID_54790_3"]
rebuilt        : ScopeId(0): ["a", "b", "d", "uniqueID_54790", "uniqueID_54790_2", "uniqueID_54790_3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(13), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(11), ScopeId(15)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(9)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Number", "undefined"]
rebuilt        : ["Error", "Number", "c", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInstanceOfGuardPrimitives.ts
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(11)]
rebuilt        : [ReferenceId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInstanceofExtendsFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(6), ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowOptionalChain2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(26)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowStringIndex.ts
Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["value"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowSuperPropertyAccess.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowTruthiness.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(12), SymbolId(15), SymbolId(17), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(12), SymbolId(15), SymbolId(17), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(26)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowWithTemplateLiterals.ts
Bindings mismatch:
after transform: ScopeId(0): ["envVar", "obj"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "envVar":
after transform: SymbolId(0) "envVar"
rebuilt        : <None>
Reference symbol mismatch for "envVar":
after transform: SymbolId(0) "envVar"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["envVar", "obj"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/dependentDestructuredVariablesFromNestedPatterns.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Unresolved references mismatch:
after transform: ["Awaited", "Error", "Math", "Promise", "String", "arguments", "const", "require", "undefined"]
rebuilt        : ["Error", "Math", "Promise", "String", "arguments", "require", "undefined"]
Unresolved reference IDs mismatch for "Error":
after transform: [ReferenceId(0), ReferenceId(4), ReferenceId(15), ReferenceId(22), ReferenceId(29)]
rebuilt        : [ReferenceId(17)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/dependentDestructuredVariablesWithExport.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "mutuallyEnabledPair":
after transform: SymbolId(0) "mutuallyEnabledPair"
rebuilt        : SymbolId(0) "mutuallyEnabledPair"
Reference symbol mismatch for "mutuallyEnabledPair":
after transform: SymbolId(0) "mutuallyEnabledPair"
rebuilt        : SymbolId(0) "mutuallyEnabledPair"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/typeGuardsNestedAssignments.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(13)]
Reference symbol mismatch for "getFooOrNull":
after transform: SymbolId(1) "getFooOrNull"
rebuilt        : SymbolId(2) "getFooOrNull"
Reference symbol mismatch for "getFooOrNull":
after transform: SymbolId(1) "getFooOrNull"
rebuilt        : SymbolId(2) "getFooOrNull"
Reference symbol mismatch for "getFooOrNull":
after transform: SymbolId(1) "getFooOrNull"
rebuilt        : SymbolId(2) "getFooOrNull"
Reference symbol mismatch for "getStringOrNumberOrNull":
after transform: SymbolId(2) "getStringOrNumberOrNull"
rebuilt        : SymbolId(3) "getStringOrNumberOrNull"
Unresolved references mismatch:
after transform: ["Object", "RegExpExecArray", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/typeGuardsTypeParameters.ts
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/anonymousClassAccessorsDeclarationEmit1.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(4): [ReferenceId(3)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/classDoesNotDependOnPrivateMember.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/leaveOptionalParameterAsWritten.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceDeclarationEmit.ts
Bindings mismatch:
after transform: ScopeId(0): ["elem"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceDeclarationEmitBundle.ts
Bindings mismatch:
after transform: ScopeId(0): ["elem"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceNoLib.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceNoLibBundle.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitIdentifierPredicatesWithPrivateName01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicates01.ts
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicates02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicatesWithPrivateName01.ts
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicatesWithPrivateName02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typeReferenceRelatedFiles.ts
Bindings mismatch:
after transform: ScopeId(0): ["FSWatcher", "f"]
rebuilt        : ScopeId(0): ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typeofImportTypeOnlyExport.ts
Symbol reference IDs mismatch for "ClassMapDirective":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/1.0lib-noErrors.ts
Bindings mismatch:
after transform: ScopeId(0): ["Infinity", "NaN", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "eval", "isFinite", "isNaN", "parseFloat", "parseInt"]
rebuilt        : ScopeId(0): ["decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "eval", "isFinite", "isNaN", "parseFloat", "parseInt"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(78), ScopeId(79), ScopeId(98), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147), ScopeId(148), ScopeId(149), ScopeId(180), ScopeId(184), ScopeId(185), ScopeId(186), ScopeId(187), ScopeId(188), ScopeId(189), ScopeId(190), ScopeId(191), ScopeId(192), ScopeId(193), ScopeId(194), ScopeId(195), ScopeId(196), ScopeId(197), ScopeId(198), ScopeId(199), ScopeId(209), ScopeId(245), ScopeId(246), ScopeId(247), ScopeId(248)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor8.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(15)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(16)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor3.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor4.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "C", "_decorate", "_decorateMetadata"]
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 34, end: 35 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 34, end: 35 }
Symbol span mismatch for "B":
after transform: SymbolId(2): Span { start: 52, end: 53 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "B":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 52, end: 53 }
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 100, end: 101 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 100, end: 101 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Number", "require"]
rebuilt        : ["Number", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 107, end: 108 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 107, end: 108 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "require"]
rebuilt        : ["Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol span mismatch for "BulkEditPreviewProvider":
after transform: SymbolId(1): Span { start: 106, end: 129 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "BulkEditPreviewProvider":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(5): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(18)]
Symbol span mismatch for "BulkEditPreviewProvider":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 106, end: 129 }
Reference symbol mismatch for "IFoo":
after transform: SymbolId(0) "IFoo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["IFoo", "Object", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass1.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 100, end: 103 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(4): [ReferenceId(3), ReferenceId(7), ReferenceId(8)]
Symbol span mismatch for "Foo":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 100, end: 103 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass2.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 114, end: 117 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(4): [ReferenceId(3), ReferenceId(7), ReferenceId(8)]
Symbol span mismatch for "Foo":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 114, end: 117 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass3.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 100, end: 103 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(4): [ReferenceId(3), ReferenceId(7), ReferenceId(8)]
Symbol span mismatch for "Foo":
after transform: SymbolId(6): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 100, end: 103 }
Symbol span mismatch for "Foo":
after transform: SymbolId(4): Span { start: 218, end: 221 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(7): [ReferenceId(11), ReferenceId(15), ReferenceId(16)]
Symbol span mismatch for "Foo":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 218, end: 221 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsCommonJS1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_Testing", "_decorate", "_defineProperty", "forwardRef"]
rebuilt        : ScopeId(0): ["Testing123", "_Testing", "_decorate", "_defineProperty", "forwardRef"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(3): Span { start: 119, end: 129 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Testing123":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 119, end: 129 }
Reference symbol mismatch for "Something":
after transform: SymbolId(2) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsCommonJS2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_decorate", "forwardRef"]
rebuilt        : ScopeId(0): ["Testing123", "_decorate", "forwardRef"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(3): Span { start: 119, end: 129 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "Testing123":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 119, end: 129 }
Reference symbol mismatch for "Something":
after transform: SymbolId(2) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsSystem1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_Testing", "_decorate", "_defineProperty", "forwardRef"]
rebuilt        : ScopeId(0): ["Testing123", "_Testing", "_decorate", "_defineProperty", "forwardRef"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(3): Span { start: 119, end: 129 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Testing123":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 119, end: 129 }
Reference symbol mismatch for "Something":
after transform: SymbolId(2) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsSystem2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_decorate", "forwardRef"]
rebuilt        : ScopeId(0): ["Testing123", "_decorate", "forwardRef"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol span mismatch for "Testing123":
after transform: SymbolId(3): Span { start: 119, end: 129 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "Testing123":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 119, end: 129 }
Reference symbol mismatch for "Something":
after transform: SymbolId(2) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassFromExternalModule.ts
Symbol span mismatch for "Decorated":
after transform: SymbolId(2): Span { start: 67, end: 76 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "Decorated":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 67, end: 76 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorInstantiateModulesInFunctionBodies.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope parent mismatch:
after transform: ScopeId(4): Some(ScopeId(3))
rebuilt        : ScopeId(5): Some(ScopeId(0))

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 51, end: 52 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 51, end: 52 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 58, end: 59 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 58, end: 59 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 58, end: 59 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 58, end: 59 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 59, end: 60 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 59, end: 60 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 59, end: 60 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 59, end: 60 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass9.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_B", "_decorate", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "_B", "_decorate", "_defineProperty"]
Symbol span mismatch for "B":
after transform: SymbolId(2): Span { start: 102, end: 103 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14)]
Symbol span mismatch for "B":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 102, end: 103 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod13.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod14.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod15.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod16.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod18.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_decorate", "_decorateMetadata", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod19.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_decorateParam", "_x", "_x2", "decorator"]
rebuilt        : ScopeId(0): ["C1", "C2", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_decorateParam", "_x", "_x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(4): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(2): Some(ScopeId(1))
rebuilt        : ScopeId(4): Some(ScopeId(0))
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(7): []
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(8): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(6): Some(ScopeId(5))
rebuilt        : ScopeId(8): Some(ScopeId(0))
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14)]
rebuilt        : SymbolId(6): [ReferenceId(17)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(3): [ReferenceId(4), ReferenceId(27)]
rebuilt        : SymbolId(9): [ReferenceId(32)]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object", "WeakMap", "require"]
rebuilt        : ["Function", "Object", "WeakMap", "decorator", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod7.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethodOverload2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor", "require"]
rebuilt        : ["Function", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "Object", "require"]
rebuilt        : ["Function", "Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(1), ReferenceId(9)]
rebuilt        : SymbolId(7): [ReferenceId(11)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "Object", "require"]
rebuilt        : ["Function", "Number", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty10.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty12.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty13.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Object", "PropertyDescriptor", "require"]
rebuilt        : ["Object", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorInAmbientContext.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "_b":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(2): [ReferenceId(13)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : SymbolId(3) "decorator"
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : SymbolId(3) "decorator"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadata.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "Service", "_decorate", "_decorateMetadata", "_ref", "decorator"]
rebuilt        : ScopeId(0): ["MyComponent", "Service", "_decorate", "_decorateMetadata", "_ref"]
Symbol reference IDs mismatch for "Service":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(14), ReferenceId(15)]
Symbol span mismatch for "MyComponent":
after transform: SymbolId(2): Span { start: 80, end: 91 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "MyComponent":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 80, end: 91 }
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object"]
rebuilt        : ["Function", "Object", "decorator"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadataWithTypeOnlyImport.ts
Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "Service", "_decorate", "_decorateMetadata", "decorator"]
rebuilt        : ScopeId(0): ["MyComponent", "_decorate", "_decorateMetadata"]
Symbol span mismatch for "MyComponent":
after transform: SymbolId(2): Span { start: 89, end: 100 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "MyComponent":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 89, end: 100 }
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object"]
rebuilt        : ["Function", "Object", "decorator"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadataWithTypeOnlyImport2.ts
Symbol flags mismatch for "Services":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Services":
after transform: SymbolId(0): Span { start: 17, end: 25 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/decorators/legacyDecorators-contextualTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20)]
rebuilt        : ScopeId(9): []
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22)]
rebuilt        : ScopeId(10): []
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(11): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(5): Some(ScopeId(2))
rebuilt        : ScopeId(11): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(12): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(7): Some(ScopeId(2))
rebuilt        : ScopeId(12): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(13): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(10): Some(ScopeId(2))
rebuilt        : ScopeId(13): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(14): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(11): Some(ScopeId(2))
rebuilt        : ScopeId(14): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(15): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(12): Some(ScopeId(2))
rebuilt        : ScopeId(15): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(16): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(14): Some(ScopeId(2))
rebuilt        : ScopeId(16): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(17): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(17): Some(ScopeId(2))
rebuilt        : ScopeId(17): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(18): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(18): Some(ScopeId(2))
rebuilt        : ScopeId(18): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(19): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(20): Some(ScopeId(19))
rebuilt        : ScopeId(19): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(22): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(20): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(22): Some(ScopeId(21))
rebuilt        : ScopeId(20): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(22): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(4): Some(ScopeId(3))
rebuilt        : ScopeId(22): Some(ScopeId(0))
Symbol span mismatch for "C":
after transform: SymbolId(0): Span { start: 20, end: 21 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(42): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 20, end: 21 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression2ES2020.ts
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression4ES2020.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit1.ts
Bindings mismatch:
after transform: ScopeId(0): ["directory", "getSpecifier", "moduleFile", "p0", "p1", "p2", "returnDynamicLoad", "whatToLoad"]
rebuilt        : ScopeId(0): ["getSpecifier", "p0", "p1", "p2", "returnDynamicLoad"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(0) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "directory":
after transform: SymbolId(2) "directory"
rebuilt        : <None>
Reference symbol mismatch for "moduleFile":
after transform: SymbolId(3) "moduleFile"
rebuilt        : <None>
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(0) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "whatToLoad":
after transform: SymbolId(1) "whatToLoad"
rebuilt        : <None>
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(0) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Unresolved references mismatch:
after transform: []
rebuilt        : ["directory", "moduleFile", "whatToLoad"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit3.ts
Bindings mismatch:
after transform: ScopeId(0): ["Zero", "getPath", "p0", "p1", "p2"]
rebuilt        : ScopeId(0): ["getPath", "p0", "p1", "p2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "getPath":
after transform: SymbolId(0) "getPath"
rebuilt        : SymbolId(0) "getPath"
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInAMD2.ts
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInAMD4.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS2.ts
Unresolved references mismatch:
after transform: ["Promise", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS3.ts
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts
Cannot assign to 'arguments' in strict mode

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInSystem2.ts
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInSystem4.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInUMD2.ts
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInUMD4.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionReturnPromiseOfAny.ts
Bindings mismatch:
after transform: ScopeId(0): ["ValidSomeCondition", "defaultModule", "directory", "getSpecifier", "j", "loadModule", "moduleFile", "p1", "p11", "p2", "p3", "whatToLoad"]
rebuilt        : ScopeId(0): ["ValidSomeCondition", "getSpecifier", "j", "loadModule", "p1", "p11", "p2", "p3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "directory":
after transform: SymbolId(4) "directory"
rebuilt        : <None>
Reference symbol mismatch for "moduleFile":
after transform: SymbolId(5) "moduleFile"
rebuilt        : <None>
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(1) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "ValidSomeCondition":
after transform: SymbolId(2) "ValidSomeCondition"
rebuilt        : SymbolId(1) "ValidSomeCondition"
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(1) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(1) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "whatToLoad":
after transform: SymbolId(3) "whatToLoad"
rebuilt        : <None>
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(1) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Reference symbol mismatch for "getSpecifier":
after transform: SymbolId(1) "getSpecifier"
rebuilt        : SymbolId(0) "getSpecifier"
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : ["directory", "moduleFile", "whatToLoad"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumBasics.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E2"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["E3", "X", "Y", "Z"]
rebuilt        : ScopeId(3): ["E3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["E4", "X", "Y", "Z"]
rebuilt        : ScopeId(4): ["E4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E5"]
rebuilt        : ScopeId(5): ["E5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["A", "B", "C", "E6"]
rebuilt        : ScopeId(6): ["E6"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "E7"]
rebuilt        : ScopeId(7): ["E7"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["B", "E8"]
rebuilt        : ScopeId(8): ["E8"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "E9"]
rebuilt        : ScopeId(9): ["E9"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(30)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
Symbol flags mismatch for "E2":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E3":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E4":
after transform: SymbolId(15): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E5":
after transform: SymbolId(19): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E6":
after transform: SymbolId(23): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E7":
after transform: SymbolId(27): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(15): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E8":
after transform: SymbolId(29): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(17): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E9":
after transform: SymbolId(31): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(19): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumClassification.ts
Missing ReferenceId: "E20"
Bindings mismatch:
after transform: ScopeId(1): ["A", "E01"]
rebuilt        : ScopeId(1): ["E01"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "E02"]
rebuilt        : ScopeId(2): ["E02"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["A", "E03"]
rebuilt        : ScopeId(3): ["E03"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "E04"]
rebuilt        : ScopeId(4): ["E04"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E05"]
rebuilt        : ScopeId(5): ["E05"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["A", "B", "C", "E06"]
rebuilt        : ScopeId(6): ["E06"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "B", "C", "D", "E", "E07", "F"]
rebuilt        : ScopeId(7): ["E07"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "C", "D", "E", "E08"]
rebuilt        : ScopeId(8): ["E08"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "C", "E11"]
rebuilt        : ScopeId(10): ["E11"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["A", "B", "C", "E12"]
rebuilt        : ScopeId(11): ["E12"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(12): ["A", "B", "C", "D", "E20"]
rebuilt        : ScopeId(12): ["E20"]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(0x0)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol flags mismatch for "E01":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E02":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E03":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E04":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E05":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E06":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E07":
after transform: SymbolId(18): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E08":
after transform: SymbolId(25): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E10":
after transform: SymbolId(31): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(16): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E11":
after transform: SymbolId(32): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(18): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E12":
after transform: SymbolId(36): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(20): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E20":
after transform: SymbolId(40): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(22): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E20":
after transform: SymbolId(56): [ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(23): [ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(81)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithStringEmitDeclaration.ts
Bindings mismatch:
after transform: ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6"]
rebuilt        : ScopeId(0): ["T1", "T2", "T3", "T4", "T5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["T1", "a", "b", "c"]
rebuilt        : ScopeId(1): ["T1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["T2", "a", "b"]
rebuilt        : ScopeId(2): ["T2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["T3", "a", "b"]
rebuilt        : ScopeId(3): ["T3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["T4", "a"]
rebuilt        : ScopeId(4): ["T4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["T5", "a"]
rebuilt        : ScopeId(5): ["T5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "T1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T3":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T4":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T5":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithTemplateLiteralsEmitDeclaration.ts
Bindings mismatch:
after transform: ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6", "T7"]
rebuilt        : ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["T1", "a"]
rebuilt        : ScopeId(1): ["T1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["T2", "a", "b", "c"]
rebuilt        : ScopeId(2): ["T2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["T3", "a"]
rebuilt        : ScopeId(3): ["T3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["T4", "a", "b", "c", "d", "e"]
rebuilt        : ScopeId(4): ["T4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["T5", "a", "b", "c", "d"]
rebuilt        : ScopeId(5): ["T5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["T6", "a", "b"]
rebuilt        : ScopeId(6): ["T6"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "T1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T3":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T4":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T5":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T6":
after transform: SymbolId(19): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumExportMergingES6.ts
Bindings mismatch:
after transform: ScopeId(1): ["Animals", "Cat"]
rebuilt        : ScopeId(1): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["Animals", "Dog"]
rebuilt        : ScopeId(2): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(3): ["Animals", "CatDog"]
rebuilt        : ScopeId(3): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Animals":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "Animals":
after transform: SymbolId(0): [Span { start: 12, end: 19 }, Span { start: 45, end: 52 }, Span { start: 78, end: 85 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Cat", "Dog"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumMerging.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "EImpl1"]
rebuilt        : ScopeId(2): ["EImpl1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["D", "E", "EImpl1", "F"]
rebuilt        : ScopeId(3): ["EImpl1"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "EConst1"]
rebuilt        : ScopeId(4): ["EConst1"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["D", "E", "EConst1", "F"]
rebuilt        : ScopeId(5): ["EConst1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "B", "C", "EComp2"]
rebuilt        : ScopeId(7): ["EComp2"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["D", "E", "EComp2", "F"]
rebuilt        : ScopeId(8): ["EComp2"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "EInit"]
rebuilt        : ScopeId(10): ["EInit"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["C", "D", "E", "EInit"]
rebuilt        : ScopeId(11): ["EInit"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(13): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(13): ["Color"]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(0x0)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(15): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(15): ["Color"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(18): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(18): ["Color"]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(0x0)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(19): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(20): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(21): ["Color", "Yellow"]
rebuilt        : ScopeId(21): ["Color"]
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(0x0)
rebuilt        : ScopeId(21): ScopeFlags(Function)
Symbol flags mismatch for "M1":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M1":
after transform: SymbolId(0): Span { start: 183, end: 185 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "EImpl1":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EImpl1":
after transform: SymbolId(1): [Span { start: 197, end: 203 }, Span { start: 238, end: 244 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "EConst1":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EConst1":
after transform: SymbolId(8): [Span { start: 290, end: 297 }, Span { start: 351, end: 358 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "M2":
after transform: SymbolId(16): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(16): Span { start: 570, end: 572 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol flags mismatch for "EComp2":
after transform: SymbolId(17): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EComp2":
after transform: SymbolId(17): [Span { start: 591, end: 597 }, Span { start: 684, end: 690 }]
rebuilt        : SymbolId(11): []
Symbol flags mismatch for "M3":
after transform: SymbolId(25): SymbolFlags(ValueModule)
rebuilt        : SymbolId(15): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(25): Span { start: 950, end: 952 }
rebuilt        : SymbolId(15): Span { start: 0, end: 0 }
Symbol flags mismatch for "EInit":
after transform: SymbolId(26): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(17): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EInit":
after transform: SymbolId(26): [Span { start: 964, end: 969 }, Span { start: 1009, end: 1014 }]
rebuilt        : SymbolId(17): []
Symbol flags mismatch for "M4":
after transform: SymbolId(32): SymbolFlags(ValueModule)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M4":
after transform: SymbolId(32): Span { start: 1103, end: 1105 }
rebuilt        : SymbolId(20): Span { start: 0, end: 0 }
Symbol flags mismatch for "Color":
after transform: SymbolId(33): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(22): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "M5":
after transform: SymbolId(37): SymbolFlags(ValueModule)
rebuilt        : SymbolId(24): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M5":
after transform: SymbolId(37): Span { start: 1160, end: 1162 }
rebuilt        : SymbolId(24): Span { start: 0, end: 0 }
Symbol flags mismatch for "Color":
after transform: SymbolId(38): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(26): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "M6":
after transform: SymbolId(42): SymbolFlags(ValueModule)
rebuilt        : SymbolId(28): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M6":
after transform: SymbolId(42): Span { start: 1218, end: 1220 }
rebuilt        : SymbolId(28): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M6":
after transform: SymbolId(42): [Span { start: 1218, end: 1220 }, Span { start: 1277, end: 1279 }]
rebuilt        : SymbolId(28): []
Symbol flags mismatch for "A":
after transform: SymbolId(43): SymbolFlags(ValueModule)
rebuilt        : SymbolId(30): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(43): Span { start: 1221, end: 1222 }
rebuilt        : SymbolId(30): Span { start: 0, end: 0 }
Symbol flags mismatch for "Color":
after transform: SymbolId(44): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(32): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "A":
after transform: SymbolId(48): SymbolFlags(ValueModule)
rebuilt        : SymbolId(35): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(48): Span { start: 1300, end: 1301 }
rebuilt        : SymbolId(35): Span { start: 0, end: 0 }
Symbol flags mismatch for "Color":
after transform: SymbolId(49): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(37): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "B", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2018/es2018IntlAPIs.ts
Unresolved references mismatch:
after transform: ["Intl", "console", "const"]
rebuilt        : ["Intl", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisTypeIndexAccess.ts
Bindings mismatch:
after transform: ScopeId(0): ["w_e"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["globalThis"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts
The only valid meta property for import is import.meta

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMetaNarrowing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingES2019.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingES2020.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingESNext.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(0) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/intlNumberFormatES2020.ts
Unresolved reference IDs mismatch for "Intl":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/localesObjectArgument.ts
Unresolved references mismatch:
after transform: ["Date", "Intl", "Readonly"]
rebuilt        : ["Date", "Intl"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ns":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment1.ts
Bindings mismatch:
after transform: ScopeId(0): ["_c", "_f", "_i", "a", "b", "c", "d", "e", "f", "g", "h", "i"]
rebuilt        : ScopeId(0): ["_c", "_f", "_i"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(6) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(6) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(7) "h"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(7) "h"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(8) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(8) "i"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "d", "e", "f", "g", "h", "i"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_a$foo", "_a$foo$bar", "_b$foo", "_b$foo$bar", "_c$baz", "_c$foo", "_c$foo$bar", "_c$foo$bar$baz", "_c$foo$baz", "a", "b", "c", "result"]
rebuilt        : ScopeId(0): ["_a$foo", "_a$foo$bar", "_b$foo", "_b$foo$bar", "_c$baz", "_c$foo", "_c$foo$bar", "_c$foo$bar$baz", "_c$foo$baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "result"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment3.ts
Bindings mismatch:
after transform: ScopeId(0): ["_c$baz", "a", "b", "c", "result"]
rebuilt        : ScopeId(0): ["_c$baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "result"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment9.ts
Bindings mismatch:
after transform: ScopeId(0): ["_x$a", "x"]
rebuilt        : ScopeId(0): ["_x$a"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_module.ts
Bindings mismatch:
after transform: ScopeId(0): ["_Z", "importStarTestA", "importTest", "reimportTest", "someValue", "typeA", "typeB", "typeC", "valueX", "valueY", "valueZ"]
rebuilt        : ScopeId(0): ["_Z", "importStarTestA", "importTest", "reimportTest", "someValue", "valueX", "valueY", "valueZ"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es2022/es2022IntlAPIs.ts
Unresolved references mismatch:
after transform: ["Intl", "const"]
rebuilt        : ["Intl"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit7.ts
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty11.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty13.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(3) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(5) "bar"
rebuilt        : SymbolId(6) "bar"
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty14.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(3) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(5) "bar"
rebuilt        : SymbolId(6) "bar"
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty15.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(1) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(5) "bar"
rebuilt        : SymbolId(4) "bar"
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty16.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(3) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(5) "bar"
rebuilt        : SymbolId(6) "bar"
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty20.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5)]
rebuilt        : [ReferenceId(0), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty22.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(9)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty23.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty28.ts
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty29.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty31.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty37.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty38.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty40.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(4), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty41.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(4), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty48.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty49.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty50.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty51.ts
Bindings mismatch:
after transform: ScopeId(1): ["C", "Symbol", "_M"]
rebuilt        : ScopeId(1): ["C", "_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty55.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 48, end: 49 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["Symbol", "SymbolConstructor"]
rebuilt        : ["Symbol"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty56.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(1): Span { start: 48, end: 49 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty58.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty60.ts
Bindings mismatch:
after transform: ScopeId(0): ["mySymbol"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty61.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(8), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(3): []
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(6), ReferenceId(11)]
rebuilt        : [ReferenceId(0), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType16.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType17.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType18.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType19.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunction.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionES6.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationOverloadInES6.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithConstructorInES6.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithExtensionAndTypeArgumentInES6.ts
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(4): [ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithTypeArgumentAndOverloadInES6.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "D", "Factory", "_defineProperty"]
rebuilt        : ScopeId(0): ["Base", "D", "_defineProperty"]
Reference symbol mismatch for "Factory":
after transform: SymbolId(0) "Factory"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Factory", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/classExpressions/typeArgumentInferenceWithClassExpression1.ts
Bindings mismatch:
after transform: ScopeId(0): ["_Class2", "_defineProperty", "foo"]
rebuilt        : ScopeId(0): ["_Class", "_Class2", "_defineProperty", "foo"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "x"]
rebuilt        : ScopeId(1): ["x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(3): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames37_ES5.ts
Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames37_ES6.ts
Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames41_ES5.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames41_ES6.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames47_ES5.ts
Bindings mismatch:
after transform: ScopeId(1): ["E1", "x"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "x"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames47_ES6.ts
Bindings mismatch:
after transform: ScopeId(1): ["E1", "x"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "x"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames7_ES5.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "member"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames7_ES6.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "member"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType1_ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType1_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType2_ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType2_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType3_ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType3_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType4_ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType4_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType5_ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType5_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType6_ES5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType6_ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType7_ES5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "g":
after transform: SymbolId(7) "g"
rebuilt        : SymbolId(2) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType7_ES6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(4), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "g":
after transform: SymbolId(7) "g"
rebuilt        : SymbolId(2) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesOnOverloads_ES5.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "methodName":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesOnOverloads_ES6.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "methodName":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/accessor/decoratorOnClassAccessor1.es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "dec"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata", "_default", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_default"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_default":
after transform: SymbolId(6): ScopeId(2)
rebuilt        : SymbolId(6): ScopeId(0)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor"]
rebuilt        : ["Function"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass1.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 51, end: 52 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 51, end: 52 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass2.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 58, end: 59 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 58, end: 59 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass3.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 66, end: 67 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 66, end: 67 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass4.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "_default":
after transform: SymbolId(3): SymbolFlags(Class)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(1) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass5.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 51, end: 52 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(5): [ReferenceId(5), ReferenceId(6), ReferenceId(10), ReferenceId(11)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 51, end: 52 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass6.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 58, end: 59 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 58, end: 59 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass7.es6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 66, end: 67 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 66, end: 67 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass8.es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_Class", "_decorate", "_default", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["_decorate", "_default", "_defineProperty", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): []
rebuilt        : ScopeId(2): ["_Class"]
Symbol flags mismatch for "_default":
after transform: SymbolId(4): SymbolFlags(Class)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(3): ScopeId(0)
rebuilt        : SymbolId(5): ScopeId(2)
Symbol reference IDs mismatch for "_Class":
after transform: SymbolId(3): [ReferenceId(6)]
rebuilt        : SymbolId(5): []
Reference symbol mismatch for "_Class":
after transform: SymbolId(3) "_Class"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: []
rebuilt        : ["_Class"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/method/decoratorOnClassMethod1.es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "dec"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata", "_default", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_default"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_default":
after transform: SymbolId(6): ScopeId(2)
rebuilt        : SymbolId(6): ScopeId(0)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(2) "dec"
Unresolved references mismatch:
after transform: ["Function", "TypedPropertyDescriptor"]
rebuilt        : ["Function"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/method/parameter/decoratorOnClassMethodParameter1.es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "_decorateParam", "dec"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata", "_decorateParam", "_default", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_default"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_default":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(7): ScopeId(0)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"
Unresolved references mismatch:
after transform: ["Function", "Number", "Object"]
rebuilt        : ["Function", "Number"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/property/decoratorOnClassProperty1.es6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata", "_default", "_defineProperty", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_default"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_default":
after transform: SymbolId(5): ScopeId(2)
rebuilt        : SymbolId(6): ScopeId(0)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : SymbolId(3) "dec"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/declarationInAmbientContext.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "d"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "f4", "yadda"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "f4"]
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["yadda"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment1ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment1ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment7.ts
Bindings mismatch:
after transform: ScopeId(1): ["K", "a", "b"]
rebuilt        : ScopeId(1): ["K"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "K":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment9SiblingInitializer.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "f4", "yadda"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "f4"]
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["yadda"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration10.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Partial", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration7ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration7ES5iterable.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringVoid.ts
Bindings mismatch:
after transform: ScopeId(0): ["v"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "v":
after transform: SymbolId(0) "v"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["v"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern15.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern20.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern3.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern4.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of57.ts
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of58.ts
Bindings mismatch:
after transform: ScopeId(0): ["arr"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "arr":
after transform: SymbolId(2) "arr"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["arr"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsAmd/decoratedDefaultExportsGetExportedAmd.ts
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 64, end: 67 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "Foo":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 64, end: 67 }
Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsCommonjs/decoratedDefaultExportsGetExportedCommonjs.ts
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 64, end: 67 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "Foo":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 64, end: 67 }
Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/decoratedDefaultExportsGetExportedSystem.ts
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 64, end: 67 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "Foo":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 64, end: 67 }
Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts
'with' statements are not allowed

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsUmd/decoratedDefaultExportsGetExportedUmd.ts
Symbol span mismatch for "Foo":
after transform: SymbolId(1): Span { start: 64, end: 67 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "Foo":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 64, end: 67 }
Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportWithOverloads01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol span mismatch for "f":
after transform: SymbolId(0): Span { start: 24, end: 25 }
rebuilt        : SymbolId(0): Span { start: 91, end: 92 }
Symbol redeclarations mismatch for "f":
after transform: SymbolId(0): [Span { start: 24, end: 25 }, Span { start: 53, end: 54 }, Span { start: 91, end: 92 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1-amd.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1-es6.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3-amd.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3-es6.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithContextualKeywordNames02.ts
Bindings mismatch:
after transform: ScopeId(0): ["as"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithUnderscores4.ts
Bindings mismatch:
after transform: ScopeId(0): ["_", "__", "___", "___hello", "__esmodule", "__proto", "_hi", "console"]
rebuilt        : ScopeId(0): ["_", "__", "___", "___hello", "__esmodule", "__proto", "_hi"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/restParameters/emitRestParametersFunctionProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/restParameters/emitRestParametersFunctionPropertyES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesWithModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesWithModuleES6.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray11.ts
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithManyCallAndMemberExpressions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithManyCallAndMemberExpressionsES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution2_ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypedTags.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypedTagsES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateUntypedTagCall01.ts
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplatesWithTypeArguments1.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c", "f", "g", "obj"]
rebuilt        : ScopeId(0): ["_objectSpread", "a", "b", "c", "f", "g"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(1) "f"
Reference symbol mismatch for "g":
after transform: SymbolId(9) "g"
rebuilt        : SymbolId(8) "g"
Reference symbol mismatch for "obj":
after transform: SymbolId(22) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(22) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "TemplateStringsArray"]
rebuilt        : ["obj"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext6.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads4.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads5.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck1.ts
Unresolved references mismatch:
after transform: ["Iterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck10.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck11.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck12.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck13.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck17.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck19.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck2.ts
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck26.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck27.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck28.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator", "Symbol"]
rebuilt        : ["Symbol"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck29.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Iterable", "Iterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck3.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck30.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Iterable", "Iterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck38.ts
Symbol reference IDs mismatch for "yield":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck45.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: ["Iterator", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck46.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: ["Iterable", "Symbol", "undefined"]
rebuilt        : ["Symbol", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck61.ts
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 42, end: 43 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 42, end: 43 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(28)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(22), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(34), ReferenceId(37), ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnumUnion.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(23), ReferenceId(29)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(28), ReferenceId(31), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(43), ReferenceId(45)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(35)]
rebuilt        : SymbolId(2): [ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStatic.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "_method2", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "_method2", "method3"]
Reference flags mismatch for "_method":
after transform: ReferenceId(39): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference flags mismatch for "_method2":
after transform: ReferenceId(48): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(4): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object", "require"]
rebuilt        : ["Function", "Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_decorate", "_decorateMetadata", "_get_method", "_set_method", "dec"]
rebuilt        : ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_decorate", "_decorateMetadata", "_get_method", "_set_method"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object", "WeakSet", "require"]
rebuilt        : ["Function", "Object", "WeakSet", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-static.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "_method2", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "_method2", "method3"]
Reference flags mismatch for "_method":
after transform: ReferenceId(39): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference flags mismatch for "_method2":
after transform: ReferenceId(48): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(4): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object", "require"]
rebuilt        : ["Function", "Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-staticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata", "_get_method", "_get_method2", "_set_method", "_set_method2", "_toSetter", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata", "_get_method", "_get_method2", "_set_method", "_set_method2", "_toSetter"]
Symbol span mismatch for "D":
after transform: SymbolId(3): Span { start: 137, end: 138 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(9): [ReferenceId(20), ReferenceId(30), ReferenceId(33)]
Symbol span mismatch for "D":
after transform: SymbolId(14): Span { start: 0, end: 0 }
rebuilt        : SymbolId(10): Span { start: 137, end: 138 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(14): [ReferenceId(28)]
rebuilt        : SymbolId(10): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "D":
after transform: SymbolId(14) "D"
rebuilt        : SymbolId(9) "D"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Object", "require"]
rebuilt        : ["Function", "Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "C", "_C", "_decorate", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["Base", "C", "_C", "_decorate", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 125, end: 126 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(5): [ReferenceId(4), ReferenceId(25), ReferenceId(28)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 125, end: 126 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(25)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "C":
after transform: SymbolId(5) "C"
rebuilt        : SymbolId(5) "C"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_decorate", "_superPropGet", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_decorate", "_superPropGet"]
Symbol span mismatch for "C1":
after transform: SymbolId(1): Span { start: 97, end: 99 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(5): [ReferenceId(3), ReferenceId(7), ReferenceId(10)]
Symbol span mismatch for "C1":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 97, end: 99 }
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(4): [ReferenceId(9)]
rebuilt        : SymbolId(6): []
Symbol span mismatch for "C2":
after transform: SymbolId(2): Span { start: 239, end: 241 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(7): [ReferenceId(12), ReferenceId(16), ReferenceId(19)]
Symbol span mismatch for "C2":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 239, end: 241 }
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(8): [ReferenceId(17)]
rebuilt        : SymbolId(8): []
Symbol span mismatch for "C3":
after transform: SymbolId(3): Span { start: 389, end: 391 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(9): [ReferenceId(21), ReferenceId(25), ReferenceId(28)]
Symbol span mismatch for "C3":
after transform: SymbolId(10): Span { start: 0, end: 0 }
rebuilt        : SymbolId(10): Span { start: 389, end: 391 }
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(10): [ReferenceId(25)]
rebuilt        : SymbolId(10): []
Reference symbol mismatch for "C1":
after transform: SymbolId(4) "C1"
rebuilt        : SymbolId(5) "C1"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "C2":
after transform: SymbolId(8) "C2"
rebuilt        : SymbolId(7) "C2"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "C3":
after transform: SymbolId(10) "C3"
rebuilt        : SymbolId(9) "C3"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "C", "_C", "_decorate", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["Base", "C", "_C", "_decorate", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(23): SymbolFlags(Class)
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 96, end: 97 }
rebuilt        : SymbolId(25): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(25): [ReferenceId(8), ReferenceId(173), ReferenceId(176)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(26): Span { start: 96, end: 97 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(171)]
rebuilt        : SymbolId(26): []
Reference symbol mismatch for "C":
after transform: SymbolId(5) "C"
rebuilt        : SymbolId(25) "C"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.4.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "C", "_C", "_decorate", "_defineProperty", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["Base", "C", "_C", "_decorate", "_defineProperty", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 127, end: 128 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(15), ReferenceId(20), ReferenceId(25), ReferenceId(30), ReferenceId(35)]
rebuilt        : SymbolId(6): [ReferenceId(5), ReferenceId(7), ReferenceId(12), ReferenceId(17), ReferenceId(23), ReferenceId(28), ReferenceId(33), ReferenceId(38), ReferenceId(41)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 127, end: 128 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(37)]
rebuilt        : SymbolId(7): []
Reference symbol mismatch for "C":
after transform: SymbolId(5) "C"
rebuilt        : SymbolId(6) "C"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.5.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "C1", "C2", "C3", "_C", "_C2", "_C3", "_decorate", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["Base", "C1", "C2", "C3", "_C", "_C2", "_C3", "_decorate", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(25): SymbolFlags(Class)
Symbol span mismatch for "C1":
after transform: SymbolId(3): Span { start: 96, end: 98 }
rebuilt        : SymbolId(27): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(3): [ReferenceId(17), ReferenceId(19), ReferenceId(23), ReferenceId(28), ReferenceId(36), ReferenceId(49), ReferenceId(62), ReferenceId(72), ReferenceId(82), ReferenceId(84), ReferenceId(86)]
rebuilt        : SymbolId(27): [ReferenceId(8), ReferenceId(10), ReferenceId(15), ReferenceId(20), ReferenceId(28), ReferenceId(41), ReferenceId(54), ReferenceId(64), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(80)]
Symbol span mismatch for "C1":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(28): Span { start: 96, end: 98 }
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(7): [ReferenceId(88)]
rebuilt        : SymbolId(28): []
Symbol span mismatch for "C2":
after transform: SymbolId(4): Span { start: 389, end: 391 }
rebuilt        : SymbolId(29): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(4): [ReferenceId(90), ReferenceId(92), ReferenceId(96), ReferenceId(101), ReferenceId(109), ReferenceId(122), ReferenceId(135), ReferenceId(145), ReferenceId(155), ReferenceId(157), ReferenceId(159)]
rebuilt        : SymbolId(29): [ReferenceId(83), ReferenceId(85), ReferenceId(90), ReferenceId(95), ReferenceId(103), ReferenceId(116), ReferenceId(129), ReferenceId(139), ReferenceId(149), ReferenceId(151), ReferenceId(152), ReferenceId(155)]
Symbol span mismatch for "C2":
after transform: SymbolId(18): Span { start: 0, end: 0 }
rebuilt        : SymbolId(30): Span { start: 389, end: 391 }
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(18): [ReferenceId(161)]
rebuilt        : SymbolId(30): []
Symbol span mismatch for "C3":
after transform: SymbolId(5): Span { start: 709, end: 711 }
rebuilt        : SymbolId(31): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(5): [ReferenceId(163), ReferenceId(165), ReferenceId(169), ReferenceId(174), ReferenceId(183), ReferenceId(197), ReferenceId(211), ReferenceId(222), ReferenceId(233), ReferenceId(235), ReferenceId(237)]
rebuilt        : SymbolId(31): [ReferenceId(158), ReferenceId(160), ReferenceId(166), ReferenceId(172), ReferenceId(182), ReferenceId(197), ReferenceId(212), ReferenceId(224), ReferenceId(236), ReferenceId(239), ReferenceId(241), ReferenceId(244)]
Symbol span mismatch for "C3":
after transform: SymbolId(26): Span { start: 0, end: 0 }
rebuilt        : SymbolId(32): Span { start: 709, end: 711 }
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(26): [ReferenceId(239)]
rebuilt        : SymbolId(32): []
Reference symbol mismatch for "C1":
after transform: SymbolId(7) "C1"
rebuilt        : SymbolId(27) "C1"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "C2":
after transform: SymbolId(18) "C2"
rebuilt        : SymbolId(29) "C2"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "C3":
after transform: SymbolId(26) "C3"
rebuilt        : SymbolId(31) "C3"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.6.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "C", "_decorate", "_decorateMetadata", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["Base", "C", "_decorate", "_decorateMetadata", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 195, end: 196 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 195, end: 196 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classThisReference/esDecorators-classDeclaration-classThisReference.es5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_decorate", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C", "_C", "_decorate", "_defineProperty"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 34, end: 35 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(6), ReferenceId(8), ReferenceId(11)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 34, end: 35 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(8)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "C":
after transform: SymbolId(2) "C"
rebuilt        : SymbolId(3) "C"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classThisReference/esDecorators-classDeclaration-classThisReference.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_decorate", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C", "_C", "_decorate", "_defineProperty"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 34, end: 35 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(6), ReferenceId(8), ReferenceId(11)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 34, end: 35 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(8)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "C":
after transform: SymbolId(2) "C"
rebuilt        : SymbolId(3) "C"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commentPreservation.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 57, end: 58 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(11): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 57, end: 58 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Number", "Object"]
rebuilt        : ["Function", "Number", "Object", "dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commonjs-classNamespaceMerge.ts
Bindings mismatch:
after transform: ScopeId(0): ["Example", "_decorate", "deco"]
rebuilt        : ScopeId(0): ["Example", "_decorate"]
Symbol span mismatch for "Example":
after transform: SymbolId(1): Span { start: 43, end: 50 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "Example":
after transform: SymbolId(1): [Span { start: 43, end: 50 }, Span { start: 93, end: 100 }]
rebuilt        : SymbolId(1): []
Symbol span mismatch for "Example":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 43, end: 50 }
Reference symbol mismatch for "deco":
after transform: SymbolId(0) "deco"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["deco"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commonjs.ts
Bindings mismatch:
after transform: ScopeId(0): ["Example", "_decorate", "deco"]
rebuilt        : ScopeId(0): ["Example", "_decorate"]
Symbol span mismatch for "Example":
after transform: SymbolId(1): Span { start: 43, end: 50 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "Example":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 43, end: 50 }
Reference symbol mismatch for "deco":
after transform: SymbolId(0) "deco"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["deco"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-multipleDecorators.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "dec1", "dec2"]
rebuilt        : ScopeId(0): ["C", "_decorate"]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 53, end: 54 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(3): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 53, end: 54 }
Reference symbol mismatch for "dec1":
after transform: SymbolId(0) "dec1"
rebuilt        : <None>
Reference symbol mismatch for "dec2":
after transform: SymbolId(1) "dec2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec1", "dec2", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-outerThisReference.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "_a", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_defineProperty", "_f", "_f2", "dec", "f"]
rebuilt        : ScopeId(0): ["A", "B", "C", "_a", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_defineProperty", "_f", "_f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(7): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(4): Some(ScopeId(3))
rebuilt        : ScopeId(7): Some(ScopeId(0))
Symbol span mismatch for "A":
after transform: SymbolId(2): Span { start: 119, end: 120 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "A":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 119, end: 120 }
Symbol span mismatch for "B":
after transform: SymbolId(3): Span { start: 300, end: 301 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol span mismatch for "B":
after transform: SymbolId(12): Span { start: 0, end: 0 }
rebuilt        : SymbolId(10): Span { start: 300, end: 301 }
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 551, end: 552 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(39), ReferenceId(41), ReferenceId(43)]
rebuilt        : SymbolId(12): [ReferenceId(44), ReferenceId(45), ReferenceId(48)]
Symbol span mismatch for "C":
after transform: SymbolId(16): Span { start: 0, end: 0 }
rebuilt        : SymbolId(13): Span { start: 551, end: 552 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "WeakMap", "require"]
rebuilt        : ["Object", "WeakMap", "dec", "f", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-parameterProperties.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "bound"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata"]
Reference symbol mismatch for "bound":
after transform: SymbolId(0) "bound"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "bound", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-setFunctionName.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "dec"]
rebuilt        : ScopeId(0): ["C", "_decorate"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 34, end: 35 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 34, end: 35 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-simpleTransformation.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "dec"]
rebuilt        : ScopeId(0): ["C", "_decorate"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 34, end: 35 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 0, end: 0 }
rebuilt        : SymbolId(2): Span { start: 34, end: 35 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-sourceMap.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 39, end: 40 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(11): Span { start: 0, end: 0 }
rebuilt        : SymbolId(4): Span { start: 39, end: 40 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Number", "Object", "require"]
rebuilt        : ["Function", "Number", "Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStatic.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "field3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAccessor.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_field", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_field", "field3"]
Reference flags mismatch for "_field":
after transform: ReferenceId(15): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_field", "dec"]
rebuilt        : ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_decorate", "_decorateMetadata", "_field"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "WeakMap", "require"]
rebuilt        : ["Object", "WeakMap", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticPrivateAccessor.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "dec"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-static.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_field", "_field2", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_defineProperty", "_field", "_field2", "field3"]
Reference flags mismatch for "_field":
after transform: ReferenceId(15): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(4): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticAccessor.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_decorate", "_decorateMetadata", "_field", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_decorate", "_decorateMetadata", "_field", "field3"]
Symbol span mismatch for "D":
after transform: SymbolId(3): Span { start: 199, end: 200 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(6): [ReferenceId(21), ReferenceId(24), ReferenceId(27)]
Symbol span mismatch for "D":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 199, end: 200 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(7): [ReferenceId(24)]
rebuilt        : SymbolId(7): []
Reference flags mismatch for "_field":
after transform: ReferenceId(16): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "D":
after transform: SymbolId(7) "D"
rebuilt        : SymbolId(6) "D"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata", "_field", "_field2", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata", "_field", "_field2"]
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 76, end: 77 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(6): [ReferenceId(9), ReferenceId(18), ReferenceId(21)]
Symbol span mismatch for "D":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 76, end: 77 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(9): [ReferenceId(17)]
rebuilt        : SymbolId(7): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "D":
after transform: SymbolId(9) "D"
rebuilt        : SymbolId(6) "D"
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticPrivateAccessor.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_decorate", "_decorateMetadata"]
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 85, end: 86 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(5): [ReferenceId(9), ReferenceId(18), ReferenceId(21)]
Symbol span mismatch for "D":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 85, end: 86 }
Symbol reference IDs mismatch for "D":
after transform: SymbolId(7): [ReferenceId(17)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "D":
after transform: SymbolId(7) "D"
rebuilt        : SymbolId(5) "D"
Reference symbol mismatch for "":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["", "Object", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStatic.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "method3"]
Reference flags mismatch for "_method":
after transform: ReferenceId(21): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_decorate", "_decorateMetadata", "_method", "dec"]
rebuilt        : ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_decorate", "_decorateMetadata", "_method"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "WeakSet", "require"]
rebuilt        : ["Function", "WeakSet", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-static.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata", "_method", "method3"]
Reference flags mismatch for "_method":
after transform: ReferenceId(21): ReferenceFlags(Read | Write)
rebuilt        : ReferenceId(2): ReferenceFlags(Write)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-staticPrivate.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_decorate", "_decorateMetadata", "_method", "_method2", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_decorate", "_decorateMetadata", "_method", "_method2"]
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 77, end: 78 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(7): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 77, end: 78 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "_C", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["Base", "_C", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_C", "_C2", "_C3", "_superPropGet", "dec"]
rebuilt        : ScopeId(0): ["_C", "_C2", "_C3", "_superPropGet"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "_C", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["Base", "_C", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(22): SymbolFlags(Class)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.4.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "_C", "_defineProperty", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["Base", "_C", "_defineProperty", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.5.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["Base", "_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(24): SymbolFlags(Class)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.6.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["Base", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-commentPreservation.ts
Bindings mismatch:
after transform: ScopeId(0): ["_C", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["_C", "_decorateMetadata", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(10): [ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(52), ReferenceId(54), ReferenceId(56)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Number", "Object", "require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "_x", "_x2", "dec", "x"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty", "_x", "_x2", "x"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(3): [ReferenceId(18), ReferenceId(23), ReferenceId(28), ReferenceId(39)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.10.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "_defineProperty", "dec", "f"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(21): [ReferenceId(40), ReferenceId(45), ReferenceId(50), ReferenceId(55), ReferenceId(60), ReferenceId(69), ReferenceId(74), ReferenceId(78)]
rebuilt        : SymbolId(1): [ReferenceId(62)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["Object", "dec", "f", "require"]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(39), ReferenceId(44), ReferenceId(49), ReferenceId(54), ReferenceId(59), ReferenceId(68), ReferenceId(73), ReferenceId(77)]
rebuilt        : [ReferenceId(63)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.11.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "f", "x"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty", "f", "x"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(4): [ReferenceId(19), ReferenceId(22), ReferenceId(25), ReferenceId(28), ReferenceId(31), ReferenceId(34)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "x1", "x2"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty", "x1", "x2"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(11), ReferenceId(14)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.4.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "obj"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(9): [ReferenceId(14), ReferenceId(17), ReferenceId(20)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "obj", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.5.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(4): [ReferenceId(8)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "obj", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.6.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(4): [ReferenceId(8)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "obj", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.7.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorateMetadata", "_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_decorateMetadata", "_defineProperty"]
Symbol reference IDs mismatch for "_decorateMetadata":
after transform: SymbolId(4): [ReferenceId(8)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["dec", "obj", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.8.ts
Bindings mismatch:
after transform: ScopeId(0): ["dec"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.9.ts
Bindings mismatch:
after transform: ScopeId(0): ["dec"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["dec", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-contextualTypes.2.ts
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8)]
Unresolved references mismatch:
after transform: ["ClassMethodDecoratorContext", "Function", "console"]
rebuilt        : ["Function", "console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-contextualTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(12), ScopeId(14), ScopeId(22), ScopeId(28), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(15): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(3): Some(ScopeId(2))
rebuilt        : ScopeId(15): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(16): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(5): Some(ScopeId(2))
rebuilt        : ScopeId(16): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(17): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(7): Some(ScopeId(2))
rebuilt        : ScopeId(17): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(18): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(9): Some(ScopeId(2))
rebuilt        : ScopeId(18): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(19): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(11): Some(ScopeId(2))
rebuilt        : ScopeId(19): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(20): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(13): Some(ScopeId(2))
rebuilt        : ScopeId(20): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(21): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(15): Some(ScopeId(2))
rebuilt        : ScopeId(21): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(22): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(16): Some(ScopeId(2))
rebuilt        : ScopeId(22): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(23): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(17): Some(ScopeId(2))
rebuilt        : ScopeId(23): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(24): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(18): Some(ScopeId(2))
rebuilt        : ScopeId(24): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(25): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(19): Some(ScopeId(2))
rebuilt        : ScopeId(25): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(26): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(21): Some(ScopeId(2))
rebuilt        : ScopeId(26): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(23): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(27): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(23): Some(ScopeId(2))
rebuilt        : ScopeId(27): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(28): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(25): Some(ScopeId(2))
rebuilt        : ScopeId(28): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(29): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(27): Some(ScopeId(2))
rebuilt        : ScopeId(29): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(29): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(30): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(29): Some(ScopeId(2))
rebuilt        : ScopeId(30): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(31): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(31): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(31): Some(ScopeId(2))
rebuilt        : ScopeId(31): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(32): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(32): Some(ScopeId(2))
rebuilt        : ScopeId(32): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(33): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(33): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(33): Some(ScopeId(2))
rebuilt        : ScopeId(33): Some(ScopeId(0))
Scope flags mismatch:
after transform: ScopeId(34): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(34): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(34): Some(ScopeId(2))
rebuilt        : ScopeId(34): Some(ScopeId(0))
Symbol span mismatch for "C":
after transform: SymbolId(0): Span { start: 23, end: 24 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(61): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 23, end: 24 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_decorate", "_decorateMetadata", "g", "h", "x"]
rebuilt        : ScopeId(0): ["_decorate", "_decorateMetadata"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(48), ScopeId(51), ScopeId(54), ScopeId(57), ScopeId(60), ScopeId(63), ScopeId(66)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(30), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(48), ScopeId(51), ScopeId(54), ScopeId(57), ScopeId(60), ScopeId(63)]
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 121, end: 122 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(31): Span { start: 0, end: 0 }
rebuilt        : SymbolId(3): Span { start: 121, end: 122 }
Symbol span mismatch for "C":
after transform: SymbolId(6): Span { start: 143, end: 144 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(33): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 143, end: 144 }
Symbol span mismatch for "C":
after transform: SymbolId(7): Span { start: 165, end: 166 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(34): Span { start: 0, end: 0 }
rebuilt        : SymbolId(7): Span { start: 165, end: 166 }
Symbol span mismatch for "C":
after transform: SymbolId(8): Span { start: 194, end: 195 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(35): Span { start: 0, end: 0 }
rebuilt        : SymbolId(9): Span { start: 194, end: 195 }
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 223, end: 224 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(36): Span { start: 0, end: 0 }
rebuilt        : SymbolId(11): Span { start: 223, end: 224 }
Symbol span mismatch for "C":
after transform: SymbolId(10): Span { start: 254, end: 255 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(37): Span { start: 0, end: 0 }
rebuilt        : SymbolId(13): Span { start: 254, end: 255 }
Symbol span mismatch for "C":
after transform: SymbolId(11): Span { start: 279, end: 280 }
rebuilt        : SymbolId(14): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(38): Span { start: 0, end: 0 }
rebuilt        : SymbolId(15): Span { start: 279, end: 280 }
Symbol span mismatch for "C":
after transform: SymbolId(12): Span { start: 306, end: 307 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(39): Span { start: 0, end: 0 }
rebuilt        : SymbolId(17): Span { start: 306, end: 307 }
Symbol span mismatch for "C":
after transform: SymbolId(13): Span { start: 329, end: 330 }
rebuilt        : SymbolId(18): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(40): Span { start: 0, end: 0 }
rebuilt        : SymbolId(19): Span { start: 329, end: 330 }
Symbol span mismatch for "C":
after transform: SymbolId(14): Span { start: 354, end: 355 }
rebuilt        : SymbolId(20): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(41): Span { start: 0, end: 0 }
rebuilt        : SymbolId(21): Span { start: 354, end: 355 }
Symbol span mismatch for "C":
after transform: SymbolId(15): Span { start: 379, end: 380 }
rebuilt        : SymbolId(22): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(42): Span { start: 0, end: 0 }
rebuilt        : SymbolId(23): Span { start: 379, end: 380 }
Symbol span mismatch for "C":
after transform: SymbolId(16): Span { start: 405, end: 406 }
rebuilt        : SymbolId(24): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(43): Span { start: 0, end: 0 }
rebuilt        : SymbolId(25): Span { start: 405, end: 406 }
Symbol span mismatch for "C":
after transform: SymbolId(17): Span { start: 433, end: 434 }
rebuilt        : SymbolId(26): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(44): Span { start: 0, end: 0 }
rebuilt        : SymbolId(27): Span { start: 433, end: 434 }
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(3) "h"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(3) "h"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "g", "h", "require", "x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-preservesThis.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "DecoratorProvider", "_decorate", "_decorateMetadata", "instance"]
rebuilt        : ScopeId(0): ["C", "D", "DecoratorProvider", "_decorate", "_decorateMetadata"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "DecoratorProvider":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "DecoratorProvider":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(8)]
rebuilt        : SymbolId(2): [ReferenceId(23)]
Reference symbol mismatch for "instance":
after transform: SymbolId(4) "instance"
rebuilt        : <None>
Reference symbol mismatch for "instance":
after transform: SymbolId(4) "instance"
rebuilt        : <None>
Reference symbol mismatch for "instance":
after transform: SymbolId(4) "instance"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["DecoratorContext", "Function", "require"]
rebuilt        : ["Function", "instance", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata1.ts
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 144, end: 145 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(8): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 144, end: 145 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata2.ts
Symbol span mismatch for "C":
after transform: SymbolId(5): Span { start: 144, end: 145 }
rebuilt        : SymbolId(7): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(8): Span { start: 144, end: 145 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata3.ts
Symbol span mismatch for "C":
after transform: SymbolId(6): Span { start: 225, end: 226 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(9): Span { start: 0, end: 0 }
rebuilt        : SymbolId(9): Span { start: 225, end: 226 }
Symbol span mismatch for "D":
after transform: SymbolId(7): Span { start: 260, end: 261 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(11): Span { start: 0, end: 0 }
rebuilt        : SymbolId(11): Span { start: 260, end: 261 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata4.ts
Symbol span mismatch for "C":
after transform: SymbolId(7): Span { start: 366, end: 367 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(10): Span { start: 0, end: 0 }
rebuilt        : SymbolId(10): Span { start: 366, end: 367 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_decorate", "_decorateMetadata", "metadata"]
rebuilt        : ScopeId(0): ["C", "_decorate", "_decorateMetadata"]
Reference symbol mismatch for "metadata":
after transform: SymbolId(0) "metadata"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["Function", "metadata", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiteralInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(10), SymbolId(16), SymbolId(17), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["AdvancedList", "AppType", "Composite", "HeaderDetail", "HeaderMultiDetail", "ListOnly", "ModuleSettings", "Relationship", "Report", "Standard"]
rebuilt        : ScopeId(1): ["AppType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["AppStyle", "MiniApp", "PivotTable", "Standard", "Tree", "TreeEntity"]
rebuilt        : ScopeId(2): ["AppStyle"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AppType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "AppType":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(22), ReferenceId(25), ReferenceId(29)]
Symbol flags mismatch for "AppStyle":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "AppStyle":
after transform: SymbolId(10): [ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(23), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(31)]
Reference symbol mismatch for "foo":
after transform: SymbolId(17) "foo"
rebuilt        : SymbolId(5) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(17) "foo"
rebuilt        : SymbolId(5) "foo"
Unresolved references mismatch:
after transform: ["Array", "Map"]
rebuilt        : ["Map"]
Unresolved reference IDs mismatch for "Map":
after transform: [ReferenceId(0), ReferenceId(4)]
rebuilt        : [ReferenceId(21)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals2ES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "Number", "String", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals2ES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "Number", "String", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOpEmitParens.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperator3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "tag":
after transform: SymbolId(0) "tag"
rebuilt        : SymbolId(0) "tag"
Reference symbol mismatch for "tag":
after transform: SymbolId(0) "tag"
rebuilt        : SymbolId(0) "tag"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorASI.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "as":
after transform: SymbolId(1) "as"
rebuilt        : SymbolId(1) "as"
Reference symbol mismatch for "as":
after transform: SymbolId(1) "as"
rebuilt        : SymbolId(1) "as"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentGenericLookupTypeNarrowing.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : SymbolId(1) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentTypeNarrowing.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithAnyAndEveryType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithConstrainedTypeParameter.ts
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNumberAndEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(34)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(18), ReferenceId(40)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(27)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithStringAndEveryType.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(31), ReferenceId(33), ReferenceId(45)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(37), ReferenceId(39)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(66), ReferenceId(77), ReferenceId(79), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(85), ReferenceId(87), ReferenceId(88), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(107), ReferenceId(109), ReferenceId(110), ReferenceId(121), ReferenceId(123), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(129), ReferenceId(131), ReferenceId(132), ReferenceId(143), ReferenceId(145), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(151), ReferenceId(153), ReferenceId(154), ReferenceId(165), ReferenceId(167), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(173), ReferenceId(175), ReferenceId(176), ReferenceId(187), ReferenceId(189), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(195), ReferenceId(197), ReferenceId(198), ReferenceId(209), ReferenceId(211), ReferenceId(213), ReferenceId(214), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(220), ReferenceId(226)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(38), ReferenceId(40), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(71), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(93), ReferenceId(104), ReferenceId(106), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(112), ReferenceId(114), ReferenceId(115), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(137), ReferenceId(148), ReferenceId(150), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(159), ReferenceId(170), ReferenceId(172), ReferenceId(174), ReferenceId(175), ReferenceId(176), ReferenceId(178), ReferenceId(180), ReferenceId(181), ReferenceId(192), ReferenceId(194), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(200), ReferenceId(202), ReferenceId(203), ReferenceId(214), ReferenceId(216), ReferenceId(218), ReferenceId(219), ReferenceId(220), ReferenceId(222), ReferenceId(224), ReferenceId(225)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithEnumUnion.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(23), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(45), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(89), ReferenceId(100), ReferenceId(102), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(108), ReferenceId(110), ReferenceId(111), ReferenceId(122), ReferenceId(124), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(130), ReferenceId(132), ReferenceId(133), ReferenceId(144), ReferenceId(146), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(152), ReferenceId(154), ReferenceId(155), ReferenceId(166), ReferenceId(168), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(174), ReferenceId(176), ReferenceId(177), ReferenceId(188), ReferenceId(190), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(196), ReferenceId(198), ReferenceId(199), ReferenceId(210), ReferenceId(212), ReferenceId(214), ReferenceId(215), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(221), ReferenceId(227)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(33), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(55), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(99), ReferenceId(110), ReferenceId(112), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(118), ReferenceId(120), ReferenceId(121), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(140), ReferenceId(142), ReferenceId(143), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(159), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(165), ReferenceId(176), ReferenceId(178), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(184), ReferenceId(186), ReferenceId(187), ReferenceId(198), ReferenceId(200), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(206), ReferenceId(208), ReferenceId(209), ReferenceId(220), ReferenceId(222), ReferenceId(224), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(230), ReferenceId(231)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(233)]
rebuilt        : SymbolId(2): [ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithIdenticalObjects.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(11)]
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B1":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(12)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(5): [ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "A2":
after transform: SymbolId(6): [ReferenceId(7)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "B2":
after transform: SymbolId(7): [ReferenceId(13)]
rebuilt        : SymbolId(8): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnInstantiatedCallSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(17)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnInstantiatedConstructorSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(17)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNumericLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsAny.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(33), ReferenceId(265)]
rebuilt        : SymbolId(1): [ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsUndefined.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(34), ReferenceId(266)]
rebuilt        : SymbolId(1): [ReferenceId(7)]
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeEnumAndNumber.ts
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(55), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(65), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(75), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(88)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(12), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(22), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(42), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(62), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(72), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(82), ReferenceId(85), ReferenceId(86), ReferenceId(87)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnCallSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnConstructorSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(27)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnIndexSignature.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnInstantiatedCallSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(16)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnInstantiatedConstructorSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(16)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnOptionalProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnProperty.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(2): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "B1":
after transform: SymbolId(3): [ReferenceId(8)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "A2":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(6): [ReferenceId(10)]
Symbol reference IDs mismatch for "B2":
after transform: SymbolId(5): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidStaticToString.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(5): []
Symbol flags mismatch for "StaticToString":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "StaticToString":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol flags mismatch for "StaticToNumber":
after transform: SymbolId(3): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol reference IDs mismatch for "StaticToNumber":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(3): [ReferenceId(3)]
Symbol flags mismatch for "NormalToString":
after transform: SymbolId(6): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(6): SymbolFlags(Class)
Symbol reference IDs mismatch for "NormalToString":
after transform: SymbolId(6): [ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(6): [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithLHSIsObject.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Function", "Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithRHSHasSymbolHasInstance.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "Rhs10", "Rhs11", "Rhs12", "Rhs13", "Rhs7", "Rhs8", "Rhs9", "_classPrivateFieldInitSpec", "_x", "_y", "lhs0", "lhs1", "lhs2", "lhs3", "lhs4", "obj", "rhs0", "rhs1", "rhs14", "rhs15", "rhs2", "rhs3", "rhs4", "rhs5", "rhs6"]
rebuilt        : ScopeId(0): ["A", "B", "Rhs10", "Rhs11", "Rhs12", "Rhs13", "Rhs7", "Rhs8", "Rhs9", "_classPrivateFieldInitSpec", "_x", "_y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(38), ScopeId(39), ScopeId(41), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13)]
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(18): [ScopeId(19)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(22): [ScopeId(23)]
rebuilt        : ScopeId(6): []
Scope children mismatch:
after transform: ScopeId(24): [ScopeId(25)]
rebuilt        : ScopeId(7): []
Scope children mismatch:
after transform: ScopeId(26): [ScopeId(27), ScopeId(44)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Symbol flags mismatch for "Rhs7":
after transform: SymbolId(11): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol flags mismatch for "Rhs8":
after transform: SymbolId(13): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol flags mismatch for "Rhs9":
after transform: SymbolId(15): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol flags mismatch for "Rhs10":
after transform: SymbolId(17): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol flags mismatch for "Rhs11":
after transform: SymbolId(19): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol flags mismatch for "Rhs12":
after transform: SymbolId(21): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(6): SymbolFlags(Class)
Symbol flags mismatch for "Rhs13":
after transform: SymbolId(23): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol flags mismatch for "A":
after transform: SymbolId(30): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(9): SymbolFlags(Class)
Symbol flags mismatch for "B":
after transform: SymbolId(35): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(11): SymbolFlags(Class)
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs6":
after transform: SymbolId(10) "rhs6"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(26) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(27) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs6":
after transform: SymbolId(10) "rhs6"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(28) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(29) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(36) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(36) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(36) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(36) "obj"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs14":
after transform: SymbolId(39) "rhs14"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs15":
after transform: SymbolId(43) "rhs15"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(25) "lhs0"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Symbol", "WeakMap", "globalThis", "require"]
rebuilt        : ["WeakMap", "lhs0", "lhs1", "lhs2", "lhs3", "lhs4", "obj", "require", "rhs0", "rhs1", "rhs14", "rhs15", "rhs2", "rhs3", "rhs4", "rhs5", "rhs6"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithRHSIsSubtypeOfFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/logicalOrExpressionIsNotContextuallyTyped.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandAnyType.ts
Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandBooleanType.ts
Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandNumberType.ts
Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandObjectType.ts
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["Date", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandStringType.ts
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(29), ReferenceId(38)]
rebuilt        : [ReferenceId(28), ReferenceId(37)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorsMultipleOperators.ts
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(33), ReferenceId(36)]
rebuilt        : [ReferenceId(32), ReferenceId(35)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsBooleanType.ts
Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorWithIdenticalBCT.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(9), ReferenceId(19), ReferenceId(25), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(7)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(12), ReferenceId(22)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Bindings mismatch:
after transform: ScopeId(1): ["E", "blue", "red"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(28): [ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(16): [ScopeId(17)]
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(29)]
rebuilt        : SymbolId(0): [ReferenceId(5)]
Symbol reference IDs mismatch for "a0":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Class":
after transform: SymbolId(8): [ReferenceId(1)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/iterableContextualTyping1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping1.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/taggedTemplateContextualTyping1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12)]
rebuilt        : ScopeId(8): []
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(9): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/taggedTemplateContextualTyping2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/elementAccess/stringEnumInElementAccess01.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "e", "item", "snb"]
rebuilt        : ScopeId(0): ["E", "snb"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(4)]
Reference symbol mismatch for "item":
after transform: SymbolId(5) "item"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(6) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["e", "item"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpreadES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpread.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(10): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpreadES5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(10): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpreadES6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(10): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceTransitiveConstraints.ts
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(4), ReferenceId(5), ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functions/arrowFunctionExpressions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(24), ScopeId(28), ScopeId(31), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(24), ScopeId(28), ScopeId(31), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(43)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functions/contextuallyTypedFunctionExpressionsAndReturnAnnotations.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functions/typeOfThisInFunctionExpression.ts
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(11): Span { start: 383, end: 384 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functions/voidParamAssignmentCompatibility.ts
Bindings mismatch:
after transform: ScopeId(0): ["g", "gg", "o"]
rebuilt        : ScopeId(0): ["g", "gg"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : SymbolId(0) "g"
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/newOperator/newOperatorConformance.ts
Bindings mismatch:
after transform: ScopeId(0): ["C0", "C1", "T", "a", "anyCtor", "anyCtor1", "c1", "d", "fnVoid", "n", "nested", "newFn1", "newFn2", "t"]
rebuilt        : ScopeId(0): ["C0", "C1", "T", "a", "anyCtor", "anyCtor1", "c1", "d", "fnVoid", "n", "nested", "nestedCtor", "newFn1", "newFn2", "t"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(6): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(7): []
Symbol reference IDs mismatch for "C0":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "T":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol flags mismatch for "nestedCtor":
after transform: SymbolId(10): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "nestedCtor":
after transform: SymbolId(10): Span { start: 197, end: 207 }
rebuilt        : SymbolId(8): Span { start: 240, end: 262 }
Symbol reference IDs mismatch for "nestedCtor":
after transform: SymbolId(10): [ReferenceId(1), ReferenceId(2), ReferenceId(15)]
rebuilt        : SymbolId(8): [ReferenceId(8)]
Symbol redeclarations mismatch for "nestedCtor":
after transform: SymbolId(10): [Span { start: 197, end: 207 }, Span { start: 240, end: 262 }]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator10.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(1) "f"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator3.ts
Bindings mismatch:
after transform: ScopeId(0): ["_ref", "_ref2", "_ref3", "_ref4", "_ref5", "a1", "a2", "a3", "a4", "a5", "a6", "aa1"]
rebuilt        : ScopeId(0): ["_ref", "_ref2", "_ref3", "_ref4", "_ref5", "aa1"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator7.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "f", "foo1", "foo2", "foo3"]
rebuilt        : ScopeId(0): ["f", "foo1", "foo2", "foo3"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator8.ts
Bindings mismatch:
after transform: ScopeId(0): ["_a$m", "_a$m2", "_a$p", "_ref", "_ref2", "a", "b", "n1", "n2", "n3"]
rebuilt        : ScopeId(0): ["_a$m", "_a$m2", "_a$p", "_ref", "_ref2", "n1", "n2", "n3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator9.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "gg"]
rebuilt        : ScopeId(0): ["g", "gg"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): ["_a", "a"]
Bindings mismatch:
after transform: ScopeId(2): ["_a", "c"]
rebuilt        : ScopeId(2): ["c"]
Symbol scope ID mismatch for "_a":
after transform: SymbolId(2): ScopeId(2)
rebuilt        : SymbolId(0): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator_es2020.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9", "b", "c", "x1", "x2", "x3", "x4", "x5", "x6", "y1", "y2", "y3", "y4", "y5", "y6"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9", "x1", "x2", "x3", "x4", "x5", "x6", "y1", "y2", "y3", "y4", "y5", "y6"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b", "c"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator_not_strict.ts
Bindings mismatch:
after transform: ScopeId(0): ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralGettersAndSetters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39)]
Scope children mismatch:
after transform: ScopeId(31): [ScopeId(32)]
rebuilt        : ScopeId(28): []
Scope children mismatch:
after transform: ScopeId(37): [ScopeId(38)]
rebuilt        : ScopeId(33): []
Symbol reference IDs mismatch for "anyVar":
after transform: SymbolId(33): [ReferenceId(11)]
rebuilt        : SymbolId(30): []
Unresolved references mismatch:
after transform: ["Array", "Date", "undefined"]
rebuilt        : ["undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChain.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChain.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o3$b10", "_o3$b11", "_o3$b12", "_o3$b2", "_o3$b3", "_o3$b4", "_o3$b5", "_o3$b6", "_o3$b7", "_o3$b8", "_o3$b9", "incr", "o1", "o2", "o3", "o4", "o5", "v"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o3$b10", "_o3$b11", "_o3$b12", "_o3$b2", "_o3$b3", "_o3$b4", "_o3$b5", "_o3$b6", "_o3$b7", "_o3$b8", "_o3$b9", "incr", "v"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "incr":
after transform: SymbolId(5) "incr"
rebuilt        : SymbolId(13) "incr"
Reference symbol mismatch for "o5":
after transform: SymbolId(8) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4", "o5"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChainInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["value"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/parentheses.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o4$b", "o1", "o2", "o3", "o4"]
rebuilt        : ScopeId(0): ["_o4$b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "_o3$b2", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b", "_o3$b2"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o3$b2", "_o4$b", "_o4$b2", "_o5$b", "_o5$b2", "_o5$b3", "_o5$b4", "o1", "o2", "o3", "o4", "o5", "o6"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o3$b2", "_o4$b", "_o4$b2", "_o5$b", "_o5$b2", "_o5$b3", "_o5$b4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o6":
after transform: SymbolId(5) "o6"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4", "o5", "o6"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInference.ts
Bindings mismatch:
after transform: ScopeId(0): ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "fnu", "ofnu", "osu", "su", "unbox", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"]
rebuilt        : ScopeId(0): ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "unbox", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "fnu":
after transform: SymbolId(4) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "fnu":
after transform: SymbolId(4) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "fnu":
after transform: SymbolId(4) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(3) "su"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(5) "osu"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Reference symbol mismatch for "ofnu":
after transform: SymbolId(6) "ofnu"
rebuilt        : <None>
Reference symbol mismatch for "ofnu":
after transform: SymbolId(6) "ofnu"
rebuilt        : <None>
Reference symbol mismatch for "ofnu":
after transform: SymbolId(6) "ofnu"
rebuilt        : <None>
Reference symbol mismatch for "unbox":
after transform: SymbolId(0) "unbox"
rebuilt        : SymbolId(0) "unbox"
Unresolved references mismatch:
after transform: []
rebuilt        : ["fnu", "ofnu", "osu", "su"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.ts
Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o4$b", "_o5$b", "o1", "o2", "o3", "o4", "o5", "o6"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o4$b", "_o5$b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o6":
after transform: SymbolId(5) "o6"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4", "o5", "o6"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/constAssertionOnEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/TypeGuardWithArrayUnion.ts
Symbol reference IDs mismatch for "Message":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/TypeGuardWithEnumUnion.ts
Bindings mismatch:
after transform: ScopeId(1): ["B", "Color", "G", "R"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Color":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(10), ReferenceId(15), ReferenceId(23)]
rebuilt        : SymbolId(0): [ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardEnums.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol flags mismatch for "V":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "V":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(11)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(15), SymbolId(18), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(31), SymbolId(32)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(19), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(32)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(14), ReferenceId(19), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(34), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(6), ReferenceId(15), ReferenceId(43), ReferenceId(44)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4), ReferenceId(10), ReferenceId(20), ReferenceId(21), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(35), ReferenceId(42)]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "isC":
after transform: SymbolId(7) "isC"
rebuilt        : SymbolId(9) "isC"
Reference symbol mismatch for "isA":
after transform: SymbolId(3) "isA"
rebuilt        : SymbolId(5) "isA"
Reference symbol mismatch for "isA":
after transform: SymbolId(3) "isA"
rebuilt        : SymbolId(5) "isA"
Reference symbol mismatch for "isC_multipleParams":
after transform: SymbolId(15) "isC_multipleParams"
rebuilt        : SymbolId(16) "isC_multipleParams"
Reference symbol mismatch for "f2":
after transform: SymbolId(23) "f2"
rebuilt        : SymbolId(24) "f2"
Reference symbol mismatch for "acceptingBoolean":
after transform: SymbolId(26) "acceptingBoolean"
rebuilt        : SymbolId(27) "acceptingBoolean"
Reference symbol mismatch for "isA":
after transform: SymbolId(3) "isA"
rebuilt        : SymbolId(5) "isA"
Reference symbol mismatch for "acceptingTypeGuardFunction":
after transform: SymbolId(28) "acceptingTypeGuardFunction"
rebuilt        : SymbolId(29) "acceptingTypeGuardFunction"
Reference symbol mismatch for "isA":
after transform: SymbolId(3) "isA"
rebuilt        : SymbolId(5) "isA"
Reference symbol mismatch for "isA":
after transform: SymbolId(3) "isA"
rebuilt        : SymbolId(5) "isA"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionGenerics.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(12), SymbolId(16), SymbolId(19), SymbolId(23), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(16), SymbolId(18), SymbolId(21), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(22), ReferenceId(29)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "funA":
after transform: SymbolId(9) "funA"
rebuilt        : SymbolId(11) "funA"
Reference symbol mismatch for "isB":
after transform: SymbolId(3) "isB"
rebuilt        : SymbolId(5) "isB"
Reference symbol mismatch for "funB":
after transform: SymbolId(12) "funB"
rebuilt        : SymbolId(13) "funB"
Reference symbol mismatch for "retC":
after transform: SymbolId(7) "retC"
rebuilt        : SymbolId(9) "retC"
Reference symbol mismatch for "funC":
after transform: SymbolId(16) "funC"
rebuilt        : SymbolId(16) "funC"
Reference symbol mismatch for "isB":
after transform: SymbolId(3) "isB"
rebuilt        : SymbolId(5) "isB"
Reference symbol mismatch for "funD":
after transform: SymbolId(19) "funD"
rebuilt        : SymbolId(18) "funD"
Reference symbol mismatch for "isC":
after transform: SymbolId(5) "isC"
rebuilt        : SymbolId(7) "isC"
Reference symbol mismatch for "funE":
after transform: SymbolId(23) "funE"
rebuilt        : SymbolId(21) "funE"
Reference symbol mismatch for "isB":
after transform: SymbolId(3) "isB"
rebuilt        : SymbolId(5) "isB"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThis.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(31), ScopeId(33)]
Symbol reference IDs mismatch for "RoyalGuard":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(4)]
Symbol reference IDs mismatch for "LeadGuard":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(62)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "FollowerGuard":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(3), ReferenceId(7), ReferenceId(63)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "ArrowElite":
after transform: SymbolId(8): [ReferenceId(22), ReferenceId(23)]
rebuilt        : SymbolId(8): [ReferenceId(19)]
Symbol reference IDs mismatch for "ArrowMedic":
after transform: SymbolId(9): [ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(9): [ReferenceId(21)]
Symbol reference IDs mismatch for "MimicLeader":
after transform: SymbolId(17): [ReferenceId(47), ReferenceId(48)]
rebuilt        : SymbolId(13): [ReferenceId(37)]
Symbol reference IDs mismatch for "MimicFollower":
after transform: SymbolId(18): [ReferenceId(49), ReferenceId(50)]
rebuilt        : SymbolId(14): [ReferenceId(38)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardIntersectionTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(24)]
Reference symbol mismatch for "isX":
after transform: SymbolId(3) "isX"
rebuilt        : SymbolId(0) "isX"
Reference symbol mismatch for "isY":
after transform: SymbolId(5) "isY"
rebuilt        : SymbolId(2) "isY"
Reference symbol mismatch for "isZ":
after transform: SymbolId(7) "isZ"
rebuilt        : SymbolId(4) "isZ"
Reference symbol mismatch for "isX":
after transform: SymbolId(3) "isX"
rebuilt        : SymbolId(0) "isX"
Reference symbol mismatch for "isY":
after transform: SymbolId(5) "isY"
rebuilt        : SymbolId(2) "isY"
Reference symbol mismatch for "isZ":
after transform: SymbolId(7) "isZ"
rebuilt        : SymbolId(4) "isZ"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Reference symbol mismatch for "log":
after transform: SymbolId(17) "log"
rebuilt        : SymbolId(12) "log"
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsPrimitiveIntersection.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "Tag2":
after transform: SymbolId(8): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Tag2":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(9), ReferenceId(17)]
rebuilt        : SymbolId(7): [ReferenceId(7)]
Reference symbol mismatch for "isNonBlank":
after transform: SymbolId(1) "isNonBlank"
rebuilt        : SymbolId(0) "isNonBlank"
Reference symbol mismatch for "doThis":
after transform: SymbolId(3) "doThis"
rebuilt        : SymbolId(2) "doThis"
Reference symbol mismatch for "doThat":
after transform: SymbolId(5) "doThat"
rebuilt        : SymbolId(4) "doThat"
Reference symbol mismatch for "isNonBlank2":
after transform: SymbolId(9) "isNonBlank2"
rebuilt        : SymbolId(9) "isNonBlank2"
Reference symbol mismatch for "doThis2":
after transform: SymbolId(11) "doThis2"
rebuilt        : SymbolId(11) "doThis2"
Reference symbol mismatch for "doThat2":
after transform: SymbolId(13) "doThat2"
rebuilt        : SymbolId(13) "doThat2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsToLiteralType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "isFoo":
after transform: SymbolId(0) "isFoo"
rebuilt        : SymbolId(0) "isFoo"
Reference symbol mismatch for "doThis":
after transform: SymbolId(2) "doThis"
rebuilt        : SymbolId(2) "doThis"
Reference symbol mismatch for "doThat":
after transform: SymbolId(4) "doThat"
rebuilt        : SymbolId(4) "doThat"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsToLiteralTypeUnion.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "isFoo":
after transform: SymbolId(0) "isFoo"
rebuilt        : SymbolId(0) "isFoo"
Reference symbol mismatch for "doThis":
after transform: SymbolId(2) "doThis"
rebuilt        : SymbolId(2) "doThis"
Reference symbol mismatch for "doThat":
after transform: SymbolId(4) "doThat"
rebuilt        : SymbolId(4) "doThat"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1AndExpr2.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(23)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1OrExpr2.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(19)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormFunctionEquality.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "isString1":
after transform: SymbolId(0) "isString1"
rebuilt        : SymbolId(0) "isString1"
Reference symbol mismatch for "isString2":
after transform: SymbolId(3) "isString2"
rebuilt        : SymbolId(3) "isString2"
Reference symbol mismatch for "isString1":
after transform: SymbolId(0) "isString1"
rebuilt        : SymbolId(0) "isString1"
Reference symbol mismatch for "isString2":
after transform: SymbolId(3) "isString2"
rebuilt        : SymbolId(3) "isString2"
Reference symbol mismatch for "isString1":
after transform: SymbolId(0) "isString1"
rebuilt        : SymbolId(0) "isString1"
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormInstanceOf.ts
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(36), ReferenceId(38), ReferenceId(41), ReferenceId(44), ReferenceId(48), ReferenceId(54), ReferenceId(58), ReferenceId(61), ReferenceId(65)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(9), ReferenceId(36), ReferenceId(39), ReferenceId(43), ReferenceId(50), ReferenceId(54)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(9), ReferenceId(19), ReferenceId(23), ReferenceId(34), ReferenceId(39), ReferenceId(45), ReferenceId(51), ReferenceId(56), ReferenceId(62), ReferenceId(67)]
rebuilt        : SymbolId(2): [ReferenceId(13), ReferenceId(25), ReferenceId(46), ReferenceId(56)]
Symbol reference IDs mismatch for "D1":
after transform: SymbolId(2): [ReferenceId(13), ReferenceId(17), ReferenceId(20), ReferenceId(27), ReferenceId(31), ReferenceId(33), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(17), ReferenceId(21), ReferenceId(29), ReferenceId(33)]
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(3): [ReferenceId(46), ReferenceId(63)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormInstanceOfOnInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsType.ts
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(22), ReferenceId(36)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "D1":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(23), ReferenceId(37)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsTypeOnInterfaces.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfBoolean.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfFunction.ts
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(11): [ScopeId(12)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(13): [ScopeId(14), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(18): [ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(16): [ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(28): [ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(25): [ScopeId(26)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfIsOrderIndependent.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfNumber.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfPrimitiveSubtype.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfString.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFromPropNameInUnionType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(27), ScopeId(30), ScopeId(34), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(30), ScopeId(33), ScopeId(35), ScopeId(38), ScopeId(43), ScopeId(48)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(7), ReferenceId(27), ReferenceId(32), ReferenceId(43)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(8), ReferenceId(28), ReferenceId(33), ReferenceId(44)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(9)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(10)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "AWithOptionalProp":
after transform: SymbolId(14): [ReferenceId(19), ReferenceId(24)]
rebuilt        : SymbolId(15): [ReferenceId(19)]
Symbol reference IDs mismatch for "BWithOptionalProp":
after transform: SymbolId(15): [ReferenceId(20)]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "ClassWithUnionProp":
after transform: SymbolId(23): [ReferenceId(34), ReferenceId(38)]
rebuilt        : SymbolId(24): []
Symbol reference IDs mismatch for "NestedClassWithProp":
after transform: SymbolId(28): [ReferenceId(39)]
rebuilt        : SymbolId(29): []
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInFunctionAndModuleBlock.ts
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Symbol flags mismatch for "m":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(21): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m":
after transform: SymbolId(21): Span { start: 1652, end: 1653 }
rebuilt        : SymbolId(21): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(23): SymbolFlags(ValueModule)
rebuilt        : SymbolId(24): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(23): Span { start: 1705, end: 1707 }
rebuilt        : SymbolId(24): Span { start: 0, end: 0 }
Symbol flags mismatch for "m1":
after transform: SymbolId(26): SymbolFlags(ValueModule)
rebuilt        : SymbolId(28): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m1":
after transform: SymbolId(26): Span { start: 2016, end: 2018 }
rebuilt        : SymbolId(28): Span { start: 0, end: 0 }
Symbol flags mismatch for "m2":
after transform: SymbolId(28): SymbolFlags(ValueModule)
rebuilt        : SymbolId(31): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(28): Span { start: 2070, end: 2072 }
rebuilt        : SymbolId(31): Span { start: 0, end: 0 }
Symbol flags mismatch for "m3":
after transform: SymbolId(29): SymbolFlags(ValueModule)
rebuilt        : SymbolId(33): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "m3":
after transform: SymbolId(29): Span { start: 2073, end: 2075 }
rebuilt        : SymbolId(33): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInProperties.ts
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typePredicateASI.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_asConstArrays.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_contextualTyping1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_contextualTyping3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_ensureInterfaceImpl.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyValueConformance1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(4): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6)]
Reference symbol mismatch for "checkTruths":
after transform: SymbolId(1) "checkTruths"
rebuilt        : SymbolId(0) "checkTruths"
Reference symbol mismatch for "checkM":
after transform: SymbolId(3) "checkM"
rebuilt        : SymbolId(2) "checkM"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyValueConformance2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(4): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6)]
Reference symbol mismatch for "checkTruths":
after transform: SymbolId(1) "checkTruths"
rebuilt        : SymbolId(0) "checkTruths"
Reference symbol mismatch for "checkM":
after transform: SymbolId(3) "checkM"
rebuilt        : SymbolId(2) "checkM"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithBooleanType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithEnumType.ts
Bindings mismatch:
after transform: ScopeId(1): ["", "A", "B", "ENUM1"]
rebuilt        : ScopeId(1): ["ENUM1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "ENUM1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithNumberType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithStringType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithAnyOtherType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithNumberType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithBooleanType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithEnumType.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["", "A", "B", "ENUM1"]
rebuilt        : ScopeId(2): ["ENUM1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "ENUM":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "ENUM1":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithNumberType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithStringType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/amdImportAsPrimaryExpression.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/amdImportNotAsPrimaryExpression.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "E1", "M1", "_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "E1", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(3): ["E1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/asiPreventsParsingAsAmbientExternalModule02.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "container":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "container":
after transform: SymbolId(2): Span { start: 49, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/commonJSImportNotAsPrimaryExpression.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "E1", "M1", "_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "E1", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(3): ["E1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
Symbol span mismatch for "D":
after transform: SymbolId(3): Span { start: 147, end: 148 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(6): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 147, end: 148 }
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(3) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target11.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 69, end: 70 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(11)]
rebuilt        : SymbolId(5): [ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(10)]
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 69, end: 70 }
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(3) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target12.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "w"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["E", "x"]
rebuilt        : ScopeId(4): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 13, end: 14 }, Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "E":
after transform: SymbolId(2): [Span { start: 80, end: 81 }, Span { start: 109, end: 110 }, Span { start: 143, end: 144 }, Span { start: 191, end: 192 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "N":
after transform: SymbolId(7): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(7): Span { start: 239, end: 240 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "N":
after transform: SymbolId(7): [Span { start: 239, end: 240 }, Span { start: 263, end: 264 }]
rebuilt        : SymbolId(10): []
Symbol flags mismatch for "F":
after transform: SymbolId(9): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(13): SymbolFlags(Function)
Symbol redeclarations mismatch for "F":
after transform: SymbolId(9): [Span { start: 310, end: 311 }, Span { start: 336, end: 337 }]
rebuilt        : SymbolId(13): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 69, end: 70 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 69, end: 70 }
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(2) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target5.ts
Bindings mismatch:
after transform: ScopeId(1): ["E1", "value1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "value1"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target7.ts
Bindings mismatch:
after transform: ScopeId(0): ["N", "N2"]
rebuilt        : ScopeId(0): ["N"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "N":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(0): Span { start: 17, end: 18 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8)]
Symbol span mismatch for "D":
after transform: SymbolId(3): Span { start: 147, end: 148 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(6): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 147, end: 148 }
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(3) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target11.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 69, end: 70 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(11)]
rebuilt        : SymbolId(5): [ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(10)]
Symbol span mismatch for "C":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(6): Span { start: 69, end: 70 }
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(3) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target12.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "w"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["E", "x"]
rebuilt        : ScopeId(4): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 13, end: 14 }, Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "E":
after transform: SymbolId(2): [Span { start: 80, end: 81 }, Span { start: 109, end: 110 }, Span { start: 143, end: 144 }, Span { start: 191, end: 192 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "N":
after transform: SymbolId(7): SymbolFlags(NamespaceModule | ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(7): Span { start: 239, end: 240 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "N":
after transform: SymbolId(7): [Span { start: 239, end: 240 }, Span { start: 263, end: 264 }]
rebuilt        : SymbolId(10): []
Symbol flags mismatch for "F":
after transform: SymbolId(9): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(13): SymbolFlags(Function)
Symbol redeclarations mismatch for "F":
after transform: SymbolId(9): [Span { start: 310, end: 311 }, Span { start: 336, end: 337 }]
rebuilt        : SymbolId(13): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 69, end: 70 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol span mismatch for "D":
after transform: SymbolId(4): Span { start: 0, end: 0 }
rebuilt        : SymbolId(5): Span { start: 69, end: 70 }
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(2) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target5.ts
Bindings mismatch:
after transform: ScopeId(1): ["E1", "value1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "value1"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target7.ts
Bindings mismatch:
after transform: ScopeId(0): ["N", "N2"]
rebuilt        : ScopeId(0): ["N"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "N":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "N":
after transform: SymbolId(0): Span { start: 17, end: 18 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAmbientClassNameWithObject.ts
Symbol flags mismatch for "Object":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentCircularModules.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentMergedInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Foo", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentMergedModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelClodule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelEnumdule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelFundule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelIdentifier.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportDeclaredModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["M1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "M1":
after transform: SymbolId(0) "M1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["M1", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportNonVisibleType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportTypeMergedWithExportStarAsNamespace.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "Something":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/globalAugmentationModuleResolution.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithExtensions.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/nameWithRelativePaths.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/nodeModulesTsFiles.ts
Bindings mismatch:
after transform: ScopeId(0): ["add"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAmbientModule.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "C1", "C2", "C3", "_await", "_decorate", "_defineProperty", "dec", "f", "x", "y"]
rebuilt        : ScopeId(0): ["C", "C1", "C2", "C3", "_decorate", "_defineProperty", "f", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Symbol span mismatch for "C":
after transform: SymbolId(8): Span { start: 665, end: 666 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol span mismatch for "C":
after transform: SymbolId(12): Span { start: 0, end: 0 }
rebuilt        : SymbolId(10): Span { start: 665, end: 666 }
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : SymbolId(3) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : SymbolId(3) "f"
Reference symbol mismatch for "dec":
after transform: SymbolId(7) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.3.ts
The keyword 'await' is reserved
The keyword 'await' is reserved

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeAndNamespaceExportMerge.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/ambient.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "ns"]
rebuilt        : ScopeId(0): ["B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Unresolved reference IDs mismatch for "A":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/cjsImportInES2015.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_moduleSpecifier-isolatedModules.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_value.ts
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/implementsClause.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType.ts
Bindings mismatch:
after transform: ScopeId(0): ["type"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType2.ts
Bindings mismatch:
after transform: ScopeId(0): ["from"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType3.ts
Bindings mismatch:
after transform: ScopeId(0): ["from"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/mergedWithLocalValue.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/nestedNamespace.ts
Symbol flags mismatch for "types":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "types":
after transform: SymbolId(0): Span { start: 17, end: 22 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports_errors.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/typeQuery.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "AConstructor"]
rebuilt        : ScopeId(0): ["AConstructor"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeValueMerge1.ts
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["A", "B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Function | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(Function)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 12, end: 13 }
rebuilt        : SymbolId(0): Span { start: 33, end: 34 }
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 12, end: 13 }, Span { start: 33, end: 34 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeAlias)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 67, end: 68 }
rebuilt        : SymbolId(1): Span { start: 83, end: 84 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 67, end: 68 }, Span { start: 83, end: 84 }]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-1.ts
Symbol reference IDs mismatch for "m":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-2.ts
Unresolved reference IDs mismatch for "Math2d":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-3.ts
Symbol reference IDs mismatch for "m":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-4.ts
Unresolved reference IDs mismatch for "Math2d":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd1.ts
Unresolved reference IDs mismatch for "Foo":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd3.ts
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd4.ts
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxConstEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxConstEnumUsage.ts
Bindings mismatch:
after transform: ScopeId(1): ["Foo", "a", "b", "c"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxRestrictionsESM.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid03.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionParameterObjectRestAndInitializers.ts
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/functions/strictBindCallApply2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["ThisParameterType"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeFallback.5.ts
Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeIndirectReferenceToGlobalType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Iterator"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorYieldContextualType.ts
Bindings mismatch:
after transform: ScopeId(0): ["Directive", "_wrapAsyncGenerator", "canPickStepContinue", "createPickStep", "f1", "f2", "showStep"]
rebuilt        : ScopeId(0): ["Directive", "StepResult", "_wrapAsyncGenerator", "canPickStepContinue", "createPickStep", "f1", "f2", "showStep"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Bindings mismatch:
after transform: ScopeId(7): ["Back", "Cancel", "Directive", "LoadMore", "Noop"]
rebuilt        : ScopeId(5): ["Directive"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "Directive":
after transform: SymbolId(12): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Directive":
after transform: SymbolId(12): [ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(51), ReferenceId(54), ReferenceId(64), ReferenceId(93), ReferenceId(94), ReferenceId(108)]
rebuilt        : SymbolId(7): [ReferenceId(13), ReferenceId(15), ReferenceId(19), ReferenceId(20)]
Symbol redeclarations mismatch for "Directive":
after transform: SymbolId(12): [Span { start: 318, end: 327 }, Span { start: 381, end: 390 }]
rebuilt        : SymbolId(7): []
Symbol flags mismatch for "StepResult":
after transform: SymbolId(28): SymbolFlags(TypeAlias | ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "StepResult":
after transform: SymbolId(28): Span { start: 1257, end: 1267 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "StepResult":
after transform: SymbolId(28): [ReferenceId(25), ReferenceId(29), ReferenceId(36), ReferenceId(41), ReferenceId(46), ReferenceId(90), ReferenceId(96), ReferenceId(97)]
rebuilt        : SymbolId(12): [ReferenceId(23), ReferenceId(24), ReferenceId(33)]
Symbol redeclarations mismatch for "StepResult":
after transform: SymbolId(28): [Span { start: 1257, end: 1267 }, Span { start: 1321, end: 1331 }]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "step":
after transform: SymbolId(53): [ReferenceId(83), ReferenceId(84), ReferenceId(86)]
rebuilt        : SymbolId(24): [ReferenceId(27), ReferenceId(29)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(1) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(6) "f2"
rebuilt        : SymbolId(4) "f2"
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Partial", "Record", "Symbol", "require"]
rebuilt        : ["Symbol", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/generators/yieldStatementNoAsiAfterTransform.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes7.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes8.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/importBindingDefer.ts
Bindings mismatch:
after transform: ScopeId(0): ["defer"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/importBindingDefer2.ts
Bindings mismatch:
after transform: ScopeId(0): ["defer"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/importDeferComments.ts
Bindings mismatch:
after transform: ScopeId(0): ["aNs"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/importDeferDeclaration.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/inferFromBindingPattern.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(19), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(35)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(21)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(2) "f2"
rebuilt        : SymbolId(1) "f2"
Reference symbol mismatch for "f3":
after transform: SymbolId(4) "f3"
rebuilt        : SymbolId(2) "f3"
Reference symbol mismatch for "selectJohn":
after transform: SymbolId(19) "selectJohn"
rebuilt        : SymbolId(8) "selectJohn"
Reference symbol mismatch for "selectJohn":
after transform: SymbolId(19) "selectJohn"
rebuilt        : SymbolId(8) "selectJohn"
Reference symbol mismatch for "selectJohn":
after transform: SymbolId(19) "selectJohn"
rebuilt        : SymbolId(8) "selectJohn"
Reference symbol mismatch for "makeTuple":
after transform: SymbolId(28) "makeTuple"
rebuilt        : SymbolId(16) "makeTuple"
Reference symbol mismatch for "stringy":
after transform: SymbolId(31) "stringy"
rebuilt        : SymbolId(18) "stringy"
Reference symbol mismatch for "makeTuple":
after transform: SymbolId(28) "makeTuple"
rebuilt        : SymbolId(16) "makeTuple"
Reference symbol mismatch for "stringy":
after transform: SymbolId(31) "stringy"
rebuilt        : SymbolId(18) "stringy"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/genericAndNonGenericInterfaceWithTheSameName2.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "M2", "N"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeThreeInterfaces.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(13): Span { start: 474, end: 475 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeThreeInterfaces2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): []
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(4): []
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(6): []
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(8): []
Symbol flags mismatch for "M2":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(0): Span { start: 113, end: 115 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M2":
after transform: SymbolId(0): [Span { start: 113, end: 115 }, Span { start: 235, end: 237 }, Span { start: 518, end: 520 }, Span { start: 693, end: 695 }, Span { start: 892, end: 894 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "M3":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(10): Span { start: 541, end: 543 }
rebuilt        : SymbolId(11): Span { start: 0, end: 0 }
Symbol flags mismatch for "M3":
after transform: SymbolId(15): SymbolFlags(ValueModule)
rebuilt        : SymbolId(17): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(15): Span { start: 716, end: 718 }
rebuilt        : SymbolId(17): Span { start: 0, end: 0 }
Symbol flags mismatch for "M3":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(24): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(21): Span { start: 915, end: 917 }
rebuilt        : SymbolId(24): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeTwoInterfaces.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "M":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(10): Span { start: 396, end: 397 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeTwoInterfaces2.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(6): []
Symbol flags mismatch for "M2":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M2":
after transform: SymbolId(0): Span { start: 113, end: 115 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol redeclarations mismatch for "M2":
after transform: SymbolId(0): [Span { start: 113, end: 115 }, Span { start: 234, end: 236 }, Span { start: 412, end: 414 }, Span { start: 586, end: 588 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "M3":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(9): Span { start: 435, end: 437 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "M3":
after transform: SymbolId(14): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M3":
after transform: SymbolId(14): Span { start: 609, end: 611 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithConflictingPropertyNames2.ts
Bindings mismatch:
after transform: ScopeId(0): ["M", "M2", "M3"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithIndexers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(7): [ScopeId(8), ScopeId(10), ScopeId(12)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "M":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(6): Span { start: 412, end: 413 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(7): [ReferenceId(7)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(9): [ReferenceId(10)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "M":
after transform: SymbolId(8): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(8): Span { start: 509, end: 510 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(11)]
rebuilt        : SymbolId(10): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(11): [ReferenceId(16)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(13): [ReferenceId(13)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(15): [ReferenceId(17)]
rebuilt        : SymbolId(13): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(4): [ReferenceId(5)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Date", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoMergedInterfacesWithDifferingOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoMergedInterfacesWithDifferingOverloads2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "G":
after transform: SymbolId(8): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "G":
after transform: SymbolId(8): Span { start: 176, end: 177 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface03.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "n":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "n":
after transform: SymbolId(2): Span { start: 45, end: 46 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/derivedInterfaceDoesNotHideBaseSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersection.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C20", "C21", "C22", "C23", "C3", "C4", "C5", "C6", "C7", "CX", "EX", "NX", "_defineProperty", "fx"]
rebuilt        : ScopeId(0): ["C1", "C2", "C20", "C21", "C22", "C23", "C3", "C4", "C5", "C6", "C7", "CX", "Constructor", "_defineProperty", "fx"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Symbol flags mismatch for "CX":
after transform: SymbolId(27): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(18): SymbolFlags(Class)
Symbol reference IDs mismatch for "CX":
after transform: SymbolId(27): [ReferenceId(26)]
rebuilt        : SymbolId(18): []
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Reference symbol mismatch for "Constructor":
after transform: SymbolId(15) "Constructor"
rebuilt        : SymbolId(1) "Constructor"
Unresolved references mismatch:
after transform: ["Partial", "Readonly", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatHidesBaseProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallAndConstructSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallSignaturesThatHidesBaseSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallSignaturesThatHidesBaseSignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithConstructSignaturesThatHidesBaseSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithConstructSignaturesThatHidesBaseSignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithOverloadedCallAndConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithPropertyOfEveryType.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithSpecializedCallAndConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/AmbientModuleAndNonAmbientClassWithSameNameAndCommonRoot.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticFunctionAndNonExportedFunctionThatShareAName.ts
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 6, end: 11 }, Span { start: 135, end: 140 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "A":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(4): Span { start: 226, end: 227 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol flags mismatch for "Point":
after transform: SymbolId(5): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(7): [ReferenceId(7), ReferenceId(8), ReferenceId(9)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(5): [Span { start: 247, end: 252 }, Span { start: 399, end: 404 }]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticVariableAndNonExportedVarThatShareAName.ts
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 6, end: 11 }, Span { start: 124, end: 129 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "A":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(4): Span { start: 200, end: 201 }
rebuilt        : SymbolId(6): Span { start: 0, end: 0 }
Symbol flags mismatch for "Point":
after transform: SymbolId(5): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(18)]
rebuilt        : SymbolId(8): [ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(14)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(5): [Span { start: 221, end: 226 }, Span { start: 362, end: 367 }]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/EnumAndModuleWithSameNameAndCommonRoot.ts
Bindings mismatch:
after transform: ScopeId(1): ["Blue", "Red", "enumdule"]
rebuilt        : ScopeId(1): ["enumdule"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "enumdule":
after transform: SymbolId(0): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "enumdule":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
Symbol redeclarations mismatch for "enumdule":
after transform: SymbolId(0): [Span { start: 5, end: 13 }, Span { start: 40, end: 48 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/FunctionAndModuleWithSameNameAndDifferentCommonRoot.ts
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndEnumWithSameNameAndCommonRoot.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["Blue", "Red", "enumdule"]
rebuilt        : ScopeId(4): ["enumdule"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "enumdule":
after transform: SymbolId(0): SymbolFlags(RegularEnum | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "enumdule":
after transform: SymbolId(0): Span { start: 7, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "enumdule":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(12), ReferenceId(13), ReferenceId(14)]
Symbol redeclarations mismatch for "enumdule":
after transform: SymbolId(0): [Span { start: 7, end: 15 }, Span { start: 118, end: 126 }]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedClassesOfTheSameName.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 7, end: 8 }, Span { start: 90, end: 91 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "X":
after transform: SymbolId(5): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "X":
after transform: SymbolId(5): Span { start: 294, end: 295 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "X":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(21), ReferenceId(22), ReferenceId(31), ReferenceId(32)]
rebuilt        : SymbolId(8): [ReferenceId(22), ReferenceId(23), ReferenceId(33), ReferenceId(34)]
Symbol redeclarations mismatch for "X":
after transform: SymbolId(5): [Span { start: 294, end: 295 }, Span { start: 366, end: 367 }]
rebuilt        : SymbolId(8): []
Symbol flags mismatch for "Y":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(6): Span { start: 296, end: 297 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }
Symbol flags mismatch for "Z":
after transform: SymbolId(7): SymbolFlags(ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(7): Span { start: 298, end: 299 }
rebuilt        : SymbolId(12): Span { start: 0, end: 0 }
Symbol flags mismatch for "Y":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Y":
after transform: SymbolId(9): Span { start: 388, end: 389 }
rebuilt        : SymbolId(16): Span { start: 0, end: 0 }
Symbol flags mismatch for "Z":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Z":
after transform: SymbolId(10): Span { start: 414, end: 415 }
rebuilt        : SymbolId(18): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedInterfacesOfTheSameName.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "l", "p"]
rebuilt        : ScopeId(0): ["l", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(13), ScopeId(17)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedLocalVarsOfTheSameName.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedInterfacesOfTheSameName.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "l", "p"]
rebuilt        : ScopeId(0): ["l", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(14), ScopeId(18)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedModulesOfTheSameName.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesWithTheSameNameAndDifferentCommonRoot.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "Root":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Root":
after transform: SymbolId(0): Span { start: 7, end: 11 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "A":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 32, end: 33 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Symbol flags mismatch for "Utils":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Utils":
after transform: SymbolId(3): Span { start: 148, end: 153 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesWithTheSameNameAndSameCommonRoot.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol flags mismatch for "Utils":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Utils":
after transform: SymbolId(2): Span { start: 103, end: 108 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/exportCodeGen.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/importStatements.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/nameCollision.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWhichExtendsInterfaceWithInaccessibleType.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithAccessibleTypesInTypeParameterConstraintsClassHeritageListMemberTypeAnnotations.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithInaccessibleTypeInIndexerTypeAnnotations.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithInaccessibleTypeInTypeParameterConstraint.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithAccessibleTypesInParameterAndReturnTypeAnnotation.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4), ReferenceId(9)]
rebuilt        : SymbolId(4): [ReferenceId(8), ReferenceId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithInaccessibleTypesInParameterTypeAnnotation.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithInaccessibleTypesInReturnTypeAnnotation.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithAccessibleTypesInTypeParameterConstraintsClassHeritageListMemberTypeAnnotations.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithInaccessibleTypeInIndexerTypeAnnotations.ts
Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithInaccessibleTypeInTypeParameterConstraint.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportModuleWithAccessibleTypesOnItsExportedMembers.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportObjectLiteralAndObjectTypeLiteralWithAccessibleTypesInMemberTypeAnnotations.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportObjectLiteralAndObjectTypeLiteralWithAccessibleTypesInNestedMemberTypeAnnotations.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableOfGenericTypeWithInaccessibleTypeAsTypeArgument.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableWithAccessibleTypeInTypeAnnotation.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableWithInaccessibleTypeInTypeAnnotation.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/exportImportAlias.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/importAliasIdentifiers.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["_clodule"]
rebuilt        : ScopeId(6): ["Point", "_clodule"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(6): []
Bindings mismatch:
after transform: ScopeId(8): ["_fundule"]
rebuilt        : ScopeId(8): ["Point", "_fundule"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(8): []
Symbol flags mismatch for "moduleA":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "moduleA":
after transform: SymbolId(0): Span { start: 7, end: 14 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "moduleA":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(6)]
Symbol flags mismatch for "clodule":
after transform: SymbolId(6): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol reference IDs mismatch for "clodule":
after transform: SymbolId(6): [ReferenceId(4), ReferenceId(6), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(7): [ReferenceId(8), ReferenceId(9)]
Symbol redeclarations mismatch for "clodule":
after transform: SymbolId(6): [Span { start: 219, end: 226 }, Span { start: 257, end: 264 }]
rebuilt        : SymbolId(7): []
Symbol flags mismatch for "Point":
after transform: SymbolId(7): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(7): Span { start: 288, end: 293 }
rebuilt        : SymbolId(9): Span { start: 340, end: 352 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(7): [ReferenceId(3)]
rebuilt        : SymbolId(9): []
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(7): [Span { start: 288, end: 293 }, Span { start: 340, end: 352 }]
rebuilt        : SymbolId(9): []
Symbol flags mismatch for "fundule":
after transform: SymbolId(9): SymbolFlags(Function | ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(Function)
Symbol reference IDs mismatch for "fundule":
after transform: SymbolId(9): [ReferenceId(8), ReferenceId(10), ReferenceId(17), ReferenceId(18)]
rebuilt        : SymbolId(10): [ReferenceId(10), ReferenceId(11)]
Symbol redeclarations mismatch for "fundule":
after transform: SymbolId(9): [Span { start: 490, end: 497 }, Span { start: 539, end: 546 }]
rebuilt        : SymbolId(10): []
Symbol flags mismatch for "Point":
after transform: SymbolId(10): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(10): Span { start: 570, end: 575 }
rebuilt        : SymbolId(12): Span { start: 622, end: 634 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(10): [ReferenceId(7)]
rebuilt        : SymbolId(12): []
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(10): [Span { start: 570, end: 575 }, Span { start: 622, end: 634 }]
rebuilt        : SymbolId(12): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleBody/moduleWithStatementsOfEveryKind.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/asiPreventsParsingAsNamespace03.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "container":
after transform: SymbolId(2): SymbolFlags(ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "container":
after transform: SymbolId(2): Span { start: 49, end: 58 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/asiPreventsParsingAsNamespace05.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/instantiatedModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/nestedModules.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/nonInstantiatedModule.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/reExportAliasMakesInstantiated.ts
Bindings mismatch:
after transform: ScopeId(0): ["mod1", "mod2", "pack1", "pack2", "test1", "test2"]
rebuilt        : ScopeId(0): ["test1", "test2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "pack2":
after transform: SymbolId(2) "pack2"
rebuilt        : <None>
Reference symbol mismatch for "mod2":
after transform: SymbolId(7) "mod2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["mod1"]
rebuilt        : ["mod2", "pack2"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassImplementsGenericsSerialization.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Uint8Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag16.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag18.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag19.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag20.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTwoLineTypedef.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTag.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "Promise"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/seeTag1.ts
Bindings mismatch:
after transform: ScopeId(0): ["NS", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescript.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescriptComments1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescriptComments2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeParameterExtendsUnionConstraintDistributed.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty1.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty10.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Button", "JSX", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
rebuilt        : ScopeId(0): ["Button", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty11.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Button", "JSX", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
rebuilt        : ScopeId(0): ["Button", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty12.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Symbol reference IDs mismatch for "Button":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty16.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Test", "_Fragment", "_jsx", "_jsxFileName", "_jsxs"]
rebuilt        : ScopeId(0): ["Test", "_Fragment", "_jsx", "_jsxFileName", "_jsxs"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "Foo":
after transform: SymbolId(4) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(4) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(4) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(4) "Foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : ["Foo"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty3.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty6.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty8.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxIntersectionElementPropsType.tsx
Bindings mismatch:
after transform: ScopeId(0): ["C", "Component", "JSX", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "x", "y"]
rebuilt        : ScopeId(0): ["C", "Component", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Component":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxSubtleSkipContextSensitiveBug.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Exclude", "Promise", "arguments"]
rebuilt        : ["arguments"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxUnionSFXContextualTypeInferredCorrectly.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxAndJsxFragPragmaOverridesCompilerOptions.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Fragment", "_jsxFileName", "createElement"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryOverridesCompilerOption.tsx
Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "p"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxParsingError4.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "a", "b"]
rebuilt        : ScopeId(0): ["_jsxFileName", "a", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxReactTestSuite.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Child", "Component", "Composite", "Composite2", "Namespace", "React", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "bar", "foo", "hasOwnProperty", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Symbol flags mismatch for "x":
after transform: SymbolId(9): SymbolFlags(FunctionScopedVariable | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "x":
after transform: SymbolId(9): Span { start: 231, end: 236 }
rebuilt        : SymbolId(3): Span { start: 537, end: 538 }
Symbol redeclarations mismatch for "x":
after transform: SymbolId(9): [Span { start: 231, end: 236 }, Span { start: 537, end: 538 }]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : <None>
Reference symbol mismatch for "bar":
after transform: SymbolId(7) "bar"
rebuilt        : <None>
Reference symbol mismatch for "Composite":
after transform: SymbolId(2) "Composite"
rebuilt        : <None>
Reference symbol mismatch for "Composite":
after transform: SymbolId(2) "Composite"
rebuilt        : <None>
Reference symbol mismatch for "Composite2":
after transform: SymbolId(3) "Composite2"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Namespace":
after transform: SymbolId(5) "Namespace"
rebuilt        : <None>
Reference symbol mismatch for "Namespace":
after transform: SymbolId(5) "Namespace"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(8) "y"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(8) "y"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "Child":
after transform: SymbolId(4) "Child"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Child", "Component", "Composite", "Composite2", "Namespace", "bar", "foo", "require", "y", "z"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformNestedSelfClosingChild.tsx
Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsx", "_jsxFileName", "_jsxs"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName", "_jsxs"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution16.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution8.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxCorrectlyParseLessThanComparison1.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "ShortDetails", "_jsxFileName"]
rebuilt        : ScopeId(0): ["ShortDetails", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDefaultAttributesResolution1.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDefaultAttributesResolution2.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName4.tsx
Bindings mismatch:
after transform: ScopeId(0): ["CustomTag", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["CustomTag", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName6.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "foo", "t"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "foo", "t"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Dotted", "JSX", "Other", "_jsxFileName", "_reactJsxRuntime", "a", "b", "d", "e", "foundFirst"]
rebuilt        : ScopeId(0): ["Dotted", "Other", "_jsxFileName", "_reactJsxRuntime", "a", "b", "d", "e", "foundFirst"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Dotted":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Dotted":
after transform: SymbolId(4): Span { start: 161, end: 167 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution13.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "obj1"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "obj1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution14.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "obj1"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "obj1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution17.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution19.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "MyClass"]
rebuilt        : ScopeId(0): ["MyClass"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution5.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit1.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "SomeClass", "_jsxFileName", "_reactJsxRuntime", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
rebuilt        : ScopeId(0): ["SomeClass", "_jsxFileName", "_reactJsxRuntime", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmitSpreadAttribute.ts
Bindings mismatch:
after transform: ScopeId(0): ["React", "T1", "T10", "T11", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "__proto__", "_jsxFileName", "_objectSpread"]
rebuilt        : ScopeId(0): ["T1", "T10", "T11", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(32) "__proto__"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(32) "__proto__"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React", "__proto__"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxExternalModuleEmit2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Main", "React", "_jsxFileName", "_objectSpread"]
rebuilt        : ScopeId(0): ["Main", "_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(1) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(1) "Foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo", "React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxFragmentPreserveEmit.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxFragmentReactEmit.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType7.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType8.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType9.tsx
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxInArrowFunction.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedAttributeName1.tsx
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedAttributeName2.tsx
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedTagName1.tsx
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxOpeningClosingNames.tsx
Bindings mismatch:
after transform: ScopeId(0): ["A", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "A":
after transform: SymbolId(2) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["A", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxParseTests1.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxParseTests2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxPreserveEmit1.tsx
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxPreserveEmit3.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter1.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "MyComp":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter2.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "MyComp":
after transform: SymbolId(2): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit1.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "SomeClass", "_jsxFileName", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
rebuilt        : ScopeId(0): ["SomeClass", "_jsxFileName", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "_objectSpread", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit3.tsx
Bindings mismatch:
after transform: ScopeId(0): ["Bar", "Foo", "JSX", "React", "_jsxFileName", "baz"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(3) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Bar", "Foo", "React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit5.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit6.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitEntities.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitNesting.tsx
Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "ctrl", "model", "render", "vdom"]
rebuilt        : ScopeId(0): ["_jsxFileName", "render"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitSpreadAttribute.ts
Bindings mismatch:
after transform: ScopeId(0): ["T1", "T10", "T11", "T12", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "__proto__", "_jsx", "_jsxFileName", "_objectSpread"]
rebuilt        : ScopeId(0): ["T1", "T10", "T11", "T12", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "_jsx", "_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "__proto__":
after transform: SymbolId(36) "__proto__"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(36) "__proto__"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["__proto__"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitWhitespace.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "p"]
rebuilt        : ScopeId(0): ["_jsxFileName", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitWhitespace2.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution11.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution13.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution15.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution3.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution7.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution8.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution9.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadChildren.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "Todo", "TodoList", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["Todo", "TodoList", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadChildrenInvalidType.tsx
Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "Todo", "TodoList", "TodoListNoError", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["Todo", "TodoList", "TodoListNoError", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload2.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Reference symbol mismatch for "OneThing":
after transform: SymbolId(1) "OneThing"
rebuilt        : SymbolId(3) "OneThing"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload3.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(18), SymbolId(19), SymbolId(20)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "ZeroThingOrTwoThing":
after transform: SymbolId(1) "ZeroThingOrTwoThing"
rebuilt        : SymbolId(3) "ZeroThingOrTwoThing"
Reference symbol mismatch for "ZeroThingOrTwoThing":
after transform: SymbolId(1) "ZeroThingOrTwoThing"
rebuilt        : SymbolId(3) "ZeroThingOrTwoThing"
Reference symbol mismatch for "ZeroThingOrTwoThing":
after transform: SymbolId(1) "ZeroThingOrTwoThing"
rebuilt        : SymbolId(3) "ZeroThingOrTwoThing"
Reference symbol mismatch for "ZeroThingOrTwoThing":
after transform: SymbolId(1) "ZeroThingOrTwoThing"
rebuilt        : SymbolId(3) "ZeroThingOrTwoThing"
Reference symbol mismatch for "ZeroThingOrTwoThing":
after transform: SymbolId(1) "ZeroThingOrTwoThing"
rebuilt        : SymbolId(3) "ZeroThingOrTwoThing"
Reference symbol mismatch for "ThreeThing":
after transform: SymbolId(10) "ThreeThing"
rebuilt        : SymbolId(12) "ThreeThing"
Reference symbol mismatch for "ThreeThing":
after transform: SymbolId(10) "ThreeThing"
rebuilt        : SymbolId(12) "ThreeThing"
Reference symbol mismatch for "ThreeThing":
after transform: SymbolId(10) "ThreeThing"
rebuilt        : SymbolId(12) "ThreeThing"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload6.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Symbol span mismatch for "MainButton":
after transform: SymbolId(8): Span { start: 489, end: 499 }
rebuilt        : SymbolId(6): Span { start: 686, end: 696 }
Symbol redeclarations mismatch for "MainButton":
after transform: SymbolId(8): [Span { start: 489, end: 499 }, Span { start: 556, end: 566 }, Span { start: 619, end: 629 }, Span { start: 686, end: 696 }]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["JSX", "console"]
rebuilt        : ["console"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentWithDefaultTypeParameter1.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments1.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(12), SymbolId(15), SymbolId(18), SymbolId(23), SymbolId(26), SymbolId(28), SymbolId(29), SymbolId(30)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(12), SymbolId(15), SymbolId(18), SymbolId(20)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(5): []
Reference symbol mismatch for "ComponentWithTwoAttributes":
after transform: SymbolId(1) "ComponentWithTwoAttributes"
rebuilt        : SymbolId(3) "ComponentWithTwoAttributes"
Reference symbol mismatch for "ComponentWithTwoAttributes":
after transform: SymbolId(1) "ComponentWithTwoAttributes"
rebuilt        : SymbolId(3) "ComponentWithTwoAttributes"
Reference symbol mismatch for "Link":
after transform: SymbolId(12) "Link"
rebuilt        : SymbolId(10) "Link"
Reference symbol mismatch for "Link":
after transform: SymbolId(12) "Link"
rebuilt        : SymbolId(10) "Link"
Reference symbol mismatch for "InferParamComponent":
after transform: SymbolId(23) "InferParamComponent"
rebuilt        : SymbolId(18) "InferParamComponent"
Unresolved references mismatch:
after transform: ["Array", "JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments3.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(8), SymbolId(20), SymbolId(25), SymbolId(31), SymbolId(32), SymbolId(33)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(16), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "OverloadComponent":
after transform: SymbolId(1) "OverloadComponent"
rebuilt        : SymbolId(3) "OverloadComponent"
Reference symbol mismatch for "Link":
after transform: SymbolId(20) "Link"
rebuilt        : SymbolId(16) "Link"
Reference symbol mismatch for "Link":
after transform: SymbolId(20) "Link"
rebuilt        : SymbolId(16) "Link"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments5.tsx
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(15), SymbolId(22), SymbolId(23), SymbolId(24)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(9), SymbolId(11), SymbolId(13)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : SymbolId(3) "Component"
Reference symbol mismatch for "ComponentSpecific":
after transform: SymbolId(9) "ComponentSpecific"
rebuilt        : SymbolId(9) "ComponentSpecific"
Reference symbol mismatch for "ComponentSpecific1":
after transform: SymbolId(12) "ComponentSpecific1"
rebuilt        : SymbolId(11) "ComponentSpecific1"
Reference symbol mismatch for "ComponentSpecific":
after transform: SymbolId(9) "ComponentSpecific"
rebuilt        : SymbolId(9) "ComponentSpecific"
Reference symbol mismatch for "ComponentSpecific":
after transform: SymbolId(9) "ComponentSpecific"
rebuilt        : SymbolId(9) "ComponentSpecific"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxTypeArgumentsJsxPreserveOutput.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionTypeComponent1.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(5), ReferenceId(7), ReferenceId(10), ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/allowImportingTypesDtsExtension.ts
Bindings mismatch:
after transform: ScopeId(0): ["User", "getUser", "user"]
rebuilt        : ScopeId(0): ["getUser", "user"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerDirectoryModule.ts
Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerImportESM.ts
Bindings mismatch:
after transform: ScopeId(0): ["esm"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/customConditions.ts
Bindings mismatch:
after transform: ScopeId(0): ["_"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/extensionLoadingPriority.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "dir"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeImportType1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTypeOnlyImport1.ts
Bindings mismatch:
after transform: ScopeId(0): ["Default", "Import", "ImportRelative", "Require", "RequireRelative"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolvesWithoutExportsDiagnostic1.ts
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/scopedPackages.ts
Bindings mismatch:
after transform: ScopeId(0): ["x", "y", "z"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/scopedPackagesClassic.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/selfNameModuleAugmentation.ts
Bindings mismatch:
after transform: ScopeId(0): ["simple"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/typesVersions.emptyTypes.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/typesVersions.justIndex.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/esmModuleExports2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Foo2", "Foo3", "Oops"]
rebuilt        : ScopeId(0): ["Foo", "Foo2", "Foo3"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesTypeModeDeclarationEmit.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportTypeModeDeclarationEmit1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["RequireInterface"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["RequireInterface"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface", "RequireInterface"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit6.ts
Symbol reference IDs mismatch for "obj":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit7.ts
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/nonjsExtensions/declarationFileForHtmlFileWithinDeclarationFile.ts
Unresolved references mismatch:
after transform: ["Document", "Element", "HTMLElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/nonjsExtensions/declarationFileForHtmlImport.ts
Unresolved references mismatch:
after transform: ["Document", "Element", "HTMLElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/override/override10.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(2): [ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration16.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration17.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Enumerator":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration19.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration20.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum1.ts
Bindings mismatch:
after transform: ScopeId(1): ["IsIndexer", "IsNumberIndexer", "IsStringIndexer", "None", "SignatureFlags"]
rebuilt        : ScopeId(1): ["SignatureFlags"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum2.ts
Bindings mismatch:
after transform: ScopeId(1): ["IsIndexer", "IsNumberIndexer", "IsStringIndexer", "None", "SignatureFlags"]
rebuilt        : ScopeId(1): ["SignatureFlags"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum3.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum6.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration1.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "E", "Foo"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration3.ts
Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration5.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration6.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserInterfaceKeywordInEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "interface"]
rebuilt        : ScopeId(1): ["Bar"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Bar":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserInterfaceKeywordInEnum1.ts
Bindings mismatch:
after transform: ScopeId(1): ["Bar", "interface"]
rebuilt        : ScopeId(1): ["Bar"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Bar":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IncompleteMemberVariables/parserErrorRecovery_IncompleteMemberVariable1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Shapes":
after transform: SymbolId(1): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Shapes":
after transform: SymbolId(1): Span { start: 75, end: 81 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnPropertySignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration8.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature10.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature11.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature12.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModule1.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration11.ts
Bindings mismatch:
after transform: ScopeId(0): ["string", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "string":
after transform: SymbolId(0) "string"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["string"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration12.ts
Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration4.ts
Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration6.ts
Bindings mismatch:
after transform: ScopeId(0): ["number"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration7.ts
Bindings mismatch:
after transform: ScopeId(0): ["number"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration8.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration9.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature10.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature11.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature12.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature6.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature7.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature9.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser643728.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645484.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression6.ts
Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolIndexer1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserExportAsFunctionIdentifier.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserNotRegex2.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "x"]
rebuilt        : ScopeId(0): ["x"]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "B":
after transform: SymbolId(1) "B"
rebuilt        : <None>
Reference symbol mismatch for "C":
after transform: SymbolId(2) "C"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A", "B", "C"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserOptionalTypeMembers1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserOverloadOnConstants1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLCanvasElement", "HTMLDivElement", "HTMLElement", "HTMLSpanElement"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolIndexer1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty4.ts
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty9.ts
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/salsa/inferingFromAny.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(8), SymbolId(12), SymbolId(15), SymbolId(18), SymbolId(21), SymbolId(24), SymbolId(27), SymbolId(30), SymbolId(33), SymbolId(36), SymbolId(40), SymbolId(44), SymbolId(50), SymbolId(53), SymbolId(56), SymbolId(61), SymbolId(66)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36), SymbolId(38)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/salsa/propertyAssignmentUseParentType1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/salsa/requireAssertsFromTypescript.ts
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/salsa/sourceFileMergeWithFunction.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment30.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerEnum1.ts
Bindings mismatch:
after transform: ScopeId(1): ["CodeGenTarget", "ES3", "ES5"]
rebuilt        : ScopeId(1): ["CodeGenTarget"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "CodeGenTarget":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInitializer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(11)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(17), ReferenceId(18), ReferenceId(20)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(19)]
Symbol reference IDs mismatch for "F":
after transform: SymbolId(4): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(21), ReferenceId(22)]
Symbol flags mismatch for "M":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(6): Span { start: 198, end: 199 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(6): [ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(35), ReferenceId(36)]
rebuilt        : SymbolId(5): [ReferenceId(11), ReferenceId(12), ReferenceId(23), ReferenceId(24)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(14)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithInitializer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(13)]
rebuilt        : SymbolId(2): [ReferenceId(18)]
Symbol flags mismatch for "M":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(6): Span { start: 198, end: 199 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.15.ts
Bindings mismatch:
after transform: ScopeId(1): ["_", "_usingCtx"]
rebuilt        : ScopeId(3): ["_usingCtx"]
Bindings mismatch:
after transform: ScopeId(3): []
rebuilt        : ScopeId(4): ["_"]
Symbol scope ID mismatch for "_":
after transform: SymbolId(1): ScopeId(1)
rebuilt        : SymbolId(5): ScopeId(4)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.ts
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(2), ScopeId(15), ScopeId(16), ScopeId(18)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12)]
Scope parent mismatch:
after transform: ScopeId(4): Some(ScopeId(2))
rebuilt        : ScopeId(8): Some(ScopeId(5))
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(4)]
rebuilt        : ScopeId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "N", "_af", "_ag", "_asyncToGenerator", "_awaitAsyncGenerator", "_defineProperty", "_usingCtx2", "_usingCtx20", "_usingCtx23", "_usingCtx24", "_usingCtx25", "_usingCtx26", "_usingCtx27", "_usingCtx28", "_usingCtx29", "_usingCtx30", "_usingCtx6", "_wrapAsyncGenerator", "a", "af", "ag", "d1", "f", "g"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "N", "_af", "_ag", "_asyncToGenerator", "_awaitAsyncGenerator", "_defineProperty", "_usingCtx2", "_usingCtx20", "_usingCtx21", "_usingCtx22", "_usingCtx23", "_usingCtx24", "_usingCtx25", "_usingCtx26", "_usingCtx27", "_usingCtx28", "_usingCtx29", "_usingCtx30", "_usingCtx6", "_wrapAsyncGenerator", "a", "af", "ag", "d1", "f", "g"]
Bindings mismatch:
after transform: ScopeId(2): ["_usingCtx", "d2"]
rebuilt        : ScopeId(1): ["_usingCtx"]
Bindings mismatch:
after transform: ScopeId(71): []
rebuilt        : ScopeId(2): ["d2"]
Bindings mismatch:
after transform: ScopeId(4): ["_usingCtx3", "d3"]
rebuilt        : ScopeId(9): ["_usingCtx3"]
Bindings mismatch:
after transform: ScopeId(75): []
rebuilt        : ScopeId(10): ["d3"]
Bindings mismatch:
after transform: ScopeId(6): ["_usingCtx4", "d4"]
rebuilt        : ScopeId(15): ["_usingCtx4"]
Bindings mismatch:
after transform: ScopeId(81): []
rebuilt        : ScopeId(16): ["d4"]
Bindings mismatch:
after transform: ScopeId(8): ["_usingCtx5", "d5"]
rebuilt        : ScopeId(23): ["_usingCtx5"]
Bindings mismatch:
after transform: ScopeId(85): []
rebuilt        : ScopeId(24): ["d5"]
Bindings mismatch:
after transform: ScopeId(70): ["_usingCtx21", "_usingCtx22"]
rebuilt        : ScopeId(29): []
Bindings mismatch:
after transform: ScopeId(10): ["_usingCtx7", "d6"]
rebuilt        : ScopeId(31): ["_usingCtx7"]
Bindings mismatch:
after transform: ScopeId(94): []
rebuilt        : ScopeId(32): ["d6"]
Bindings mismatch:
after transform: ScopeId(15): ["_usingCtx8", "d8"]
rebuilt        : ScopeId(44): ["_usingCtx8"]
Bindings mismatch:
after transform: ScopeId(98): []
rebuilt        : ScopeId(45): ["d8"]
Bindings mismatch:
after transform: ScopeId(13): ["_usingCtx9", "d7"]
rebuilt        : ScopeId(46): ["_usingCtx9"]
Bindings mismatch:
after transform: ScopeId(102): []
rebuilt        : ScopeId(47): ["d7"]
Bindings mismatch:
after transform: ScopeId(19): ["_usingCtx11", "d10"]
rebuilt        : ScopeId(56): ["_usingCtx11"]
Bindings mismatch:
after transform: ScopeId(110): []
rebuilt        : ScopeId(57): ["d10"]
Bindings mismatch:
after transform: ScopeId(21): ["_usingCtx12", "d11"]
rebuilt        : ScopeId(62): ["_usingCtx12"]
Bindings mismatch:
after transform: ScopeId(114): []
rebuilt        : ScopeId(63): ["d11"]
Bindings mismatch:
after transform: ScopeId(23): ["_usingCtx13", "d12", "v"]
rebuilt        : ScopeId(68): ["_usingCtx13", "v"]
Bindings mismatch:
after transform: ScopeId(118): []
rebuilt        : ScopeId(69): ["d12"]
Bindings mismatch:
after transform: ScopeId(25): ["_usingCtx14", "d13"]
rebuilt        : ScopeId(75): ["_usingCtx14"]
Bindings mismatch:
after transform: ScopeId(122): []
rebuilt        : ScopeId(76): ["d13"]
Bindings mismatch:
after transform: ScopeId(27): ["_usingCtx15", "d14"]
rebuilt        : ScopeId(81): ["_usingCtx15"]
Bindings mismatch:
after transform: ScopeId(127): []
rebuilt        : ScopeId(82): ["d14"]
Bindings mismatch:
after transform: ScopeId(29): ["_usingCtx16", "d15"]
rebuilt        : ScopeId(88): ["_usingCtx16"]
Bindings mismatch:
after transform: ScopeId(131): []
rebuilt        : ScopeId(89): ["d15"]
Bindings mismatch:
after transform: ScopeId(32): ["_usingCtx17", "d16"]
rebuilt        : ScopeId(95): ["_usingCtx17"]
Bindings mismatch:
after transform: ScopeId(136): []
rebuilt        : ScopeId(96): ["d16"]
Bindings mismatch:
after transform: ScopeId(35): ["_usingCtx18", "d17"]
rebuilt        : ScopeId(102): ["_usingCtx18"]
Bindings mismatch:
after transform: ScopeId(140): []
rebuilt        : ScopeId(103): ["d17"]
Bindings mismatch:
after transform: ScopeId(37): ["_N", "_usingCtx19", "d18"]
rebuilt        : ScopeId(108): ["_N", "_usingCtx19"]
Bindings mismatch:
after transform: ScopeId(144): []
rebuilt        : ScopeId(109): ["d18"]
Symbol scope ID mismatch for "d2":
after transform: SymbolId(2): ScopeId(2)
rebuilt        : SymbolId(7): ScopeId(2)
Symbol scope ID mismatch for "d3":
after transform: SymbolId(4): ScopeId(4)
rebuilt        : SymbolId(12): ScopeId(10)
Symbol scope ID mismatch for "d4":
after transform: SymbolId(6): ScopeId(6)
rebuilt        : SymbolId(16): ScopeId(16)
Symbol scope ID mismatch for "d5":
after transform: SymbolId(8): ScopeId(8)
rebuilt        : SymbolId(21): ScopeId(24)
Symbol scope ID mismatch for "d6":
after transform: SymbolId(10): ScopeId(10)
rebuilt        : SymbolId(27): ScopeId(32)
Symbol scope ID mismatch for "d7":
after transform: SymbolId(12): ScopeId(13)
rebuilt        : SymbolId(35): ScopeId(47)
Symbol scope ID mismatch for "d8":
after transform: SymbolId(13): ScopeId(15)
rebuilt        : SymbolId(37): ScopeId(45)
Symbol scope ID mismatch for "d10":
after transform: SymbolId(15): ScopeId(19)
rebuilt        : SymbolId(40): ScopeId(57)
Symbol scope ID mismatch for "d11":
after transform: SymbolId(16): ScopeId(21)
rebuilt        : SymbolId(43): ScopeId(63)
Symbol scope ID mismatch for "d12":
after transform: SymbolId(18): ScopeId(23)
rebuilt        : SymbolId(47): ScopeId(69)
Symbol scope ID mismatch for "d13":
after transform: SymbolId(19): ScopeId(25)
rebuilt        : SymbolId(50): ScopeId(76)
Symbol scope ID mismatch for "d14":
after transform: SymbolId(20): ScopeId(27)
rebuilt        : SymbolId(53): ScopeId(82)
Symbol scope ID mismatch for "d15":
after transform: SymbolId(21): ScopeId(29)
rebuilt        : SymbolId(56): ScopeId(89)
Symbol scope ID mismatch for "d16":
after transform: SymbolId(23): ScopeId(32)
rebuilt        : SymbolId(60): ScopeId(96)
Symbol scope ID mismatch for "d17":
after transform: SymbolId(25): ScopeId(35)
rebuilt        : SymbolId(64): ScopeId(103)
Symbol span mismatch for "N":
after transform: SymbolId(26): Span { start: 1385, end: 1386 }
rebuilt        : SymbolId(66): Span { start: 0, end: 0 }
Symbol scope ID mismatch for "d18":
after transform: SymbolId(27): ScopeId(37)
rebuilt        : SymbolId(69): ScopeId(109)
Symbol scope ID mismatch for "_usingCtx21":
after transform: SymbolId(90): ScopeId(70)
rebuilt        : SymbolId(74): ScopeId(0)
Symbol scope ID mismatch for "_usingCtx22":
after transform: SymbolId(92): ScopeId(70)
rebuilt        : SymbolId(78): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.11.ts
Bindings mismatch:
after transform: ScopeId(3): ["_usingCtx", "x"]
rebuilt        : ScopeId(3): ["_usingCtx"]
Bindings mismatch:
after transform: ScopeId(12): []
rebuilt        : ScopeId(4): ["x"]
Bindings mismatch:
after transform: ScopeId(5): ["_usingCtx3", "x"]
rebuilt        : ScopeId(9): ["_usingCtx3"]
Bindings mismatch:
after transform: ScopeId(16): []
rebuilt        : ScopeId(10): ["x"]
Bindings mismatch:
after transform: ScopeId(7): ["_usingCtx4", "x"]
rebuilt        : ScopeId(15): ["_usingCtx4"]
Bindings mismatch:
after transform: ScopeId(20): []
rebuilt        : ScopeId(16): ["x"]
Bindings mismatch:
after transform: ScopeId(9): ["_usingCtx5", "x", "y"]
rebuilt        : ScopeId(21): ["_usingCtx5", "y"]
Bindings mismatch:
after transform: ScopeId(24): []
rebuilt        : ScopeId(22): ["x"]
Bindings mismatch:
after transform: ScopeId(11): ["_usingCtx6", "x", "y"]
rebuilt        : ScopeId(27): ["_usingCtx6", "y"]
Bindings mismatch:
after transform: ScopeId(28): []
rebuilt        : ScopeId(28): ["x"]
Symbol scope ID mismatch for "x":
after transform: SymbolId(2): ScopeId(3)
rebuilt        : SymbolId(5): ScopeId(4)
Symbol scope ID mismatch for "x":
after transform: SymbolId(4): ScopeId(5)
rebuilt        : SymbolId(9): ScopeId(10)
Symbol scope ID mismatch for "x":
after transform: SymbolId(6): ScopeId(7)
rebuilt        : SymbolId(13): ScopeId(16)
Symbol scope ID mismatch for "x":
after transform: SymbolId(9): ScopeId(9)
rebuilt        : SymbolId(18): ScopeId(22)
Symbol scope ID mismatch for "x":
after transform: SymbolId(12): ScopeId(11)
rebuilt        : SymbolId(23): ScopeId(28)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.12.ts
Bindings mismatch:
after transform: ScopeId(4): ["_usingCtx", "d17"]
rebuilt        : ScopeId(4): ["_usingCtx"]
Bindings mismatch:
after transform: ScopeId(6): []
rebuilt        : ScopeId(5): ["d17"]
Symbol scope ID mismatch for "d17":
after transform: SymbolId(2): ScopeId(4)
rebuilt        : SymbolId(5): ScopeId(5)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsDeclarationEmit.2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "r1":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "r2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForAwaitOf.ts
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(2), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
Scope parent mismatch:
after transform: ScopeId(3): Some(ScopeId(2))
rebuilt        : ScopeId(6): Some(ScopeId(5))
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsNamedEvaluationDecoratorsAndClassFields.ts
Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "C4", "_Class", "_Class2", "_defineProperty", "_usingCtx", "_usingCtx2", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "C4", "_Class", "_Class2", "_defineProperty", "_usingCtx", "_usingCtx2"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : ["Symbol", "dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.10.ts
Bindings mismatch:
after transform: ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.11.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.12.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 83, end: 84 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.4.ts
Bindings mismatch:
after transform: ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.6.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.7.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.8.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.9.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 61, end: 62 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.10.ts
Bindings mismatch:
after transform: ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.11.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.12.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.2.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.3.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Symbol span mismatch for "C":
after transform: SymbolId(2): Span { start: 83, end: 84 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.4.ts
Bindings mismatch:
after transform: ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["_default", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.5.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.6.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.7.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.8.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.9.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "_usingCtx", "_usingCtx2", "after"]
Symbol span mismatch for "C":
after transform: SymbolId(1): Span { start: 61, end: 62 }
rebuilt        : SymbolId(2): Span { start: 0, end: 0 }
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/validMultipleVariableDeclarations.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "p":
after transform: SymbolId(4): [ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(11): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-await-ofStatements/emitter.forAwait.ts
Bindings mismatch:
after transform: ScopeId(1): ["y"]
rebuilt        : ScopeId(3): ["_didIteratorError", "_iterator", "_iteratorAbruptCompletion", "_iteratorError", "_step", "y"]
Bindings mismatch:
after transform: ScopeId(3): ["_didIteratorError", "_iterator", "_iteratorAbruptCompletion", "_iteratorError", "_step"]
rebuilt        : ScopeId(5): []
Symbol scope ID mismatch for "_iteratorAbruptCompletion":
after transform: SymbolId(6): ScopeId(3)
rebuilt        : SymbolId(6): ScopeId(3)
Symbol scope ID mismatch for "_didIteratorError":
after transform: SymbolId(5): ScopeId(3)
rebuilt        : SymbolId(7): ScopeId(3)
Symbol scope ID mismatch for "_iteratorError":
after transform: SymbolId(7): ScopeId(3)
rebuilt        : SymbolId(8): ScopeId(3)
Symbol scope ID mismatch for "_iterator":
after transform: SymbolId(8): ScopeId(3)
rebuilt        : SymbolId(9): ScopeId(3)
Symbol scope ID mismatch for "_step":
after transform: SymbolId(3): ScopeId(3)
rebuilt        : SymbolId(10): ScopeId(3)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsArray.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/forStatements/forStatements.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(37), ScopeId(40), ScopeId(42), ScopeId(44)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(41), ScopeId(43), ScopeId(45)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(34): [ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(36): [ScopeId(37)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(17), ReferenceId(18), ReferenceId(20)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(19)]
Symbol reference IDs mismatch for "F":
after transform: SymbolId(4): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(21), ReferenceId(22)]
Symbol flags mismatch for "M":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(6): Span { start: 198, end: 199 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(6): [ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(35), ReferenceId(36)]
rebuilt        : SymbolId(5): [ReferenceId(11), ReferenceId(12), ReferenceId(23), ReferenceId(24)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(14)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/forStatements/forStatementsMultipleValidDecl.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(37), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(27), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48)]
Scope children mismatch:
after transform: ScopeId(31): [ScopeId(32), ScopeId(33)]
rebuilt        : ScopeId(30): [ScopeId(31)]
Scope children mismatch:
after transform: ScopeId(34): [ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(32): [ScopeId(33)]
Scope children mismatch:
after transform: ScopeId(37): [ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(34): [ScopeId(35)]
Symbol reference IDs mismatch for "p":
after transform: SymbolId(4): [ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(11): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/returnStatementNoAsiAfterTransform.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/returnStatements.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(4), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(9): [ReferenceId(4), ReferenceId(7)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/statements/throwStatements/throwStatements.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(11), ScopeId(12)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(21), ReferenceId(42)]
rebuilt        : SymbolId(2): [ReferenceId(26), ReferenceId(46)]
Symbol flags mismatch for "M":
after transform: SymbolId(6): SymbolFlags(ValueModule)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(6): Span { start: 212, end: 213 }
rebuilt        : SymbolId(5): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/any/assignEveryTypeToAny.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(12): [ReferenceId(25)]
rebuilt        : SymbolId(12): []
Unresolved reference IDs mismatch for "undefined":
after transform: [ReferenceId(11), ReferenceId(14)]
rebuilt        : [ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.es2018.1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92), ScopeId(93), ScopeId(94), ScopeId(95), ScopeId(96), ScopeId(97), ScopeId(98), ScopeId(99), ScopeId(100), ScopeId(101), ScopeId(102), ScopeId(103), ScopeId(104), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(117), ScopeId(118), ScopeId(119)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(51), ScopeId(53), ScopeId(54), ScopeId(56), ScopeId(57), ScopeId(60), ScopeId(61), ScopeId(63), ScopeId(64), ScopeId(66), ScopeId(67), ScopeId(69), ScopeId(70), ScopeId(72), ScopeId(73), ScopeId(76), ScopeId(77), ScopeId(79), ScopeId(80), ScopeId(82), ScopeId(83), ScopeId(85), ScopeId(86), ScopeId(88), ScopeId(89), ScopeId(92), ScopeId(93), ScopeId(95), ScopeId(96), ScopeId(98), ScopeId(99), ScopeId(101), ScopeId(102)]
Scope children mismatch:
after transform: ScopeId(64): [ScopeId(65)]
rebuilt        : ScopeId(103): []
Unresolved references mismatch:
after transform: ["AsyncIterable", "AsyncIterableIterator", "AsyncIterator", "Promise", "PromiseLike", "arguments", "require"]
rebuilt        : ["Promise", "arguments", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypes2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "bar", "bar2", "foo", "foo2"]
rebuilt        : ScopeId(0): ["a", "b", "bar", "bar2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo", "foo2"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtends1.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "x1", "x2"]
rebuilt        : ScopeId(0): ["f1", "f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(79), ScopeId(81), ScopeId(82), ScopeId(85), ScopeId(87), ScopeId(89), ScopeId(91), ScopeId(95), ScopeId(98), ScopeId(102), ScopeId(105), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(113), ScopeId(114), ScopeId(116), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(127), ScopeId(129), ScopeId(130), ScopeId(131), ScopeId(133)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "x1":
after transform: SymbolId(127) "x1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(133) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : ["x1", "x2"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtendsDependingOnTypeVariables.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/variance.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(6): [ReferenceId(8), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(5): [ReferenceId(4), ReferenceId(6)]
Unresolved references mismatch:
after transform: ["const", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/asyncFunctions/contextuallyTypeAsyncFunctionAwaitOperand.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(4)]
rebuilt        : [ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/asyncFunctions/contextuallyTypeAsyncFunctionReturnType.ts
Bindings mismatch:
after transform: ScopeId(0): ["Context", "_asyncToGenerator", "_copyExtensions", "_defineProperty", "_fn", "_fn2", "_fn3", "_fn4", "copyExtensions", "fn1", "fn2", "fn3", "fn4", "getProcessTree", "scanMetadata", "test"]
rebuilt        : ScopeId(0): ["Context", "_asyncToGenerator", "_copyExtensions", "_defineProperty", "_fn", "_fn2", "_fn3", "_fn4", "copyExtensions", "fn1", "fn2", "fn3", "fn4", "scanMetadata"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(41), ScopeId(42)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(17), ScopeId(22), ScopeId(23), ScopeId(24)]
Symbol flags mismatch for "Context":
after transform: SymbolId(7): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(12): SymbolFlags(Class)
Symbol reference IDs mismatch for "Context":
after transform: SymbolId(7): [ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(12): []
Reference symbol mismatch for "test":
after transform: SymbolId(12) "test"
rebuilt        : <None>
Reference symbol mismatch for "getProcessTree":
after transform: SymbolId(22) "getProcessTree"
rebuilt        : <None>
Reference symbol mismatch for "scanMetadata":
after transform: SymbolId(22) "scanMetadata"
rebuilt        : SymbolId(16) "scanMetadata"
Unresolved references mismatch:
after transform: ["Error", "Promise", "PromiseLike", "arguments"]
rebuilt        : ["Error", "Promise", "arguments", "getProcessTree", "test"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(24), ReferenceId(31), ReferenceId(34), ReferenceId(37)]
rebuilt        : [ReferenceId(10), ReferenceId(24), ReferenceId(31), ReferenceId(41)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/commaOperator/contextuallyTypeCommaOperator01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/logicalAnd/contextuallyTypeLogicalAnd01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializer.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedObjectLiteralMethodDeclaration01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/partiallyAnnotatedFunction/partiallyAnnotatedFunctionInferenceWithTypeParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(14), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(4) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(4) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(4) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(4) "test"
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(4) "test"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"
Reference symbol mismatch for "testRest":
after transform: SymbolId(5) "testRest"
rebuilt        : SymbolId(6) "testRest"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/partiallyAnnotatedFunction/partiallyAnnotatedFunctionWitoutTypeParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "simple":
after transform: SymbolId(0) "simple"
rebuilt        : SymbolId(0) "simple"
Reference symbol mismatch for "simple":
after transform: SymbolId(0) "simple"
rebuilt        : SymbolId(0) "simple"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/forAwait/types.forAwait.es2018.1.ts
Bindings mismatch:
after transform: ScopeId(0): ["_asyncIterator", "_asyncToGenerator", "_awaitAsyncGenerator", "_f", "_f2", "_wrapAsyncGenerator", "asyncIterable", "f1", "f2", "iterable", "iterableOfPromise"]
rebuilt        : ScopeId(0): ["_asyncIterator", "_asyncToGenerator", "_awaitAsyncGenerator", "_f", "_f2", "_wrapAsyncGenerator", "f1", "f2"]
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterable", "Iterable", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "asyncIterable", "iterable", "iterableOfPromise", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeAmbient.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeAmdBundleRewrite.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeGenericTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Point":
after transform: SymbolId(0) "Point"
rebuilt        : <None>
Reference flags mismatch for "Point":
after transform: ReferenceId(1): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Point", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeLocal.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Point":
after transform: SymbolId(0) "Point"
rebuilt        : <None>
Reference flags mismatch for "Point":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Point", "module"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/contextualIntersectionType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionMemberOfUnionNarrowsCorrectly.ts
Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionOfUnionNarrowing.ts
Bindings mismatch:
after transform: ScopeId(0): ["q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["q", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionOfUnionOfUnitTypes.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E", "F"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(58)]
rebuilt        : SymbolId(0): [ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionThisTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeEquivalence.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ab":
after transform: SymbolId(5): [ReferenceId(17)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "bc":
after transform: SymbolId(6): [ReferenceId(20)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeInference2.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "f", "f2", "obj"]
rebuilt        : ScopeId(0): ["f", "f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : SymbolId(2) "f2"
Reference symbol mismatch for "obj":
after transform: SymbolId(11) "obj"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : SymbolId(2) "f2"
Reference symbol mismatch for "obj":
after transform: SymbolId(11) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "obj"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeInference3.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c1", "c2", "from"]
rebuilt        : ScopeId(0): ["c1", "c2", "from"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "from":
after transform: SymbolId(7) "from"
rebuilt        : SymbolId(1) "from"
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "Set", "Symbol"]
rebuilt        : ["Array", "a", "b"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeOverloading.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionsAndEmptyObjects.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(25), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(47)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "mock":
after transform: SymbolId(47) "mock"
rebuilt        : SymbolId(31) "mock"
Unresolved references mismatch:
after transform: ["Object", "Promise"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/operatorsAndIntersectionTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndForIn.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(14)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/booleanLiteralTypes1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(4), SymbolId(7), SymbolId(11), SymbolId(20), SymbolId(24), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(40), SymbolId(42)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(9), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(22)]
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/booleanLiteralTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(4), SymbolId(7), SymbolId(11), SymbolId(20), SymbolId(24), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(40), SymbolId(42)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(9), SymbolId(18), SymbolId(22), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(22)]
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(18) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(18), SymbolId(21), SymbolId(25), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(45), SymbolId(47)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(13), SymbolId(16), SymbolId(20), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(41)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(21), ScopeId(23)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(59), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(82), ReferenceId(83), ReferenceId(86), ReferenceId(87), ReferenceId(96), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(105), ReferenceId(109), ReferenceId(111), ReferenceId(122)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(52), ReferenceId(54), ReferenceId(63), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(78), ReferenceId(80), ReferenceId(83), ReferenceId(85)]
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(18), SymbolId(21), SymbolId(25), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(45), SymbolId(47)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(13), SymbolId(16), SymbolId(20), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(41)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(21), ScopeId(23)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(59), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(82), ReferenceId(83), ReferenceId(86), ReferenceId(87), ReferenceId(96), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(105), ReferenceId(109), ReferenceId(111), ReferenceId(122)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(52), ReferenceId(54), ReferenceId(63), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(78), ReferenceId(80), ReferenceId(83), ReferenceId(85)]
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(21) "g"
rebuilt        : SymbolId(16) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypeWidening.ts
Bindings mismatch:
after transform: ScopeId(0): ["E", "Set", "_excluded", "_objectSpread", "_objectWithoutProperties", "a", "arr", "b", "doWork", "f", "f1", "f2", "f3", "f4", "f5", "f6", "increment", "isFailure", "isSuccess", "keys", "langCodeSet", "langCodes", "nonWidening", "onMouseOver", "result", "test", "widening", "x"]
rebuilt        : ScopeId(0): ["E", "FAILURE", "Set", "_excluded", "_objectSpread", "_objectWithoutProperties", "a", "arr", "b", "doWork", "f", "f1", "f2", "f3", "f4", "f5", "f6", "increment", "isFailure", "isSuccess", "keys", "langCodeSet", "langCodes", "nonWidening", "onMouseOver", "result", "test", "widening", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Bindings mismatch:
after transform: ScopeId(26): ["A", "B", "E"]
rebuilt        : ScopeId(21): ["E"]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode)
rebuilt        : ScopeId(21): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "FAILURE":
after transform: SymbolId(65): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(66): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "FAILURE":
after transform: SymbolId(65): Span { start: 2229, end: 2236 }
rebuilt        : SymbolId(66): Span { start: 2256, end: 2263 }
Symbol reference IDs mismatch for "FAILURE":
after transform: SymbolId(65): [ReferenceId(55), ReferenceId(58), ReferenceId(66), ReferenceId(68)]
rebuilt        : SymbolId(66): [ReferenceId(50), ReferenceId(54)]
Symbol redeclarations mismatch for "FAILURE":
after transform: SymbolId(65): [Span { start: 2229, end: 2236 }, Span { start: 2256, end: 2263 }]
rebuilt        : SymbolId(66): []
Symbol reference IDs mismatch for "langCodeSet":
after transform: SymbolId(92): [ReferenceId(95), ReferenceId(97)]
rebuilt        : SymbolId(83): [ReferenceId(70)]
Symbol flags mismatch for "E":
after transform: SymbolId(105): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(93): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(105): [ReferenceId(110), ReferenceId(111), ReferenceId(122)]
rebuilt        : SymbolId(93): [ReferenceId(84), ReferenceId(86)]
Reference symbol mismatch for "widening":
after transform: SymbolId(51) "widening"
rebuilt        : SymbolId(54) "widening"
Reference symbol mismatch for "widening":
after transform: SymbolId(51) "widening"
rebuilt        : SymbolId(54) "widening"
Reference symbol mismatch for "widening":
after transform: SymbolId(51) "widening"
rebuilt        : SymbolId(54) "widening"
Reference symbol mismatch for "nonWidening":
after transform: SymbolId(54) "nonWidening"
rebuilt        : SymbolId(56) "nonWidening"
Reference symbol mismatch for "nonWidening":
after transform: SymbolId(54) "nonWidening"
rebuilt        : SymbolId(56) "nonWidening"
Reference symbol mismatch for "nonWidening":
after transform: SymbolId(54) "nonWidening"
rebuilt        : SymbolId(56) "nonWidening"
Reference symbol mismatch for "f":
after transform: SymbolId(102) "f"
rebuilt        : SymbolId(91) "f"
Unresolved references mismatch:
after transform: ["NonNullable", "Object", "Record"]
rebuilt        : ["Object"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypes1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(34), SymbolId(49), SymbolId(66), SymbolId(67), SymbolId(72), SymbolId(79), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(98), SymbolId(101), SymbolId(105), SymbolId(110), SymbolId(113), SymbolId(117), SymbolId(120), SymbolId(123), SymbolId(127), SymbolId(128), SymbolId(129), SymbolId(130), SymbolId(131), SymbolId(132), SymbolId(133), SymbolId(134), SymbolId(135), SymbolId(136), SymbolId(137), SymbolId(139), SymbolId(141), SymbolId(144), SymbolId(150), SymbolId(152)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(33), SymbolId(48), SymbolId(65), SymbolId(66), SymbolId(71), SymbolId(78), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(97), SymbolId(99), SymbolId(102), SymbolId(105), SymbolId(107), SymbolId(110), SymbolId(112), SymbolId(114), SymbolId(117), SymbolId(118), SymbolId(119), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(124), SymbolId(125), SymbolId(126), SymbolId(127), SymbolId(129), SymbolId(131), SymbolId(133), SymbolId(137)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(18): [ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(13), ReferenceId(30), ReferenceId(31), ReferenceId(35), ReferenceId(95)]
rebuilt        : SymbolId(1): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(19), ReferenceId(44), ReferenceId(53), ReferenceId(57)]
Reference symbol mismatch for "g1":
after transform: SymbolId(98) "g1"
rebuilt        : SymbolId(97) "g1"
Reference symbol mismatch for "g2":
after transform: SymbolId(101) "g2"
rebuilt        : SymbolId(99) "g2"
Reference symbol mismatch for "g2":
after transform: SymbolId(101) "g2"
rebuilt        : SymbolId(99) "g2"
Reference symbol mismatch for "g3":
after transform: SymbolId(105) "g3"
rebuilt        : SymbolId(102) "g3"
Reference symbol mismatch for "g4":
after transform: SymbolId(110) "g4"
rebuilt        : SymbolId(105) "g4"
Reference symbol mismatch for "g5":
after transform: SymbolId(113) "g5"
rebuilt        : SymbolId(107) "g5"
Reference symbol mismatch for "g6":
after transform: SymbolId(117) "g6"
rebuilt        : SymbolId(110) "g6"
Reference symbol mismatch for "g6":
after transform: SymbolId(117) "g6"
rebuilt        : SymbolId(110) "g6"
Reference symbol mismatch for "g7":
after transform: SymbolId(120) "g7"
rebuilt        : SymbolId(112) "g7"
Reference symbol mismatch for "g8":
after transform: SymbolId(123) "g8"
rebuilt        : SymbolId(114) "g8"
Reference symbol mismatch for "g8":
after transform: SymbolId(123) "g8"
rebuilt        : SymbolId(114) "g8"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypesAndDestructuring.ts
Bindings mismatch:
after transform: ScopeId(0): ["_x$a", "_x$a2", "_x$a3", "a1", "a2", "a3", "a4", "b1", "b2", "b3", "b4", "bar", "x"]
rebuilt        : ScopeId(0): ["_x$a", "_x$a2", "_x$a3", "a1", "a2", "a3", "a4", "b1", "b2", "b3", "b4", "bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : ["x"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(10), SymbolId(12), SymbolId(17), SymbolId(20), SymbolId(24), SymbolId(32), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(41), SymbolId(43), SymbolId(48), SymbolId(58), SymbolId(60)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(16), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(39), SymbolId(48), SymbolId(50)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24)]
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(10), SymbolId(12), SymbolId(17), SymbolId(20), SymbolId(24), SymbolId(32), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(41), SymbolId(43), SymbolId(48), SymbolId(58), SymbolId(60)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(16), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(39), SymbolId(48), SymbolId(50)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24)]
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(20) "g"
rebuilt        : SymbolId(12) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/numericStringLiteralTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7), SymbolId(11), SymbolId(27), SymbolId(30), SymbolId(34), SymbolId(35)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "createContainer":
after transform: SymbolId(27) "createContainer"
rebuilt        : SymbolId(8) "createContainer"
Reference symbol mismatch for "createContainer":
after transform: SymbolId(27) "createContainer"
rebuilt        : SymbolId(8) "createContainer"
Reference symbol mismatch for "f":
after transform: SymbolId(30) "f"
rebuilt        : SymbolId(10) "f"
Unresolved references mismatch:
after transform: ["Capitalize"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(18), SymbolId(22), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(42), SymbolId(44)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(13), SymbolId(17), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36), SymbolId(38)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(22)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(85), ReferenceId(89), ReferenceId(91), ReferenceId(99)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(31), ReferenceId(33), ReferenceId(42), ReferenceId(43), ReferenceId(45), ReferenceId(46), ReferenceId(53), ReferenceId(57), ReferenceId(59), ReferenceId(62), ReferenceId(64)]
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(18), SymbolId(22), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(37), SymbolId(39), SymbolId(42), SymbolId(44)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(13), SymbolId(17), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36), SymbolId(38)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(22)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(85), ReferenceId(89), ReferenceId(91), ReferenceId(99)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(31), ReferenceId(33), ReferenceId(42), ReferenceId(43), ReferenceId(45), ReferenceId(46), ReferenceId(53), ReferenceId(57), ReferenceId(59), ReferenceId(62), ReferenceId(64)]
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"
Reference symbol mismatch for "g":
after transform: SymbolId(18) "g"
rebuilt        : SymbolId(13) "g"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithTypeAssertions01.ts
Symbol reference IDs mismatch for "fooOrBar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringMappingDeferralInConditionalTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize", "Lowercase"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringMappingReduction.ts
Bindings mismatch:
after transform: ScopeId(0): ["_virtualOn", "virtualOn"]
rebuilt        : ScopeId(0): ["virtualOn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "_virtualOn":
after transform: SymbolId(18) "_virtualOn"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Capitalize", "Lowercase"]
rebuilt        : ["_virtualOn"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes6.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f1":
after transform: SymbolId(3) "f1"
rebuilt        : SymbolId(0) "f1"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes8.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/localTypes/localTypes1.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "C", "E"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(14): ["A", "B", "C", "E"]
rebuilt        : ScopeId(12): ["E"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(0x0)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(13): [ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(16): [ScopeId(17)]
Bindings mismatch:
after transform: ScopeId(25): ["A", "B", "C", "E"]
rebuilt        : ScopeId(21): ["E"]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(0x0)
rebuilt        : ScopeId(21): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(28): ["A", "B", "C", "E"]
rebuilt        : ScopeId(25): ["E"]
Scope flags mismatch:
after transform: ScopeId(28): ScopeFlags(0x0)
rebuilt        : ScopeId(25): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(32): ["A", "B", "C", "E"]
rebuilt        : ScopeId(30): ["E"]
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(StrictMode)
rebuilt        : ScopeId(30): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(35): ["A", "B", "C", "E"]
rebuilt        : ScopeId(34): ["E"]
Scope flags mismatch:
after transform: ScopeId(35): ScopeFlags(StrictMode)
rebuilt        : ScopeId(34): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(38): ["A", "B", "C", "E"]
rebuilt        : ScopeId(38): ["E"]
Scope flags mismatch:
after transform: ScopeId(38): ScopeFlags(StrictMode)
rebuilt        : ScopeId(38): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(2): [ReferenceId(11)]
Symbol flags mismatch for "E":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(11): [ReferenceId(8), ReferenceId(9), ReferenceId(14)]
rebuilt        : SymbolId(8): [ReferenceId(23)]
Symbol flags mismatch for "E":
after transform: SymbolId(21): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(21): [ReferenceId(18), ReferenceId(19), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(32)]
rebuilt        : SymbolId(14): [ReferenceId(37), ReferenceId(42)]
Symbol flags mismatch for "E":
after transform: SymbolId(35): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(22): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(35): [ReferenceId(34)]
rebuilt        : SymbolId(22): []
Symbol flags mismatch for "E":
after transform: SymbolId(41): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(26): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(41): [ReferenceId(36)]
rebuilt        : SymbolId(26): []
Symbol flags mismatch for "E":
after transform: SymbolId(47): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(30): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(47): [ReferenceId(38)]
rebuilt        : SymbolId(30): []
Symbol flags mismatch for "E":
after transform: SymbolId(52): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(33): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(52): [ReferenceId(39)]
rebuilt        : SymbolId(33): []
Symbol flags mismatch for "E":
after transform: SymbolId(57): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(36): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(57): [ReferenceId(41)]
rebuilt        : SymbolId(36): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/localTypes/localTypes5.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/isomorphicMappedTypeInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(16), SymbolId(21), SymbolId(26), SymbolId(30), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(43), SymbolId(48), SymbolId(51), SymbolId(56), SymbolId(60), SymbolId(64), SymbolId(69), SymbolId(79), SymbolId(82), SymbolId(85), SymbolId(87), SymbolId(91), SymbolId(92), SymbolId(96), SymbolId(100), SymbolId(104), SymbolId(109), SymbolId(114), SymbolId(115), SymbolId(116), SymbolId(117), SymbolId(118), SymbolId(119), SymbolId(124), SymbolId(125), SymbolId(126)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(8), SymbolId(12), SymbolId(16), SymbolId(20), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(35), SymbolId(37), SymbolId(42), SymbolId(44), SymbolId(46), SymbolId(48), SymbolId(53), SymbolId(55), SymbolId(58), SymbolId(60), SymbolId(63), SymbolId(64), SymbolId(66), SymbolId(68), SymbolId(70), SymbolId(72), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(82), SymbolId(83), SymbolId(84)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20)]
rebuilt        : ScopeId(16): []
Reference symbol mismatch for "validate":
after transform: SymbolId(56) "validate"
rebuilt        : SymbolId(42) "validate"
Reference symbol mismatch for "clone":
after transform: SymbolId(60) "clone"
rebuilt        : SymbolId(44) "clone"
Reference symbol mismatch for "validateAndClone":
after transform: SymbolId(64) "validateAndClone"
rebuilt        : SymbolId(46) "validateAndClone"
Reference symbol mismatch for "applySpec":
after transform: SymbolId(79) "applySpec"
rebuilt        : SymbolId(53) "applySpec"
Reference symbol mismatch for "applySpec":
after transform: SymbolId(79) "applySpec"
rebuilt        : SymbolId(53) "applySpec"
Reference symbol mismatch for "f20":
after transform: SymbolId(92) "f20"
rebuilt        : SymbolId(64) "f20"
Reference symbol mismatch for "f21":
after transform: SymbolId(96) "f21"
rebuilt        : SymbolId(66) "f21"
Reference symbol mismatch for "f22":
after transform: SymbolId(100) "f22"
rebuilt        : SymbolId(68) "f22"
Reference symbol mismatch for "f23":
after transform: SymbolId(104) "f23"
rebuilt        : SymbolId(70) "f23"
Reference symbol mismatch for "f24":
after transform: SymbolId(109) "f24"
rebuilt        : SymbolId(72) "f24"
Unresolved references mismatch:
after transform: ["Partial", "Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Pick", "Record", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeIndexSignatureModifiers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeModifiers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(29): [ScopeId(30)]
rebuilt        : ScopeId(4): []
Unresolved references mismatch:
after transform: ["Partial", "Pick", "Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeOverlappingStringEnumKeys.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["CAT", "DOG", "TerrestrialAnimalTypes"]
rebuilt        : ScopeId(1): ["TerrestrialAnimalTypes"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["AlienAnimalTypes", "CAT"]
rebuilt        : ScopeId(2): ["AlienAnimalTypes"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "TerrestrialAnimalTypes":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TerrestrialAnimalTypes":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(11), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(7)]
Symbol flags mismatch for "AlienAnimalTypes":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "AlienAnimalTypes":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3), ReferenceId(12), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(6), ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(47), SymbolId(50), SymbolId(53), SymbolId(56), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(54)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "f1":
after transform: SymbolId(47) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(50) "f2"
rebuilt        : SymbolId(1) "f2"
Reference symbol mismatch for "f3":
after transform: SymbolId(53) "f3"
rebuilt        : SymbolId(2) "f3"
Reference symbol mismatch for "f4":
after transform: SymbolId(56) "f4"
rebuilt        : SymbolId(3) "f4"
Unresolved references mismatch:
after transform: ["Array", "Date", "Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(20), SymbolId(24), SymbolId(27), SymbolId(32), SymbolId(38), SymbolId(45), SymbolId(48), SymbolId(51), SymbolId(54), SymbolId(57), SymbolId(61), SymbolId(65)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(18), SymbolId(21), SymbolId(24), SymbolId(27), SymbolId(30), SymbolId(34), SymbolId(38)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "assign":
after transform: SymbolId(20) "assign"
rebuilt        : SymbolId(5) "assign"
Reference symbol mismatch for "assign":
after transform: SymbolId(20) "assign"
rebuilt        : SymbolId(5) "assign"
Reference symbol mismatch for "freeze":
after transform: SymbolId(24) "freeze"
rebuilt        : SymbolId(8) "freeze"
Reference symbol mismatch for "pick":
after transform: SymbolId(27) "pick"
rebuilt        : SymbolId(10) "pick"
Reference symbol mismatch for "mapObject":
after transform: SymbolId(32) "mapObject"
rebuilt        : SymbolId(13) "mapObject"
Reference symbol mismatch for "proxify":
after transform: SymbolId(38) "proxify"
rebuilt        : SymbolId(16) "proxify"
Unresolved references mismatch:
after transform: ["Partial", "Pick", "Readonly", "Record"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8), SymbolId(13), SymbolId(18), SymbolId(23), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(11), SymbolId(16)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "Box":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "boxify":
after transform: SymbolId(5) "boxify"
rebuilt        : SymbolId(2) "boxify"
Reference symbol mismatch for "unboxify":
after transform: SymbolId(8) "unboxify"
rebuilt        : SymbolId(4) "unboxify"
Reference symbol mismatch for "unboxify":
after transform: SymbolId(8) "unboxify"
rebuilt        : SymbolId(4) "unboxify"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Partial", "Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesArraysTuples.ts
Bindings mismatch:
after transform: ScopeId(0): ["acceptArray", "acceptMappedArray", "all", "f1", "f2", "mapArray", "nonpartial", "unboxify", "x10", "x11", "x12", "x20", "x21", "x22", "y10", "y11", "y12", "y20", "y21", "y22"]
rebuilt        : ScopeId(0): ["acceptArray", "acceptMappedArray", "all", "f1", "f2", "mapArray", "nonpartial", "unboxify", "y10", "y11", "y12", "y20", "y21", "y22"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Reference symbol mismatch for "unboxify":
after transform: SymbolId(33) "unboxify"
rebuilt        : SymbolId(0) "unboxify"
Reference symbol mismatch for "x10":
after transform: SymbolId(36) "x10"
rebuilt        : <None>
Reference symbol mismatch for "unboxify":
after transform: SymbolId(33) "unboxify"
rebuilt        : SymbolId(0) "unboxify"
Reference symbol mismatch for "x11":
after transform: SymbolId(38) "x11"
rebuilt        : <None>
Reference symbol mismatch for "unboxify":
after transform: SymbolId(33) "unboxify"
rebuilt        : SymbolId(0) "unboxify"
Reference symbol mismatch for "x12":
after transform: SymbolId(40) "x12"
rebuilt        : <None>
Reference symbol mismatch for "nonpartial":
after transform: SymbolId(42) "nonpartial"
rebuilt        : SymbolId(5) "nonpartial"
Reference symbol mismatch for "x20":
after transform: SymbolId(45) "x20"
rebuilt        : <None>
Reference symbol mismatch for "nonpartial":
after transform: SymbolId(42) "nonpartial"
rebuilt        : SymbolId(5) "nonpartial"
Reference symbol mismatch for "x21":
after transform: SymbolId(47) "x21"
rebuilt        : <None>
Reference symbol mismatch for "nonpartial":
after transform: SymbolId(42) "nonpartial"
rebuilt        : SymbolId(5) "nonpartial"
Reference symbol mismatch for "x22":
after transform: SymbolId(49) "x22"
rebuilt        : <None>
Reference symbol mismatch for "all":
after transform: SymbolId(57) "all"
rebuilt        : SymbolId(10) "all"
Reference symbol mismatch for "all":
after transform: SymbolId(57) "all"
rebuilt        : SymbolId(10) "all"
Reference symbol mismatch for "all":
after transform: SymbolId(57) "all"
rebuilt        : SymbolId(10) "all"
Reference symbol mismatch for "all":
after transform: SymbolId(57) "all"
rebuilt        : SymbolId(10) "all"
Reference symbol mismatch for "acceptArray":
after transform: SymbolId(84) "acceptArray"
rebuilt        : SymbolId(25) "acceptArray"
Reference symbol mismatch for "mapArray":
after transform: SymbolId(86) "mapArray"
rebuilt        : SymbolId(27) "mapArray"
Unresolved references mismatch:
after transform: ["Array", "Partial", "Promise", "PromiseLike", "Readonly", "ReadonlyArray", "Required"]
rebuilt        : ["x10", "x11", "x12", "x20", "x21", "x22"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesGenericTuples.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesGenericTuples2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "getT":
after transform: SymbolId(0) "getT"
rebuilt        : SymbolId(0) "getT"
Reference symbol mismatch for "getT":
after transform: SymbolId(0) "getT"
rebuilt        : SymbolId(0) "getT"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/augmentedTypeBracketAccessIndexSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfObject.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypePropertyAccess.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureAppearsToBeFunctionType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureHidingMembersOfExtendedFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureHidingMembersOfFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfExtendedFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfFunction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithNumericProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringNamedPropertyOfIllegalCharacters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithOptionalProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithSpecializedCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(9), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(9), ReferenceId(13), ReferenceId(30)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(11), ReferenceId(26)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(8), ReferenceId(12), ReferenceId(28)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithSpecializedConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(9), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(6), ReferenceId(10), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(8)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(9), ReferenceId(20)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/classWithOnlyPublicMembersEquivalentToInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/classWithOnlyPublicMembersEquivalentToInterface2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/genericInstantiationEquivalentToObjectLiteral.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : SymbolId(2) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : SymbolId(2) "f"
Reference symbol mismatch for "f2":
after transform: SymbolId(9) "f2"
rebuilt        : SymbolId(4) "f2"
Reference symbol mismatch for "f2":
after transform: SymbolId(9) "f2"
rebuilt        : SymbolId(4) "f2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/optionalMethods.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(15)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(6): [ReferenceId(10)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(12), SymbolId(15), SymbolId(19), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "mkList":
after transform: SymbolId(15) "mkList"
rebuilt        : SymbolId(8) "mkList"
Reference symbol mismatch for "compareNumbers":
after transform: SymbolId(12) "compareNumbers"
rebuilt        : SymbolId(5) "compareNumbers"
Reference symbol mismatch for "f2":
after transform: SymbolId(20) "f2"
rebuilt        : SymbolId(12) "f2"
Reference symbol mismatch for "f2":
after transform: SymbolId(20) "f2"
rebuilt        : SymbolId(12) "f2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverType.ts
Scope children mismatch:
after transform: ScopeId(26): [ScopeId(27)]
rebuilt        : ScopeId(26): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/never/neverUnionIntersection.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAndEmptyObject.ts
Bindings mismatch:
after transform: ScopeId(0): ["foo", "fooProps"]
rebuilt        : ScopeId(0): ["fooProps"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutAnnotationsOrBody.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutReturnTypeAnnotationInference.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithOptionalParameters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(6)]
rebuilt        : SymbolId(8): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithOptionalParameters2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(12), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(4)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/parametersWithNoAnnotationAreAny.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureIsSubtypeOfNonSpecializedSignature.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(22), ScopeId(26), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureWithOptional.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterAsTypeArgument.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(7), ReferenceId(11)]
rebuilt        : SymbolId(4): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithIdenticalOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(23), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(7): [ReferenceId(4), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(19), ReferenceId(27), ReferenceId(30)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(23), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(7): [ReferenceId(4), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(19), ReferenceId(27), ReferenceId(30)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloadsThatDifferOnlyByReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(18)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(15)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/numericIndexingResults.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexingResults.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/functionLiterals.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/methodSignaturesWithOverloads2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNameWithoutTypeAnnotation.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNamesOfReservedWords.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "abstract", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "is", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "while", "with"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/stringNamedPropertyAccess.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/extendBooleanInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/validBooleanAssignments.ts
Unresolved references mismatch:
after transform: ["Boolean", "Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/extendNumberInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/validNumberAssignments.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6), ReferenceId(12)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/extendStringInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/validStringAssignments.ts
Unresolved references mismatch:
after transform: ["Object", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/stringLiteral/stringLiteralType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/invalidUndefinedValues.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/validUndefinedAssignments.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(9)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["require", "undefined"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/validUndefinedValues.ts
Unresolved reference IDs mismatch for "undefined":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericObjectRest.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "sa":
after transform: SymbolId(16): [ReferenceId(10), ReferenceId(13), ReferenceId(51)]
rebuilt        : SymbolId(23): [ReferenceId(32), ReferenceId(37)]
Symbol reference IDs mismatch for "sb":
after transform: SymbolId(17): [ReferenceId(11), ReferenceId(14), ReferenceId(52)]
rebuilt        : SymbolId(24): [ReferenceId(33), ReferenceId(38)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestParameters2.ts
Bindings mismatch:
after transform: ScopeId(0): ["f00", "f01", "f02", "f03", "f04", "f10", "f11", "f12", "f13", "f20", "ns", "sn", "t1", "t2", "t3", "t4"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(27), ScopeId(29)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ConstructorParameters", "Function", "Parameters"]
rebuilt        : ["f10", "f11", "f12", "f13", "f20", "t1", "t2", "t3", "t4"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRest2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(8), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "connectionFromArray":
after transform: SymbolId(0) "connectionFromArray"
rebuilt        : SymbolId(2) "connectionFromArray"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestForOf.ts
Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_excluded2", "_objectSpread", "_objectWithoutProperties", "array", "rrestOff", "xx"]
rebuilt        : ScopeId(0): ["_excluded", "_excluded2", "_objectSpread", "_objectWithoutProperties", "_ref2", "_ref3", "array", "rrestOff", "xx"]
Bindings mismatch:
after transform: ScopeId(3): ["_ref2"]
rebuilt        : ScopeId(3): []
Bindings mismatch:
after transform: ScopeId(4): ["_ref3"]
rebuilt        : ScopeId(4): []
Symbol scope ID mismatch for "_ref2":
after transform: SymbolId(10): ScopeId(3)
rebuilt        : SymbolId(10): ScopeId(0)
Symbol scope ID mismatch for "_ref3":
after transform: SymbolId(11): ScopeId(4)
rebuilt        : SymbolId(11): ScopeId(0)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestParameter.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(10), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(22), SymbolId(25), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(12), SymbolId(22), SymbolId(29)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
Reference symbol mismatch for "suddenly":
after transform: SymbolId(3) "suddenly"
rebuilt        : SymbolId(12) "suddenly"
Reference symbol mismatch for "suddenly":
after transform: SymbolId(3) "suddenly"
rebuilt        : SymbolId(12) "suddenly"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestParameterES5.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(10), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(22), SymbolId(25), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(12), SymbolId(22), SymbolId(29)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
Reference symbol mismatch for "suddenly":
after transform: SymbolId(3) "suddenly"
rebuilt        : SymbolId(12) "suddenly"
Reference symbol mismatch for "suddenly":
after transform: SymbolId(3) "suddenly"
rebuilt        : SymbolId(12) "suddenly"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestReadonly.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/arrayOfFunctionTypes3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/arrayTypeOfTypeOf.ts
Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteral.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteralForOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteralForOverloads2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/parenthesizedTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryOnClass.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(10), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(7)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(12): [ReferenceId(2)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(15): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "d":
after transform: SymbolId(18): [ReferenceId(6)]
rebuilt        : SymbolId(13): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryWithReservedWords.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Controller":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofClass2.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(8): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "d":
after transform: SymbolId(10): [ReferenceId(4)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofModuleWithoutExports.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "M":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "M":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "M":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpread.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(32): [ReferenceId(36), ReferenceId(37)]
rebuilt        : SymbolId(33): [ReferenceId(69)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadRepeatedComplexity.ts
Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadRepeatedNullCheckPerf.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record", "require", "undefined"]
rebuilt        : ["require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadContextualTypedBindingPattern.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "age", "alice", "bob", "naam"]
rebuilt        : ScopeId(0): ["_objectSpread", "age", "naam"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "bob":
after transform: SymbolId(1) "bob"
rebuilt        : <None>
Reference symbol mismatch for "alice":
after transform: SymbolId(2) "alice"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["alice", "bob", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadExcessProperty.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadNonPrimitive.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "o", "x"]
rebuilt        : ScopeId(0): ["_objectSpread", "x"]
Reference symbol mismatch for "o":
after transform: SymbolId(0) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["o", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadOverwritesProperty.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "ab", "abq", "g", "h", "unused1", "unused2", "unused3"]
rebuilt        : ScopeId(0): ["_objectSpread", "g", "h", "unused1", "unused2", "unused3"]
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "abq":
after transform: SymbolId(1) "abq"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["ab", "abq", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadUnion4.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c"]
rebuilt        : ScopeId(0): ["_objectSpread", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "b", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralCheckedInIf01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralCheckedInIf02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralMatchedInSwitch01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypeAssertion01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAndParenthesizedExpressions01.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "myRandBool":
after transform: SymbolId(0) "myRandBool"
rebuilt        : SymbolId(0) "myRandBool"
Reference symbol mismatch for "myRandBool":
after transform: SymbolId(0) "myRandBool"
rebuilt        : SymbolId(0) "myRandBool"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAndTuples01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags03.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTypeParameterConstraint01.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTypeParameterConstraint02.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(14)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(8), ReferenceId(12), ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(14)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(8), ReferenceId(12), ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes03.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(13), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(13)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes04.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability03.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability04.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability05.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(13)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Symbol flags mismatch for "Consts1":
after transform: SymbolId(10): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Consts1":
after transform: SymbolId(10): Span { start: 807, end: 814 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol flags mismatch for "Consts2":
after transform: SymbolId(21): SymbolFlags(ValueModule)
rebuilt        : SymbolId(21): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Consts2":
after transform: SymbolId(21): Span { start: 1271, end: 1278 }
rebuilt        : SymbolId(21): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(13)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Symbol flags mismatch for "Consts1":
after transform: SymbolId(9): SymbolFlags(ValueModule)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Consts1":
after transform: SymbolId(9): Span { start: 745, end: 752 }
rebuilt        : SymbolId(9): Span { start: 0, end: 0 }
Symbol flags mismatch for "Consts2":
after transform: SymbolId(20): SymbolFlags(ValueModule)
rebuilt        : SymbolId(21): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Consts2":
after transform: SymbolId(20): Span { start: 1178, end: 1185 }
rebuilt        : SymbolId(21): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads03.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads04.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesTypePredicates01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/contextualThisType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/fluentClasses.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/fluentInterfaces.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/inferThisType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Reference symbol mismatch for "h":
after transform: SymbolId(3) "h"
rebuilt        : SymbolId(2) "h"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeAndConstraints.ts
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInBasePropertyAndDerivedContainerOfBase01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInClasses.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(23)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(23)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol flags mismatch for "C4":
after transform: SymbolId(6): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Unresolved references mismatch:
after transform: ["Date", "require", "undefined"]
rebuilt        : ["require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions3.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "Base":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(4): []
Reference symbol mismatch for "isCorrect":
after transform: SymbolId(2) "isCorrect"
rebuilt        : SymbolId(0) "isCorrect"
Reference symbol mismatch for "callsCallback":
after transform: SymbolId(4) "callsCallback"
rebuilt        : SymbolId(2) "callsCallback"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInInterfaces.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInObjectLiterals.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInObjectLiterals2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Vue", "defineProp", "defineProps", "f1", "f2", "makeObject", "makeObject2", "obj1", "p1", "p10", "p11", "p12", "p2", "p3", "p4", "vue", "x1", "x2"]
rebuilt        : ScopeId(0): ["defineProp", "defineProps", "f1", "f2", "makeObject", "makeObject2", "obj1", "p1", "p10", "p11", "p12", "p2", "p3", "p4", "vue", "x1", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(46), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
Reference symbol mismatch for "f1":
after transform: SymbolId(19) "f1"
rebuilt        : SymbolId(18) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(24) "f2"
rebuilt        : SymbolId(23) "f2"
Reference symbol mismatch for "makeObject":
after transform: SymbolId(32) "makeObject"
rebuilt        : SymbolId(28) "makeObject"
Reference symbol mismatch for "makeObject2":
after transform: SymbolId(42) "makeObject2"
rebuilt        : SymbolId(33) "makeObject2"
Reference symbol mismatch for "defineProp":
after transform: SymbolId(54) "defineProp"
rebuilt        : SymbolId(38) "defineProp"
Reference symbol mismatch for "defineProp":
after transform: SymbolId(54) "defineProp"
rebuilt        : SymbolId(38) "defineProp"
Reference symbol mismatch for "defineProps":
after transform: SymbolId(61) "defineProps"
rebuilt        : SymbolId(42) "defineProps"
Reference symbol mismatch for "Vue":
after transform: SymbolId(82) "Vue"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "ThisType"]
rebuilt        : ["Vue"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTaggedTemplateCall.ts
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTuples.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTypePredicate.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "filter":
after transform: SymbolId(0) "filter"
rebuilt        : SymbolId(0) "filter"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeOptionalCall.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeSyntacticContext.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/namedTupleMembers.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "argumentsOfG", "argumentsOfGAsFirstArgument", "b", "c", "d", "f", "func", "g", "getArgsForInjection", "q", "r", "readSegment", "useState", "val", "x", "y"]
rebuilt        : ScopeId(0): ["argumentsOfG", "argumentsOfGAsFirstArgument", "f", "func", "g", "getArgsForInjection", "readSegment", "useState", "val"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(1): []
Symbol reference IDs mismatch for "readSegment":
after transform: SymbolId(14): [ReferenceId(33)]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(20) "q"
rebuilt        : <None>
Reference symbol mismatch for "r":
after transform: SymbolId(21) "r"
rebuilt        : <None>
Reference symbol mismatch for "r":
after transform: SymbolId(21) "r"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(20) "q"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(24) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(25) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(25) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(24) "x"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(26) "f"
rebuilt        : SymbolId(7) "f"
Reference symbol mismatch for "getArgsForInjection":
after transform: SymbolId(32) "getArgsForInjection"
rebuilt        : SymbolId(12) "getArgsForInjection"
Reference symbol mismatch for "g":
after transform: SymbolId(29) "g"
rebuilt        : SymbolId(9) "g"
Reference symbol mismatch for "f":
after transform: SymbolId(26) "f"
rebuilt        : SymbolId(7) "f"
Reference symbol mismatch for "getArgsForInjection":
after transform: SymbolId(32) "getArgsForInjection"
rebuilt        : SymbolId(12) "getArgsForInjection"
Reference symbol mismatch for "g":
after transform: SymbolId(29) "g"
rebuilt        : SymbolId(9) "g"
Unresolved references mismatch:
after transform: ["Parameters"]
rebuilt        : ["a", "b", "c", "d", "q", "r", "x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples.ts
Bindings mismatch:
after transform: ScopeId(0): ["fa1", "fa2", "fb1", "fb2", "fb3", "input", "output", "test"]
rebuilt        : ScopeId(0): ["fa1", "fa2", "fb1", "fb2", "fb3", "output", "test"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Reference symbol mismatch for "test":
after transform: SymbolId(34) "test"
rebuilt        : SymbolId(13) "test"
Reference symbol mismatch for "input":
after transform: SymbolId(38) "input"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["input"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples3.ts
Bindings mismatch:
after transform: ScopeId(0): ["output", "tuple"]
rebuilt        : ScopeId(0): ["output"]
Reference symbol mismatch for "tuple":
after transform: SymbolId(0) "tuple"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["tuple"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples2.ts
Bindings mismatch:
after transform: ScopeId(0): ["A", "_decorate", "_decorateMetadata", "_defineProperty", "f1", "someDec"]
rebuilt        : ScopeId(0): ["A", "_decorate", "_decorateMetadata", "_defineProperty", "f1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "someDec":
after transform: SymbolId(11) "someDec"
rebuilt        : <None>
Reference symbol mismatch for "someDec":
after transform: SymbolId(11) "someDec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "require"]
rebuilt        : ["Array", "require", "someDec"]
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(0), ReferenceId(6), ReferenceId(10)]
rebuilt        : [ReferenceId(8), ReferenceId(13)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/typeInferenceWithTupleType.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(23), SymbolId(27)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(17), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
Reference symbol mismatch for "f1":
after transform: SymbolId(19) "f1"
rebuilt        : SymbolId(15) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(23) "f2"
rebuilt        : SymbolId(17) "f2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples1.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/asiPreventsParsingAsTypeAlias02.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "container":
after transform: SymbolId(3): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "container":
after transform: SymbolId(3): Span { start: 42, end: 51 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/builtinIteratorReturn.ts
Bindings mismatch:
after transform: ScopeId(0): ["array", "i0", "i1", "i10", "i11", "i12", "i13", "i14", "i15", "i16", "i17", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "map", "set"]
rebuilt        : ScopeId(0): ["i0", "i1", "i10", "i11", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9"]
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Iterable", "IterableIterator", "Map", "Set", "Symbol"]
rebuilt        : ["Symbol", "array", "map", "set"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/circularTypeAliasForUnionWithClass.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "I0":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "I3":
after transform: SymbolId(5): [ReferenceId(4)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "I4":
after transform: SymbolId(8): [ReferenceId(7)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/circularTypeAliasForUnionWithInterface.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/classDoesNotDependOnBaseTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "StringTreeCollection":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(1): [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/genericTypeAliases.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/interfaceDoesNotDependOnBaseTypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/typeAliases.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(12), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(34), SymbolId(35), SymbolId(37), SymbolId(41), SymbolId(43), SymbolId(47), SymbolId(49), SymbolId(50), SymbolId(51)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(18), SymbolId(19), SymbolId(21), SymbolId(24), SymbolId(26), SymbolId(29), SymbolId(31), SymbolId(32)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Bindings mismatch:
after transform: ScopeId(26): ["E", "x"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol reference IDs mismatch for "C7":
after transform: SymbolId(13): [ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(7): []
Symbol flags mismatch for "E":
after transform: SymbolId(41): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(24): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "foo13":
after transform: SymbolId(28) "foo13"
rebuilt        : SymbolId(15) "foo13"
Reference symbol mismatch for "foo13":
after transform: SymbolId(28) "foo13"
rebuilt        : SymbolId(15) "foo13"
Reference symbol mismatch for "f15":
after transform: SymbolId(43) "f15"
rebuilt        : SymbolId(26) "f15"
Reference symbol mismatch for "f16":
after transform: SymbolId(47) "f16"
rebuilt        : SymbolId(29) "f16"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/recurringTypeParamForContainerOfBase01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithZeroTypeArguments.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny.ts
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithEmptyObject.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(14): []
Unresolved references mismatch:
after transform: ["Date", "Function", "require"]
rebuilt        : ["Function", "require"]
Unresolved reference IDs mismatch for "Function":
after transform: [ReferenceId(0), ReferenceId(6), ReferenceId(58)]
rebuilt        : [ReferenceId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints2.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/innerTypeParameterShadowingOuterOne.ts
Unresolved references mismatch:
after transform: ["Date", "Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/innerTypeParameterShadowingOuterOne2.ts
Unresolved references mismatch:
after transform: ["Date", "Number"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(18), ReferenceId(24)]
rebuilt        : [ReferenceId(12)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(29), ReferenceId(30), ReferenceId(33), ReferenceId(34), ReferenceId(39), ReferenceId(40), ReferenceId(49), ReferenceId(50)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(15), ReferenceId(17), ReferenceId(22), ReferenceId(42)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(14)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(22), ReferenceId(26), ReferenceId(30), ReferenceId(39)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(23), ReferenceId(36), ReferenceId(38), ReferenceId(46)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(15), ReferenceId(17), ReferenceId(22)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithoutConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiersReverseMappedTypes.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(9), SymbolId(10), SymbolId(14), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(24)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(12), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "test1":
after transform: SymbolId(0) "test1"
rebuilt        : SymbolId(0) "test1"
Reference symbol mismatch for "test2":
after transform: SymbolId(5) "test2"
rebuilt        : SymbolId(3) "test2"
Reference symbol mismatch for "test3":
after transform: SymbolId(10) "test3"
rebuilt        : SymbolId(6) "test3"
Reference symbol mismatch for "test4":
after transform: SymbolId(15) "test4"
rebuilt        : SymbolId(9) "test4"
Reference symbol mismatch for "test5":
after transform: SymbolId(20) "test5"
rebuilt        : SymbolId(12) "test5"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiersWithIntersection.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "test":
after transform: SymbolId(2) "test"
rebuilt        : SymbolId(0) "test"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterUsedAsConstraint.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignabilityInInheritance.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignableToEveryType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignableToEveryType2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(9)]
Symbol flags mismatch for "SimpleTypes":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "SimpleTypes":
after transform: SymbolId(0): Span { start: 146, end: 157 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "S":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "ObjectTypes":
after transform: SymbolId(13): SymbolFlags(ValueModule)
rebuilt        : SymbolId(13): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ObjectTypes":
after transform: SymbolId(13): Span { start: 700, end: 711 }
rebuilt        : SymbolId(13): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "S":
after transform: SymbolId(14): [ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(15): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(15): [ReferenceId(43), ReferenceId(45)]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(22): [ReferenceId(50), ReferenceId(72), ReferenceId(75), ReferenceId(76), ReferenceId(78), ReferenceId(80)]
rebuilt        : SymbolId(21): [ReferenceId(65), ReferenceId(68), ReferenceId(69), ReferenceId(71), ReferenceId(73)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(23): [ReferenceId(51), ReferenceId(69), ReferenceId(73), ReferenceId(74), ReferenceId(87)]
rebuilt        : SymbolId(22): [ReferenceId(62), ReferenceId(66), ReferenceId(67), ReferenceId(80)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersNumericNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(44)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(40), ReferenceId(56), ReferenceId(61), ReferenceId(67), ReferenceId(75), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(99), ReferenceId(107)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(57), ReferenceId(62), ReferenceId(68), ReferenceId(76), ReferenceId(82), ReferenceId(95), ReferenceId(97)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(58), ReferenceId(66)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(59)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(30), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(44)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(40), ReferenceId(56), ReferenceId(61), ReferenceId(67), ReferenceId(75), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(99), ReferenceId(107)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(57), ReferenceId(62), ReferenceId(68), ReferenceId(76), ReferenceId(82), ReferenceId(95), ReferenceId(97)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(27), ReferenceId(35), ReferenceId(41), ReferenceId(48), ReferenceId(51), ReferenceId(68), ReferenceId(76), ReferenceId(83), ReferenceId(86), ReferenceId(88), ReferenceId(92)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(30), ReferenceId(33), ReferenceId(37), ReferenceId(45), ReferenceId(69)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(54)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(30), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/everyTypeAssignableToAny.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(60)]
rebuilt        : SymbolId(5): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/intersectionIncludingPropFromGlobalAugmentation.ts
Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "hasOwn", "source", "target", "toString"]
rebuilt        : ScopeId(0): ["_objectSpread", "hasOwn", "target", "toString"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "source":
after transform: SymbolId(2) "source"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["source"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/nullAssignableToEveryType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(24)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/numberAssignableToEnum.ts
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/undefinedAssignableToEveryType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(46)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require", "undefined"]
rebuilt        : ["require", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/arrayLiteralWithMultipleBestCommonTypes.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfConditionalExpressions.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(13)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfConditionalExpressions2.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements2.ts
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(1), ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/heterogeneousArrayLiterals.ts
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(29): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(32): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(29): [ScopeId(30), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(32): [ScopeId(33), ScopeId(34)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(14): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(27), ReferenceId(32), ReferenceId(47), ReferenceId(91), ReferenceId(92), ReferenceId(113)]
rebuilt        : SymbolId(15): [ReferenceId(3), ReferenceId(6)]
Symbol flags mismatch for "Derived":
after transform: SymbolId(15): SymbolFlags(Class | ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(Class)
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(15): [ReferenceId(4), ReferenceId(30), ReferenceId(31), ReferenceId(48), ReferenceId(69), ReferenceId(70), ReferenceId(116), ReferenceId(117)]
rebuilt        : SymbolId(16): [ReferenceId(30), ReferenceId(31)]
Symbol redeclarations mismatch for "Derived":
after transform: SymbolId(15): [Span { start: 689, end: 696 }, Span { start: 842, end: 849 }]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(16): [ReferenceId(5)]
rebuilt        : SymbolId(18): []
Symbol flags mismatch for "WithContextualType":
after transform: SymbolId(30): SymbolFlags(ValueModule)
rebuilt        : SymbolId(34): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "WithContextualType":
after transform: SymbolId(30): Span { start: 1461, end: 1479 }
rebuilt        : SymbolId(34): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityWithUnionTypes01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/independentPropertyVariance.ts
Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/optionalProperties01.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/optionalProperties02.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/weakTypesAndLiterals01.ts
Bindings mismatch:
after transform: ScopeId(0): ["aOrB", "f", "g", "h", "i"]
rebuilt        : ScopeId(0): ["f", "g", "h", "i"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
Reference symbol mismatch for "aOrB":
after transform: SymbolId(2) "aOrB"
rebuilt        : <None>
Reference symbol mismatch for "aOrB":
after transform: SymbolId(2) "aOrB"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["aOrB"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/instanceOf/narrowingConstrainedTypeVariable.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(6)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "E":
after transform: SymbolId(13): [ReferenceId(17), ReferenceId(20)]
rebuilt        : SymbolId(11): [ReferenceId(11)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/arrayLiteralsWithRecursiveGenerics.ts
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "DerivedList":
after transform: SymbolId(2): [ReferenceId(19)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "MyList":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(9), ReferenceId(13)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughInstantiation2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughTypeInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeInGenericConstraint.ts
Symbol reference IDs mismatch for "G":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(4): [ReferenceId(10)]
rebuilt        : SymbolId(3): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypesUsedAsFunctionParameters.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(18), ReferenceId(24), ReferenceId(27), ReferenceId(31)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "MyList":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(21), ReferenceId(29), ReferenceId(32)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/nullIsSubtypeOfEverythingButUndefined.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/stringLiteralTypeIsSubtypeOfString.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(28), ScopeId(29), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71)]
Bindings mismatch:
after transform: ScopeId(63): ["A", "E"]
rebuilt        : ScopeId(62): ["E"]
Scope flags mismatch:
after transform: ScopeId(63): ScopeFlags(0x0)
rebuilt        : ScopeId(62): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(36): [ReferenceId(5)]
rebuilt        : SymbolId(37): []
Symbol flags mismatch for "E":
after transform: SymbolId(80): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(74): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(80): [ReferenceId(13), ReferenceId(29)]
rebuilt        : SymbolId(74): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Object", "RegExp", "RegExpMatchArray", "String", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfAny.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithConstraints2.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures.ts
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4), SymbolId(6), SymbolId(9), SymbolId(12), SymbolId(15), SymbolId(18)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(12), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Symbol flags mismatch for "CallSignature":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "CallSignature":
after transform: SymbolId(0): Span { start: 7, end: 20 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : SymbolId(2) "foo1"
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : SymbolId(2) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : SymbolId(9) "foo2"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : SymbolId(9) "foo2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(19), SymbolId(22), SymbolId(25), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(37), SymbolId(40), SymbolId(43), SymbolId(46), SymbolId(49), SymbolId(54), SymbolId(57), SymbolId(60), SymbolId(63), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(71), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(79), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(89), SymbolId(92), SymbolId(93), SymbolId(94), SymbolId(95), SymbolId(99), SymbolId(101), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(108), SymbolId(110), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(118), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(124), SymbolId(130), SymbolId(134), SymbolId(135), SymbolId(136), SymbolId(137), SymbolId(143), SymbolId(147), SymbolId(148), SymbolId(149), SymbolId(150), SymbolId(153), SymbolId(155), SymbolId(156), SymbolId(157), SymbolId(158), SymbolId(162), SymbolId(165), SymbolId(166), SymbolId(167), SymbolId(168), SymbolId(172), SymbolId(175), SymbolId(176), SymbolId(177), SymbolId(178), SymbolId(182), SymbolId(185), SymbolId(186), SymbolId(187), SymbolId(188), SymbolId(191), SymbolId(193), SymbolId(194), SymbolId(195), SymbolId(196), SymbolId(199), SymbolId(200), SymbolId(203), SymbolId(204), SymbolId(207), SymbolId(208), SymbolId(211), SymbolId(212)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(38), SymbolId(41), SymbolId(44), SymbolId(47), SymbolId(50), SymbolId(53), SymbolId(56), SymbolId(59), SymbolId(62), SymbolId(64), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(71), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(78), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(86), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(92), SymbolId(94), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(101), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(106), SymbolId(109), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(115), SymbolId(119), SymbolId(123), SymbolId(124), SymbolId(125), SymbolId(126), SymbolId(130), SymbolId(134), SymbolId(135), SymbolId(136), SymbolId(137), SymbolId(139), SymbolId(141), SymbolId(142), SymbolId(143), SymbolId(144), SymbolId(147), SymbolId(150), SymbolId(151), SymbolId(152), SymbolId(153), SymbolId(156), SymbolId(159), SymbolId(160), SymbolId(161), SymbolId(162), SymbolId(165), SymbolId(168), SymbolId(169), SymbolId(170), SymbolId(171), SymbolId(173), SymbolId(175), SymbolId(176), SymbolId(177), SymbolId(178), SymbolId(180), SymbolId(181), SymbolId(183), SymbolId(184), SymbolId(186), SymbolId(187), SymbolId(189)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(51), ScopeId(53), ScopeId(54), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(77), ScopeId(79), ScopeId(81), ScopeId(83), ScopeId(86), ScopeId(89), ScopeId(93), ScopeId(97), ScopeId(101), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(117), ScopeId(119)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(59), ScopeId(61), ScopeId(63), ScopeId(65), ScopeId(67), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82)]
Scope children mismatch:
after transform: ScopeId(75): [ScopeId(76)]
rebuilt        : ScopeId(53): []
Scope children mismatch:
after transform: ScopeId(77): [ScopeId(78)]
rebuilt        : ScopeId(54): []
Scope children mismatch:
after transform: ScopeId(79): [ScopeId(80)]
rebuilt        : ScopeId(55): []
Scope children mismatch:
after transform: ScopeId(81): [ScopeId(82)]
rebuilt        : ScopeId(56): []
Scope children mismatch:
after transform: ScopeId(83): [ScopeId(84), ScopeId(85)]
rebuilt        : ScopeId(57): [ScopeId(58)]
Scope children mismatch:
after transform: ScopeId(86): [ScopeId(87), ScopeId(88)]
rebuilt        : ScopeId(59): [ScopeId(60)]
Scope children mismatch:
after transform: ScopeId(89): [ScopeId(90), ScopeId(91), ScopeId(92)]
rebuilt        : ScopeId(61): [ScopeId(62)]
Scope children mismatch:
after transform: ScopeId(93): [ScopeId(94), ScopeId(95), ScopeId(96)]
rebuilt        : ScopeId(63): [ScopeId(64)]
Scope children mismatch:
after transform: ScopeId(97): [ScopeId(98), ScopeId(99), ScopeId(100)]
rebuilt        : ScopeId(65): [ScopeId(66)]
Scope children mismatch:
after transform: ScopeId(101): [ScopeId(102), ScopeId(103), ScopeId(104)]
rebuilt        : ScopeId(67): [ScopeId(68)]
Scope children mismatch:
after transform: ScopeId(117): [ScopeId(118)]
rebuilt        : ScopeId(81): []
Scope children mismatch:
after transform: ScopeId(119): [ScopeId(120)]
rebuilt        : ScopeId(82): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(34), ReferenceId(37), ReferenceId(44), ReferenceId(55), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(117), ReferenceId(123), ReferenceId(125), ReferenceId(133), ReferenceId(141), ReferenceId(143), ReferenceId(145), ReferenceId(153), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(183), ReferenceId(187), ReferenceId(195), ReferenceId(197), ReferenceId(202), ReferenceId(216), ReferenceId(220), ReferenceId(245)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(13), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(41), ReferenceId(46), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(118), ReferenceId(124), ReferenceId(126), ReferenceId(134), ReferenceId(142), ReferenceId(144), ReferenceId(146), ReferenceId(154), ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(172), ReferenceId(175), ReferenceId(176), ReferenceId(200), ReferenceId(206), ReferenceId(214), ReferenceId(222), ReferenceId(224)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(39), ReferenceId(204)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(4) "foo1"
rebuilt        : SymbolId(8) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(7) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(10) "foo3"
rebuilt        : SymbolId(14) "foo3"
Reference symbol mismatch for "foo4":
after transform: SymbolId(13) "foo4"
rebuilt        : SymbolId(17) "foo4"
Reference symbol mismatch for "foo5":
after transform: SymbolId(16) "foo5"
rebuilt        : SymbolId(20) "foo5"
Reference symbol mismatch for "foo6":
after transform: SymbolId(19) "foo6"
rebuilt        : SymbolId(23) "foo6"
Reference symbol mismatch for "foo7":
after transform: SymbolId(22) "foo7"
rebuilt        : SymbolId(26) "foo7"
Reference symbol mismatch for "foo8":
after transform: SymbolId(25) "foo8"
rebuilt        : SymbolId(29) "foo8"
Reference symbol mismatch for "foo9":
after transform: SymbolId(28) "foo9"
rebuilt        : SymbolId(32) "foo9"
Reference symbol mismatch for "foo10":
after transform: SymbolId(31) "foo10"
rebuilt        : SymbolId(35) "foo10"
Reference symbol mismatch for "foo11":
after transform: SymbolId(34) "foo11"
rebuilt        : SymbolId(38) "foo11"
Reference symbol mismatch for "foo12":
after transform: SymbolId(37) "foo12"
rebuilt        : SymbolId(41) "foo12"
Reference symbol mismatch for "foo13":
after transform: SymbolId(40) "foo13"
rebuilt        : SymbolId(44) "foo13"
Reference symbol mismatch for "foo14":
after transform: SymbolId(43) "foo14"
rebuilt        : SymbolId(47) "foo14"
Reference symbol mismatch for "foo15":
after transform: SymbolId(46) "foo15"
rebuilt        : SymbolId(50) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(49) "foo16"
rebuilt        : SymbolId(53) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(54) "foo17"
rebuilt        : SymbolId(56) "foo17"
Reference symbol mismatch for "foo18":
after transform: SymbolId(57) "foo18"
rebuilt        : SymbolId(59) "foo18"
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures3.ts
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(33), SymbolId(37), SymbolId(42), SymbolId(47), SymbolId(53), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(65), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(75), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(84), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(93), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(103), SymbolId(105), SymbolId(106), SymbolId(107), SymbolId(108), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(117), SymbolId(118), SymbolId(121), SymbolId(139)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(19), SymbolId(22), SymbolId(25), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(37), SymbolId(39), SymbolId(42), SymbolId(45), SymbolId(48), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(58), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(67), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(75), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(84), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(92), SymbolId(94), SymbolId(95), SymbolId(96), SymbolId(97), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(102), SymbolId(104), SymbolId(105), SymbolId(107)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(13), ScopeId(14), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(44), ScopeId(47), ScopeId(51), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(66)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51)]
Scope children mismatch:
after transform: ScopeId(41): [ScopeId(42), ScopeId(43)]
rebuilt        : ScopeId(33): [ScopeId(34)]
Scope children mismatch:
after transform: ScopeId(44): [ScopeId(45), ScopeId(46)]
rebuilt        : ScopeId(35): [ScopeId(36)]
Scope children mismatch:
after transform: ScopeId(47): [ScopeId(48), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(37): [ScopeId(38)]
Scope children mismatch:
after transform: ScopeId(51): [ScopeId(52), ScopeId(53), ScopeId(54)]
rebuilt        : ScopeId(39): [ScopeId(40)]
Scope children mismatch:
after transform: ScopeId(64): [ScopeId(65)]
rebuilt        : ScopeId(50): []
Scope children mismatch:
after transform: ScopeId(66): [ScopeId(67)]
rebuilt        : ScopeId(51): []
Binding symbols mismatch:
after transform: ScopeId(68): [SymbolId(123), SymbolId(127), SymbolId(130), SymbolId(131), SymbolId(135), SymbolId(138), SymbolId(140)]
rebuilt        : ScopeId(52): [SymbolId(109), SymbolId(110), SymbolId(113), SymbolId(115), SymbolId(116), SymbolId(119), SymbolId(121)]
Scope flags mismatch:
after transform: ScopeId(68): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(52): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(68): [ScopeId(69), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(75), ScopeId(76)]
rebuilt        : ScopeId(52): [ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58)]
Symbol flags mismatch for "Errors":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Errors":
after transform: SymbolId(0): Span { start: 168, end: 174 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(33), ReferenceId(39), ReferenceId(50), ReferenceId(57), ReferenceId(59), ReferenceId(67), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(89), ReferenceId(90), ReferenceId(101), ReferenceId(109), ReferenceId(117), ReferenceId(119), ReferenceId(136)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(26), ReferenceId(30), ReferenceId(51), ReferenceId(58), ReferenceId(68), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(86), ReferenceId(97), ReferenceId(113)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(3): [ReferenceId(7), ReferenceId(24), ReferenceId(36), ReferenceId(52), ReferenceId(60), ReferenceId(111), ReferenceId(115)]
rebuilt        : SymbolId(6): []
Symbol flags mismatch for "WithGenericSignaturesInBaseType":
after transform: SymbolId(122): SymbolFlags(ValueModule)
rebuilt        : SymbolId(108): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "WithGenericSignaturesInBaseType":
after transform: SymbolId(122): Span { start: 4321, end: 4352 }
rebuilt        : SymbolId(108): Span { start: 0, end: 0 }
Reference symbol mismatch for "foo2":
after transform: SymbolId(5) "foo2"
rebuilt        : SymbolId(10) "foo2"
Reference symbol mismatch for "foo7":
after transform: SymbolId(8) "foo7"
rebuilt        : SymbolId(13) "foo7"
Reference symbol mismatch for "foo8":
after transform: SymbolId(11) "foo8"
rebuilt        : SymbolId(16) "foo8"
Reference symbol mismatch for "foo10":
after transform: SymbolId(14) "foo10"
rebuilt        : SymbolId(19) "foo10"
Reference symbol mismatch for "foo11":
after transform: SymbolId(17) "foo11"
rebuilt        : SymbolId(22) "foo11"
Reference symbol mismatch for "foo12":
after transform: SymbolId(20) "foo12"
rebuilt        : SymbolId(25) "foo12"
Reference symbol mismatch for "foo15":
after transform: SymbolId(23) "foo15"
rebuilt        : SymbolId(28) "foo15"
Reference symbol mismatch for "foo15":
after transform: SymbolId(23) "foo15"
rebuilt        : SymbolId(28) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(26) "foo16"
rebuilt        : SymbolId(31) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(29) "foo17"
rebuilt        : SymbolId(34) "foo17"
Reference symbol mismatch for "foo2":
after transform: SymbolId(123) "foo2"
rebuilt        : SymbolId(110) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(131) "foo3"
rebuilt        : SymbolId(116) "foo3"
Unresolved references mismatch:
after transform: ["Array", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(8), SymbolId(12), SymbolId(16), SymbolId(21), SymbolId(26), SymbolId(30), SymbolId(34), SymbolId(38), SymbolId(42), SymbolId(46), SymbolId(50), SymbolId(53), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(62), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(71), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(82), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(94), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(105), SymbolId(108), SymbolId(109), SymbolId(110), SymbolId(111), SymbolId(116), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(127), SymbolId(130), SymbolId(131), SymbolId(132), SymbolId(133), SymbolId(136), SymbolId(139), SymbolId(140), SymbolId(141), SymbolId(142), SymbolId(145), SymbolId(146), SymbolId(149), SymbolId(150)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(38), SymbolId(41), SymbolId(43), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(50), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(57), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(65), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(73), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(80), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(88), SymbolId(91), SymbolId(92), SymbolId(93), SymbolId(94), SymbolId(96), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(103), SymbolId(105), SymbolId(106), SymbolId(107), SymbolId(108), SymbolId(110), SymbolId(111), SymbolId(113)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(28), ScopeId(30), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(54), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(64)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50)]
Scope children mismatch:
after transform: ScopeId(48): [ScopeId(49)]
rebuilt        : ScopeId(39): []
Scope children mismatch:
after transform: ScopeId(50): [ScopeId(51)]
rebuilt        : ScopeId(40): []
Scope children mismatch:
after transform: ScopeId(52): [ScopeId(53)]
rebuilt        : ScopeId(41): []
Scope children mismatch:
after transform: ScopeId(54): [ScopeId(55)]
rebuilt        : ScopeId(42): []
Scope children mismatch:
after transform: ScopeId(62): [ScopeId(63)]
rebuilt        : ScopeId(49): []
Scope children mismatch:
after transform: ScopeId(64): [ScopeId(65)]
rebuilt        : ScopeId(50): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(96), ReferenceId(101), ReferenceId(114), ReferenceId(118), ReferenceId(137), ReferenceId(141)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(97), ReferenceId(103)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(4) "foo1"
rebuilt        : SymbolId(8) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo3":
after transform: SymbolId(14) "foo3"
rebuilt        : <None>
Reference symbol mismatch for "foo4":
after transform: SymbolId(19) "foo4"
rebuilt        : <None>
Reference symbol mismatch for "foo5":
after transform: SymbolId(26) "foo5"
rebuilt        : <None>
Reference symbol mismatch for "foo6":
after transform: SymbolId(33) "foo6"
rebuilt        : <None>
Reference symbol mismatch for "foo11":
after transform: SymbolId(39) "foo11"
rebuilt        : <None>
Reference symbol mismatch for "foo15":
after transform: SymbolId(45) "foo15"
rebuilt        : <None>
Reference symbol mismatch for "foo16":
after transform: SymbolId(50) "foo16"
rebuilt        : <None>
Reference symbol mismatch for "foo17":
after transform: SymbolId(55) "foo17"
rebuilt        : <None>
Reference symbol mismatch for "foo18":
after transform: SymbolId(64) "foo18"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["foo1", "foo11", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures.ts
Bindings mismatch:
after transform: ScopeId(1): ["_ConstructSignature", "foo1", "foo2", "r", "r2", "r3", "r3arg1", "r4", "r4arg1", "rarg1", "rarg2"]
rebuilt        : ScopeId(1): ["_ConstructSignature", "r", "r2", "r3", "r3arg1", "r4", "r4arg1", "rarg1", "rarg2"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "ConstructSignature":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ConstructSignature":
after transform: SymbolId(0): Span { start: 7, end: 25 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : <None>
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(12) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(12) "foo2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo1", "foo2"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures2.ts
Bindings mismatch:
after transform: ScopeId(0): ["Base", "Derived", "Derived2", "OtherDerived", "_defineProperty", "foo1", "foo10", "foo11", "foo12", "foo13", "foo14", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9", "r1", "r10", "r10a", "r10arg1", "r10arg2", "r10b", "r11", "r11a", "r11arg1", "r11arg2", "r11b", "r12", "r12a", "r12arg1", "r12arg2", "r12b", "r13", "r13a", "r13arg1", "r13arg2", "r13b", "r14", "r14a", "r14arg1", "r14arg2", "r14b", "r15", "r15arg1", "r16", "r16arg1", "r17", "r17arg1", "r18", "r18arg1", "r1a", "r1arg1", "r1arg2", "r1b", "r2", "r2a", "r2arg1", "r2arg2", "r2b", "r3", "r3a", "r3arg1", "r3arg2", "r3b", "r4", "r4a", "r4arg1", "r4arg2", "r4b", "r5", "r5a", "r5arg1", "r5arg2", "r5b", "r6", "r6a", "r6arg1", "r6arg2", "r6b", "r7", "r7a", "r7arg1", "r7arg2", "r7b", "r8", "r8a", "r8arg1", "r8arg2", "r8b", "r9", "r9a", "r9arg1", "r9arg2", "r9b"]
rebuilt        : ScopeId(0): ["Base", "Derived", "Derived2", "OtherDerived", "_defineProperty", "r1", "r10", "r10a", "r10arg1", "r10arg2", "r10b", "r11", "r11a", "r11arg1", "r11arg2", "r11b", "r12", "r12a", "r12arg1", "r12arg2", "r12b", "r13", "r13a", "r13arg1", "r13arg2", "r13b", "r14", "r14a", "r14arg1", "r14arg2", "r14b", "r15", "r15arg1", "r16", "r16arg1", "r17", "r17arg1", "r18", "r18arg1", "r1a", "r1arg1", "r1arg2", "r1b", "r2", "r2a", "r2arg1", "r2arg2", "r2b", "r3", "r3a", "r3arg1", "r3arg2", "r3b", "r4", "r4a", "r4arg1", "r4arg2", "r4b", "r5", "r5a", "r5arg1", "r5arg2", "r5b", "r6", "r6a", "r6arg1", "r6arg2", "r6b", "r7", "r7a", "r7arg1", "r7arg2", "r7b", "r8", "r8a", "r8arg1", "r8arg2", "r8b", "r9", "r9a", "r9arg1", "r9arg2", "r9b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(51), ScopeId(53), ScopeId(54), ScopeId(56), ScopeId(57), ScopeId(60), ScopeId(61), ScopeId(64), ScopeId(65), ScopeId(70), ScopeId(71), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(89), ScopeId(91), ScopeId(93), ScopeId(95), ScopeId(98), ScopeId(101), ScopeId(105), ScopeId(109), ScopeId(113), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(122), ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(129), ScopeId(131)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(34), ReferenceId(37), ReferenceId(44), ReferenceId(55), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(117), ReferenceId(123), ReferenceId(125), ReferenceId(133), ReferenceId(141), ReferenceId(143), ReferenceId(145), ReferenceId(153), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(183), ReferenceId(187), ReferenceId(195), ReferenceId(197), ReferenceId(202), ReferenceId(216), ReferenceId(220), ReferenceId(245)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(13), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(41), ReferenceId(46), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(118), ReferenceId(124), ReferenceId(126), ReferenceId(134), ReferenceId(142), ReferenceId(144), ReferenceId(146), ReferenceId(154), ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(172), ReferenceId(175), ReferenceId(176), ReferenceId(200), ReferenceId(206), ReferenceId(214), ReferenceId(222), ReferenceId(224)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(39), ReferenceId(204)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(4) "foo1"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(8) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(12) "foo3"
rebuilt        : SymbolId(14) "foo3"
Reference symbol mismatch for "foo4":
after transform: SymbolId(16) "foo4"
rebuilt        : SymbolId(17) "foo4"
Reference symbol mismatch for "foo5":
after transform: SymbolId(21) "foo5"
rebuilt        : SymbolId(20) "foo5"
Reference symbol mismatch for "foo6":
after transform: SymbolId(26) "foo6"
rebuilt        : SymbolId(23) "foo6"
Reference symbol mismatch for "foo11":
after transform: SymbolId(30) "foo11"
rebuilt        : SymbolId(26) "foo11"
Reference symbol mismatch for "foo15":
after transform: SymbolId(34) "foo15"
rebuilt        : SymbolId(29) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(38) "foo16"
rebuilt        : SymbolId(32) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(42) "foo17"
rebuilt        : SymbolId(35) "foo17"
Reference symbol mismatch for "foo18":
after transform: SymbolId(46) "foo18"
rebuilt        : SymbolId(38) "foo18"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures.ts
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol flags mismatch for "ConstructSignature":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "ConstructSignature":
after transform: SymbolId(0): Span { start: 7, end: 25 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : SymbolId(2) "foo1"
Reference symbol mismatch for "foo1":
after transform: SymbolId(1) "foo1"
rebuilt        : SymbolId(2) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : SymbolId(9) "foo2"
Reference symbol mismatch for "foo2":
after transform: SymbolId(9) "foo2"
rebuilt        : SymbolId(9) "foo2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(19), SymbolId(22), SymbolId(25), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(37), SymbolId(40), SymbolId(43), SymbolId(46), SymbolId(49), SymbolId(54), SymbolId(57), SymbolId(60), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(92), SymbolId(93), SymbolId(94), SymbolId(95), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(106), SymbolId(107), SymbolId(108), SymbolId(109), SymbolId(110), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(115), SymbolId(116), SymbolId(117), SymbolId(118), SymbolId(119), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(124), SymbolId(125), SymbolId(126), SymbolId(127), SymbolId(128), SymbolId(129), SymbolId(130), SymbolId(131), SymbolId(132), SymbolId(133), SymbolId(134), SymbolId(135), SymbolId(136), SymbolId(137), SymbolId(138), SymbolId(139), SymbolId(140)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(38), SymbolId(41), SymbolId(44), SymbolId(47), SymbolId(50), SymbolId(53), SymbolId(56), SymbolId(59), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(92), SymbolId(93), SymbolId(94), SymbolId(95), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(106), SymbolId(107), SymbolId(108), SymbolId(109), SymbolId(110), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(115), SymbolId(116), SymbolId(117), SymbolId(118), SymbolId(119), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(124), SymbolId(125), SymbolId(126), SymbolId(127), SymbolId(128), SymbolId(129), SymbolId(130), SymbolId(131), SymbolId(132), SymbolId(133), SymbolId(134), SymbolId(135), SymbolId(136), SymbolId(137), SymbolId(138), SymbolId(139)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(36), ScopeId(37), ScopeId(40), ScopeId(41), ScopeId(46), ScopeId(47), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(34), ReferenceId(37), ReferenceId(44), ReferenceId(55), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(117), ReferenceId(123), ReferenceId(125), ReferenceId(133), ReferenceId(141), ReferenceId(143), ReferenceId(145), ReferenceId(153), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(183), ReferenceId(187), ReferenceId(195), ReferenceId(197), ReferenceId(202), ReferenceId(216), ReferenceId(220), ReferenceId(245)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(13), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(41), ReferenceId(46), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(118), ReferenceId(124), ReferenceId(126), ReferenceId(134), ReferenceId(142), ReferenceId(144), ReferenceId(146), ReferenceId(154), ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(172), ReferenceId(175), ReferenceId(176), ReferenceId(200), ReferenceId(206), ReferenceId(214), ReferenceId(222), ReferenceId(224)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(39), ReferenceId(204)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(4) "foo1"
rebuilt        : SymbolId(8) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(7) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(10) "foo3"
rebuilt        : SymbolId(14) "foo3"
Reference symbol mismatch for "foo4":
after transform: SymbolId(13) "foo4"
rebuilt        : SymbolId(17) "foo4"
Reference symbol mismatch for "foo5":
after transform: SymbolId(16) "foo5"
rebuilt        : SymbolId(20) "foo5"
Reference symbol mismatch for "foo6":
after transform: SymbolId(19) "foo6"
rebuilt        : SymbolId(23) "foo6"
Reference symbol mismatch for "foo7":
after transform: SymbolId(22) "foo7"
rebuilt        : SymbolId(26) "foo7"
Reference symbol mismatch for "foo8":
after transform: SymbolId(25) "foo8"
rebuilt        : SymbolId(29) "foo8"
Reference symbol mismatch for "foo9":
after transform: SymbolId(28) "foo9"
rebuilt        : SymbolId(32) "foo9"
Reference symbol mismatch for "foo10":
after transform: SymbolId(31) "foo10"
rebuilt        : SymbolId(35) "foo10"
Reference symbol mismatch for "foo11":
after transform: SymbolId(34) "foo11"
rebuilt        : SymbolId(38) "foo11"
Reference symbol mismatch for "foo12":
after transform: SymbolId(37) "foo12"
rebuilt        : SymbolId(41) "foo12"
Reference symbol mismatch for "foo13":
after transform: SymbolId(40) "foo13"
rebuilt        : SymbolId(44) "foo13"
Reference symbol mismatch for "foo14":
after transform: SymbolId(43) "foo14"
rebuilt        : SymbolId(47) "foo14"
Reference symbol mismatch for "foo15":
after transform: SymbolId(46) "foo15"
rebuilt        : SymbolId(50) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(49) "foo16"
rebuilt        : SymbolId(53) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(54) "foo17"
rebuilt        : SymbolId(56) "foo17"
Reference symbol mismatch for "foo18":
after transform: SymbolId(57) "foo18"
rebuilt        : SymbolId(59) "foo18"
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures3.ts
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(36), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(96)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(19), SymbolId(22), SymbolId(25), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(27), ScopeId(28), ScopeId(35), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
Binding symbols mismatch:
after transform: ScopeId(38): [SymbolId(83), SymbolId(87), SymbolId(89), SymbolId(90), SymbolId(94), SymbolId(95), SymbolId(97)]
rebuilt        : ScopeId(28): [SymbolId(81), SymbolId(82), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(90), SymbolId(91)]
Scope flags mismatch:
after transform: ScopeId(38): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(28): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(38): [ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42)]
rebuilt        : ScopeId(28): [ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Symbol flags mismatch for "Errors":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Errors":
after transform: SymbolId(0): Span { start: 168, end: 174 }
rebuilt        : SymbolId(1): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(33), ReferenceId(39), ReferenceId(51), ReferenceId(58), ReferenceId(60), ReferenceId(68), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(90), ReferenceId(91), ReferenceId(102), ReferenceId(110), ReferenceId(118), ReferenceId(120), ReferenceId(137)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(26), ReferenceId(30), ReferenceId(52), ReferenceId(59), ReferenceId(69), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(87), ReferenceId(98), ReferenceId(114)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(3): [ReferenceId(7), ReferenceId(24), ReferenceId(36), ReferenceId(53), ReferenceId(61), ReferenceId(112), ReferenceId(116)]
rebuilt        : SymbolId(6): []
Symbol flags mismatch for "WithGenericSignaturesInBaseType":
after transform: SymbolId(82): SymbolFlags(ValueModule)
rebuilt        : SymbolId(80): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "WithGenericSignaturesInBaseType":
after transform: SymbolId(82): Span { start: 4469, end: 4500 }
rebuilt        : SymbolId(80): Span { start: 0, end: 0 }
Reference symbol mismatch for "foo2":
after transform: SymbolId(5) "foo2"
rebuilt        : SymbolId(10) "foo2"
Reference symbol mismatch for "foo7":
after transform: SymbolId(8) "foo7"
rebuilt        : SymbolId(13) "foo7"
Reference symbol mismatch for "foo8":
after transform: SymbolId(11) "foo8"
rebuilt        : SymbolId(16) "foo8"
Reference symbol mismatch for "foo10":
after transform: SymbolId(14) "foo10"
rebuilt        : SymbolId(19) "foo10"
Reference symbol mismatch for "foo11":
after transform: SymbolId(17) "foo11"
rebuilt        : SymbolId(22) "foo11"
Reference symbol mismatch for "foo12":
after transform: SymbolId(20) "foo12"
rebuilt        : SymbolId(25) "foo12"
Reference symbol mismatch for "foo15":
after transform: SymbolId(23) "foo15"
rebuilt        : SymbolId(28) "foo15"
Reference symbol mismatch for "foo15":
after transform: SymbolId(23) "foo15"
rebuilt        : SymbolId(28) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(26) "foo16"
rebuilt        : SymbolId(31) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(29) "foo17"
rebuilt        : SymbolId(34) "foo17"
Reference symbol mismatch for "foo2":
after transform: SymbolId(83) "foo2"
rebuilt        : SymbolId(82) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(90) "foo3"
rebuilt        : SymbolId(87) "foo3"
Unresolved references mismatch:
after transform: ["Array", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures4.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(8), SymbolId(12), SymbolId(16), SymbolId(21), SymbolId(26), SymbolId(30), SymbolId(34), SymbolId(38), SymbolId(42), SymbolId(47), SymbolId(54), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(93), SymbolId(94), SymbolId(95), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(106)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(38), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(27), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(96), ReferenceId(101), ReferenceId(114), ReferenceId(118), ReferenceId(137), ReferenceId(141)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(97), ReferenceId(103)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(4) "foo1"
rebuilt        : SymbolId(8) "foo1"
Reference symbol mismatch for "foo2":
after transform: SymbolId(8) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "foo3":
after transform: SymbolId(12) "foo3"
rebuilt        : SymbolId(14) "foo3"
Reference symbol mismatch for "foo4":
after transform: SymbolId(16) "foo4"
rebuilt        : SymbolId(17) "foo4"
Reference symbol mismatch for "foo5":
after transform: SymbolId(21) "foo5"
rebuilt        : SymbolId(20) "foo5"
Reference symbol mismatch for "foo6":
after transform: SymbolId(26) "foo6"
rebuilt        : SymbolId(23) "foo6"
Reference symbol mismatch for "foo11":
after transform: SymbolId(30) "foo11"
rebuilt        : SymbolId(26) "foo11"
Reference symbol mismatch for "foo15":
after transform: SymbolId(34) "foo15"
rebuilt        : SymbolId(29) "foo15"
Reference symbol mismatch for "foo16":
after transform: SymbolId(38) "foo16"
rebuilt        : SymbolId(32) "foo16"
Reference symbol mismatch for "foo17":
after transform: SymbolId(42) "foo17"
rebuilt        : SymbolId(35) "foo17"
Reference symbol mismatch for "foo18":
after transform: SymbolId(47) "foo18"
rebuilt        : SymbolId(38) "foo18"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures5.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(30), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers4.ts
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "TwoLevels":
after transform: SymbolId(12): SymbolFlags(ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "TwoLevels":
after transform: SymbolId(12): Span { start: 1157, end: 1166 }
rebuilt        : SymbolId(3): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/undefinedIsSubtypeOfEverything.ts
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentity.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(24), ReferenceId(30)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(11), ReferenceId(12), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentity2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "E"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(5), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(15), ReferenceId(21)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(17), ReferenceId(23)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "E":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(19), ReferenceId(25)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(27), ReferenceId(33), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(14): [ReferenceId(14), ReferenceId(15), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(11), ReferenceId(21), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(43)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(14): [ReferenceId(16), ReferenceId(17), ReferenceId(33), ReferenceId(41)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesDifferingParamCounts.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(28), ReferenceId(34), ReferenceId(36), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(14): [ReferenceId(13), ReferenceId(14), ReferenceId(24), ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(17): [ReferenceId(15), ReferenceId(16), ReferenceId(32), ReferenceId(40)]
rebuilt        : SymbolId(9): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesDifferingParamCounts2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(5), ReferenceId(11), ReferenceId(14)]
rebuilt        : SymbolId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesWithOverloads.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(14), ScopeId(17), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(27), ReferenceId(33), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(22): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(25): [ReferenceId(14), ReferenceId(15), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithComplexConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(8), ReferenceId(16), ReferenceId(24), ReferenceId(28), ReferenceId(30), ReferenceId(34)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(11), ReferenceId(12), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignatures2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(24), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(11), ReferenceId(12), ReferenceId(20), ReferenceId(28)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(12): [ReferenceId(13), ReferenceId(14), ReferenceId(22), ReferenceId(30)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignaturesDifferingParamCounts.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(23), ReferenceId(25), ReferenceId(31)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(10), ReferenceId(11), ReferenceId(19), ReferenceId(27)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(29)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(37), ReferenceId(43), ReferenceId(45), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(15): [ReferenceId(22), ReferenceId(23), ReferenceId(33), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(24), ReferenceId(25), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignatures2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(25): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(30): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(32), ReferenceId(35), ReferenceId(38), ReferenceId(41)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(18), ReferenceId(33), ReferenceId(43), ReferenceId(47), ReferenceId(51), ReferenceId(54)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(20), ReferenceId(22), ReferenceId(36), ReferenceId(49), ReferenceId(59), ReferenceId(62), ReferenceId(71)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(15): [ReferenceId(28), ReferenceId(29), ReferenceId(42), ReferenceId(53), ReferenceId(66)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(30), ReferenceId(31), ReferenceId(56), ReferenceId(69)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Date", "Number", "RegExp", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(32), ReferenceId(33), ReferenceId(56), ReferenceId(60), ReferenceId(75), ReferenceId(79)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(34), ReferenceId(37), ReferenceId(57), ReferenceId(81), ReferenceId(87), ReferenceId(93), ReferenceId(97)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(40), ReferenceId(43), ReferenceId(61), ReferenceId(64), ReferenceId(70), ReferenceId(90), ReferenceId(104), ReferenceId(108), ReferenceId(120)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(15): [ReferenceId(67), ReferenceId(73)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(30): [ReferenceId(52), ReferenceId(53), ReferenceId(80), ReferenceId(96), ReferenceId(114)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(35): [ReferenceId(54), ReferenceId(55), ReferenceId(100), ReferenceId(118)]
rebuilt        : SymbolId(13): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Date", "Number", "RegExp", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76)]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(29)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(33), ReferenceId(39), ReferenceId(40), ReferenceId(42), ReferenceId(43), ReferenceId(62), ReferenceId(63), ReferenceId(87), ReferenceId(88), ReferenceId(93), ReferenceId(94), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(104)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(10): [ReferenceId(36), ReferenceId(37), ReferenceId(60), ReferenceId(64), ReferenceId(80), ReferenceId(84)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(15): [ReferenceId(38), ReferenceId(41), ReferenceId(61), ReferenceId(86), ReferenceId(92), ReferenceId(98), ReferenceId(102)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(20): [ReferenceId(44), ReferenceId(47), ReferenceId(65), ReferenceId(68), ReferenceId(74), ReferenceId(95), ReferenceId(109), ReferenceId(113), ReferenceId(125)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(25): [ReferenceId(71), ReferenceId(77)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(40): [ReferenceId(56), ReferenceId(57), ReferenceId(85), ReferenceId(101), ReferenceId(119)]
rebuilt        : SymbolId(15): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(45): [ReferenceId(58), ReferenceId(59), ReferenceId(105), ReferenceId(123)]
rebuilt        : SymbolId(16): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(36)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(33), ReferenceId(39), ReferenceId(41), ReferenceId(47)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(15): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(35), ReferenceId(43)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(20), ReferenceId(21), ReferenceId(37), ReferenceId(45)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByReturnType2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(17), ReferenceId(18), ReferenceId(35), ReferenceId(38), ReferenceId(41), ReferenceId(44)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21), ReferenceId(36), ReferenceId(46), ReferenceId(50), ReferenceId(54), ReferenceId(57)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(23), ReferenceId(25), ReferenceId(39), ReferenceId(52), ReferenceId(62), ReferenceId(65), ReferenceId(74)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(15): [ReferenceId(31), ReferenceId(32), ReferenceId(45), ReferenceId(56), ReferenceId(69)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(33), ReferenceId(34), ReferenceId(59), ReferenceId(72)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(33)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(35), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(46), ReferenceId(49), ReferenceId(64), ReferenceId(65)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(7): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(39), ReferenceId(48), ReferenceId(52), ReferenceId(63)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(24): [ReferenceId(22), ReferenceId(23), ReferenceId(34), ReferenceId(42), ReferenceId(57)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(31): [ReferenceId(24), ReferenceId(25), ReferenceId(44), ReferenceId(61)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(10), ReferenceId(11), ReferenceId(14), ReferenceId(18)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(37), ReferenceId(43), ReferenceId(45), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(15): [ReferenceId(22), ReferenceId(23), ReferenceId(33), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(24), ReferenceId(25), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(20): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(24): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(25): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(30): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(25): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(30): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(12), ReferenceId(14), ReferenceId(28), ReferenceId(32), ReferenceId(36), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(18), ReferenceId(34), ReferenceId(44), ReferenceId(47)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(24), ReferenceId(25), ReferenceId(38), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(26), ReferenceId(27), ReferenceId(41), ReferenceId(54)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Number", "RegExp", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(28), ReferenceId(31), ReferenceId(61), ReferenceId(67), ReferenceId(73), ReferenceId(77)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(34), ReferenceId(37), ReferenceId(50), ReferenceId(56), ReferenceId(70), ReferenceId(84), ReferenceId(88)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(10): [ReferenceId(53), ReferenceId(59)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(25): [ReferenceId(46), ReferenceId(47), ReferenceId(76), ReferenceId(94)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(30): [ReferenceId(48), ReferenceId(49), ReferenceId(80), ReferenceId(98)]
rebuilt        : SymbolId(10): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Number", "RegExp", "String"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56)]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(25)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(1): [ReferenceId(5), ReferenceId(29), ReferenceId(33), ReferenceId(34), ReferenceId(36), ReferenceId(37), ReferenceId(67), ReferenceId(68), ReferenceId(73), ReferenceId(74), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(10): [ReferenceId(32), ReferenceId(35), ReferenceId(66), ReferenceId(72), ReferenceId(78), ReferenceId(82)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(15): [ReferenceId(38), ReferenceId(41), ReferenceId(54), ReferenceId(60), ReferenceId(75), ReferenceId(89), ReferenceId(93)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(20): [ReferenceId(57), ReferenceId(63)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(35): [ReferenceId(50), ReferenceId(51), ReferenceId(81), ReferenceId(99)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(40): [ReferenceId(52), ReferenceId(53), ReferenceId(85), ReferenceId(103)]
rebuilt        : SymbolId(13): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(12), ReferenceId(13), ReferenceId(25), ReferenceId(31), ReferenceId(33), ReferenceId(39)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(27), ReferenceId(35)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(18), ReferenceId(19), ReferenceId(21), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(15), ReferenceId(17), ReferenceId(31), ReferenceId(35), ReferenceId(39), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21), ReferenceId(37), ReferenceId(47), ReferenceId(50), ReferenceId(59)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(27), ReferenceId(28), ReferenceId(41), ReferenceId(54)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(29), ReferenceId(30), ReferenceId(44), ReferenceId(57)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterCounts.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(31), ReferenceId(33), ReferenceId(34), ReferenceId(36), ReferenceId(39), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(12), ReferenceId(20), ReferenceId(21), ReferenceId(32), ReferenceId(41), ReferenceId(45)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(21): [ReferenceId(24), ReferenceId(25), ReferenceId(35), ReferenceId(50)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(28): [ReferenceId(26), ReferenceId(27), ReferenceId(37), ReferenceId(54)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterNames.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(9), ReferenceId(15), ReferenceId(16), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(17), ReferenceId(18), ReferenceId(28), ReferenceId(34), ReferenceId(36)]
rebuilt        : SymbolId(2): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(21), ReferenceId(22), ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(23), ReferenceId(24), ReferenceId(32), ReferenceId(40)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(14), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(34), ReferenceId(36), ReferenceId(38)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(18), ReferenceId(24), ReferenceId(25), ReferenceId(35), ReferenceId(41), ReferenceId(43)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(16): [ReferenceId(28), ReferenceId(29), ReferenceId(37), ReferenceId(45)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(20): [ReferenceId(30), ReferenceId(31), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(16), ReferenceId(26), ReferenceId(27), ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(39), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(20): [ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(25): [ReferenceId(34), ReferenceId(35), ReferenceId(43), ReferenceId(51)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(16), ReferenceId(26), ReferenceId(27), ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(39), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(20): [ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(25): [ReferenceId(34), ReferenceId(35), ReferenceId(43), ReferenceId(51)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers1.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(26), ReferenceId(50)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(38), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(7): [ReferenceId(28), ReferenceId(45), ReferenceId(56)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(8): [ReferenceId(30), ReferenceId(47), ReferenceId(58)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(9): [ReferenceId(18), ReferenceId(19), ReferenceId(34), ReferenceId(41), ReferenceId(52)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(10): [ReferenceId(20), ReferenceId(21), ReferenceId(43), ReferenceId(54)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithOptionality.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(14)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(18)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPrivates.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(7): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPrivates2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(12), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(4)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17), ReferenceId(18)]
rebuilt        : SymbolId(2): [ReferenceId(6)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPublics.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(24), ReferenceId(30)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(11), ReferenceId(12), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(5): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithStringIndexers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithStringIndexers2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(26), ReferenceId(50)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(38), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(7): [ReferenceId(28), ReferenceId(45), ReferenceId(56)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(8): [ReferenceId(30), ReferenceId(47), ReferenceId(58)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(9): [ReferenceId(18), ReferenceId(19), ReferenceId(34), ReferenceId(41), ReferenceId(52)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(10): [ReferenceId(20), ReferenceId(21), ReferenceId(43), ReferenceId(54)]
rebuilt        : SymbolId(10): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/primtiveTypesAreIdentical.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
Bindings mismatch:
after transform: ScopeId(17): ["A", "E"]
rebuilt        : ScopeId(17): ["E"]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(0x0)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(21): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(21): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(21): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(21): [ReferenceId(3)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/typeParametersAreIdenticalToThemselves.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(14), ScopeId(27), ScopeId(37), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(14), ScopeId(19)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(27): [ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/bivariantInferences.ts
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : ["a", "b"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/discriminatedUnionInference.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(12), SymbolId(15), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(12) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(12) "foo"
rebuilt        : SymbolId(0) "foo"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallTypeArgumentInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithArrayLiteralArgs.ts
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstraintsTypeArgumentInference.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(12), ReferenceId(17), ReferenceId(22), ReferenceId(29), ReferenceId(56), ReferenceId(61), ReferenceId(90), ReferenceId(116), ReferenceId(120), ReferenceId(124)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(13), ReferenceId(18), ReferenceId(23), ReferenceId(30), ReferenceId(39), ReferenceId(47), ReferenceId(52), ReferenceId(57), ReferenceId(62), ReferenceId(91), ReferenceId(100), ReferenceId(108), ReferenceId(113), ReferenceId(117), ReferenceId(121), ReferenceId(125)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(43), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(114)]
rebuilt        : SymbolId(4): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments4.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(5): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments.ts
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(27): [ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(24): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(20): [ReferenceId(14), ReferenceId(15), ReferenceId(21), ReferenceId(22)]
rebuilt        : SymbolId(16): [ReferenceId(6), ReferenceId(10)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(21): [ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(20)]
rebuilt        : SymbolId(17): [ReferenceId(7), ReferenceId(9)]
Unresolved references mismatch:
after transform: ["Date", "Object", "RegExp"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithNonSymmetricSubtypes.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgs2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(26)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(14)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(21), ReferenceId(27)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(18)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints.ts
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(8), ReferenceId(17)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(10)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(18), ReferenceId(20)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(7)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(7): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(13), ReferenceId(22), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(17)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(19), ReferenceId(31)]
rebuilt        : SymbolId(2): [ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(20)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexers.ts
Unresolved references mismatch:
after transform: ["Date", "Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexersErrors.ts
Unresolved references mismatch:
after transform: ["Date", "Object"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndNumericIndexer.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndStringIndexer.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(6): []
Symbol flags mismatch for "NonGenericParameter":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NonGenericParameter":
after transform: SymbolId(0): Span { start: 193, end: 212 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2)]
Symbol flags mismatch for "GenericParameter":
after transform: SymbolId(11): SymbolFlags(ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "GenericParameter":
after transform: SymbolId(11): Span { start: 457, end: 473 }
rebuilt        : SymbolId(8): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedFunctionTypedArguments.ts
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(6): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(8): []
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(12): []
Symbol flags mismatch for "NonGenericParameter":
after transform: SymbolId(0): SymbolFlags(ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "NonGenericParameter":
after transform: SymbolId(0): Span { start: 193, end: 212 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2)]
Symbol flags mismatch for "GenericParameter":
after transform: SymbolId(12): SymbolFlags(ValueModule)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "GenericParameter":
after transform: SymbolId(12): Span { start: 452, end: 468 }
rebuilt        : SymbolId(10): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericClassWithObjectTypeArgsAndConstraints.ts
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(12): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(8), ReferenceId(18), ReferenceId(19), ReferenceId(40), ReferenceId(50), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(10), ReferenceId(27), ReferenceId(42), ReferenceId(58)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(20), ReferenceId(22), ReferenceId(34), ReferenceId(36), ReferenceId(39), ReferenceId(41), ReferenceId(52), ReferenceId(54)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(7), ReferenceId(23), ReferenceId(24)]
Symbol flags mismatch for "Class":
after transform: SymbolId(4): SymbolFlags(ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Class":
after transform: SymbolId(4): Span { start: 214, end: 219 }
rebuilt        : SymbolId(4): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "G":
after transform: SymbolId(5): [ReferenceId(11)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "G2":
after transform: SymbolId(16): [ReferenceId(26)]
rebuilt        : SymbolId(15): []
Symbol flags mismatch for "Interface":
after transform: SymbolId(23): SymbolFlags(ValueModule)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "Interface":
after transform: SymbolId(23): Span { start: 749, end: 758 }
rebuilt        : SymbolId(20): Span { start: 0, end: 0 }

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes1.ts
Bindings mismatch:
after transform: ScopeId(0): ["arrayFilter", "arrayMap", "box", "compose", "f00", "f01", "f02", "f03", "f10", "f11", "f12", "f13", "f20", "f21", "f22", "f23", "f30", "f31", "f40", "flip", "identity", "list", "map", "unbox", "unlist", "wrap", "zip"]
rebuilt        : ScopeId(0): ["arrayFilter", "arrayMap", "box", "compose", "f00", "f01", "f02", "f03", "f10", "f11", "f12", "f13", "f20", "f21", "f22", "f23", "f30", "f31", "f40", "flip", "fn", "identity", "list", "map", "unbox", "unlist", "wrap", "zip"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(37), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(54)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Scope children mismatch:
after transform: ScopeId(34): [ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(17): [ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(37): [ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(19): [ScopeId(20)]
Symbol flags mismatch for "fn":
after transform: SymbolId(91): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(55): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "fn":
after transform: SymbolId(91): Span { start: 1594, end: 1596 }
rebuilt        : SymbolId(55): Span { start: 1621, end: 1627 }
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(91): [ReferenceId(118)]
rebuilt        : SymbolId(55): []
Symbol redeclarations mismatch for "fn":
after transform: SymbolId(91): [Span { start: 1594, end: 1596 }, Span { start: 1621, end: 1627 }]
rebuilt        : SymbolId(55): []
Reference symbol mismatch for "list":
after transform: SymbolId(12) "list"
rebuilt        : SymbolId(5) "list"
Reference symbol mismatch for "wrap":
after transform: SymbolId(2) "wrap"
rebuilt        : SymbolId(0) "wrap"
Reference symbol mismatch for "list":
after transform: SymbolId(12) "list"
rebuilt        : SymbolId(5) "list"
Reference symbol mismatch for "wrap":
after transform: SymbolId(2) "wrap"
rebuilt        : SymbolId(0) "wrap"
Reference symbol mismatch for "compose":
after transform: SymbolId(6) "compose"
rebuilt        : SymbolId(2) "compose"
Reference symbol mismatch for "list":
after transform: SymbolId(12) "list"
rebuilt        : SymbolId(5) "list"
Reference symbol mismatch for "box":
after transform: SymbolId(18) "box"
rebuilt        : SymbolId(9) "box"
Reference symbol mismatch for "compose":
after transform: SymbolId(6) "compose"
rebuilt        : SymbolId(2) "compose"
Reference symbol mismatch for "list":
after transform: SymbolId(12) "list"
rebuilt        : SymbolId(5) "list"
Reference symbol mismatch for "box":
after transform: SymbolId(18) "box"
rebuilt        : SymbolId(9) "box"
Reference symbol mismatch for "compose":
after transform: SymbolId(6) "compose"
rebuilt        : SymbolId(2) "compose"
Reference symbol mismatch for "unbox":
after transform: SymbolId(21) "unbox"
rebuilt        : SymbolId(11) "unbox"
Reference symbol mismatch for "unlist":
after transform: SymbolId(15) "unlist"
rebuilt        : SymbolId(7) "unlist"
Reference symbol mismatch for "compose":
after transform: SymbolId(6) "compose"
rebuilt        : SymbolId(2) "compose"
Reference symbol mismatch for "unbox":
after transform: SymbolId(21) "unbox"
rebuilt        : SymbolId(11) "unbox"
Reference symbol mismatch for "unlist":
after transform: SymbolId(15) "unlist"
rebuilt        : SymbolId(7) "unlist"
Reference symbol mismatch for "identity":
after transform: SymbolId(29) "identity"
rebuilt        : SymbolId(16) "identity"
Reference symbol mismatch for "flip":
after transform: SymbolId(37) "flip"
rebuilt        : SymbolId(21) "flip"
Reference symbol mismatch for "zip":
after transform: SymbolId(32) "zip"
rebuilt        : SymbolId(18) "zip"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(12), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "createMachine":
after transform: SymbolId(17) "createMachine"
rebuilt        : SymbolId(2) "createMachine"
Reference symbol mismatch for "assign":
after transform: SymbolId(12) "assign"
rebuilt        : SymbolId(0) "assign"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes3.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(12), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "createMachine":
after transform: SymbolId(17) "createMachine"
rebuilt        : SymbolId(2) "createMachine"
Reference symbol mismatch for "assign":
after transform: SymbolId(12) "assign"
rebuilt        : SymbolId(0) "assign"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericFunctionParameters.ts
Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "s", "x", "x1", "x2", "x3"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "x", "x1", "x2", "x3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(4) "f2"
rebuilt        : SymbolId(2) "f2"
Reference symbol mismatch for "f3":
after transform: SymbolId(8) "f3"
rebuilt        : SymbolId(4) "f3"
Reference symbol mismatch for "s":
after transform: SymbolId(18) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["s"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesJsx.tsx
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Unresolved references mismatch:
after transform: ["Partial", "Record", "require"]
rebuilt        : ["require"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/keyofInferenceIntersectsResults.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "foo":
after transform: SymbolId(1) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(5) "bar"
rebuilt        : SymbolId(3) "bar"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/keyofInferenceLowerPriorityThanReturn.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(16)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol flags mismatch for "Write":
after transform: SymbolId(0): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Write":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(13), ReferenceId(18)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Col":
after transform: SymbolId(1): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "Col":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(12), ReferenceId(17)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "Table":
after transform: SymbolId(4): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol reference IDs mismatch for "Table":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(27), ReferenceId(30)]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "ConflictTarget":
after transform: SymbolId(12): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "ConflictTarget":
after transform: SymbolId(12): [ReferenceId(22), ReferenceId(24), ReferenceId(33), ReferenceId(39)]
rebuilt        : SymbolId(4): [ReferenceId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/noInferRedeclaration.ts
Unresolved references mismatch:
after transform: ["NoInfer"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference1.ts
Bindings mismatch:
after transform: ScopeId(0): ["assign", "baz1", "createTest", "createTestAsync", "destructure", "f1", "f2", "foo", "foo1", "func", "get", "isNonVoid", "isVoid", "mbp", "pigify", "res", "result", "value", "x1", "x2", "y"]
rebuilt        : ScopeId(0): ["assign", "baz1", "createTest", "createTestAsync", "destructure", "f1", "f2", "foo", "foo1", "func", "get", "isNonVoid", "isVoid", "pigify", "res", "result", "value", "x1", "x2", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "pigify":
after transform: SymbolId(33) "pigify"
rebuilt        : SymbolId(20) "pigify"
Reference symbol mismatch for "mbp":
after transform: SymbolId(36) "mbp"
rebuilt        : <None>
Reference symbol mismatch for "pigify":
after transform: SymbolId(33) "pigify"
rebuilt        : SymbolId(20) "pigify"
Reference symbol mismatch for "mbp":
after transform: SymbolId(36) "mbp"
rebuilt        : <None>
Reference symbol mismatch for "f1":
after transform: SymbolId(40) "f1"
rebuilt        : SymbolId(24) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(44) "f2"
rebuilt        : SymbolId(26) "f2"
Unresolved references mismatch:
after transform: ["Math", "Object", "Promise", "undefined"]
rebuilt        : ["Math", "Object", "Promise", "mbp", "undefined"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(54), ReferenceId(56)]
rebuilt        : [ReferenceId(27)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference2.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f1":
after transform: SymbolId(0) "f1"
rebuilt        : SymbolId(0) "f1"
Reference symbol mismatch for "f2":
after transform: SymbolId(8) "f2"
rebuilt        : SymbolId(7) "f2"
Reference symbol mismatch for "f2":
after transform: SymbolId(8) "f2"
rebuilt        : SymbolId(7) "f2"
Reference symbol mismatch for "f2":
after transform: SymbolId(8) "f2"
rebuilt        : SymbolId(7) "f2"
Reference symbol mismatch for "f2":
after transform: SymbolId(8) "f2"
rebuilt        : SymbolId(7) "f2"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference3.ts
Bindings mismatch:
after transform: ScopeId(0): ["Component", "MyComponent", "_asyncToGenerator", "_defineProperty", "a", "ab", "b", "concatMaybe", "f1", "f2", "foo", "foo1", "foo2", "g", "g1", "g2", "sa", "sx", "withRouter", "x1", "x2", "y1", "y2", "z"]
rebuilt        : ScopeId(0): ["Component", "_asyncToGenerator", "_defineProperty", "concatMaybe", "foo", "foo1", "foo2", "g", "withRouter", "x1", "x2", "y1", "y2", "z"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(33), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(3): []
Symbol flags mismatch for "Component":
after transform: SymbolId(41): SymbolFlags(Class | Ambient)
rebuilt        : SymbolId(17): SymbolFlags(Class)
Symbol reference IDs mismatch for "Component":
after transform: SymbolId(41): [ReferenceId(83)]
rebuilt        : SymbolId(17): []
Reference symbol mismatch for "concatMaybe":
after transform: SymbolId(2) "concatMaybe"
rebuilt        : SymbolId(2) "concatMaybe"
Reference symbol mismatch for "f1":
after transform: SymbolId(17) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(19) "f2"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(19) "f2"
rebuilt        : <None>
Reference symbol mismatch for "f1":
after transform: SymbolId(17) "f1"
rebuilt        : <None>
Reference symbol mismatch for "g1":
after transform: SymbolId(25) "g1"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(27) "g2"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(27) "g2"
rebuilt        : <None>
Reference symbol mismatch for "g1":
after transform: SymbolId(25) "g1"
rebuilt        : <None>
Reference symbol mismatch for "foo1":
after transform: SymbolId(29) "foo1"
rebuilt        : SymbolId(9) "foo1"
Reference symbol mismatch for "sa":
after transform: SymbolId(35) "sa"
rebuilt        : <None>
Reference symbol mismatch for "foo1":
after transform: SymbolId(29) "foo1"
rebuilt        : SymbolId(9) "foo1"
Reference symbol mismatch for "sx":
after transform: SymbolId(36) "sx"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(32) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "sa":
after transform: SymbolId(35) "sa"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(32) "foo2"
rebuilt        : SymbolId(11) "foo2"
Reference symbol mismatch for "sx":
after transform: SymbolId(36) "sx"
rebuilt        : <None>
Reference symbol mismatch for "withRouter":
after transform: SymbolId(50) "withRouter"
rebuilt        : SymbolId(18) "withRouter"
Reference symbol mismatch for "MyComponent":
after transform: SymbolId(55) "MyComponent"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(58) "foo"
rebuilt        : SymbolId(20) "foo"
Reference symbol mismatch for "ab":
after transform: SymbolId(62) "ab"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(64) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(66) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterator", "Iterable", "Iterator", "Omit", "Promise", "PromiseLike", "arguments"]
rebuilt        : ["MyComponent", "a", "ab", "arguments", "b", "f1", "f2", "g1", "g2", "sa", "sx"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/widenedTypes/strictNullChecksNoWidening.ts
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(12)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(8) "f"
rebuilt        : SymbolId(8) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(8) "f"
rebuilt        : SymbolId(8) "f"
Reference symbol mismatch for "f":
after transform: SymbolId(8) "f"
rebuilt        : SymbolId(8) "f"

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeCallSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeIndexSignatures.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeMembers.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/discriminatedUnionTypes3.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures2.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures3.ts
Symbol reference IDs mismatch for "f1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "f2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "f3":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "f4":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "f5":
after transform: SymbolId(9): [ReferenceId(4)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "f6":
after transform: SymbolId(12): [ReferenceId(5)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "f7":
after transform: SymbolId(15): [ReferenceId(6)]
rebuilt        : SymbolId(15): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures7.ts
Bindings mismatch:
after transform: ScopeId(0): ["f", "result"]
rebuilt        : ScopeId(0): ["result"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeIndexSignature.ts
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReduction.ts
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbols.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "C0", "C1", "N", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "c", "ce0", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constType", "constTypeAndCall", "f", "fromAny", "funcInferredReturnType", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "g", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "i", "l", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o", "o2", "o3", "o4", "promiseForConstCall", "s", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
rebuilt        : ScopeId(0): ["C", "C0", "C1", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "ce0", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constTypeAndCall", "f", "fromAny", "funcInferredReturnType", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "g", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o2", "o3", "o4", "promiseForConstCall", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(33), ScopeId(34), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(50), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(65), ScopeId(66), ScopeId(71), ScopeId(72)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(48), ScopeId(50), ScopeId(51), ScopeId(53), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(62)]
Scope children mismatch:
after transform: ScopeId(50): [ScopeId(51)]
rebuilt        : ScopeId(62): []
Symbol reference IDs mismatch for "constCall":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(5): [ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(33), ReferenceId(54), ReferenceId(110), ReferenceId(111)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(34): [ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(61), ReferenceId(63), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(237)]
rebuilt        : SymbolId(44): [ReferenceId(76), ReferenceId(79), ReferenceId(81), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93)]
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(69) "f"
rebuilt        : SymbolId(70) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(72) "g"
rebuilt        : SymbolId(72) "g"
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(72) "g"
rebuilt        : SymbolId(72) "g"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(72) "g"
rebuilt        : SymbolId(72) "g"
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(66) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterableIterator", "IterableIterator", "Math", "Promise", "Symbol", "arguments", "require"]
rebuilt        : ["Math", "N", "Promise", "Symbol", "arguments", "c", "constType", "i", "l", "o", "require", "s"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(82), ReferenceId(164)]
rebuilt        : [ReferenceId(109)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarations.ts
Bindings mismatch:
after transform: ScopeId(0): ["C", "C0", "C1", "N", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "c", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constType", "constTypeAndCall", "f", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "g", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "i", "l", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o", "o2", "o4", "promiseForConstCall", "s", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
rebuilt        : ScopeId(0): ["C", "C0", "C1", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constTypeAndCall", "f", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "g", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o2", "o4", "promiseForConstCall", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(33), ScopeId(34), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(58), ScopeId(59), ScopeId(64), ScopeId(65)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(48), ScopeId(50), ScopeId(51), ScopeId(53), ScopeId(55), ScopeId(56)]
Symbol reference IDs mismatch for "constCall":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(5): [ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(33), ReferenceId(54), ReferenceId(110), ReferenceId(111)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(33): [ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(61), ReferenceId(63), ReferenceId(217), ReferenceId(219), ReferenceId(221), ReferenceId(223)]
rebuilt        : SymbolId(43): [ReferenceId(76), ReferenceId(79), ReferenceId(81), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93)]
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(68) "f"
rebuilt        : SymbolId(69) "f"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(71) "g"
rebuilt        : SymbolId(71) "g"
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(71) "g"
rebuilt        : SymbolId(71) "g"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(71) "g"
rebuilt        : SymbolId(71) "g"
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "N":
after transform: SymbolId(65) "N"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterableIterator", "IterableIterator", "Math", "Promise", "Symbol", "arguments", "require"]
rebuilt        : ["Math", "N", "Promise", "Symbol", "arguments", "c", "constType", "i", "l", "o", "require", "s"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(82), ReferenceId(164)]
rebuilt        : [ReferenceId(109)]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarationsErrors.ts
Bindings mismatch:
after transform: ScopeId(0): ["ClassWithPrivateNamedAccessors", "ClassWithPrivateNamedMethods", "ClassWithPrivateNamedProperties", "_defineProperty", "classExpression", "funcInferredReturnType", "obj", "s"]
rebuilt        : ScopeId(0): ["ClassWithPrivateNamedAccessors", "ClassWithPrivateNamedMethods", "ClassWithPrivateNamedProperties", "_defineProperty", "classExpression", "funcInferredReturnType", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(12)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(6): []
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["s", "undefined"]

semantic Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsLookupAmd.ts
Bindings mismatch:
after transform: ScopeId(0): ["B"]
rebuilt        : ScopeId(0): []

