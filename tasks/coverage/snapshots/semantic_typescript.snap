commit: d85767ab

semantic_typescript Summary:
AST Parsed     : 6503/6503 (100.00%)
Positive Passed: 2831/6503 (43.53%)
tasks/coverage/typescript/tests/cases/compiler/2dArrays.ts
semantic error: Symbol reference IDs mismatch for "Cell":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Ship":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/APILibCheck.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Missing SymbolId: "tsInternal"
Missing ReferenceId: "require"
Missing SymbolId: "tsserverlibrary"
Missing ReferenceId: "require"
Missing SymbolId: "tsserverlibraryInternal"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/APISample_Watch.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["console", "formatHost", "os", "process", "reportDiagnostic", "reportWatchStatusChanged", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["formatHost", "reportDiagnostic", "reportWatchStatusChanged", "ts", "watchMain"]
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Unresolved references mismatch:
after transform: ["Error", "ReadonlyArray"]
rebuilt        : ["Error", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/APISample_WatchWithDefaults.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["console", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["ts", "watchMain"]
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : ["Error", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["console", "ts", "watchMain"]
rebuilt        : ScopeId(0): ["ts", "watchMain"]
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(1) "ts"
rebuilt        : SymbolId(0) "ts"
Unresolved references mismatch:
after transform: []
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/compiler/APISample_compile.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["compile", "console", "os", "process", "ts"]
rebuilt        : ScopeId(0): ["compile", "ts"]
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Unresolved references mismatch:
after transform: []
rebuilt        : ["console", "process", "require"]

tasks/coverage/typescript/tests/cases/compiler/APISample_jsdoc.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getAllTags", "getAnnotations", "getReturnTypeFromJSDoc", "getSomeOtherTags", "parseCommentsIntoDefinition", "parseSpecificTags", "ts"]
rebuilt        : ScopeId(0): ["getAllTags", "getAnnotations", "getReturnTypeFromJSDoc", "getSomeOtherTags", "parseCommentsIntoDefinition", "parseSpecificTags", "ts"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9), ScopeId(14), ScopeId(20), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(13), ScopeId(19), ScopeId(22), ScopeId(23)]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(20), ReferenceId(22), ReferenceId(26), ReferenceId(34), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(65), ReferenceId(67), ReferenceId(68), ReferenceId(70), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(80), ReferenceId(81), ReferenceId(83), ReferenceId(86), ReferenceId(89), ReferenceId(91), ReferenceId(97)]
rebuilt        : SymbolId(0): [ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(44), ReferenceId(47), ReferenceId(53), ReferenceId(54), ReferenceId(56), ReferenceId(60), ReferenceId(62), ReferenceId(65), ReferenceId(68), ReferenceId(71), ReferenceId(73), ReferenceId(79)]
Unresolved references mismatch:
after transform: ["Object", "true", "undefined"]
rebuilt        : ["Object", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/APISample_linter.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "delint", "fileNames", "process", "readFileSync", "ts"]
rebuilt        : ScopeId(0): ["delint", "fileNames", "ts"]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(23), ReferenceId(25), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(37), ReferenceId(40), ReferenceId(50), ReferenceId(54)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(14), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(32), ReferenceId(44), ReferenceId(48)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "readFileSync":
after transform: SymbolId(2) "readFileSync"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console", "process", "readFileSync"]

tasks/coverage/typescript/tests/cases/compiler/APISample_parseConfig.ts
semantic error: Missing SymbolId: "ts"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["console", "createProgram", "os", "printError", "process", "ts"]
rebuilt        : ScopeId(0): ["createProgram", "printError", "ts"]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Reference symbol mismatch for "ts":
after transform: SymbolId(3) "ts"
rebuilt        : SymbolId(0) "ts"
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["console", "process", "require", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/APISample_transform.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "result", "source", "ts"]
rebuilt        : ScopeId(0): ["result", "source", "ts"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSON"]
rebuilt        : ["JSON", "console"]

tasks/coverage/typescript/tests/cases/compiler/APISample_watcher.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "currentDirectoryFiles", "fs", "path", "process", "ts", "watch"]
rebuilt        : ScopeId(0): ["currentDirectoryFiles", "ts", "watch"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(23)]
Symbol reference IDs mismatch for "ts":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(7), ReferenceId(16), ReferenceId(21), ReferenceId(27), ReferenceId(29), ReferenceId(60), ReferenceId(79)]
rebuilt        : SymbolId(0): [ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(55), ReferenceId(74)]
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "fs":
after transform: SymbolId(2) "fs"
rebuilt        : <None>
Reference symbol mismatch for "process":
after transform: SymbolId(0) "process"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Date", "undefined"]
rebuilt        : ["console", "fs", "process", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/DeclarationErrorsNoEmitOnError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/abstractInterfaceIdentifierName.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/abstractPropertyBasics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/acceptableAlias1.ts
semantic error: Missing SymbolId: "r"
Bindings mismatch:
after transform: ScopeId(0): ["M", "r"]
rebuilt        : ScopeId(0): ["r"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["M", "N"]
rebuilt        : ["M"]

tasks/coverage/typescript/tests/cases/compiler/accessorsEmit.ts
semantic error: Symbol reference IDs mismatch for "Result":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/accessors_spec_section-4.5_inference.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/addMoreCallSignaturesToBaseSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/addMoreCallSignaturesToBaseSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/aliasInaccessibleModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["N"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/aliasInaccessibleModule2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Bindings mismatch:
after transform: ScopeId(1): ["N", "R", "X", "_M"]
rebuilt        : ScopeId(1): ["N", "_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/aliasOfGenericFunctionWithRestBehavedSameAsUnaliased.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInAccessorsOfClass.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInArray.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInFunctionExpression.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInGenericFunction.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInIndexerOfClass.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInObjectLiteral.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInTypeArgumentOfExtendsClause.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsageInVarAssignment.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/aliasUsedAsNameValue.ts
semantic error: Missing SymbolId: "mod"
Missing ReferenceId: "require"
Missing SymbolId: "b"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : SymbolId(1) "b"
Reference symbol mismatch for "mod":
after transform: SymbolId(0) "mod"
rebuilt        : SymbolId(0) "mod"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/allowJsCrossMonorepoPackage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/allowSyntheticDefaultImportsCanPaintCrossModuleDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Color":
after transform: SymbolId(0) "Color"
rebuilt        : <None>
Reference flags mismatch for "Color":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["Color"]

tasks/coverage/typescript/tests/cases/compiler/ambientClassDeclarationWithExtends.ts
semantic error: Missing SymbolId: "D"
Missing SymbolId: "_D"
Missing ReferenceId: "D"
Missing ReferenceId: "D"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "D":
after transform: SymbolId(0) "D"
rebuilt        : SymbolId(0) "D"
Unresolved references mismatch:
after transform: ["A", "C"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/ambientClassMergesOverloadsWithInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientClassOverloadForFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/ambientConstLiterals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E", "non identifier"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientEnumElementInitializer6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleReopen.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fs"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithInternalImportDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientExternalModuleWithoutInternalImportDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientFundule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientModuleExports.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Foo2", "c", "c2"]
rebuilt        : ScopeId(0): ["c", "c2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientModuleWithClassDeclarationWithExtends.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientModuleWithTemplateLiterals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientModules.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambientNameRestrictions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/ambiguousCallsWhereReturnTypesAgree.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/ambiguousOverloadResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/amdDeclarationEmitNoExtraDeclare.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/amdModuleConstEnumUsage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "CharCode"]
rebuilt        : ScopeId(1): ["CharCode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "CharCode":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/anonClassDeclarationEmitIsAnon.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/anonterface.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"

tasks/coverage/typescript/tests/cases/compiler/anyAndUnknownHaveFalsyComponents.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "foo1", "foo2", "isTreeHeader1", "isTreeHeader2", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["_objectSpread", "foo1", "foo2", "y1", "y2"]
Reference symbol mismatch for "x1":
after transform: SymbolId(0) "x1"
rebuilt        : <None>
Reference symbol mismatch for "isTreeHeader1":
after transform: SymbolId(2) "isTreeHeader1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(4) "x2"
rebuilt        : <None>
Reference symbol mismatch for "isTreeHeader1":
after transform: SymbolId(2) "isTreeHeader1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["isTreeHeader1", "require", "x1", "x2"]

tasks/coverage/typescript/tests/cases/compiler/anyIsAssignableToObject.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/anyIsAssignableToVoid.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/argumentsAsPropertyName.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "use"]
rebuilt        : ["use"]

tasks/coverage/typescript/tests/cases/compiler/arrayAssignmentTest6.ts
semantic error: Missing SymbolId: "Test"
Missing SymbolId: "_Test"
Missing ReferenceId: "_Test"
Missing ReferenceId: "Bug"
Missing ReferenceId: "Test"
Missing ReferenceId: "Test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "Bug":
after transform: SymbolId(5): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/arrayAugment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/arrayBestCommonTypes.ts
semantic error: Missing SymbolId: "EmptyTypes"
Missing SymbolId: "_EmptyTypes"
Missing ReferenceId: "EmptyTypes"
Missing ReferenceId: "EmptyTypes"
Missing SymbolId: "NonEmptyTypes"
Missing SymbolId: "_NonEmptyTypes"
Missing ReferenceId: "NonEmptyTypes"
Missing ReferenceId: "NonEmptyTypes"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(28), SymbolId(58)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(23)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(56)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7)]
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(57)]
rebuilt        : ScopeId(8): [SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(29)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(8): [ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(17)]
Symbol reference IDs mismatch for "base":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(23)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(18)]
Symbol reference IDs mismatch for "base":
after transform: SymbolId(30): [ReferenceId(39), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(51), ReferenceId(52), ReferenceId(54), ReferenceId(60)]
rebuilt        : SymbolId(25): [ReferenceId(38), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(57)]

tasks/coverage/typescript/tests/cases/compiler/arrayBufferIsViewNarrowsType.ts
semantic error: Unresolved references mismatch:
after transform: ["ArrayBuffer", "ArrayBufferView", "Object"]
rebuilt        : ["ArrayBuffer"]

tasks/coverage/typescript/tests/cases/compiler/arrayConcat3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/arrayDestructuringInSwitch1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/arrayFind.ts
semantic error: Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/arrayFlatMap.ts
semantic error: Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/arrayFromAsync.ts
semantic error: `await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules
`await` is only allowed within async functions and at the top levels of modules

tasks/coverage/typescript/tests/cases/compiler/arrayLiteralContextualType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/arrayOfExportedClass.ts
semantic error: Missing SymbolId: "Car"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/compiler/arrayToLocaleStringES2015.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "ReadonlyArray", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(15), ReferenceId(16), ReferenceId(26)]
rebuilt        : [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/arrayToLocaleStringES2020.ts
semantic error: Unresolved references mismatch:
after transform: ["BigInt", "BigInt64Array", "BigUint64Array", "Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "ReadonlyArray", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["BigInt", "BigInt64Array", "BigUint64Array", "Date", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(15), ReferenceId(16), ReferenceId(24)]
rebuilt        : [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/arrayTypeInSignatureOfInterfaceAndClass.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Data", "WinJS"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["WinJS"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/arrayconcat.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/arrowFunctionInExpressionStatement2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1)]
rebuilt        : ScopeId(1): [SymbolId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/arrowFunctionParsingDoesNotConfuseParenthesizedObjectForArrowHead.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "test", "value"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "value":
after transform: SymbolId(0) "value"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "value"]

tasks/coverage/typescript/tests/cases/compiler/arrowFunctionParsingGenericInObject.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/arrowFunctionWithObjectLiteralBody5.ts
semantic error: Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/arrowFunctionWithObjectLiteralBody6.ts
semantic error: Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/asiAmbientFunctionDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/assertionFunctionWildcardImport1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/assertionFunctionWildcardImport2.ts
semantic error: Unresolved references mismatch:
after transform: ["Error", "NonNullable", "undefined"]
rebuilt        : ["Error", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/assertionFunctionsCanNarrowByDiscriminant.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["assertEqual", "const", "true"]
rebuilt        : ["assertEqual"]

tasks/coverage/typescript/tests/cases/compiler/assign1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/assignToObjectTypeWithPrototypeProperty.ts
semantic error: Symbol reference IDs mismatch for "XEvent":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/assignToPrototype1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatForEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["One", "TokenType", "Two"]
rebuilt        : ScopeId(1): ["TokenType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TokenType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TokenType":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatOnNew.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability10.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability36.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability6.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability7.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability8.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentCompatability9.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/assignmentNonObjectTypeConstraints.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(8): [ReferenceId(5), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(17)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(9): [ReferenceId(6), ReferenceId(9), ReferenceId(14)]
rebuilt        : SymbolId(7): [ReferenceId(19)]

tasks/coverage/typescript/tests/cases/compiler/asyncAwaitWithCapturedBlockScopeVar.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/asyncFunctionContextuallyTypedReturns.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(15), ScopeId(19)]
Unresolved references mismatch:
after transform: ["Promise", "PromiseLike", "arguments", "f", "g", "h", "require"]
rebuilt        : ["Promise", "arguments", "f", "g", "h", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(3), ReferenceId(6), ReferenceId(10), ReferenceId(13), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(25)]
rebuilt        : [ReferenceId(3), ReferenceId(7), ReferenceId(12), ReferenceId(16), ReferenceId(21), ReferenceId(25)]

tasks/coverage/typescript/tests/cases/compiler/asyncFunctionReturnType.2.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/asyncFunctionReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(3), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(40), ScopeId(41), ScopeId(43), ScopeId(44), ScopeId(46), ScopeId(47), ScopeId(49), ScopeId(50)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(21), ReferenceId(23), ReferenceId(26), ReferenceId(28), ReferenceId(33), ReferenceId(38), ReferenceId(40), ReferenceId(44), ReferenceId(46), ReferenceId(51), ReferenceId(56), ReferenceId(58), ReferenceId(62), ReferenceId(64), ReferenceId(71), ReferenceId(80), ReferenceId(83), ReferenceId(90), ReferenceId(93)]
rebuilt        : [ReferenceId(24), ReferenceId(32), ReferenceId(47), ReferenceId(55), ReferenceId(70), ReferenceId(78), ReferenceId(93), ReferenceId(101), ReferenceId(117), ReferenceId(126)]

tasks/coverage/typescript/tests/cases/compiler/asyncFunctionsAndStrictNullChecks.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Windows", "_asyncToGenerator", "_sample", "_sample2", "sample", "sample2"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_sample", "_sample2", "sample", "sample2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Promise", "Windows", "arguments", "require", "resolve1", "resolve2"]
rebuilt        : ["arguments", "require", "resolve1", "resolve2"]

tasks/coverage/typescript/tests/cases/compiler/asyncYieldStarContextualType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncGeneratorDelegate", "_asyncIterator", "_awaitAsyncGenerator", "_f", "_wrapAsyncGenerator", "authorPromise", "f", "g", "mapper"]
rebuilt        : ScopeId(0): ["_asyncGeneratorDelegate", "_asyncIterator", "_awaitAsyncGenerator", "_f", "_wrapAsyncGenerator", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "authorPromise":
after transform: SymbolId(6) "authorPromise"
rebuilt        : <None>
Reference symbol mismatch for "mapper":
after transform: SymbolId(7) "mapper"
rebuilt        : <None>
Reference symbol mismatch for "authorPromise":
after transform: SymbolId(6) "authorPromise"
rebuilt        : <None>
Reference symbol mismatch for "mapper":
after transform: SymbolId(7) "mapper"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(9) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(9) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Promise", "Symbol", "arguments", "require"]
rebuilt        : ["arguments", "authorPromise", "g", "mapper", "require"]

tasks/coverage/typescript/tests/cases/compiler/augmentArray.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals3_1.ts
semantic error: Missing SymbolId: "x"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["file1", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : SymbolId(0) "x"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals4_1.ts
semantic error: Missing SymbolId: "x"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["file1", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : SymbolId(0) "x"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["e", "express"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals6.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/augmentExportEquals6_1.ts
semantic error: Missing SymbolId: "x"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["file1", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/augmentedTypeBracketNamedPropertyAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/augmentedTypesClass3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/augmentedTypesExternalModule1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "c5":
after transform: SymbolId(1): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "c5":
after transform: SymbolId(1): [Span { start: 55, end: 57 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/augmentedTypesModules3b.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/augmentedTypesModules4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/autonumberingInEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Foo", "a"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["Foo", "b"]
rebuilt        : ScopeId(2): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 29, end: 32 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/avoidCycleWithVoidExpressionReturnedFromArrow.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/avoidNarrowingUsingConstVariableFromBindingElementWithLiteralInitializer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo", "test"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

tasks/coverage/typescript/tests/cases/compiler/awaitUnionPromise.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "AsyncEnumeratorDone":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/awaitedTypeCrash.ts
semantic error: Unresolved references mismatch:
after transform: ["AsyncGenerator", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/awaitedTypeJQuery.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Awaited", "Element", "Error", "PromiseLike"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/badInferenceLowerPriorityThanGoodInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/badThisBinding.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/bangInModuleName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["http"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/baseIndexSignatureResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/baseTypeAfterDerivedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/baseTypeOrderChecking.ts
semantic error: Symbol reference IDs mismatch for "Class2":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Class4":
after transform: SymbolId(5): [ReferenceId(0)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/compiler/baseTypeWrappingInstantiationChain.ts
semantic error: Symbol reference IDs mismatch for "Parameter":
after transform: SymbolId(5): [ReferenceId(0)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Wrapper":
after transform: SymbolId(8): [ReferenceId(3), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/bestCommonTypeReturnStatement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/bestCommonTypeWithOptionalProperties.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/bindingPatternContextualTypeDoesNotCauseWidening.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick", "pick"]
rebuilt        : ["pick"]

tasks/coverage/typescript/tests/cases/compiler/binopAssignmentShouldHaveType.ts
semantic error: Missing SymbolId: "Test"
Missing SymbolId: "_Test"
Missing ReferenceId: "_Test"
Missing ReferenceId: "Bug"
Missing ReferenceId: "Test"
Missing ReferenceId: "Test"
Bindings mismatch:
after transform: ScopeId(0): ["Test", "console"]
rebuilt        : ScopeId(0): ["Test"]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Bug":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/blockScopedBindingsReassignedInLoop1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/blockScopedClassDeclarationAcrossFiles.ts
semantic error: Unresolved references mismatch:
after transform: ["C"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/blockScopedNamespaceDifferentFile.ts
semantic error: Missing SymbolId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "Name"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Symbol reference IDs mismatch for "Name":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(4), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/bom-utf16be.ts
semantic error: Invalid Character `￾`

tasks/coverage/typescript/tests/cases/compiler/booleanFilterAnyArray.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["anys", "foo", "foor", "foos", "realanys", "xs", "ys"]
rebuilt        : ScopeId(0): ["foo", "foor", "foos", "xs", "ys"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "anys":
after transform: SymbolId(6) "anys"
rebuilt        : <None>
Reference symbol mismatch for "Bullean":
after transform: SymbolId(0) "Bullean"
rebuilt        : <None>
Reference symbol mismatch for "realanys":
after transform: SymbolId(8) "realanys"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Boolean"]
rebuilt        : ["Boolean", "Bullean", "anys", "realanys"]

tasks/coverage/typescript/tests/cases/compiler/cachedContextualTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["ConstructorParameters", "InstanceType", "createInstance"]
rebuilt        : ["createInstance"]

tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/cachedModuleResolution5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/callExpressionWithTypeParameterConstrainedToOuterTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/callOfConditionalTypeWithConcreteBranches.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["Function", "Parameters"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/callbacksDontShareTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/callsOnComplexSignatures.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(13): []
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(28), ReferenceId(32), ReferenceId(33), ReferenceId(36), ReferenceId(38), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(0): [ReferenceId(24), ReferenceId(28), ReferenceId(31)]

tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["iobj", "sobj"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(10), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(24), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(38), ScopeId(41), ScopeId(44), ScopeId(47), ScopeId(53), ScopeId(57), ScopeId(61), ScopeId(65), ScopeId(68), ScopeId(71), ScopeId(75), ScopeId(79), ScopeId(82), ScopeId(85), ScopeId(89), ScopeId(92)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(23), ScopeId(27), ScopeId(30), ScopeId(33), ScopeId(37), ScopeId(40), ScopeId(43), ScopeId(46), ScopeId(52), ScopeId(56), ScopeId(60), ScopeId(64), ScopeId(67), ScopeId(70), ScopeId(74), ScopeId(78), ScopeId(81), ScopeId(84), ScopeId(88), ScopeId(91)]
Reference symbol mismatch for "sobj":
after transform: SymbolId(35) "sobj"
rebuilt        : <None>
Reference symbol mismatch for "sobj":
after transform: SymbolId(35) "sobj"
rebuilt        : <None>
Reference symbol mismatch for "iobj":
after transform: SymbolId(37) "iobj"
rebuilt        : <None>
Reference symbol mismatch for "iobj":
after transform: SymbolId(37) "iobj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["use"]
rebuilt        : ["iobj", "sobj", "use"]

tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(16), ScopeId(20), ScopeId(24), ScopeId(29), ScopeId(34), ScopeId(38), ScopeId(42), ScopeId(47), ScopeId(52), ScopeId(57), ScopeId(62), ScopeId(66), ScopeId(70), ScopeId(75), ScopeId(80), ScopeId(84), ScopeId(88)]

tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop3_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(39), ScopeId(43), ScopeId(48), ScopeId(53), ScopeId(58), ScopeId(63), ScopeId(67), ScopeId(71), ScopeId(76), ScopeId(81), ScopeId(85), ScopeId(89)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(16), ScopeId(20), ScopeId(24), ScopeId(29), ScopeId(34), ScopeId(38), ScopeId(42), ScopeId(47), ScopeId(52), ScopeId(57), ScopeId(62), ScopeId(66), ScopeId(70), ScopeId(75), ScopeId(80), ScopeId(84), ScopeId(88)]

tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(32), ScopeId(44), ScopeId(50)]

tasks/coverage/typescript/tests/cases/compiler/capturedLetConstInLoop9_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(17), ScopeId(33), ScopeId(45), ScopeId(51)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(16), ScopeId(32), ScopeId(44), ScopeId(50)]

tasks/coverage/typescript/tests/cases/compiler/caseInsensitiveFileSystemWithCapsImportTypeDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Broken", "TypeB"]
rebuilt        : ScopeId(0): ["Broken"]

tasks/coverage/typescript/tests/cases/compiler/castExpressionParentheses.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A", "a"]

tasks/coverage/typescript/tests/cases/compiler/castNewObjectBug.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/castTest.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Point":
after transform: [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(10)]
rebuilt        : [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/chainedAssignment2.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/chainedImportAlias.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "foo":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/chainedSpecializationToObjectTypeLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/checkInfiniteExpansionTermination.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/checkInfiniteExpansionTermination2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/checkInterfaceBases.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["JQueryEventObjectTest"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/checkJsTypeDefNoUnusedLocalMarked.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/checkSuperCallBeforeThisAccessing7.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/checkSwitchStatementIfCaseTypeIsString.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "use"]
rebuilt        : ["use"]

tasks/coverage/typescript/tests/cases/compiler/circularConstrainedMappedTypeNoCrash.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/circularConstructorWithReturn.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "getPrismaClient":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/circularContextualMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/circularGetAccessor.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["this"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/circularInstantiationExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "foo":
after transform: [ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/circularMappedTypeConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize", "foo2"]
rebuilt        : ["foo2"]

tasks/coverage/typescript/tests/cases/compiler/circularReferenceInImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Db", "foo"]
rebuilt        : ScopeId(0): ["foo"]

tasks/coverage/typescript/tests/cases/compiler/circularTypeofWithFunctionModule.ts
semantic error: Missing SymbolId: "_maker"
Missing ReferenceId: "_maker"
Missing ReferenceId: "Bar"
Missing ReferenceId: "maker"
Missing ReferenceId: "maker"
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "maker":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "maker":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "maker":
after transform: SymbolId(1): [Span { start: 121, end: 126 }]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/circularlySimplifyingConditionalTypesNoCrash.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["connect", "myStoreConnect"]
rebuilt        : ScopeId(0): ["myStoreConnect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "connect":
after transform: SymbolId(17) "connect"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Partial", "Pick"]
rebuilt        : ["connect"]

tasks/coverage/typescript/tests/cases/compiler/classDeclarationMergedInModuleWithContinuation.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/classExpressionWithResolutionOfNamespaceOfSameName01.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/classExpressionWithStaticProperties3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "arr", "console"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "arr"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/compiler/classExpressionWithStaticPropertiesES63.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "arr", "console"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "arr"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/compiler/classExpressions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/classExtendingAbstractClassWithMemberCalledTheSameAsItsOwnTypeParam.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/classExtendingAny.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "Err", "_defineProperty", "o"]
rebuilt        : ScopeId(0): ["A", "_defineProperty", "o"]
Reference symbol mismatch for "Err":
after transform: SymbolId(0) "Err"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Err"]

tasks/coverage/typescript/tests/cases/compiler/classExtendingQualifiedName2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"

tasks/coverage/typescript/tests/cases/compiler/classFunctionMerging.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "a", "b"]
rebuilt        : ScopeId(0): ["a", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "Foo":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/classFunctionMerging2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["A", "B", "console"]
rebuilt        : ["B", "console"]
Unresolved reference IDs mismatch for "B":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/classImplementingInterfaceIndexer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/classImplementsClass1.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/classImplementsClass3.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/classImplementsImportedInterface.ts
semantic error: Missing SymbolId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Bindings mismatch:
after transform: ScopeId(0): ["M1", "M2"]
rebuilt        : ScopeId(0): ["M2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(4): ["C", "T", "_M2"]
rebuilt        : ScopeId(1): ["C", "_M2"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Unresolved references mismatch:
after transform: ["M1"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/classImplementsMethodWIthTupleArgs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/classInConvertedLoopES5.ts
semantic error: Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/classMemberInitializerWithLamdaScoping5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Greeter", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["Greeter", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/compiler/classNonUniqueSymbolMethodHasSymbolIndexer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "Mixer", "a", "e1"]
rebuilt        : ScopeId(0): ["A", "Mixer"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Mix", "true"]
rebuilt        : ["Mix", "a"]

tasks/coverage/typescript/tests/cases/compiler/classOrderBug.ts
semantic error: Symbol reference IDs mismatch for "foo":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(3): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/classReferencedInContextualParameterWithinItsOwnBaseExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(13): [ReferenceId(18)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "Class":
after transform: SymbolId(4) "Class"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSON", "string"]
rebuilt        : ["Class", "JSON", "string"]

tasks/coverage/typescript/tests/cases/compiler/classVarianceCircularity.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/classVarianceResolveCircularity1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/classVarianceResolveCircularity2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(4): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(3), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/classdecl.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "b"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing SymbolId: "m3"
Missing SymbolId: "_m3"
Missing ReferenceId: "_m3"
Missing ReferenceId: "c"
Missing ReferenceId: "_m3"
Missing ReferenceId: "ib2"
Missing ReferenceId: "m3"
Missing ReferenceId: "m3"
Missing ReferenceId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(17), SymbolId(18), SymbolId(22), SymbolId(26), SymbolId(33)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(10), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(20)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(14), ScopeId(15), ScopeId(19), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(31), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(22)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Binding symbols mismatch:
after transform: ScopeId(15): [SymbolId(10), SymbolId(11), SymbolId(30)]
rebuilt        : ScopeId(11): [SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(13)]
Binding symbols mismatch:
after transform: ScopeId(19): [SymbolId(14), SymbolId(31)]
rebuilt        : ScopeId(14): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(20): [SymbolId(15), SymbolId(16), SymbolId(32)]
rebuilt        : ScopeId(15): [SymbolId(13), SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(31): [ScopeId(32), ScopeId(33), ScopeId(34)]
rebuilt        : ScopeId(20): [ScopeId(21)]
Scope children mismatch:
after transform: ScopeId(35): [ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(22): [ScopeId(23)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(10): []
rebuilt        : SymbolId(8): [ReferenceId(6)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(15): []
rebuilt        : SymbolId(14): [ReferenceId(11)]
Symbol reference IDs mismatch for "ib2":
after transform: SymbolId(16): []
rebuilt        : SymbolId(15): [ReferenceId(13)]
Reference symbol mismatch for "m1":
after transform: SymbolId(9) "m1"
rebuilt        : SymbolId(6) "m1"
Unresolved references mismatch:
after transform: ["m1", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/clinterfaces.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Bindings mismatch:
after transform: ScopeId(0): ["M", "_defineProperty"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "M", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["_M"]
rebuilt        : ScopeId(1): ["C", "D", "_M"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "C":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(1): [Span { start: 41, end: 42 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "D":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "D":
after transform: SymbolId(2): Span { start: 61, end: 62 }
rebuilt        : SymbolId(4): Span { start: 77, end: 78 }
Symbol redeclarations mismatch for "D":
after transform: SymbolId(2): [Span { start: 77, end: 78 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(5): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(3): Span { start: 96, end: 99 }
rebuilt        : SymbolId(5): Span { start: 129, end: 132 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(3): [Span { start: 129, end: 132 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(6): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(6): SymbolFlags(Class)
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(6): [Span { start: 197, end: 200 }]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/cloduleAcrossModuleDefinitions.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/cloduleAndTypeParameters.ts
semantic error: Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "Baz"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(3): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 63, end: 66 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Baz":
after transform: SymbolId(3): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/cloduleGenericOnSelfMember.ts
semantic error: Missing SymbolId: "_Service"
Missing ReferenceId: "_Service"
Missing ReferenceId: "Service"
Missing ReferenceId: "Service"
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(4): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol flags mismatch for "Service":
after transform: SymbolId(2): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "Service":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "Service":
after transform: SymbolId(2): [Span { start: 108, end: 115 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/cloduleTest1.ts
semantic error: Missing SymbolId: "_$"
Missing ReferenceId: "_$"
Missing ReferenceId: "ajax"
Missing ReferenceId: "$"
Missing ReferenceId: "$"
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(0), SymbolId(1)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "ajax":
after transform: SymbolId(3): []
rebuilt        : SymbolId(1): [ReferenceId(1)]
Reference symbol mismatch for "$":
after transform: SymbolId(1) "$"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["$"]

tasks/coverage/typescript/tests/cases/compiler/cloduleWithPriorUninstantiatedModule.ts
semantic error: Missing SymbolId: "_Moclodule2"
Missing ReferenceId: "_Moclodule2"
Missing ReferenceId: "Manager"
Missing ReferenceId: "Moclodule"
Missing ReferenceId: "Moclodule"
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Moclodule":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "Moclodule":
after transform: SymbolId(0): Span { start: 47, end: 56 }
rebuilt        : SymbolId(0): Span { start: 132, end: 141 }
Symbol reference IDs mismatch for "Moclodule":
after transform: SymbolId(0): []
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Moclodule":
after transform: SymbolId(0): [Span { start: 132, end: 141 }, Span { start: 178, end: 187 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Manager":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/cloduleWithRecursiveReference.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "actionA", "actionB", "b", "call", "printFn"]
rebuilt        : ScopeId(0): ["actionA", "actionB", "call", "printFn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "actionA":
after transform: SymbolId(11): [ReferenceId(24), ReferenceId(29)]
rebuilt        : SymbolId(0): [ReferenceId(11)]
Symbol reference IDs mismatch for "actionB":
after transform: SymbolId(12): [ReferenceId(25), ReferenceId(32)]
rebuilt        : SymbolId(1): [ReferenceId(14)]
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["console", "fab", "foo"]
rebuilt        : ["a", "b", "console", "fab", "foo"]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SyntaxKind", "SyntaxKind1", "bar", "f1", "f2", "f3", "foo", "maybeClassStatement", "statement", "types", "x"]
rebuilt        : ScopeId(0): ["SyntaxKind", "SyntaxKind1", "bar", "f1", "f2", "f3", "foo", "maybeClassStatement", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(14): ["Block", "CaseClause", "FunctionDeclaration", "FunctionExpression", "Identifier", "SyntaxKind"]
rebuilt        : ScopeId(6): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(30): ["ClassExpression", "ClassStatement", "SyntaxKind1"]
rebuilt        : ScopeId(9): ["SyntaxKind1"]
Scope flags mismatch:
after transform: ScopeId(30): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(28): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(28): [ReferenceId(52), ReferenceId(56), ReferenceId(59), ReferenceId(61), ReferenceId(63), ReferenceId(131)]
rebuilt        : SymbolId(10): [ReferenceId(38)]
Symbol flags mismatch for "SyntaxKind1":
after transform: SymbolId(59): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(17): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind1":
after transform: SymbolId(59): [ReferenceId(94), ReferenceId(97), ReferenceId(99), ReferenceId(137)]
rebuilt        : SymbolId(17): [ReferenceId(51)]
Reference symbol mismatch for "statement":
after transform: SymbolId(68) "statement"
rebuilt        : <None>
Reference symbol mismatch for "types":
after transform: SymbolId(75) "types"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "assertNode", "canHaveLocals", "cast", "consume", "every", "isC", "isClassLike", "isExpression", "isNodeArray", "tryCast", "useA"]
rebuilt        : ["assertNode", "canHaveLocals", "cast", "consume", "every", "isC", "isClassLike", "isExpression", "isNodeArray", "statement", "tryCast", "types", "useA"]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["DISALLOW_DECORATORS", "SyntaxKind", "foo", "modifiers", "updateImportDeclaration"]
rebuilt        : ScopeId(0): ["SyntaxKind", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(27): ["AssertClause", "Decorator", "ImportClause", "ImportDeclaration", "Modifier", "SyntaxKind"]
rebuilt        : ScopeId(1): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(38): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(38): [ReferenceId(67), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(203)]
rebuilt        : SymbolId(0): [ReferenceId(11)]
Reference symbol mismatch for "updateImportDeclaration":
after transform: SymbolId(58) "updateImportDeclaration"
rebuilt        : <None>
Reference symbol mismatch for "updateImportDeclaration":
after transform: SymbolId(58) "updateImportDeclaration"
rebuilt        : <None>
Reference symbol mismatch for "DISALLOW_DECORATORS":
after transform: SymbolId(71) "DISALLOW_DECORATORS"
rebuilt        : <None>
Reference symbol mismatch for "modifiers":
after transform: SymbolId(93) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "modifiers":
after transform: SymbolId(93) "modifiers"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Extract", "Parameters", "buildOverload", "every", "isArray", "isAssertClause", "isDecorator", "isExpression", "isImportClause", "isModifier", "undefined"]
rebuilt        : ["DISALLOW_DECORATORS", "buildOverload", "every", "isArray", "isAssertClause", "isDecorator", "isExpression", "isImportClause", "isModifier", "modifiers", "undefined", "updateImportDeclaration"]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SyntaxKind", "foo", "modifiers"]
rebuilt        : ScopeId(0): ["SyntaxKind", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["Decorator", "Modifier", "SyntaxKind"]
rebuilt        : ScopeId(1): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(27)]
rebuilt        : SymbolId(0): [ReferenceId(5)]
Reference symbol mismatch for "modifiers":
after transform: SymbolId(12) "modifiers"
rebuilt        : <None>
Reference symbol mismatch for "modifiers":
after transform: SymbolId(12) "modifiers"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["every", "isDecorator", "isModifier"]
rebuilt        : ["every", "isDecorator", "isModifier", "modifiers"]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "select"]
rebuilt        : ["select"]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/coAndContraVariantInferences8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fn", "x", "y"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(2) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["fn", "x", "y"]

tasks/coverage/typescript/tests/cases/compiler/collectionPatternNoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
Symbol reference IDs mismatch for "Message":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsInType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionArgumentsInterfaceMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenEnumWithEnumMemberConflict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Color", "Thing"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithAccessorChildren.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithConstructorChildren.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithEnumMemberConflict.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["e", "m1", "m2"]
rebuilt        : ScopeId(2): ["e"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "e":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithFunctionChildren.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberClassConflict.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m3"
Missing ReferenceId: "_m3"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m3"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "m1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(6)]
Symbol reference IDs mismatch for "_m2":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(8)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m2":
after transform: SymbolId(3) "m2"
rebuilt        : SymbolId(4) "m2"
Reference symbol mismatch for "m2":
after transform: SymbolId(3) "m2"
rebuilt        : SymbolId(4) "m2"

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberInterfaceConflict.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m2"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "m2":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMemberVariable.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithMethodChildren.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithModuleChildren.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithModuleReopening.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithPrivateMember.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c1"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(2)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/collisionCodeGenModuleWithUnicodeNames.ts
semantic error: Missing SymbolId: "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"
Missing SymbolId: "_才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd"
Missing ReferenceId: "_才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd"
Missing ReferenceId: "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"
Missing ReferenceId: "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"
Missing ReferenceId: "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123":
after transform: SymbolId(0) "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"
rebuilt        : SymbolId(0) "才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüß才能ソЫⅨ蒤郳र\u{94d}क\u{94d}ड\u{94d}राüışğİliيونيكودöÄüßAbcd123"

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientClass.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["m1", "m2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientFunction.ts
semantic error: Missing SymbolId: "m2"
Missing SymbolId: "_m"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Bindings mismatch:
after transform: ScopeId(0): ["m1", "m2"]
rebuilt        : ScopeId(0): ["m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientFunctionInGlobalFile.ts
semantic error: Missing SymbolId: "m4"
Missing SymbolId: "_m"
Missing ReferenceId: "m4"
Missing ReferenceId: "m4"
Bindings mismatch:
after transform: ScopeId(0): ["m3", "m4"]
rebuilt        : ScopeId(0): ["m4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientModule.ts
semantic error: Missing SymbolId: "m2"
Missing SymbolId: "_m"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Bindings mismatch:
after transform: ScopeId(0): ["exports", "foo", "foo2", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["foo", "foo2", "m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(16): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(3): ["_m", "a"]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(20)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["exports", "require"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndAmbientVar.ts
semantic error: Missing SymbolId: "m2"
Missing SymbolId: "_m"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Bindings mismatch:
after transform: ScopeId(0): ["exports", "m1", "m2", "require"]
rebuilt        : ScopeId(0): ["m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["_m", "a", "exports", "require"]
rebuilt        : ScopeId(1): ["_m", "a"]

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndFunctionInGlobalFile.ts
semantic error: Missing SymbolId: "m3"
Missing SymbolId: "_m"
Missing ReferenceId: "m3"
Missing ReferenceId: "m3"
Missing SymbolId: "m4"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "exports"
Missing ReferenceId: "_m2"
Missing ReferenceId: "require"
Missing ReferenceId: "m4"
Missing ReferenceId: "m4"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(6): [SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "exports":
after transform: SymbolId(6): []
rebuilt        : SymbolId(8): [ReferenceId(3)]
Symbol reference IDs mismatch for "require":
after transform: SymbolId(7): []
rebuilt        : SymbolId(9): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndInternalModuleAliasInGlobalFile.ts
semantic error: Missing SymbolId: "mOfGloalFile"
Missing SymbolId: "_mOfGloalFile"
Missing ReferenceId: "_mOfGloalFile"
Missing ReferenceId: "c"
Missing ReferenceId: "mOfGloalFile"
Missing ReferenceId: "mOfGloalFile"
Missing SymbolId: "exports"
Missing SymbolId: "require"
Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["_m", "exports", "require"]
rebuilt        : ScopeId(3): ["_m"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["_m2", "exports", "require"]
rebuilt        : ScopeId(4): ["_m2"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "mOfGloalFile":
after transform: SymbolId(0) "mOfGloalFile"
rebuilt        : SymbolId(0) "mOfGloalFile"
Reference symbol mismatch for "mOfGloalFile":
after transform: SymbolId(0) "mOfGloalFile"
rebuilt        : SymbolId(0) "mOfGloalFile"
Reference symbol mismatch for "exports":
after transform: SymbolId(2) "exports"
rebuilt        : SymbolId(3) "exports"
Reference symbol mismatch for "require":
after transform: SymbolId(3) "require"
rebuilt        : SymbolId(4) "require"
Reference symbol mismatch for "exports":
after transform: SymbolId(5) "exports"
rebuilt        : SymbolId(3) "exports"
Reference symbol mismatch for "require":
after transform: SymbolId(6) "require"
rebuilt        : SymbolId(4) "require"
Reference symbol mismatch for "exports":
after transform: SymbolId(8) "exports"
rebuilt        : SymbolId(3) "exports"
Reference symbol mismatch for "require":
after transform: SymbolId(9) "require"
rebuilt        : SymbolId(4) "require"

tasks/coverage/typescript/tests/cases/compiler/collisionExportsRequireAndUninstantiatedModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["exports", "foo", "foo2", "require"]
rebuilt        : ScopeId(0): ["foo", "foo2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["exports", "require"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterClassConstructor.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(21), ScopeId(25), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(13): [ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(15): [ScopeId(16)]

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterClassMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(10), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterFunctionExpressions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterInType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterInterfaceMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/collisionRestParameterUnderscoreIUsage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_i", "console"]
rebuilt        : ScopeId(0): ["Foo", "_i"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndNameResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(19), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(19)]
Scope children mismatch:
after transform: ScopeId(23): [ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/collisionSuperAndPropertyNameAsConstuctorParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(8): [ScopeId(9)]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAliasInGlobal.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAmbientClassInGlobal.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndAmbientVarInGlobal.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_this", "f"]
rebuilt        : ScopeId(0): ["f"]
Reference symbol mismatch for "_this":
after transform: SymbolId(0) "_this"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["_this"]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndEnumInGlobal.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["_this", "_thisVal1", "_thisVal2"]
rebuilt        : ScopeId(1): ["_this"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "_this":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndLocalVarInFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndLocalVarInLambda.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndModuleInGlobal.ts
semantic error: Missing SymbolId: "_this"
Missing SymbolId: "_this2"
Missing ReferenceId: "_this"
Missing ReferenceId: "_this"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndNameResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndParameter.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Foo1", "Foo3", "console", "f1", "f3"]
rebuilt        : ScopeId(0): ["Foo", "Foo1", "Foo3", "f1", "f3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(27), ScopeId(28), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(21), ScopeId(23), ScopeId(30)]
Scope children mismatch:
after transform: ScopeId(28): [ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(23): [ScopeId(24), ScopeId(27)]
Reference symbol mismatch for "console":
after transform: SymbolId(22) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(22) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/collisionThisExpressionAndPropertyNameAsConstuctorParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(9): [ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(13): [ScopeId(14)]

tasks/coverage/typescript/tests/cases/compiler/commentEmitAtEndOfFile1.ts
semantic error: Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Bindings mismatch:
after transform: ScopeId(0): ["empty", "f", "foo"]
rebuilt        : ScopeId(0): ["f", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement.ts
semantic error: Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentEmitOnParenthesizedAssertionInReturnStatement2.ts
semantic error: Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentInNamespaceDeclarationWithIdentifierPathName.ts
semantic error: Missing SymbolId: "hello"
Missing SymbolId: "_hello"
Missing SymbolId: "hi"
Missing SymbolId: "_hi"
Missing SymbolId: "world"
Missing SymbolId: "_world"
Missing ReferenceId: "world"
Missing ReferenceId: "world"
Missing ReferenceId: "_hi"
Missing ReferenceId: "_hi"
Missing ReferenceId: "hi"
Missing ReferenceId: "hi"
Missing ReferenceId: "_hello"
Missing ReferenceId: "_hello"
Missing ReferenceId: "hello"
Missing ReferenceId: "hello"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/commentLeadingCloseBrace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientClass1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientVariable1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["v", "y"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientVariable2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/compiler/commentOnAmbientfunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnDecoratedClassDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/commentOnElidedModule1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ElidedModule", "ElidedModule2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnExportEnumDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Color", "b", "g", "r"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/commentOnInterface1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/commentOnSignature1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/commentsCommentParsing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]

tasks/coverage/typescript/tests/cases/compiler/commentsDottedModuleName.ts
semantic error: Missing SymbolId: "outerModule"
Missing SymbolId: "_outerModule"
Missing SymbolId: "InnerModule"
Missing SymbolId: "_InnerModule"
Missing ReferenceId: "_InnerModule"
Missing ReferenceId: "b"
Missing ReferenceId: "InnerModule"
Missing ReferenceId: "InnerModule"
Missing ReferenceId: "_outerModule"
Missing ReferenceId: "_outerModule"
Missing ReferenceId: "outerModule"
Missing ReferenceId: "outerModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentsEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Colors", "Cornflower", "FancyPink"]
rebuilt        : ScopeId(1): ["Colors"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Colors":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/commentsExternalModules3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/commentsFormatting.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "c2"
Missing ReferenceId: "_m"
Missing ReferenceId: "c3"
Missing ReferenceId: "_m"
Missing ReferenceId: "c4"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "c2":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Symbol reference IDs mismatch for "c3":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "c4":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/commentsInheritance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(21), ScopeId(27), ScopeId(28), ScopeId(33)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(17), ScopeId(23)]

tasks/coverage/typescript/tests/cases/compiler/commentsInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentsModules.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/commentsMultiModuleMultiFile.ts
semantic error: Missing SymbolId: "multiM"
Missing SymbolId: "_multiM"
Missing ReferenceId: "_multiM"
Missing ReferenceId: "b"
Missing ReferenceId: "multiM"
Missing ReferenceId: "multiM"
Missing SymbolId: "_multiM2"
Missing ReferenceId: "_multiM2"
Missing ReferenceId: "c"
Missing ReferenceId: "_multiM2"
Missing ReferenceId: "e"
Missing ReferenceId: "multiM"
Missing ReferenceId: "multiM"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(5)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "e":
after transform: SymbolId(3): []
rebuilt        : SymbolId(5): [ReferenceId(7)]
Reference symbol mismatch for "multiM":
after transform: SymbolId(0) "multiM"
rebuilt        : SymbolId(0) "multiM"
Reference symbol mismatch for "multiM":
after transform: SymbolId(0) "multiM"
rebuilt        : SymbolId(0) "multiM"

tasks/coverage/typescript/tests/cases/compiler/commentsMultiModuleSingleFile.ts
semantic error: Missing SymbolId: "multiM"
Missing SymbolId: "_multiM"
Missing ReferenceId: "_multiM"
Missing ReferenceId: "b"
Missing ReferenceId: "_multiM"
Missing ReferenceId: "d"
Missing ReferenceId: "multiM"
Missing ReferenceId: "multiM"
Missing SymbolId: "_multiM2"
Missing ReferenceId: "_multiM2"
Missing ReferenceId: "c"
Missing ReferenceId: "_multiM2"
Missing ReferenceId: "e"
Missing ReferenceId: "multiM"
Missing ReferenceId: "multiM"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "d":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(3): []
rebuilt        : SymbolId(5): [ReferenceId(7)]
Symbol reference IDs mismatch for "e":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(9)]
Reference symbol mismatch for "multiM":
after transform: SymbolId(0) "multiM"
rebuilt        : SymbolId(0) "multiM"
Reference symbol mismatch for "multiM":
after transform: SymbolId(0) "multiM"
rebuilt        : SymbolId(0) "multiM"

tasks/coverage/typescript/tests/cases/compiler/commentsOnJSXExpressionsArePreserved.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Component", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["Component", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/commentsOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(27), ScopeId(30), ScopeId(33), ScopeId(36), ScopeId(52), ScopeId(56), ScopeId(60), ScopeId(64), ScopeId(68)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19)]
Scope children mismatch:
after transform: ScopeId(36): [ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(52): [ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(11): [ScopeId(12)]
Scope children mismatch:
after transform: ScopeId(56): [ScopeId(57), ScopeId(58), ScopeId(59)]
rebuilt        : ScopeId(13): [ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(60): [ScopeId(61), ScopeId(62), ScopeId(63)]
rebuilt        : ScopeId(15): [ScopeId(16)]
Scope children mismatch:
after transform: ScopeId(64): [ScopeId(65), ScopeId(66), ScopeId(67)]
rebuilt        : ScopeId(17): [ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(68): [ScopeId(69), ScopeId(70), ScopeId(71)]
rebuilt        : ScopeId(19): [ScopeId(20)]

tasks/coverage/typescript/tests/cases/compiler/commentsdoNotEmitComments.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "b"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "c", "color", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "shade", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "c", "color", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "shade"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(10), ScopeId(13), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(13): ["_m", "b", "m2"]
rebuilt        : ScopeId(8): ["_m", "b"]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(17): ["blue", "color", "green", "red"]
rebuilt        : ScopeId(11): ["color"]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(13): []
rebuilt        : SymbolId(12): [ReferenceId(9)]
Symbol flags mismatch for "color":
after transform: SymbolId(17): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "color":
after transform: SymbolId(17): [ReferenceId(6), ReferenceId(7), ReferenceId(17)]
rebuilt        : SymbolId(14): [ReferenceId(19), ReferenceId(20)]

tasks/coverage/typescript/tests/cases/compiler/commentsemitComments.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "b"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "c", "foo", "fooVar", "i", "i1_i", "m1", "myVariable", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "c", "foo", "fooVar", "i", "i1_i", "m1", "myVariable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(13): ["_m", "b", "m2"]
rebuilt        : ScopeId(8): ["_m", "b"]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(8): [ScopeId(9)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(13): []
rebuilt        : SymbolId(12): [ReferenceId(9)]

tasks/coverage/typescript/tests/cases/compiler/commonJsImportClassExpression.ts
semantic error: Missing SymbolId: "Chunk"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["Chunk", "c"]
rebuilt        : ScopeId(0): ["Chunk"]
Reference symbol mismatch for "c":
after transform: SymbolId(1) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["c", "require"]

tasks/coverage/typescript/tests/cases/compiler/comparableRelationBidirectional.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["AutomationMode", "LOCATION", "NONE", "SYSTEM", "TIME"]
rebuilt        : ScopeId(1): ["AutomationMode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AutomationMode":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "AutomationMode":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/comparisonOfPartialDeepAndIndexedAccessTerminatesWithoutError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/complexNarrowingWithAny.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/complicatedIndexesOfIntersectionsAreInferencable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Func", "Partial", "Pick", "Readonly"]
rebuilt        : ["Func"]

tasks/coverage/typescript/tests/cases/compiler/compositeContextualSignature.ts
semantic error: Unresolved references mismatch:
after transform: ["ReadonlyArray", "console", "undefined"]
rebuilt        : ["console", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/compositeWithNodeModulesSourceFile.ts
semantic error: Missing SymbolId: "myModule"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "myModule":
after transform: SymbolId(0) "myModule"
rebuilt        : SymbolId(0) "myModule"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/compoundVarDecl1.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/computedEnumMemberSyntacticallyString.ts
semantic error: Missing ReferenceId: "Foo"
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "F", "Foo", "G", "H", "I", "J"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "BAR":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(7), ReferenceId(10), ReferenceId(15)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(10): [ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21)]
rebuilt        : SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17)]

tasks/coverage/typescript/tests/cases/compiler/computedEnumMemberSyntacticallyString2.ts
semantic error: Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E1", "E2", "F", "Foo", "G", "H", "I", "J"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol reference IDs mismatch for "BAR":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(21), ReferenceId(26)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(14): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31)]
rebuilt        : SymbolId(3): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(20), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(27), ReferenceId(28)]

tasks/coverage/typescript/tests/cases/compiler/computedEnumTypeWidening.ts
semantic error: Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "E2", "MyDeclaredEnum", "MyEnum", "_defineProperty", "c1", "c2", "f1", "f2", "f3", "f4", "v1", "v2", "val1", "val2"]
rebuilt        : ScopeId(0): ["C", "E", "MyEnum", "_defineProperty", "c1", "c2", "f1", "f2", "f3", "f4", "v1", "v2", "val1", "val2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "C", "MyEnum"]
rebuilt        : ScopeId(8): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(46), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(54), ReferenceId(55), ReferenceId(57), ReferenceId(58), ReferenceId(60), ReferenceId(61), ReferenceId(78)]
rebuilt        : SymbolId(1): [ReferenceId(14), ReferenceId(15), ReferenceId(19), ReferenceId(24), ReferenceId(25), ReferenceId(32), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(62)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(61): [ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(51): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(43): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "E2":
after transform: SymbolId(38) "E2"
rebuilt        : <None>
Reference symbol mismatch for "MyDeclaredEnum":
after transform: SymbolId(56) "MyDeclaredEnum"
rebuilt        : <None>
Reference symbol mismatch for "MyDeclaredEnum":
after transform: SymbolId(56) "MyDeclaredEnum"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["computed", "const", "require"]
rebuilt        : ["E2", "MyDeclaredEnum", "require"]

tasks/coverage/typescript/tests/cases/compiler/computedPropertiesTransformedInOtherwiseNonTSClasses.ts
semantic error: Missing SymbolId: "NS"
Missing SymbolId: "_NS"
Missing ReferenceId: "_NS"
Missing ReferenceId: "NS"
Missing ReferenceId: "NS"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Reference symbol mismatch for "NS":
after transform: SymbolId(0) "NS"
rebuilt        : SymbolId(1) "NS"

tasks/coverage/typescript/tests/cases/compiler/computedPropertiesWithSetterAssignment.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Props", "foo", "k"]
rebuilt        : ScopeId(0): ["Props", "k"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["Props", "k"]
rebuilt        : ScopeId(1): ["Props"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "k":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(5), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(9)]
Symbol flags mismatch for "Props":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(4) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Iterable", "Set", "Symbol"]
rebuilt        : ["Symbol", "foo"]

tasks/coverage/typescript/tests/cases/compiler/computedPropertyNameAndTypeParameterConflict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["O"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/computedTypesKeyofNoIndexSignatureType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/conditionalEqualityTestingNullability.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeAnyUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeBasedContextualTypeReturnTypeWidening.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeClassMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["MyRecord", "MySet"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeContextualTypeSimplificationsSuceeds.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(3): []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeDiscriminatingLargeUnionRegularTypeFetchingSpeedReasonable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeGenericInSignatureTypeParameterConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeRelaxingConstraintAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Partial", "f", "undefined"]
rebuilt        : ["f", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeSimplification.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypeSubclassExtendsTypeParam.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Field"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypesASI.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/conditionalTypesSimplifyWhenTrivial.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fn1", "fn10", "fn11", "fn12", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "x", "z", "zee"]
rebuilt        : ScopeId(0): ["fn1", "fn10", "fn11", "fn12", "fn2", "fn3", "fn4", "fn5", "fn6", "fn7", "fn8", "fn9", "zee"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Reference symbol mismatch for "z":
after transform: SymbolId(56) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Pick"]
rebuilt        : ["z"]

tasks/coverage/typescript/tests/cases/compiler/conditionallyDuplicateOverloadsCausedByOverloadResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(11): [ReferenceId(5)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(12): [ReferenceId(6)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/constDeclarationShadowedByVarDeclaration3.ts
semantic error: Unresolved reference IDs mismatch for "RegExp":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/constDeclarations-ambient.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M", "c1", "c2", "c3", "c4", "c5"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/constDeclarations2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/constEnumDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E2"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumExternalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "V"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues1.ts
semantic error: Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Function | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | Function)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(6)]
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 25, end: 28 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues2.ts
semantic error: Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(6)]
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 20, end: 23 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues3.ts
semantic error: Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Bindings mismatch:
after transform: ScopeId(1): ["A", "foo"]
rebuilt        : ScopeId(1): ["foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "X"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 22, end: 25 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues4.ts
semantic error: Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Missing SymbolId: "_foo2"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["E", "X"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

tasks/coverage/typescript/tests/cases/compiler/constEnumMergingWithValues5.ts
semantic error: Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["E", "X"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"

tasks/coverage/typescript/tests/cases/compiler/constEnumNamespaceReferenceCausesNoImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["ConstFooEnum", "Here", "Some", "Values"]
rebuilt        : ScopeId(1): ["ConstFooEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "ConstFooEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumNamespaceReferenceCausesNoImport2.ts
semantic error: Missing SymbolId: "ConstEnumOnlyModule"
Missing SymbolId: "_ConstEnumOnlyModule"
Missing ReferenceId: "_ConstEnumOnlyModule"
Missing ReferenceId: "ConstFooEnum"
Missing ReferenceId: "ConstEnumOnlyModule"
Missing ReferenceId: "ConstEnumOnlyModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["ConstFooEnum", "Here", "Some", "Values"]
rebuilt        : ScopeId(2): ["ConstFooEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "ConstFooEnum":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "ConstFooEnum":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(8)]

tasks/coverage/typescript/tests/cases/compiler/constEnumNoEmitReexport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo", "MyConstEnum"]
rebuilt        : ScopeId(1): ["MyConstEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyConstEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumOnlyModuleMerging.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitNamedExport1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "Foo"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitNamedExport2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "Foo"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumPreserveEmitReexport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo", "MyConstEnum"]
rebuilt        : ScopeId(1): ["MyConstEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyConstEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumSyntheticNodesComments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "En"]
rebuilt        : ScopeId(1): ["En"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "En":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "En":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(4), ReferenceId(7), ReferenceId(10), ReferenceId(13), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(21)]

tasks/coverage/typescript/tests/cases/compiler/constEnumToStringNoComments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Foo", "X", "Y", "Z"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnumToStringWithComments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Foo", "X", "Y", "Z"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constEnums.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "E"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B2"
Missing SymbolId: "C"
Missing SymbolId: "_C2"
Missing ReferenceId: "_C2"
Missing ReferenceId: "E"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B2"
Missing ReferenceId: "_B2"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "A1"
Missing SymbolId: "_A3"
Missing SymbolId: "B"
Missing SymbolId: "_B3"
Missing SymbolId: "C"
Missing SymbolId: "_C3"
Missing ReferenceId: "_C3"
Missing ReferenceId: "E"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B3"
Missing ReferenceId: "_B3"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A3"
Missing ReferenceId: "_A3"
Missing ReferenceId: "A1"
Missing ReferenceId: "A1"
Missing SymbolId: "A2"
Missing SymbolId: "_A4"
Missing SymbolId: "B"
Missing SymbolId: "_B4"
Missing SymbolId: "C"
Missing SymbolId: "_C4"
Missing ReferenceId: "_C4"
Missing ReferenceId: "E"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B4"
Missing ReferenceId: "_B4"
Missing SymbolId: "_C5"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B4"
Missing ReferenceId: "_B4"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A4"
Missing ReferenceId: "_A4"
Missing ReferenceId: "A2"
Missing ReferenceId: "A2"
Missing SymbolId: "I"
Missing SymbolId: "I1"
Missing SymbolId: "I2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(31), SymbolId(39), SymbolId(50), SymbolId(56), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(68), SymbolId(70), SymbolId(72), SymbolId(74), SymbolId(76)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(19), SymbolId(26), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(44), SymbolId(46), SymbolId(48)]
Bindings mismatch:
after transform: ScopeId(1): ["A0", "Enum1"]
rebuilt        : ScopeId(1): ["Enum1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "D", "E", "Enum1", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "PQ", "Q", "R", "S", "T", "U", "V", "W", "W1", "W2", "W3", "W4", "W5"]
rebuilt        : ScopeId(2): ["Enum1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["#", "*/", "-->", "/*", "//", "///", "<!--", "Comments"]
rebuilt        : ScopeId(3): ["Comments"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(40), SymbolId(78)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(41), SymbolId(79)]
rebuilt        : ScopeId(5): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(42), SymbolId(80)]
rebuilt        : ScopeId(6): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["E", "V1", "V2"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(45), SymbolId(81)]
rebuilt        : ScopeId(8): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(46), SymbolId(82)]
rebuilt        : ScopeId(9): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["E", "_C2"]
rebuilt        : ScopeId(10): ["_C2"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["E", "V3", "V4"]
rebuilt        : ScopeId(11): ["E"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(51), SymbolId(84)]
rebuilt        : ScopeId(12): [SymbolId(20), SymbolId(21)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(52), SymbolId(85)]
rebuilt        : ScopeId(13): [SymbolId(22), SymbolId(23)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(14): ["E", "_C3"]
rebuilt        : ScopeId(14): ["_C3"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(15): ["E", "V1", "V2"]
rebuilt        : ScopeId(15): ["E"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(57), SymbolId(87)]
rebuilt        : ScopeId(16): [SymbolId(27), SymbolId(28)]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(17): [SymbolId(58), SymbolId(88)]
rebuilt        : ScopeId(17): [SymbolId(29), SymbolId(30)]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(18): ["E", "_C4"]
rebuilt        : ScopeId(18): ["_C4"]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(19): ["E", "V1", "V2"]
rebuilt        : ScopeId(19): ["E"]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(0x0)
rebuilt        : ScopeId(19): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(20): [SymbolId(62), SymbolId(90)]
rebuilt        : ScopeId(20): [SymbolId(33), SymbolId(34)]
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(20): ScopeFlags(Function)
Symbol flags mismatch for "Enum1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum1":
after transform: SymbolId(0): [ReferenceId(23), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(50), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(97), ReferenceId(157), ReferenceId(158)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(67), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(187), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(195), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(208)]
Symbol redeclarations mismatch for "Enum1":
after transform: SymbolId(0): [Span { start: 46, end: 51 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Enum1":
after transform: SymbolId(92): [ReferenceId(98), ReferenceId(99), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(134), ReferenceId(135), ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(139), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(156)]
rebuilt        : SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66)]
Symbol flags mismatch for "Comments":
after transform: SymbolId(31): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Comments":
after transform: SymbolId(31): [ReferenceId(85), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(174)]
rebuilt        : SymbolId(3): [ReferenceId(83), ReferenceId(214), ReferenceId(215), ReferenceId(216), ReferenceId(217), ReferenceId(218), ReferenceId(219), ReferenceId(220)]
Symbol flags mismatch for "E":
after transform: SymbolId(42): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(42): []
rebuilt        : SymbolId(11): [ReferenceId(91)]
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Reference symbol mismatch for "Enum1":
after transform: SymbolId(0) "Enum1"
rebuilt        : SymbolId(2) "Enum1"
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "E":
after transform: SymbolId(47) "E"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "E":
after transform: SymbolId(47) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(53) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(53) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(59) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(59) "E"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "A1":
after transform: SymbolId(50) "A1"
rebuilt        : SymbolId(19) "A1"
Reference symbol mismatch for "A2":
after transform: SymbolId(56) "A2"
rebuilt        : SymbolId(26) "A2"
Reference symbol mismatch for "I":
after transform: SymbolId(63) "I"
rebuilt        : SymbolId(35) "I"
Reference symbol mismatch for "I":
after transform: SymbolId(63) "I"
rebuilt        : SymbolId(35) "I"
Reference symbol mismatch for "I1":
after transform: SymbolId(64) "I1"
rebuilt        : SymbolId(36) "I1"
Reference symbol mismatch for "I1":
after transform: SymbolId(64) "I1"
rebuilt        : SymbolId(36) "I1"
Reference symbol mismatch for "I2":
after transform: SymbolId(65) "I2"
rebuilt        : SymbolId(37) "I2"
Reference symbol mismatch for "I2":
after transform: SymbolId(65) "I2"
rebuilt        : SymbolId(37) "I2"
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Reference symbol mismatch for "A":
after transform: SymbolId(39) "A"
rebuilt        : SymbolId(5) "A"
Unresolved references mismatch:
after transform: ["A", "A0"]
rebuilt        : ["E"]

tasks/coverage/typescript/tests/cases/compiler/constIndexedAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["numbers", "one", "zero"]
rebuilt        : ScopeId(1): ["numbers"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["numbersNotConst", "one", "zero"]
rebuilt        : ScopeId(2): ["numbersNotConst"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "numbers":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "numbersNotConst":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/constantOverloadFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/constantOverloadFunctionNoSubtypeError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/constraintCheckInGenericBaseTypeReference.ts
semantic error: Symbol reference IDs mismatch for "Constraint":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "TypeArg":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/constraintOfRecursivelyMappedTypeWithConditionalIsResolvable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/constraintReferencingTypeParameterFromSameTypeParameterList.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/constraintsThatReferenceOtherContstraints1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/constructorArgWithGenericCallSignature.ts
semantic error: Missing SymbolId: "Test"
Missing SymbolId: "_Test"
Missing ReferenceId: "_Test"
Missing ReferenceId: "MyClass"
Missing ReferenceId: "_Test"
Missing ReferenceId: "F"
Missing ReferenceId: "Test"
Missing ReferenceId: "Test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(6), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol reference IDs mismatch for "MyClass":
after transform: SymbolId(3): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "F":
after transform: SymbolId(5): []
rebuilt        : SymbolId(4): [ReferenceId(3)]
Reference symbol mismatch for "Test":
after transform: SymbolId(0) "Test"
rebuilt        : SymbolId(0) "Test"
Reference symbol mismatch for "Test":
after transform: SymbolId(0) "Test"
rebuilt        : SymbolId(0) "Test"
Unresolved references mismatch:
after transform: ["Test"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/constructorArgs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/constructorOverloads2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/constructorOverloads5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/constructorOverloads9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/constructorTypeWithTypeParameters.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X", "Y", "anotherVar"]
rebuilt        : ScopeId(0): ["anotherVar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/constructorWithCapturedSuper.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(11)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/contextSensitiveReturnTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "DEPS":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(18)]

tasks/coverage/typescript/tests/cases/compiler/contextualComputedNonBindablePropertyType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(10): []
rebuilt        : ScopeId(2): ["propName"]
Symbol flags mismatch for "propName":
after transform: SymbolId(11): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "propName":
after transform: SymbolId(11): Span { start: 526, end: 534 }
rebuilt        : SymbolId(2): Span { start: 551, end: 569 }
Symbol reference IDs mismatch for "propName":
after transform: SymbolId(11): [ReferenceId(13), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol redeclarations mismatch for "propName":
after transform: SymbolId(11): [Span { start: 551, end: 569 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/contextualExpressionTypecheckingDoesntBlowStack.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualOuterTypeParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(12), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(3): []
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(20)]
rebuilt        : ScopeId(4): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(7): [ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(12): [ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "t":
after transform: SymbolId(16): [ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["f", "true"]
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/contextualOverloadListFromArrayUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["y", "yThen"]
rebuilt        : ScopeId(0): ["yThen"]
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["y"]

tasks/coverage/typescript/tests/cases/compiler/contextualPropertyOfGenericMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE.ts
semantic error: Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["app"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualReturnTypeOfIIFE3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["app"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualSigInstantiationRestParams.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["contextual", "toInstantiate"]
rebuilt        : ["toInstantiate"]

tasks/coverage/typescript/tests/cases/compiler/contextualSignatureConditionalTypeInstantiationUsingDefault.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["createMachine", "true"]
rebuilt        : ["createMachine"]

tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstantiation4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/contextualSignatureInstatiationCovariance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/contextualSignature_objectLiteralMethodMayReturnNever.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeArrayReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Flex", "StyledSelect", "styled"]
rebuilt        : ScopeId(0): ["StyledSelect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "styled":
after transform: SymbolId(16) "styled"
rebuilt        : <None>
Reference symbol mismatch for "Flex":
after transform: SymbolId(18) "Flex"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["Flex", "styled"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeBasedOnIntersectionWithAnyInTheMix5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ThemeSymbol", "app"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "app":
after transform: SymbolId(26) "app"
rebuilt        : <None>
Reference symbol mismatch for "ThemeSymbol":
after transform: SymbolId(24) "ThemeSymbol"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Readonly", "Record", "Symbol", "ThisType", "inject", "reactive"]
rebuilt        : ["ThemeSymbol", "app", "inject", "reactive"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeCaching.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "applyOptimizationDefaults"]
rebuilt        : ScopeId(0): ["applyOptimizationDefaults"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "A":
after transform: SymbolId(11) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["MyCompiler", "emit"]
rebuilt        : ["A", "emit"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeIterableUnions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["DMap", "Iterable", "true"]
rebuilt        : ["DMap"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeObjectSpreadExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/contextualTypeOfIndexedAccessParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeOnYield1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Generator", "console"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeOnYield2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Generator", "console"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeSelfReferencing.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["parse", "result"]
rebuilt        : ScopeId(0): ["result"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "parse":
after transform: SymbolId(3) "parse"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["parse"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypeShouldBeLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["DEFAULT_TABS_TAG", "TabGroup"]
rebuilt        : ScopeId(0): ["DEFAULT_TABS_TAG"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "DEFAULT_TABS_TAG":
after transform: SymbolId(2): [ReferenceId(11), ReferenceId(15)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "TabGroup":
after transform: SymbolId(10) "TabGroup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Event", "Omit", "const"]
rebuilt        : ["TabGroup"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypesNegatedTypeLikeConstraintInGenericMappedType3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["DEFAULT_TABS_TAG", "TabGroup"]
rebuilt        : ScopeId(0): ["DEFAULT_TABS_TAG"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "DEFAULT_TABS_TAG":
after transform: SymbolId(6): [ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "TabGroup":
after transform: SymbolId(14) "TabGroup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Event", "Exclude", "const"]
rebuilt        : ["TabGroup"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingArrayOfLambdas.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/contextualTypingFunctionReturningFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingFunctionReturningFunction2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfConditionalExpression.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfLambdaWithMultipleSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfOptionalMembers.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "a", "y"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "a", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["App4", "JSX", "app", "app2", "app3", "foo", "require", "undefined"]
rebuilt        : ["App4", "app", "app2", "app3", "foo", "require", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/contextualTypingOfTooShortOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/contextualTypingReturnStatementWithReturnTypeAnnotation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypeAsyncFunctionReturnTypeFromUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(12), ScopeId(15)]
Unresolved references mismatch:
after transform: ["Promise", "Record", "StateMachine", "arguments", "createMachine", "load", "require"]
rebuilt        : ["Promise", "arguments", "createMachine", "load", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(2), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(3), ReferenceId(7), ReferenceId(9)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypeGeneratorReturnTypeFromUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Promise", "require"]
rebuilt        : ["Promise", "require"]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedBooleanLiterals.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedByDiscriminableUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxAttribute.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxAttribute2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ComponentPropsWithRef", "ElementType", "React", "UnwrappedLink", "UnwrappedLink2", "_jsxFileName"]
rebuilt        : ScopeId(0): ["React", "UnwrappedLink", "UnwrappedLink2", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedJsxChildren.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["DropdownMenu", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(15), ReferenceId(16), ReferenceId(18), ReferenceId(21), ReferenceId(22), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(8), ReferenceId(10), ReferenceId(12)]
Reference symbol mismatch for "DropdownMenu":
after transform: SymbolId(1) "DropdownMenu"
rebuilt        : <None>
Reference symbol mismatch for "DropdownMenu":
after transform: SymbolId(1) "DropdownMenu"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["DropdownMenu", "JSX"]
rebuilt        : ["DropdownMenu"]
Unresolved reference IDs mismatch for "DropdownMenu":
after transform: [ReferenceId(7)]
rebuilt        : [ReferenceId(1), ReferenceId(9)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedOptionalProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["num", "test2", "test3"]
rebuilt        : ScopeId(0): ["test2", "test3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "num":
after transform: SymbolId(8) "num"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "test1"]
rebuilt        : ["num", "test1"]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedParametersWithInitializers4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record", "test"]
rebuilt        : ["test"]

tasks/coverage/typescript/tests/cases/compiler/contextuallyTypedSymbolNamedProperties.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "ab", "x"]
rebuilt        : ScopeId(0): ["A", "B", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(8)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(6)]
Reference symbol mismatch for "ab":
after transform: SymbolId(3) "ab"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Symbol", "f"]
rebuilt        : ["Symbol", "ab", "f"]

tasks/coverage/typescript/tests/cases/compiler/contravariantInferenceAndTypeGuard.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "List":
after transform: [ReferenceId(5), ReferenceId(11), ReferenceId(15), ReferenceId(21), ReferenceId(30), ReferenceId(36), ReferenceId(42), ReferenceId(46), ReferenceId(48), ReferenceId(56)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/contravariantOnlyInferenceFromAnnotatedFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record", "foo"]
rebuilt        : ["foo"]

tasks/coverage/typescript/tests/cases/compiler/contravariantOnlyInferenceWithAnnotatedOptionalParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/contravariantTypeAliasInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "g1", "g2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f1":
after transform: SymbolId(4) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : <None>
Reference symbol mismatch for "f1":
after transform: SymbolId(4) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(5) "f2"
rebuilt        : <None>
Reference symbol mismatch for "g1":
after transform: SymbolId(9) "g1"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(10) "g2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["bar", "foo"]
rebuilt        : ["bar", "f1", "f2", "foo", "g1", "g2"]

tasks/coverage/typescript/tests/cases/compiler/controlFlowAnalysisOnBareThisKeyword.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["isBig", "true"]
rebuilt        : ["isBig"]

tasks/coverage/typescript/tests/cases/compiler/controlFlowArrays.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(33), ScopeId(34), ScopeId(35)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowBreakContinueWithLabel.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "User"]
rebuilt        : ScopeId(1): ["User"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "User":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "User":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(11)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowCommaExpressionAssertionWithinTernary.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowDestructuringLoop.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowFavorAssertedTypeThroughTypePredicate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["obj1", "obj2", "obj3", "obj4"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "obj1":
after transform: SymbolId(1) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(1) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(1) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj1":
after transform: SymbolId(1) "obj1"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(2) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(2) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(2) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj2":
after transform: SymbolId(2) "obj2"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(4) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(4) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(4) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj3":
after transform: SymbolId(4) "obj3"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(5) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(5) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(5) "obj4"
rebuilt        : <None>
Reference symbol mismatch for "obj4":
after transform: SymbolId(5) "obj4"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "isObject1", "isObject2"]
rebuilt        : ["isObject1", "isObject2", "obj1", "obj2", "obj3", "obj4"]

tasks/coverage/typescript/tests/cases/compiler/controlFlowForCatchAndFinally.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(13), ScopeId(15), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(8)]
Unresolved references mismatch:
after transform: ["Aborter", "Promise", "arguments", "require", "test1", "test2", "undefined"]
rebuilt        : ["Aborter", "arguments", "require", "test1", "test2", "undefined"]
Unresolved reference IDs mismatch for "Aborter":
after transform: [ReferenceId(24), ReferenceId(27)]
rebuilt        : [ReferenceId(29)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowInitializedDestructuringVariables.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "obj"]
rebuilt        : ScopeId(0): ["a", "b"]
Reference symbol mismatch for "obj":
after transform: SymbolId(0) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["obj"]

tasks/coverage/typescript/tests/cases/compiler/controlFlowInstanceof.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "Y", "_defineProperty", "ctor", "f1", "f2", "f3", "f4", "foo", "goo", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "Y", "_defineProperty", "f1", "f2", "f3", "f4", "foo", "goo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(25), ScopeId(27), ScopeId(29)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(8): [ReferenceId(36), ReferenceId(37), ReferenceId(38)]
rebuilt        : SymbolId(9): [ReferenceId(29), ReferenceId(32)]
Reference symbol mismatch for "x":
after transform: SymbolId(17) "x"
rebuilt        : <None>
Reference symbol mismatch for "ctor":
after transform: SymbolId(18) "ctor"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(17) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "Promise", "Set"]
rebuilt        : ["Promise", "Set", "ctor", "x"]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(33)]
rebuilt        : [ReferenceId(1), ReferenceId(4), ReferenceId(9), ReferenceId(18), ReferenceId(22), ReferenceId(25)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowInstanceofWithSymbolHasInstance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(26), ScopeId(28)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(13): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(10): [ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(10): [ReferenceId(36), ReferenceId(39)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(1), ReferenceId(20)]
rebuilt        : [ReferenceId(13)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(10), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(31), ReferenceId(32), ReferenceId(34), ReferenceId(37)]
rebuilt        : [ReferenceId(2), ReferenceId(5), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(40), ReferenceId(45)]
rebuilt        : [ReferenceId(30), ReferenceId(34)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowManyConsecutiveConditionsNoTimeout.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Choice", "One", "Two"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/controlFlowPropertyDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["HTMLDOMPropertyConfig", "HTMLtoJSX", "StyleParser", "_defineProperty", "endsWith", "hyphenToCamelCase", "isConvertiblePixelValue", "isEmpty", "mapFrom", "propname", "repeatString", "require", "trimEnd"]
rebuilt        : ScopeId(0): ["HTMLDOMPropertyConfig", "HTMLtoJSX", "StyleParser", "_defineProperty", "endsWith", "hyphenToCamelCase", "isConvertiblePixelValue", "isEmpty", "mapFrom", "propname", "repeatString", "trimEnd"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "JSON", "RegExp"]
rebuilt        : ["Error", "JSON", "RegExp", "require"]

tasks/coverage/typescript/tests/cases/compiler/controlFlowUnionContainingTypeParameter1.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/controlFlowWithIncompleteTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["cond", "foo1", "foo2"]
rebuilt        : ScopeId(0): ["foo1", "foo2"]
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : <None>
Reference symbol mismatch for "cond":
after transform: SymbolId(0) "cond"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["cond"]

tasks/coverage/typescript/tests/cases/compiler/correctOrderOfPromiseMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(11), ReferenceId(22)]

tasks/coverage/typescript/tests/cases/compiler/correlatedUnions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ALL_BARS", "BAR_LOOKUP", "call", "clickEvent", "createEventListener", "data", "f1", "f2", "f3", "f4", "ff1", "foo", "func", "getConfigOrDefault", "getStringAndNumberFromOriginalAndMapped", "getValueConcrete", "handlers", "process", "processEvents", "processRecord", "r1", "r2", "ref", "renderField", "renderFuncs", "renderSelectField", "renderTextField", "scrollEvent", "xx"]
rebuilt        : ScopeId(0): ["ALL_BARS", "BAR_LOOKUP", "call", "clickEvent", "createEventListener", "data", "f1", "f2", "f3", "f4", "ff1", "foo", "func", "getConfigOrDefault", "getStringAndNumberFromOriginalAndMapped", "getValueConcrete", "handlers", "process", "processEvents", "processRecord", "ref", "renderField", "renderFuncs", "renderSelectField", "renderTextField", "scrollEvent"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(27), ScopeId(28), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(70), ScopeId(71), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35)]
Scope children mismatch:
after transform: ScopeId(46): [ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24)]
Symbol reference IDs mismatch for "BAR_LOOKUP":
after transform: SymbolId(137): [ReferenceId(232)]
rebuilt        : SymbolId(74): []
Reference symbol mismatch for "r1":
after transform: SymbolId(7) "r1"
rebuilt        : <None>
Reference symbol mismatch for "r2":
after transform: SymbolId(8) "r2"
rebuilt        : <None>
Reference symbol mismatch for "xx":
after transform: SymbolId(55) "xx"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["DocumentEventMap", "Partial", "ReadonlyArray", "Record", "Required", "bar", "console", "const", "document", "makeCompleteLookupMapping", "undefined"]
rebuilt        : ["bar", "console", "document", "makeCompleteLookupMapping", "r1", "r2", "undefined", "xx"]

tasks/coverage/typescript/tests/cases/compiler/covariance1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "XX"
Missing ReferenceId: "_M"
Missing ReferenceId: "f"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol reference IDs mismatch for "XX":
after transform: SymbolId(2): [ReferenceId(6)]
rebuilt        : SymbolId(2): [ReferenceId(2)]
Symbol reference IDs mismatch for "f":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/crashInGetTextOfComputedPropertyName.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/crashInResolveInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/curiousNestedConditionalEvaluationResult.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/customAsyncIterator.ts
semantic error: Unresolved references mismatch:
after transform: ["AsyncIterator", "Error", "IteratorResult", "Promise", "require"]
rebuilt        : ["Error", "require"]

tasks/coverage/typescript/tests/cases/compiler/customEventDetail.ts
semantic error: Unresolved references mismatch:
after transform: ["CustomEvent"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/cyclicGenericTypeInstantiation.ts
semantic error: Symbol reference IDs mismatch for "z":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "z":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(5): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/cyclicGenericTypeInstantiationInference.ts
semantic error: Symbol reference IDs mismatch for "z":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "z":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "y":
after transform: SymbolId(7): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(5): [ReferenceId(3)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(8): [ReferenceId(10)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/cyclicModuleImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MainModule", "SubModule"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/cyclicTypeInstantiation.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/declFileAliasUseBeforeDeclaration.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declFileAliasUseBeforeDeclaration2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileAmbientExternalModuleWithSingleExportedModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SubModule"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileConstructors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(7): [ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/declFileEnumUsedAsValue.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e"]
rebuilt        : ScopeId(1): ["e"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "e":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/declFileEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["a", "b", "c", "e2"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(3): ["e3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "d", "e", "e4"]
rebuilt        : ScopeId(4): ["e4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["Friday", "Saturday", "Sunday", "Weekend days", "e5"]
rebuilt        : ScopeId(5): ["e5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e3":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e4":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e5":
after transform: SymbolId(18): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/declFileExportAssignmentImportInternalModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileExportAssignmentOfGenericInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Foo", "module"]

tasks/coverage/typescript/tests/cases/compiler/declFileExportImportChain.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "c1"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/declFileExportImportChain2.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "c1"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/declFileForClassWithMultipleBaseClasses.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/declFileForClassWithPrivateOverloadedFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declFileForExportedImport.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(2) "b"
rebuilt        : SymbolId(2) "b"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declFileForFunctionTypeAsTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/declFileForInterfaceWithOptionalFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileForInterfaceWithRestParams.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["x"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileFunctions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]

tasks/coverage/typescript/tests/cases/compiler/declFileGenericClassWithGenericExtendedClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(7)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Baz":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/declFileGenericType.ts
semantic error: Missing SymbolId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "A"
Missing ReferenceId: "_C"
Missing ReferenceId: "B"
Missing ReferenceId: "_C"
Missing ReferenceId: "F"
Missing ReferenceId: "_C"
Missing ReferenceId: "F2"
Missing ReferenceId: "_C"
Missing ReferenceId: "F3"
Missing ReferenceId: "_C"
Missing ReferenceId: "F4"
Missing ReferenceId: "_C"
Missing ReferenceId: "F5"
Missing ReferenceId: "_C"
Missing ReferenceId: "F6"
Missing ReferenceId: "_C"
Missing ReferenceId: "D"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(32), SymbolId(33), SymbolId(35)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(12), ScopeId(13)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(13), SymbolId(16), SymbolId(18), SymbolId(21), SymbolId(36)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(15)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(16)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(10), ReferenceId(17)]
rebuilt        : SymbolId(3): [ReferenceId(3)]
Symbol flags mismatch for "F":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(4): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol flags mismatch for "F2":
after transform: SymbolId(7): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F2":
after transform: SymbolId(7): []
rebuilt        : SymbolId(6): [ReferenceId(7)]
Symbol flags mismatch for "F3":
after transform: SymbolId(10): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F3":
after transform: SymbolId(10): []
rebuilt        : SymbolId(8): [ReferenceId(9)]
Symbol flags mismatch for "F4":
after transform: SymbolId(13): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F4":
after transform: SymbolId(13): []
rebuilt        : SymbolId(10): [ReferenceId(11)]
Symbol flags mismatch for "F5":
after transform: SymbolId(16): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F5":
after transform: SymbolId(16): []
rebuilt        : SymbolId(12): [ReferenceId(13)]
Symbol flags mismatch for "F6":
after transform: SymbolId(18): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F6":
after transform: SymbolId(18): []
rebuilt        : SymbolId(13): [ReferenceId(15)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(21): []
rebuilt        : SymbolId(15): [ReferenceId(18)]
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Reference symbol mismatch for "C":
after transform: SymbolId(0) "C"
rebuilt        : SymbolId(0) "C"
Unresolved references mismatch:
after transform: ["Array", "C"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileGenericType2.ts
semantic error: Missing SymbolId: "templa"
Missing SymbolId: "_templa2"
Missing SymbolId: "dom"
Missing SymbolId: "_dom2"
Missing SymbolId: "mvc"
Missing SymbolId: "_mvc2"
Missing ReferenceId: "_mvc2"
Missing ReferenceId: "AbstractElementController"
Missing ReferenceId: "mvc"
Missing ReferenceId: "mvc"
Missing ReferenceId: "_dom2"
Missing ReferenceId: "_dom2"
Missing ReferenceId: "dom"
Missing ReferenceId: "dom"
Missing ReferenceId: "_templa2"
Missing ReferenceId: "_templa2"
Missing ReferenceId: "templa"
Missing ReferenceId: "templa"
Missing SymbolId: "_templa3"
Missing SymbolId: "dom"
Missing SymbolId: "_dom3"
Missing SymbolId: "mvc"
Missing SymbolId: "_mvc3"
Missing SymbolId: "composite"
Missing SymbolId: "_composite"
Missing ReferenceId: "_composite"
Missing ReferenceId: "AbstractCompositeElementController"
Missing ReferenceId: "composite"
Missing ReferenceId: "composite"
Missing ReferenceId: "_mvc3"
Missing ReferenceId: "_mvc3"
Missing ReferenceId: "mvc"
Missing ReferenceId: "mvc"
Missing ReferenceId: "_dom3"
Missing ReferenceId: "_dom3"
Missing ReferenceId: "dom"
Missing ReferenceId: "dom"
Missing ReferenceId: "_templa3"
Missing ReferenceId: "_templa3"
Missing ReferenceId: "templa"
Missing ReferenceId: "templa"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(35)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(15), ScopeId(19), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6)]
Binding symbols mismatch:
after transform: ScopeId(19): [SymbolId(16), SymbolId(28)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(20): [SymbolId(17), SymbolId(29)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(21): [SymbolId(18), SymbolId(30)]
rebuilt        : ScopeId(3): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(24): [SymbolId(20), SymbolId(31)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(24): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(21), SymbolId(32)]
rebuilt        : ScopeId(7): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(26): [SymbolId(22), SymbolId(33)]
rebuilt        : ScopeId(8): [SymbolId(12), SymbolId(13)]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(27): [SymbolId(23), SymbolId(34)]
rebuilt        : ScopeId(9): [SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol reference IDs mismatch for "AbstractElementController":
after transform: SymbolId(18): []
rebuilt        : SymbolId(7): [ReferenceId(3)]
Symbol reference IDs mismatch for "AbstractCompositeElementController":
after transform: SymbolId(23): []
rebuilt        : SymbolId(15): [ReferenceId(17)]
Reference symbol mismatch for "templa":
after transform: <None>
rebuilt        : SymbolId(1) "templa"
Reference symbol mismatch for "templa":
after transform: <None>
rebuilt        : SymbolId(1) "templa"
Unresolved references mismatch:
after transform: ["IElementController", "mvc", "require", "templa"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declFileImportChainInExportAssignment.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing SymbolId: "c"
Missing SymbolId: "_c"
Missing ReferenceId: "_c"
Missing ReferenceId: "c"
Missing ReferenceId: "c"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Missing SymbolId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "m":
after transform: SymbolId(0) "m"
rebuilt        : SymbolId(0) "m"
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : SymbolId(5) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : SymbolId(6) "b"

tasks/coverage/typescript/tests/cases/compiler/declFileImportModuleWithExportAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 229, end: 322 }
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 229, end: 322 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["m2", "module"]
rebuilt        : ["module"]

tasks/coverage/typescript/tests/cases/compiler/declFileImportedTypeUseInTypeArgPosition.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["List", "mod1", "moo"]
rebuilt        : ScopeId(0): ["List"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileIndexSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFileInternalAliases.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileMethods.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]

tasks/coverage/typescript/tests/cases/compiler/declFileModuleAssignmentInObjectLiteralProperty.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/declFileModuleContinuation.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C2"
Missing ReferenceId: "_C2"
Missing ReferenceId: "W"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "W":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileModuleWithPropertyOfTypeModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileOptionalInterfaceMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declFilePrivateMethodOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationArrayType.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "g"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(17)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(12), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(14), ReferenceId(15)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(1)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Unresolved references mismatch:
after transform: ["m"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationStringLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTupleType.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "g"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(11)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(7), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(11)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(1)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(9)]
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Unresolved references mismatch:
after transform: ["m"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeAlias.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeLiteral.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "g":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "c":
after transform: SymbolId(4): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["m"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeQuery.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "g"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(15)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(1)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationTypeReference.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "g"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(15)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(1)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(5): [ReferenceId(10), ReferenceId(11)]
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(1) "m"
Unresolved references mismatch:
after transform: ["m"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationUnionType.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "g"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(11)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(20)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(4)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(3): []
rebuilt        : SymbolId(5): [ReferenceId(7)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(6), ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(15), ReferenceId(18)]
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(2) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(2) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(2) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(1) "m"
rebuilt        : SymbolId(2) "m"
Unresolved references mismatch:
after transform: ["m", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorAccessors.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "public1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "public2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(15)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(16)]
rebuilt        : ScopeId(4): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(2): [ReferenceId(6), ReferenceId(7)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "public2":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(3)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(13)]
Reference symbol mismatch for "m2":
after transform: SymbolId(3) "m2"
rebuilt        : SymbolId(4) "m2"
Reference symbol mismatch for "m2":
after transform: SymbolId(3) "m2"
rebuilt        : SymbolId(4) "m2"
Unresolved references mismatch:
after transform: ["m2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorParameterOfFunction.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "public1"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo3"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo4"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo13"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo14"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "public2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo113"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo114"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(20), SymbolId(30)]
rebuilt        : ScopeId(12): [SymbolId(21), SymbolId(22)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(11)]
Symbol reference IDs mismatch for "foo3":
after transform: SymbolId(7): []
rebuilt        : SymbolId(8): [ReferenceId(4)]
Symbol reference IDs mismatch for "foo4":
after transform: SymbolId(9): []
rebuilt        : SymbolId(10): [ReferenceId(7)]
Symbol reference IDs mismatch for "foo13":
after transform: SymbolId(15): []
rebuilt        : SymbolId(16): [ReferenceId(10)]
Symbol reference IDs mismatch for "foo14":
after transform: SymbolId(17): []
rebuilt        : SymbolId(18): [ReferenceId(13)]
Symbol reference IDs mismatch for "public2":
after transform: SymbolId(20): []
rebuilt        : SymbolId(22): [ReferenceId(15)]
Symbol reference IDs mismatch for "foo113":
after transform: SymbolId(25): []
rebuilt        : SymbolId(27): [ReferenceId(20)]
Symbol reference IDs mismatch for "foo114":
after transform: SymbolId(27): []
rebuilt        : SymbolId(29): [ReferenceId(23)]
Reference symbol mismatch for "m2":
after transform: SymbolId(19) "m2"
rebuilt        : SymbolId(20) "m2"
Reference symbol mismatch for "m2":
after transform: SymbolId(19) "m2"
rebuilt        : SymbolId(20) "m2"
Unresolved references mismatch:
after transform: ["m2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorReturnTypeOfFunction.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "public1"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo3"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo4"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo13"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo14"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "public2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo113"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo114"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(12), SymbolId(18)]
rebuilt        : ScopeId(12): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol reference IDs mismatch for "private1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "public1":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(8), ReferenceId(11)]
Symbol reference IDs mismatch for "foo3":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(4)]
Symbol reference IDs mismatch for "foo4":
after transform: SymbolId(6): []
rebuilt        : SymbolId(7): [ReferenceId(7)]
Symbol reference IDs mismatch for "foo13":
after transform: SymbolId(9): []
rebuilt        : SymbolId(10): [ReferenceId(10)]
Symbol reference IDs mismatch for "foo14":
after transform: SymbolId(10): []
rebuilt        : SymbolId(11): [ReferenceId(13)]
Symbol reference IDs mismatch for "public2":
after transform: SymbolId(12): []
rebuilt        : SymbolId(14): [ReferenceId(15)]
Symbol reference IDs mismatch for "foo113":
after transform: SymbolId(15): []
rebuilt        : SymbolId(17): [ReferenceId(20)]
Symbol reference IDs mismatch for "foo114":
after transform: SymbolId(16): []
rebuilt        : SymbolId(18): [ReferenceId(23)]
Reference symbol mismatch for "m2":
after transform: SymbolId(11) "m2"
rebuilt        : SymbolId(12) "m2"
Reference symbol mismatch for "m2":
after transform: SymbolId(11) "m2"
rebuilt        : SymbolId(12) "m2"
Unresolved references mismatch:
after transform: ["m2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorTypeAlias.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorTypeLiteral.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileTypeAnnotationVisibilityErrorVariableDeclaration.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileTypeofClass.ts
semantic error: Symbol reference IDs mismatch for "c":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(6), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/declFileTypeofEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["days", "friday", "monday", "saturday", "sunday", "thursday", "tuesday", "wednesday"]
rebuilt        : ScopeId(1): ["days"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "days":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "days":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(18)]
rebuilt        : SymbolId(0): [ReferenceId(15), ReferenceId(16), ReferenceId(17)]

tasks/coverage/typescript/tests/cases/compiler/declFileTypeofFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "f":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "g":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(4): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/declFileTypeofInAnonymousType.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "_m"
Missing ReferenceId: "e"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["e", "holiday", "weekday", "weekend"]
rebuilt        : ScopeId(3): ["e"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol flags mismatch for "e":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(10)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"
Unresolved references mismatch:
after transform: ["m1"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileTypeofModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declFileWithClassNameConflictingWithClassReferredByExtendsClause.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing SymbolId: "Y"
Missing SymbolId: "_Y"
Missing SymbolId: "base"
Missing SymbolId: "_base"
Missing ReferenceId: "_base"
Missing ReferenceId: "W"
Missing ReferenceId: "base"
Missing ReferenceId: "base"
Missing ReferenceId: "_Y"
Missing ReferenceId: "_Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "Y"
Missing SymbolId: "_Y2"
Missing SymbolId: "base"
Missing SymbolId: "_base2"
Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "W"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "_base2"
Missing ReferenceId: "_base2"
Missing ReferenceId: "base"
Missing ReferenceId: "base"
Missing ReferenceId: "_Y2"
Missing ReferenceId: "_Y2"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "_defineProperty"]
rebuilt        : ScopeId(0): ["X", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(13)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(14)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(7), SymbolId(15)]
rebuilt        : ScopeId(3): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(8), SymbolId(16)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(9), SymbolId(17)]
rebuilt        : ScopeId(7): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(10), SymbolId(18)]
rebuilt        : ScopeId(8): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(11), SymbolId(19)]
rebuilt        : ScopeId(9): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol reference IDs mismatch for "W":
after transform: SymbolId(7): []
rebuilt        : SymbolId(7): [ReferenceId(5)]
Symbol reference IDs mismatch for "W":
after transform: SymbolId(11): []
rebuilt        : SymbolId(16): [ReferenceId(20)]
Reference symbol mismatch for "X":
after transform: SymbolId(4) "X"
rebuilt        : SymbolId(1) "X"

tasks/coverage/typescript/tests/cases/compiler/declFileWithExtendsClauseThatHasItsContainerNameConflict.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "EventManager"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B2"
Missing SymbolId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "ContextMenu"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B2"
Missing ReferenceId: "_B2"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(6), SymbolId(11)]
rebuilt        : ScopeId(5): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(7), SymbolId(12)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(8), SymbolId(13)]
rebuilt        : ScopeId(7): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol reference IDs mismatch for "EventManager":
after transform: SymbolId(5): []
rebuilt        : SymbolId(5): [ReferenceId(3)]
Symbol reference IDs mismatch for "ContextMenu":
after transform: SymbolId(8): []
rebuilt        : SymbolId(11): [ReferenceId(14)]

tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause1.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C2"
Missing ReferenceId: "_C2"
Missing ReferenceId: "W"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(12)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(13)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(6), SymbolId(14)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "W", "_C2"]
rebuilt        : ScopeId(4): ["W", "_C2"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Symbol reference IDs mismatch for "W":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause2.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C2"
Missing ReferenceId: "_C2"
Missing ReferenceId: "W"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(15)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(16)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(6), SymbolId(17)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(7), SymbolId(18)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "W":
after transform: SymbolId(7): []
rebuilt        : SymbolId(8): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declFileWithInternalModuleNameConflictsInExtendsClause3.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "A"
Missing SymbolId: "_A2"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C2"
Missing ReferenceId: "_C2"
Missing ReferenceId: "W"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(15)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(16)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(6), SymbolId(17)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(7), SymbolId(18)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "W":
after transform: SymbolId(7): []
rebuilt        : SymbolId(8): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declInput-2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "E"
Missing ReferenceId: "_M"
Missing ReferenceId: "D"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(3): [ReferenceId(10)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(4): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(5): []
rebuilt        : SymbolId(5): [ReferenceId(12)]

tasks/coverage/typescript/tests/cases/compiler/declInput.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "bar":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "bar":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 26, end: 29 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(0): [Span { start: 26, end: 29 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declInput3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declInput4.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "E"
Missing ReferenceId: "_M"
Missing ReferenceId: "D"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(4): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(5): []
rebuilt        : SymbolId(5): [ReferenceId(8)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasExportStar.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasFromIndirectFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["FlatpickrFn", "fp"]
rebuilt        : ScopeId(0): ["fp"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitAliasInlineing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitArrayTypesFromGenericArrayUsage.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitArrowFunctionNoRenaming.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitBindingPatternWithReservedWord.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Partial", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitBindingPatternsFunctionExpr.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "value":
after transform: SymbolId(12): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(11): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitBundlePreservesHasNoDefaultLibDirective.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitBundleWithAmbientReferences.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Result"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitCastReusesTypeNode5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberNameConflict.ts
semantic error: Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberNameConflict2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Hello", "World"]
rebuilt        : ScopeId(1): ["Hello"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["Hello1", "World1"]
rebuilt        : ScopeId(2): ["Hello1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Hello":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "Hello1":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMemberWithComputedPropertyName.ts
semantic error: Unresolved references mismatch:
after transform: ["Symbol", "const"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassMixinLocalClassDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(10): [ReferenceId(11), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassPrivateConstructor.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitClassPrivateConstructor2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedNameCausesImportToBePainted.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "Key":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedNameConstEnumAlias.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["EnumExample", "TEST"]
rebuilt        : ScopeId(1): ["EnumExample"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "EnumExample":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyName1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitComputedPropertyNameEnum1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Enum"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringArrayPattern3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringObjectLiteralPattern2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringOptionalBindingParametersInOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDestructuringPrivacyError.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDistributiveConditionalWithInfer.ts
semantic error: Unresolved references mismatch:
after transform: ["FlatArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitDoesNotUseReexportedNamespaceAsLocal.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Promise", "add"]
rebuilt        : ["add"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitEnumReadonlyProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitEnumReferenceViaImportEquals.ts
semantic error: Missing SymbolId: "Translation"
Missing SymbolId: "_Translation"
Missing ReferenceId: "_Translation"
Missing ReferenceId: "Translation"
Missing ReferenceId: "Translation"
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Translation"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["_Translation"]
rebuilt        : ScopeId(1): ["TranslationKeyEnum", "_Translation"]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Symbol flags mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): Span { start: 129, end: 147 }
rebuilt        : SymbolId(2): Span { start: 198, end: 216 }
Symbol reference IDs mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol redeclarations mismatch for "TranslationKeyEnum":
after transform: SymbolId(1): [Span { start: 198, end: 216 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExactOptionalPropertyTypesNodeNotReused.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpandoWithGenericConstraint.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Point", "Rect"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(0): Span { start: 17, end: 22 }
rebuilt        : SymbolId(0): Span { start: 171, end: 176 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(6), ReferenceId(13), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 171, end: 176 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Rect":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Rect":
after transform: SymbolId(1): Span { start: 93, end: 97 }
rebuilt        : SymbolId(3): Span { start: 237, end: 241 }
Symbol reference IDs mismatch for "Rect":
after transform: SymbolId(1): [ReferenceId(9)]
rebuilt        : SymbolId(3): []
Symbol redeclarations mismatch for "Rect":
after transform: SymbolId(1): [Span { start: 237, end: 241 }]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAliasVisibiilityMarking.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAssignedNamespaceNoTripleSlashTypesReference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Component", "getComp"]
rebuilt        : ScopeId(0): ["getComp"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExportDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Q":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitExpressionInExtends5.ts
semantic error: Missing SymbolId: "Test"
Missing SymbolId: "_Test"
Missing ReferenceId: "_Test"
Missing ReferenceId: "SomeClass"
Missing ReferenceId: "_Test"
Missing ReferenceId: "Derived"
Missing ReferenceId: "_Test"
Missing ReferenceId: "getClass"
Missing ReferenceId: "Test"
Missing ReferenceId: "Test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "SomeClass":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): []
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "getClass":
after transform: SymbolId(4): [ReferenceId(1)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitFirstTypeArgumentGenericFunctionType.ts
semantic error: Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Y":
after transform: SymbolId(11): [ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(19)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitForDefaultExportClassExtendingExpression01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitForGlobalishSpecifierSymlink.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_whatever", "a", "getA"]
rebuilt        : ScopeId(0): ["a", "getA"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitForGlobalishSpecifierSymlink2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_whatever", "a", "getA"]
rebuilt        : ScopeId(0): ["a", "getA"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitForModuleImportingModuleAugmentationRetainsImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./parent", "ParentThing", "child1"]
rebuilt        : ScopeId(0): ["child1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitForTypesWhichNeedImportTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitFunctionDuplicateNamespace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitGlobalThisPreserved.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(37), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(49), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(37), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(46)]
Symbol reference IDs mismatch for "a4":
after transform: SymbolId(8): [ReferenceId(28)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "aObj":
after transform: SymbolId(10): [ReferenceId(31)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "b4":
after transform: SymbolId(27): [ReferenceId(52)]
rebuilt        : SymbolId(26): []
Symbol reference IDs mismatch for "bObj":
after transform: SymbolId(29): [ReferenceId(55)]
rebuilt        : SymbolId(28): []
Symbol reference IDs mismatch for "c4":
after transform: SymbolId(46): [ReferenceId(76)]
rebuilt        : SymbolId(43): []
Symbol reference IDs mismatch for "cObj":
after transform: SymbolId(48): [ReferenceId(79)]
rebuilt        : SymbolId(45): []
Symbol reference IDs mismatch for "d4":
after transform: SymbolId(68): [ReferenceId(101)]
rebuilt        : SymbolId(63): []
Unresolved references mismatch:
after transform: ["ReturnType", "globalThis"]
rebuilt        : ["globalThis"]
Unresolved reference IDs mismatch for "globalThis":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(25), ReferenceId(32), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(47), ReferenceId(49), ReferenceId(56), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(64), ReferenceId(65), ReferenceId(67), ReferenceId(68), ReferenceId(71), ReferenceId(73), ReferenceId(80), ReferenceId(81), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(90), ReferenceId(91), ReferenceId(94), ReferenceId(95), ReferenceId(102), ReferenceId(104), ReferenceId(105), ReferenceId(108), ReferenceId(110), ReferenceId(111), ReferenceId(113), ReferenceId(114), ReferenceId(116), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(122)]
rebuilt        : [ReferenceId(6), ReferenceId(13), ReferenceId(20), ReferenceId(27), ReferenceId(34), ReferenceId(41), ReferenceId(51), ReferenceId(59)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitHasTypesRefOnNamespaceUse.ts
semantic error: Unresolved references mismatch:
after transform: ["NS"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitHigherOrderRetainedGenerics.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SK", "Types", "URI", "dual", "zipRight", "zipWith"]
rebuilt        : ScopeId(0): ["SK", "zipRight", "zipWith"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(14): []
rebuilt        : ScopeId(2): ["F"]
Bindings mismatch:
after transform: ScopeId(17): []
rebuilt        : ScopeId(5): ["F"]
Symbol flags mismatch for "F":
after transform: SymbolId(55): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "F":
after transform: SymbolId(55): Span { start: 2588, end: 2589 }
rebuilt        : SymbolId(4): Span { start: 2610, end: 2631 }
Symbol reference IDs mismatch for "F":
after transform: SymbolId(55): [ReferenceId(159), ReferenceId(161), ReferenceId(170), ReferenceId(176), ReferenceId(185), ReferenceId(191), ReferenceId(200), ReferenceId(210), ReferenceId(216), ReferenceId(225), ReferenceId(233), ReferenceId(234)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(55): [Span { start: 2610, end: 2631 }]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "F":
after transform: SymbolId(80): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "F":
after transform: SymbolId(80): Span { start: 3332, end: 3333 }
rebuilt        : SymbolId(11): Span { start: 3354, end: 3375 }
Symbol reference IDs mismatch for "F":
after transform: SymbolId(80): [ReferenceId(242), ReferenceId(244), ReferenceId(250), ReferenceId(256), ReferenceId(265), ReferenceId(271), ReferenceId(277), ReferenceId(287), ReferenceId(293), ReferenceId(299), ReferenceId(308)]
rebuilt        : SymbolId(11): [ReferenceId(11)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(80): [Span { start: 3354, end: 3375 }]
rebuilt        : SymbolId(11): []
Reference symbol mismatch for "dual":
after transform: SymbolId(51) "dual"
rebuilt        : <None>
Reference symbol mismatch for "dual":
after transform: SymbolId(51) "dual"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "IArguments", "Iterable", "Parameters", "Types"]
rebuilt        : ["dual"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitImportInExportAssignmentModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitInferredTypeAlias9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitInlinedDistributiveConditional.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitKeywordDestructuring.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitLocalClassDeclarationMixin.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(13)]
rebuilt        : ScopeId(7): [ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitLocalClassHasRequiredDeclare.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | Ambient)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 25, end: 26 }
rebuilt        : SymbolId(2): Span { start: 78, end: 79 }
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 78, end: 79 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "Y":
after transform: SymbolId(3): SymbolFlags(Class | NameSpaceModule | Ambient)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol span mismatch for "Y":
after transform: SymbolId(3): Span { start: 128, end: 129 }
rebuilt        : SymbolId(3): Span { start: 149, end: 150 }
Symbol redeclarations mismatch for "Y":
after transform: SymbolId(3): [Span { start: 149, end: 150 }]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypeDistributivityPreservesConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Parameters", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitMappedTypePropertyFromNumericStringKey.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitMergedAliasWithConst.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Color"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol reference IDs mismatch for "Color":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "Color":
after transform: SymbolId(0): [Span { start: 100, end: 105 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitModuleWithScopeMarker.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["func"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitMonorepoBaseUrl.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["PluginConfig"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts.ts
semantic error: Missing SymbolId: "f"
Missing SymbolId: "_f"
Missing ReferenceId: "_f"
Missing ReferenceId: "c"
Missing ReferenceId: "f"
Missing ReferenceId: "f"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflicts3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNameConflictsWithAlias.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNamespaceMergedWithInterfaceNestedFunction.ts
semantic error: Missing SymbolId: "Bar"
Missing SymbolId: "_Bar"
Missing ReferenceId: "_Bar"
Missing ReferenceId: "biz"
Missing ReferenceId: "Bar"
Missing ReferenceId: "Bar"
Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "biz":
after transform: SymbolId(2): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "biz":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNestedAnonymousMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNestedGenerics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "p":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(6): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNoNonRequiredParens.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Test"]
rebuilt        : ScopeId(1): ["Test"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitNonExportedBindingPattern.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "renamed":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "c":
after transform: SymbolId(6): [ReferenceId(5)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitOfFuncspace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "ExpandoMerge":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "ExpandoMerge":
after transform: SymbolId(0): [Span { start: 71, end: 83 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitOptionalMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitOverloadedPrivateInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialNodeReuseTypeOf.ts
semantic error: Symbol reference IDs mismatch for "nImported":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "nNotImported":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "nPrivate":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialNodeReuseTypeReferences.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["N", "o"]
rebuilt        : ScopeId(0): ["o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["N"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPartialReuseComputedProperty.ts
semantic error: Symbol reference IDs mismatch for "n":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "poz":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "neg":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrefersPathKindBasedOnBundling.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrefersPathKindBasedOnBundling2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPreserveReferencedImports.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPreservesHasNoDefaultLibDirective.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPrivateNameCausesError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPromise.ts
semantic error: Symbol reference IDs mismatch for "bluebird":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(60)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(6), ReferenceId(23)]
Symbol reference IDs mismatch for "func":
after transform: SymbolId(15): [ReferenceId(28), ReferenceId(29)]
rebuilt        : SymbolId(17): [ReferenceId(15)]
Symbol reference IDs mismatch for "func":
after transform: SymbolId(32): [ReferenceId(57), ReferenceId(58)]
rebuilt        : SymbolId(34): [ReferenceId(32)]
Unresolved references mismatch:
after transform: ["Array", "arguments"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitPropertyNumericStringKey.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitQualifiedAliasTypeArgument.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Q", "T", "create", "fun", "fun2"]
rebuilt        : ScopeId(0): ["create", "fun", "fun2"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitRecursiveConditionalAliasPreserved.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Power", "power"]
rebuilt        : ScopeId(0): ["power"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitRedundantTripleSlashModuleAugmentation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitResolveTypesIfNotReusable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "u":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitRetainsJsdocyComments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitReusesLambdaParameterNodes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["CustomSelect1", "CustomSelect2", "Props"]
rebuilt        : ScopeId(0): ["CustomSelect1", "CustomSelect2"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitScopeConsistency.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitScopeConsistency3.ts
semantic error: Symbol reference IDs mismatch for "v":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitShadowingInferNotRenamed.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitSpreadStringlyKeyedEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["0-17", "18-22", "23-27", "28-34", "35-44", "45-59", "60-150", "AgeGroups"]
rebuilt        : ScopeId(1): ["AgeGroups"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AgeGroups":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/declarationEmitStringEnumUsedInNonlocalSpread.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["Test1", "Test2", "TestEnum"]
rebuilt        : ScopeId(1): ["TestEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TestEnum":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "TestEnum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitSymlinkPaths.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitToDeclarationDirWithCompositeOption.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitToDeclarationDirWithDeclarationOption.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTopLevelNodeFromCrossFile.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTripleSlashReferenceAmbientModule.ts
semantic error: Unresolved references mismatch:
after transform: ["Url"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeAliasWithTypeParameters6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameInOuterScope.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameReusedInOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(11)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(8)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeParameterNameShadowedInternally.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeofRest.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/declarationEmitTypeofThisInClass.ts
semantic error: Unresolved references mismatch:
after transform: ["require", "this"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitUnnessesaryTypeReferenceNotAdded.ts
semantic error: Missing SymbolId: "minimist"
Missing ReferenceId: "require"
Missing SymbolId: "process"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "minimist":
after transform: SymbolId(0) "minimist"
rebuilt        : SymbolId(0) "minimist"
Reference symbol mismatch for "process":
after transform: SymbolId(1) "process"
rebuilt        : SymbolId(1) "process"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingAlternativeContainingModules1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Promise", "console", "const", "fetch"]
rebuilt        : ["console", "fetch"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingAlternativeContainingModules2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Promise", "console", "const", "fetch"]
rebuilt        : ["console", "fetch"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitUsingTypeAlias2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "goodDeclaration", "shouldBeElided", "shouldReuseLocalName"]
rebuilt        : ScopeId(0): ["bar", "goodDeclaration"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithComposite.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithDefaultAsComputedName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["createExperiment"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "createExperiment":
after transform: SymbolId(2) "createExperiment"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["createExperiment"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithDefaultAsComputedName2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["createExperiment"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "createExperiment":
after transform: SymbolId(2) "createExperiment"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["createExperiment"]

tasks/coverage/typescript/tests/cases/compiler/declarationEmitWithInvalidPackageJsonTypings.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/declarationFilesGeneratingTypeReferences.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences1.ts
semantic error: Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences2.ts
semantic error: Unresolved references mismatch:
after transform: ["Error2", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences3.ts
semantic error: Unresolved references mismatch:
after transform: ["Error2", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/declarationFilesWithTypeReferences4.ts
semantic error: Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/declarationFunctionTypeNonlocalShouldNotBeAnError.ts
semantic error: Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/declarationImportTypeAliasInferredAndEmittable.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Wrap", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["Wrap", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/compiler/declarationMaps.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 230, end: 323 }
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 230, end: 323 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["m2", "module"]
rebuilt        : ["module"]

tasks/coverage/typescript/tests/cases/compiler/declarationMerging1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationMerging2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationQuotedMembers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["example", "mapped"]
rebuilt        : ScopeId(0): ["example"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "mapped":
after transform: SymbolId(0) "mapped"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["mapped"]

tasks/coverage/typescript/tests/cases/compiler/declarationsForFileShadowingGlobalNoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Node"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationsForIndirectTypeAliasReference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declarationsForInferredTypeFromOtherFile.ts
semantic error: Unresolved references mismatch:
after transform: ["Foo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declarationsWithRecursiveInternalTypesProduceUniqueTypeParams.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(16), ReferenceId(34), ReferenceId(51), ReferenceId(54)]
rebuilt        : [ReferenceId(0), ReferenceId(6), ReferenceId(11)]

tasks/coverage/typescript/tests/cases/compiler/declareDottedExtend.ts
semantic error: Missing SymbolId: "ab"
Bindings mismatch:
after transform: ScopeId(0): ["A", "D", "E", "ab"]
rebuilt        : ScopeId(0): ["D", "E", "ab"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "ab":
after transform: SymbolId(3) "ab"
rebuilt        : SymbolId(0) "ab"

tasks/coverage/typescript/tests/cases/compiler/declareDottedModuleName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M", "T"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declareExternalModuleWithExportAssignedFundule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["express"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "RegExp", "express"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/declareFileExportAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(0): Span { start: 230, end: 323 }
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 230, end: 323 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["m2", "module"]
rebuilt        : ["module"]

tasks/coverage/typescript/tests/cases/compiler/declareFileExportAssignmentWithVarFromVariableStatement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "m2":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "m2":
after transform: SymbolId(0): Span { start: 7, end: 9 }
rebuilt        : SymbolId(1): Span { start: 238, end: 331 }
Symbol redeclarations mismatch for "m2":
after transform: SymbolId(0): [Span { start: 238, end: 331 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["m2", "module"]
rebuilt        : ["module"]

tasks/coverage/typescript/tests/cases/compiler/declareModifierOnTypeAlias.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declaredExternalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["connect"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/declaredExternalModuleWithExportAssignment.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["connect"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataConditionalType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Unresolved references mismatch:
after transform: ["PropertyDecorator", "d", "require", "true"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataElidedImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "Test", "whatever"]
rebuilt        : ScopeId(0): ["Test", "whatever"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataElidedImportOnDeclare.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "Test", "whatever"]
rebuilt        : ScopeId(0): ["Test", "whatever"]
Symbol reference IDs mismatch for "whatever":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataForMethodWithNoReturnTypeAnnotation01.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "decorator"]
rebuilt        : ScopeId(0): ["MyClass"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataNoStrictNull.ts
semantic error: Symbol reference IDs mismatch for "dec":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataOnInferredType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_defineProperty", "console", "decorator"]
rebuilt        : ScopeId(0): ["A", "B", "_defineProperty", "decorator"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "decorator":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataPromise.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "_asyncToGenerator", "decorator"]
rebuilt        : ScopeId(0): ["A", "_asyncToGenerator"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["MethodDecorator", "Promise", "require"]
rebuilt        : ["decorator", "require"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataRestParameterWithImportedType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "SomeClass1", "_defineProperty", "annotation", "annotation1"]
rebuilt        : ScopeId(0): ["ClassA", "_defineProperty", "annotation", "annotation1"]
Unresolved references mismatch:
after transform: ["ClassDecorator", "MethodDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataTypeOnlyExport.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithConstructorType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_defineProperty", "console", "decorator"]
rebuilt        : ScopeId(0): ["A", "B", "_defineProperty", "decorator"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "decorator":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "_defineProperty", "db", "someDecorator"]
rebuilt        : ScopeId(0): ["MyClass", "_defineProperty", "someDecorator"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Database", "MyClass", "_defineProperty", "someDecorator"]
rebuilt        : ScopeId(0): ["MyClass", "_defineProperty", "someDecorator"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision3.ts
semantic error: Missing SymbolId: "db"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "_defineProperty", "db", "someDecorator"]
rebuilt        : ScopeId(0): ["MyClass", "_defineProperty", "someDecorator"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "_defineProperty", "database", "someDecorator"]
rebuilt        : ScopeId(0): ["MyClass", "_defineProperty", "someDecorator"]

tasks/coverage/typescript/tests/cases/compiler/decoratorMetadataWithImportDeclarationNameCollision8.ts
semantic error: Missing SymbolId: "database"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/decoratorReferenceOnOtherProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar", "Yoha", "foo"]
rebuilt        : ScopeId(0): ["Bar", "foo"]

tasks/coverage/typescript/tests/cases/compiler/decoratorReferences.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/decoratorWithNegativeLiteralTypeNoCrash.ts
semantic error: Symbol reference IDs mismatch for "decorator":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/decoratorWithUnderscoreMethod.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "console", "dec"]
rebuilt        : ScopeId(0): ["A", "dec"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Function", "PropertyDescriptor"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/deeplyNestedConditionalTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(102), ScopeId(103)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/deeplyNestedConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["ArrayLike", "Extract", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/deeplyNestedTemplateLiteralIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitDefaultImport.ts
semantic error: Symbol reference IDs mismatch for "Something":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitNamedCorrectly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/defaultDeclarationEmitShadowedNamedCorrectly.ts
semantic error: Missing SymbolId: "Something"
Missing SymbolId: "_Something"
Missing ReferenceId: "_Something"
Missing ReferenceId: "Something"
Missing ReferenceId: "Something"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(9), SymbolId(10), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7), SymbolId(8)]

tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 5, end: 8 }
rebuilt        : SymbolId(0): Span { start: 32, end: 35 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 32, end: 35 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 5, end: 8 }
rebuilt        : SymbolId(0): Span { start: 25, end: 28 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 25, end: 28 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 30, end: 33 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 30, end: 33 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/defaultNamedExportWithType4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 23, end: 26 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 23, end: 26 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/defaultParameterAddsUndefinedWithStrictNullChecks.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["allowsNull", "cond", "f", "foo1", "foo2", "foo3", "foo4", "g", "removeNothing", "removeUndefinedButNotFalse", "total"]
rebuilt        : ScopeId(0): ["allowsNull", "f", "foo1", "foo2", "foo3", "foo4", "g", "removeNothing", "removeUndefinedButNotFalse", "total"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
Reference symbol mismatch for "cond":
after transform: SymbolId(24) "cond"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["cond", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/deferredConditionalTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(39), ScopeId(42)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/deferredConditionalTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/deferredLookupTypeResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Extract", "f1"]
rebuilt        : ["f1"]

tasks/coverage/typescript/tests/cases/compiler/deferredLookupTypeResolution2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/deferredTypeReferenceWithinArrayWithinTuple.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/definiteAssignmentOfDestructuredVariable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/deleteExpressionMustBeOptional.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "f"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(5) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(5) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(6) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(6) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "f"]

tasks/coverage/typescript/tests/cases/compiler/deleteExpressionMustBeOptional_exactOptionalPropertyTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "f", "g"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(6) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(6) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(7) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(7) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["a", "b", "f", "g"]

tasks/coverage/typescript/tests/cases/compiler/dependencyViaImportAlias.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Missing SymbolId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "A":
after transform: SymbolId(1) "A"
rebuilt        : SymbolId(1) "A"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/compiler/dependentReturnType8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["array", "getObject", "record"]
rebuilt        : ScopeId(0): ["getObject"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "record":
after transform: SymbolId(0) "record"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(1) "array"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "undefined"]
rebuilt        : ["array", "record", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/destructureOfVariableSameAsShorthand.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "get", "require"]
rebuilt        : ["arguments", "get", "require"]

tasks/coverage/typescript/tests/cases/compiler/destructureOptionalParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["ParameterDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/destructuredMaappedTypeIsNotImplicitlyAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/destructuringInitializerContextualTypeFromContext.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/destructuringTypeGuardFlow.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/destructuringWithConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/destructuringWithGenericParameter.ts
semantic error: Symbol reference IDs mismatch for "GenericClass":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/discriminableUnionWithIntersectedMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/discriminantElementAccessCheck.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(10)]

tasks/coverage/typescript/tests/cases/compiler/discriminantNarrowingCouldBeCircular.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["getImplicitAriaRole", "kPresentationInheritanceParents", "myObj2", "o"]
rebuilt        : ScopeId(0): ["getImplicitAriaRole", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
Reference symbol mismatch for "kPresentationInheritanceParents":
after transform: SymbolId(6) "kPresentationInheritanceParents"
rebuilt        : <None>
Reference symbol mismatch for "myObj2":
after transform: SymbolId(15) "myObj2"
rebuilt        : <None>
Reference symbol mismatch for "myObj2":
after transform: SymbolId(15) "myObj2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "PropertyKey", "Record", "is", "isPlainObject2", "parentElementOrShadowHost"]
rebuilt        : ["Object", "is", "isPlainObject2", "kPresentationInheritanceParents", "myObj2", "parentElementOrShadowHost"]

tasks/coverage/typescript/tests/cases/compiler/discriminantPropertyCheck.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(57), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(32), ScopeId(34), ScopeId(37)]
Bindings mismatch:
after transform: ScopeId(21): ["Num", "Str", "Types"]
rebuilt        : ScopeId(17): ["Types"]
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(StrictMode)
rebuilt        : ScopeId(17): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(44): ["BarEnum", "bar1", "bar2"]
rebuilt        : ScopeId(28): ["BarEnum"]
Scope flags mismatch:
after transform: ScopeId(44): ScopeFlags(StrictMode)
rebuilt        : ScopeId(28): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Types":
after transform: SymbolId(20): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(16): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Types":
after transform: SymbolId(20): [ReferenceId(47), ReferenceId(48), ReferenceId(51), ReferenceId(53), ReferenceId(120)]
rebuilt        : SymbolId(16): [ReferenceId(37), ReferenceId(39), ReferenceId(41)]
Symbol flags mismatch for "BarEnum":
after transform: SymbolId(45): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(28): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "BarEnum":
after transform: SymbolId(45): [ReferenceId(79), ReferenceId(80), ReferenceId(86), ReferenceId(87), ReferenceId(126)]
rebuilt        : SymbolId(28): [ReferenceId(62), ReferenceId(66), ReferenceId(67)]
Unresolved references mismatch:
after transform: ["Partial", "Record", "console", "isType", "never", "true", "undefined"]
rebuilt        : ["console", "isType", "never", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/discriminantPropertyInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["f", "parseInt", "true", "undefined"]
rebuilt        : ["f", "parseInt", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/discriminantUsingEvaluatableTemplateExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/discriminantsAndNullOrUndefined.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["c", "never", "useA", "useB"]
rebuilt        : ScopeId(0): ["never", "useA", "useB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(9) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "undefined"]
rebuilt        : ["Error", "c", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/discriminantsAndPrimitives.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15)]
Bindings mismatch:
after transform: ScopeId(15): ["Disjunction", "EnumTypeNode", "Pattern"]
rebuilt        : ScopeId(13): ["EnumTypeNode"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Symbol flags mismatch for "EnumTypeNode":
after transform: SymbolId(10): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "EnumTypeNode":
after transform: SymbolId(10): [ReferenceId(26), ReferenceId(28), ReferenceId(36)]
rebuilt        : SymbolId(8): [ReferenceId(17)]

tasks/coverage/typescript/tests/cases/compiler/discriminantsAndTypePredicates.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/discriminateObjectTypesOnly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/discriminateWithDivergentAccessors1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["weirdoBox", "weirdoBox2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "weirdoBox":
after transform: SymbolId(2) "weirdoBox"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox":
after transform: SymbolId(2) "weirdoBox"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox2":
after transform: SymbolId(5) "weirdoBox2"
rebuilt        : <None>
Reference symbol mismatch for "weirdoBox2":
after transform: SymbolId(5) "weirdoBox2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["weirdoBox", "weirdoBox2"]

tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["box"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : <None>
Reference symbol mismatch for "box":
after transform: SymbolId(2) "box"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["box"]

tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(24), ScopeId(25)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "AsyncIterable", "IteratorResult", "Promise", "Symbol", "arguments", "require", "undefined"]
rebuilt        : ["Promise", "Symbol", "arguments", "require", "undefined"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(20), ReferenceId(34), ReferenceId(54)]
rebuilt        : [ReferenceId(39)]

tasks/coverage/typescript/tests/cases/compiler/discriminateWithOptionalProperty3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Error", "GraphQLError", "ReadonlyArray", "getVariableValues"]
rebuilt        : ["getVariableValues"]

tasks/coverage/typescript/tests/cases/compiler/discriminatedUnionJsxElement.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(4): ["Avatar", "ListItemVariant", "OneLine"]
rebuilt        : ScopeId(2): ["ListItemVariant"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "ListItemVariant":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "ListItemVariant":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(12), ReferenceId(24)]
rebuilt        : SymbolId(6): [ReferenceId(5), ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/discriminatedUnionWithIndexSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/discriminatingUnionWithUnionPropertyAgainstUndefinedWithoutStrictNullChecks.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["opts", "testMethod"]
rebuilt        : ScopeId(0): ["testMethod"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "opts":
after transform: SymbolId(2) "opts"
rebuilt        : <None>
Reference symbol mismatch for "opts":
after transform: SymbolId(2) "opts"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["opts"]

tasks/coverage/typescript/tests/cases/compiler/distributiveConditionalTypeNeverIntersection1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/divergentAccessors1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(2): []

tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(11), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/divergentAccessorsTypes3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["One", "Two", "_defineProperty", "u1"]
rebuilt        : ScopeId(0): ["One", "Two", "_defineProperty"]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(4): [ReferenceId(1)]
rebuilt        : SymbolId(5): []
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Reference symbol mismatch for "u1":
after transform: SymbolId(9) "u1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["require", "u1"]

tasks/coverage/typescript/tests/cases/compiler/divideAndConquerIntersections.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "EventHub":
after transform: SymbolId(30): [ReferenceId(80), ReferenceId(92), ReferenceId(99)]
rebuilt        : SymbolId(3): [ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Array", "Exclude", "Omit", "Partial", "Promise", "Record", "console"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/doNotEmitPinnedCommentOnNotEmittedNode.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "OData", "x"]
rebuilt        : ScopeId(0): ["C", "x"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/doNotEmitPinnedCommentOnNotEmittedNodets.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "OData"]
rebuilt        : ScopeId(0): ["C"]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/doNotEmitTripleSlashCommentsOnNotEmittedNode.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["OData"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/doNotInferUnrelatedTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["alt", "foo"]
rebuilt        : ScopeId(0): ["foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "alt":
after transform: SymbolId(3) "alt"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "dearray"]
rebuilt        : ["alt", "dearray"]

tasks/coverage/typescript/tests/cases/compiler/doNotWidenAtObjectLiteralPropertyAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/dottedModuleName2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/dottedNamesInSystem.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing SymbolId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "foo"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Symbol flags mismatch for "foo":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(3): []
rebuilt        : SymbolId(6): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/dottedSymbolResolution1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/doubleMixinConditionalTypeBaseClassWorks.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
Symbol reference IDs mismatch for "Mixin1":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(10)]
rebuilt        : SymbolId(1): [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreEnumEmit.ts
semantic error: Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "___call"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing SymbolId: "_Bar"
Missing ReferenceId: "_Bar"
Missing ReferenceId: "__call"
Missing ReferenceId: "Bar"
Missing ReferenceId: "Bar"
Bindings mismatch:
after transform: ScopeId(1): ["(Anonymous class)", "(Anonymous function)", "Foo", "__a", "__call"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(10)]
rebuilt        : ScopeId(5): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(12), ReferenceId(13)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 117, end: 120 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "___call":
after transform: SymbolId(5): []
rebuilt        : SymbolId(3): [ReferenceId(11)]
Symbol flags mismatch for "Bar":
after transform: SymbolId(6): SymbolFlags(FunctionScopedVariable | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(6): []
rebuilt        : SymbolId(4): [ReferenceId(16), ReferenceId(17)]
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(6): [Span { start: 235, end: 238 }]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "__call":
after transform: SymbolId(7): []
rebuilt        : SymbolId(6): [ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreMappedTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/doubleUnderscoreReactNamespace.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["__foot", "_jsxFileName", "thing"]
rebuilt        : ScopeId(0): ["_jsxFileName", "thing"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "__foot":
after transform: SymbolId(1) "__foot"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["React"]
rebuilt        : ["React", "__foot"]

tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst13.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst14.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst15.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/downlevelLetConst17.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21)]

tasks/coverage/typescript/tests/cases/compiler/dtsEmitTripleSlashAvoidUnnecessaryResolutionMode.ts
semantic error: Unresolved references mismatch:
after transform: ["NodeJS", "Promise", "arguments"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/compiler/duplicateAnonymousInners1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/duplicateAnonymousModuleClasses.ts
semantic error: Missing SymbolId: "F"
Missing SymbolId: "_F"
Missing ReferenceId: "F"
Missing ReferenceId: "F"
Missing SymbolId: "_F2"
Missing ReferenceId: "F"
Missing ReferenceId: "F"
Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing SymbolId: "_Foo2"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing SymbolId: "Gar"
Missing SymbolId: "_Gar"
Missing SymbolId: "Foo"
Missing SymbolId: "_Foo3"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing SymbolId: "_Foo4"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Gar"
Missing ReferenceId: "Gar"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(10)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(11)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(12)]
rebuilt        : ScopeId(5): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(5), SymbolId(13)]
rebuilt        : ScopeId(7): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(7), SymbolId(14)]
rebuilt        : ScopeId(9): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(8), SymbolId(15)]
rebuilt        : ScopeId(10): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(9), SymbolId(16)]
rebuilt        : ScopeId(12): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/duplicateConstructSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/duplicateConstructSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/duplicateConstructorOverloadSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/duplicateConstructorOverloadSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/duplicateIdentifierShouldNotShortCircuitBaseTypeBinding.ts
semantic error: Missing SymbolId: "Shapes"
Missing SymbolId: "_Shapes"
Missing ReferenceId: "_Shapes"
Missing ReferenceId: "Point"
Missing ReferenceId: "Shapes"
Missing ReferenceId: "Shapes"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/duplicateOverloadInTypeAugmentation1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_packageIdIncludesSubModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_referenceTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "a", "foo"]
rebuilt        : ScopeId(0): ["a", "foo"]

tasks/coverage/typescript/tests/cases/compiler/duplicatePackage_subModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "a", "o"]
rebuilt        : ScopeId(0): ["a", "o"]

tasks/coverage/typescript/tests/cases/compiler/duplicateVarAndImport.ts
semantic error: Missing SymbolId: "a"
Bindings mismatch:
after transform: ScopeId(0): ["M", "a"]
rebuilt        : ScopeId(0): ["a"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "a":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Import)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "a":
after transform: SymbolId(0): [Span { start: 73, end: 74 }]
rebuilt        : SymbolId(0): [Span { start: 0, end: 0 }]

tasks/coverage/typescript/tests/cases/compiler/duplicateVariablesByScope.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/dynamicNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "c0":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(9)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(6), ReferenceId(10)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "s0":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(7), ReferenceId(11)]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["Symbol", "T1", "T2"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/compiler/elidedEmbeddedStatementsReplacedWithSemicolon.ts
semantic error: 'with' statements are not allowed

tasks/coverage/typescript/tests/cases/compiler/elidingImportNames.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Missing SymbolId: "a2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "a2":
after transform: SymbolId(3) "a2"
rebuilt        : SymbolId(3) "a2"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/emitClassExpressionInDeclarationFile.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(14)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "FooItem":
after transform: SymbolId(5): [ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/emitDecoratorMetadata_object.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "MyClassDecorator", "MyMethodDecorator"]
rebuilt        : ScopeId(0): ["A"]
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ClassDecorator", "MethodDecorator"]
rebuilt        : ["MyClassDecorator", "MyMethodDecorator"]

tasks/coverage/typescript/tests/cases/compiler/emitDecoratorMetadata_restArgs.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "MyClassDecorator", "MyMethodDecorator"]
rebuilt        : ScopeId(0): ["A", "B"]
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyClassDecorator":
after transform: SymbolId(0) "MyClassDecorator"
rebuilt        : <None>
Reference symbol mismatch for "MyMethodDecorator":
after transform: SymbolId(1) "MyMethodDecorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ClassDecorator", "MethodDecorator"]
rebuilt        : ["MyClassDecorator", "MyMethodDecorator"]

tasks/coverage/typescript/tests/cases/compiler/emitHelpersWithLocalCollisions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "__decorate", "_objectSpread", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "_objectSpread", "o", "y"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/compiler/emitMemberAccessExpression.ts
semantic error: Missing SymbolId: "Microsoft"
Missing SymbolId: "_Microsoft"
Missing SymbolId: "PeopleAtWork"
Missing SymbolId: "_PeopleAtWork"
Missing SymbolId: "Model"
Missing SymbolId: "_Model"
Missing ReferenceId: "_Model"
Missing ReferenceId: "_Person"
Missing ReferenceId: "Model"
Missing ReferenceId: "Model"
Missing ReferenceId: "_PeopleAtWork"
Missing ReferenceId: "_PeopleAtWork"
Missing ReferenceId: "PeopleAtWork"
Missing ReferenceId: "PeopleAtWork"
Missing ReferenceId: "_Microsoft"
Missing ReferenceId: "_Microsoft"
Missing ReferenceId: "Microsoft"
Missing ReferenceId: "Microsoft"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(7)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Symbol reference IDs mismatch for "_Person":
after transform: SymbolId(3): []
rebuilt        : SymbolId(6): [ReferenceId(2)]
Reference symbol mismatch for "Model":
after transform: SymbolId(2) "Model"
rebuilt        : SymbolId(4) "Model"

tasks/coverage/typescript/tests/cases/compiler/emitTopOfFileTripleSlashCommentOnNotEmittedNodeIfRemoveCommentsIsFalse.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["OData"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/emptyAnonymousObjectNarrowing.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "foo", "nonNull", "obj", "union"]
rebuilt        : ScopeId(0): ["f1", "f2", "foo"]
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(8) "union"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Reference symbol mismatch for "nonNull":
after transform: SymbolId(0) "nonNull"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["nonNull", "obj", "undefined", "union"]

tasks/coverage/typescript/tests/cases/compiler/emptyArgumentsListComment.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/compiler/emptyDeclarationEmitIsModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "i"]
rebuilt        : ScopeId(0): ["Foo"]

tasks/coverage/typescript/tests/cases/compiler/emptyEnum.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/emptyIndexer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/emptyOptionalBindingPatternInDeclarationSignature.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["val1", "val2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/enumAssignmentCompat4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/enumCodeGenNewLines1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["b", "c", "d", "foo"]
rebuilt        : ScopeId(1): ["foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumDecl1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["mAmbient"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/enumDeclarationEmitInitializerHasImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Enum", "Value1", "Value2"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumFromExternalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Mode", "Open"]
rebuilt        : ScopeId(1): ["Mode"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Mode":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumIndexer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["MyEnumType", "bar", "foo"]
rebuilt        : ScopeId(1): ["MyEnumType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "MyEnumType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumInitializersWithExponents.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/enumKeysQuotedAsObjectPropertiesInDeclarationEmit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["LEFT_BUTTON", "MIDDLE_BUTTON", "MouseButton", "NO_BUTTON", "RIGHT_BUTTON", "XBUTTON1_BUTTON", "XBUTTON2_BUTTON"]
rebuilt        : ScopeId(1): ["MouseButton"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MouseButton":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumLiteralUnionNotWidened.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "one", "two"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["B", "bar", "foo"]
rebuilt        : ScopeId(2): ["B"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol flags mismatch for "B":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(8)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(8): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(14)]
rebuilt        : SymbolId(5): [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/enumLiteralsSubtypeReduction.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "E0", "E1", "E10", "E100", "E1000", "E1001", "E1002", "E1003", "E1004", "E1005", "E1006", "E1007", "E1008", "E1009", "E101", "E1010", "E1011", "E1012", "E1013", "E1014", "E1015", "E1016", "E1017", "E1018", "E1019", "E102", "E1020", "E1021", "E1022", "E1023", "E103", "E104", "E105", "E106", "E107", "E108", "E109", "E11", "E110", "E111", "E112", "E113", "E114", "E115", "E116", "E117", "E118", "E119", "E12", "E120", "E121", "E122", "E123", "E124", "E125", "E126", "E127", "E128", "E129", "E13", "E130", "E131", "E132", "E133", "E134", "E135", "E136", "E137", "E138", "E139", "E14", "E140", "E141", "E142", "E143", "E144", "E145", "E146", "E147", "E148", "E149", "E15", "E150", "E151", "E152", "E153", "E154", "E155", "E156", "E157", "E158", "E159", "E16", "E160", "E161", "E162", "E163", "E164", "E165", "E166", "E167", "E168", "E169", "E17", "E170", "E171", "E172", "E173", "E174", "E175", "E176", "E177", "E178", "E179", "E18", "E180", "E181", "E182", "E183", "E184", "E185", "E186", "E187", "E188", "E189", "E19", "E190", "E191", "E192", "E193", "E194", "E195", "E196", "E197", "E198", "E199", "E2", "E20", "E200", "E201", "E202", "E203", "E204", "E205", "E206", "E207", "E208", "E209", "E21", "E210", "E211", "E212", "E213", "E214", "E215", "E216", "E217", "E218", "E219", "E22", "E220", "E221", "E222", "E223", "E224", "E225", "E226", "E227", "E228", "E229", "E23", "E230", "E231", "E232", "E233", "E234", "E235", "E236", "E237", "E238", "E239", "E24", "E240", "E241", "E242", "E243", "E244", "E245", "E246", "E247", "E248", "E249", "E25", "E250", "E251", "E252", "E253", "E254", "E255", "E256", "E257", "E258", "E259", "E26", "E260", "E261", "E262", "E263", "E264", "E265", "E266", "E267", "E268", "E269", "E27", "E270", "E271", "E272", "E273", "E274", "E275", "E276", "E277", "E278", "E279", "E28", "E280", "E281", "E282", "E283", "E284", "E285", "E286", "E287", "E288", "E289", "E29", "E290", "E291", "E292", "E293", "E294", "E295", "E296", "E297", "E298", "E299", "E3", "E30", "E300", "E301", "E302", "E303", "E304", "E305", "E306", "E307", "E308", "E309", "E31", "E310", "E311", "E312", "E313", "E314", "E315", "E316", "E317", "E318", "E319", "E32", "E320", "E321", "E322", "E323", "E324", "E325", "E326", "E327", "E328", "E329", "E33", "E330", "E331", "E332", "E333", "E334", "E335", "E336", "E337", "E338", "E339", "E34", "E340", "E341", "E342", "E343", "E344", "E345", "E346", "E347", "E348", "E349", "E35", "E350", "E351", "E352", "E353", "E354", "E355", "E356", "E357", "E358", "E359", "E36", "E360", "E361", "E362", "E363", "E364", "E365", "E366", "E367", "E368", "E369", "E37", "E370", "E371", "E372", "E373", "E374", "E375", "E376", "E377", "E378", "E379", "E38", "E380", "E381", "E382", "E383", "E384", "E385", "E386", "E387", "E388", "E389", "E39", "E390", "E391", "E392", "E393", "E394", "E395", "E396", "E397", "E398", "E399", "E4", "E40", "E400", "E401", "E402", "E403", "E404", "E405", "E406", "E407", "E408", "E409", "E41", "E410", "E411", "E412", "E413", "E414", "E415", "E416", "E417", "E418", "E419", "E42", "E420", "E421", "E422", "E423", "E424", "E425", "E426", "E427", "E428", "E429", "E43", "E430", "E431", "E432", "E433", "E434", "E435", "E436", "E437", "E438", "E439", "E44", "E440", "E441", "E442", "E443", "E444", "E445", "E446", "E447", "E448", "E449", "E45", "E450", "E451", "E452", "E453", "E454", "E455", "E456", "E457", "E458", "E459", "E46", "E460", "E461", "E462", "E463", "E464", "E465", "E466", "E467", "E468", "E469", "E47", "E470", "E471", "E472", "E473", "E474", "E475", "E476", "E477", "E478", "E479", "E48", "E480", "E481", "E482", "E483", "E484", "E485", "E486", "E487", "E488", "E489", "E49", "E490", "E491", "E492", "E493", "E494", "E495", "E496", "E497", "E498", "E499", "E5", "E50", "E500", "E501", "E502", "E503", "E504", "E505", "E506", "E507", "E508", "E509", "E51", "E510", "E511", "E512", "E513", "E514", "E515", "E516", "E517", "E518", "E519", "E52", "E520", "E521", "E522", "E523", "E524", "E525", "E526", "E527", "E528", "E529", "E53", "E530", "E531", "E532", "E533", "E534", "E535", "E536", "E537", "E538", "E539", "E54", "E540", "E541", "E542", "E543", "E544", "E545", "E546", "E547", "E548", "E549", "E55", "E550", "E551", "E552", "E553", "E554", "E555", "E556", "E557", "E558", "E559", "E56", "E560", "E561", "E562", "E563", "E564", "E565", "E566", "E567", "E568", "E569", "E57", "E570", "E571", "E572", "E573", "E574", "E575", "E576", "E577", "E578", "E579", "E58", "E580", "E581", "E582", "E583", "E584", "E585", "E586", "E587", "E588", "E589", "E59", "E590", "E591", "E592", "E593", "E594", "E595", "E596", "E597", "E598", "E599", "E6", "E60", "E600", "E601", "E602", "E603", "E604", "E605", "E606", "E607", "E608", "E609", "E61", "E610", "E611", "E612", "E613", "E614", "E615", "E616", "E617", "E618", "E619", "E62", "E620", "E621", "E622", "E623", "E624", "E625", "E626", "E627", "E628", "E629", "E63", "E630", "E631", "E632", "E633", "E634", "E635", "E636", "E637", "E638", "E639", "E64", "E640", "E641", "E642", "E643", "E644", "E645", "E646", "E647", "E648", "E649", "E65", "E650", "E651", "E652", "E653", "E654", "E655", "E656", "E657", "E658", "E659", "E66", "E660", "E661", "E662", "E663", "E664", "E665", "E666", "E667", "E668", "E669", "E67", "E670", "E671", "E672", "E673", "E674", "E675", "E676", "E677", "E678", "E679", "E68", "E680", "E681", "E682", "E683", "E684", "E685", "E686", "E687", "E688", "E689", "E69", "E690", "E691", "E692", "E693", "E694", "E695", "E696", "E697", "E698", "E699", "E7", "E70", "E700", "E701", "E702", "E703", "E704", "E705", "E706", "E707", "E708", "E709", "E71", "E710", "E711", "E712", "E713", "E714", "E715", "E716", "E717", "E718", "E719", "E72", "E720", "E721", "E722", "E723", "E724", "E725", "E726", "E727", "E728", "E729", "E73", "E730", "E731", "E732", "E733", "E734", "E735", "E736", "E737", "E738", "E739", "E74", "E740", "E741", "E742", "E743", "E744", "E745", "E746", "E747", "E748", "E749", "E75", "E750", "E751", "E752", "E753", "E754", "E755", "E756", "E757", "E758", "E759", "E76", "E760", "E761", "E762", "E763", "E764", "E765", "E766", "E767", "E768", "E769", "E77", "E770", "E771", "E772", "E773", "E774", "E775", "E776", "E777", "E778", "E779", "E78", "E780", "E781", "E782", "E783", "E784", "E785", "E786", "E787", "E788", "E789", "E79", "E790", "E791", "E792", "E793", "E794", "E795", "E796", "E797", "E798", "E799", "E8", "E80", "E800", "E801", "E802", "E803", "E804", "E805", "E806", "E807", "E808", "E809", "E81", "E810", "E811", "E812", "E813", "E814", "E815", "E816", "E817", "E818", "E819", "E82", "E820", "E821", "E822", "E823", "E824", "E825", "E826", "E827", "E828", "E829", "E83", "E830", "E831", "E832", "E833", "E834", "E835", "E836", "E837", "E838", "E839", "E84", "E840", "E841", "E842", "E843", "E844", "E845", "E846", "E847", "E848", "E849", "E85", "E850", "E851", "E852", "E853", "E854", "E855", "E856", "E857", "E858", "E859", "E86", "E860", "E861", "E862", "E863", "E864", "E865", "E866", "E867", "E868", "E869", "E87", "E870", "E871", "E872", "E873", "E874", "E875", "E876", "E877", "E878", "E879", "E88", "E880", "E881", "E882", "E883", "E884", "E885", "E886", "E887", "E888", "E889", "E89", "E890", "E891", "E892", "E893", "E894", "E895", "E896", "E897", "E898", "E899", "E9", "E90", "E900", "E901", "E902", "E903", "E904", "E905", "E906", "E907", "E908", "E909", "E91", "E910", "E911", "E912", "E913", "E914", "E915", "E916", "E917", "E918", "E919", "E92", "E920", "E921", "E922", "E923", "E924", "E925", "E926", "E927", "E928", "E929", "E93", "E930", "E931", "E932", "E933", "E934", "E935", "E936", "E937", "E938", "E939", "E94", "E940", "E941", "E942", "E943", "E944", "E945", "E946", "E947", "E948", "E949", "E95", "E950", "E951", "E952", "E953", "E954", "E955", "E956", "E957", "E958", "E959", "E96", "E960", "E961", "E962", "E963", "E964", "E965", "E966", "E967", "E968", "E969", "E97", "E970", "E971", "E972", "E973", "E974", "E975", "E976", "E977", "E978", "E979", "E98", "E980", "E981", "E982", "E983", "E984", "E985", "E986", "E987", "E988", "E989", "E99", "E990", "E991", "E992", "E993", "E994", "E995", "E996", "E997", "E998", "E999"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumMapBackIntoItself.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Large", "Medium", "Small", "TShirtSize"]
rebuilt        : ScopeId(1): ["TShirtSize"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TShirtSize":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumMemberReduction.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "MyEnum"]
rebuilt        : ScopeId(1): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "MyStringEnum"]
rebuilt        : ScopeId(2): ["MyStringEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(3): ["A", "B", "C", "MyStringEnumWithEmpty"]
rebuilt        : ScopeId(3): ["MyStringEnumWithEmpty"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyEnum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(21), ReferenceId(23), ReferenceId(27), ReferenceId(29)]
Symbol flags mismatch for "MyStringEnum":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyStringEnum":
after transform: SymbolId(4): [ReferenceId(12), ReferenceId(14), ReferenceId(30)]
rebuilt        : SymbolId(2): [ReferenceId(12), ReferenceId(31)]
Symbol flags mismatch for "MyStringEnumWithEmpty":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "MyStringEnumWithEmpty":
after transform: SymbolId(8): [ReferenceId(15), ReferenceId(17), ReferenceId(35)]
rebuilt        : SymbolId(4): [ReferenceId(17), ReferenceId(33)]

tasks/coverage/typescript/tests/cases/compiler/enumNegativeLiteral1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumNumbering1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E", "Test"]
rebuilt        : ScopeId(1): ["Test"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Test":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumOperations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Enum", "None"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/enumWithInfinityProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "Infinity"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithNaNProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "NaN"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithNegativeInfinityProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["-Infinity", "A"]
rebuilt        : ScopeId(1): ["A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithQuotedElementName1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "fo\"o"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithQuotedElementName2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "fo'o"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithUnicodeEscape1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "gold ✰"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumWithoutInitializerAfterComputedMember.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/enumsWithMultipleDeclarations3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "E":
after transform: SymbolId(0): Span { start: 7, end: 8 }
rebuilt        : SymbolId(0): Span { start: 19, end: 20 }
Symbol redeclarations mismatch for "E":
after transform: SymbolId(0): [Span { start: 19, end: 20 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/errorConstructorSubtypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Function", "Object", "RangeError"]
rebuilt        : ["Error", "RangeError", "x"]

tasks/coverage/typescript/tests/cases/compiler/es2017basicAsync.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/es2018ObjectAssign.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["p", "test"]
rebuilt        : ScopeId(0): ["test"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "Promise"]
rebuilt        : ["Object", "p"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunction.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_empty", "_singleAwait", "empty", "singleAwait", "x"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_empty", "_singleAwait", "empty", "singleAwait"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionArrayLiterals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_arrayLiteral", "_arrayLiteral2", "_arrayLiteral3", "_arrayLiteral4", "_arrayLiteral5", "_arrayLiteral6", "_arrayLiteral7", "_arrayLiteral8", "_asyncToGenerator", "a", "arrayLiteral0", "arrayLiteral1", "arrayLiteral2", "arrayLiteral3", "arrayLiteral4", "arrayLiteral5", "arrayLiteral6", "arrayLiteral7", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_arrayLiteral", "_arrayLiteral2", "_arrayLiteral3", "_arrayLiteral4", "_arrayLiteral5", "_arrayLiteral6", "_arrayLiteral7", "_arrayLiteral8", "_asyncToGenerator", "arrayLiteral0", "arrayLiteral1", "arrayLiteral2", "arrayLiteral3", "arrayLiteral4", "arrayLiteral5", "arrayLiteral6", "arrayLiteral7"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionBinaryExpressions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_binaryAssignment", "_binaryAssignment10", "_binaryAssignment11", "_binaryAssignment12", "_binaryAssignment13", "_binaryAssignment14", "_binaryAssignment2", "_binaryAssignment3", "_binaryAssignment4", "_binaryAssignment5", "_binaryAssignment6", "_binaryAssignment7", "_binaryAssignment8", "_binaryAssignment9", "_binaryComma", "_binaryComma2", "_binaryCompoundAssignment", "_binaryCompoundAssignment2", "_binaryCompoundAssignment3", "_binaryCompoundAssignment4", "_binaryCompoundAssignment5", "_binaryCompoundAssignment6", "_binaryCompoundAssignment7", "_binaryCompoundAssignment8", "_binaryCompoundAssignment9", "_binaryExponentiation", "_binaryLogicalAnd", "_binaryLogicalAnd2", "_binaryPlus", "_binaryPlus2", "a", "b", "binaryAssignment0", "binaryAssignment1", "binaryAssignment10", "binaryAssignment11", "binaryAssignment12", "binaryAssignment13", "binaryAssignment2", "binaryAssignment3", "binaryAssignment4", "binaryAssignment5", "binaryAssignment6", "binaryAssignment7", "binaryAssignment8", "binaryAssignment9", "binaryComma0", "binaryComma1", "binaryCompoundAssignment0", "binaryCompoundAssignment1", "binaryCompoundAssignment2", "binaryCompoundAssignment3", "binaryCompoundAssignment4", "binaryCompoundAssignment5", "binaryCompoundAssignment6", "binaryCompoundAssignment7", "binaryCompoundAssignment8", "binaryExponentiation", "binaryLogicalAnd0", "binaryLogicalAnd1", "binaryPlus0", "binaryPlus1", "c", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_binaryAssignment", "_binaryAssignment10", "_binaryAssignment11", "_binaryAssignment12", "_binaryAssignment13", "_binaryAssignment14", "_binaryAssignment2", "_binaryAssignment3", "_binaryAssignment4", "_binaryAssignment5", "_binaryAssignment6", "_binaryAssignment7", "_binaryAssignment8", "_binaryAssignment9", "_binaryComma", "_binaryComma2", "_binaryCompoundAssignment", "_binaryCompoundAssignment2", "_binaryCompoundAssignment3", "_binaryCompoundAssignment4", "_binaryCompoundAssignment5", "_binaryCompoundAssignment6", "_binaryCompoundAssignment7", "_binaryCompoundAssignment8", "_binaryCompoundAssignment9", "_binaryExponentiation", "_binaryLogicalAnd", "_binaryLogicalAnd2", "_binaryPlus", "_binaryPlus2", "binaryAssignment0", "binaryAssignment1", "binaryAssignment10", "binaryAssignment11", "binaryAssignment12", "binaryAssignment13", "binaryAssignment2", "binaryAssignment3", "binaryAssignment4", "binaryAssignment5", "binaryAssignment6", "binaryAssignment7", "binaryAssignment8", "binaryAssignment9", "binaryComma0", "binaryComma1", "binaryCompoundAssignment0", "binaryCompoundAssignment1", "binaryCompoundAssignment2", "binaryCompoundAssignment3", "binaryCompoundAssignment4", "binaryCompoundAssignment5", "binaryCompoundAssignment6", "binaryCompoundAssignment7", "binaryCompoundAssignment8", "binaryExponentiation", "binaryLogicalAnd0", "binaryLogicalAnd1", "binaryPlus0", "binaryPlus1"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Promise", "arguments", "require"]
rebuilt        : ["Math", "a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionCallExpressions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_callExpression", "_callExpression10", "_callExpression11", "_callExpression12", "_callExpression13", "_callExpression14", "_callExpression15", "_callExpression16", "_callExpression17", "_callExpression18", "_callExpression19", "_callExpression2", "_callExpression20", "_callExpression21", "_callExpression3", "_callExpression4", "_callExpression5", "_callExpression6", "_callExpression7", "_callExpression8", "_callExpression9", "a", "b", "c", "callExpression0", "callExpression1", "callExpression10", "callExpression11", "callExpression12", "callExpression13", "callExpression14", "callExpression15", "callExpression16", "callExpression17", "callExpression18", "callExpression19", "callExpression2", "callExpression20", "callExpression3", "callExpression4", "callExpression5", "callExpression6", "callExpression7", "callExpression8", "callExpression9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_callExpression", "_callExpression10", "_callExpression11", "_callExpression12", "_callExpression13", "_callExpression14", "_callExpression15", "_callExpression16", "_callExpression17", "_callExpression18", "_callExpression19", "_callExpression2", "_callExpression20", "_callExpression21", "_callExpression3", "_callExpression4", "_callExpression5", "_callExpression6", "_callExpression7", "_callExpression8", "_callExpression9", "callExpression0", "callExpression1", "callExpression10", "callExpression11", "callExpression12", "callExpression13", "callExpression14", "callExpression15", "callExpression16", "callExpression17", "callExpression18", "callExpression19", "callExpression2", "callExpression20", "callExpression3", "callExpression4", "callExpression5", "callExpression6", "callExpression7", "callExpression8", "callExpression9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionConditionals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_conditional", "_conditional2", "_conditional3", "a", "b", "c", "conditional0", "conditional1", "conditional2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_conditional", "_conditional2", "_conditional3", "conditional0", "conditional1", "conditional2"]
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionDoStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_doStatement", "_doStatement10", "_doStatement11", "_doStatement12", "_doStatement13", "_doStatement14", "_doStatement15", "_doStatement16", "_doStatement17", "_doStatement18", "_doStatement19", "_doStatement2", "_doStatement3", "_doStatement4", "_doStatement5", "_doStatement6", "_doStatement7", "_doStatement8", "_doStatement9", "a", "b", "c", "doStatement0", "doStatement1", "doStatement10", "doStatement11", "doStatement12", "doStatement13", "doStatement14", "doStatement15", "doStatement16", "doStatement17", "doStatement18", "doStatement2", "doStatement3", "doStatement4", "doStatement5", "doStatement6", "doStatement7", "doStatement8", "doStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_doStatement", "_doStatement10", "_doStatement11", "_doStatement12", "_doStatement13", "_doStatement14", "_doStatement15", "_doStatement16", "_doStatement17", "_doStatement18", "_doStatement19", "_doStatement2", "_doStatement3", "_doStatement4", "_doStatement5", "_doStatement6", "_doStatement7", "_doStatement8", "_doStatement9", "doStatement0", "doStatement1", "doStatement10", "doStatement11", "doStatement12", "doStatement13", "doStatement14", "doStatement15", "doStatement16", "doStatement17", "doStatement18", "doStatement2", "doStatement3", "doStatement4", "doStatement5", "doStatement6", "doStatement7", "doStatement8", "doStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionElementAccess.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_elementAccess", "_elementAccess2", "_elementAccess3", "a", "b", "c", "elementAccess0", "elementAccess1", "elementAccess2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_elementAccess", "_elementAccess2", "_elementAccess3", "elementAccess0", "elementAccess1", "elementAccess2"]
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForInStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forInStatement", "_forInStatement2", "_forInStatement3", "_forInStatement4", "_forInStatement5", "_forInStatement6", "_forInStatement7", "_forInStatement8", "_forInStatement9", "a", "b", "c", "forInStatement0", "forInStatement1", "forInStatement2", "forInStatement3", "forInStatement4", "forInStatement5", "forInStatement6", "forInStatement7", "forInStatement8", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forInStatement", "_forInStatement2", "_forInStatement3", "_forInStatement4", "_forInStatement5", "_forInStatement6", "_forInStatement7", "_forInStatement8", "_forInStatement9", "forInStatement0", "forInStatement1", "forInStatement2", "forInStatement3", "forInStatement4", "forInStatement5", "forInStatement6", "forInStatement7", "forInStatement8"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForOfStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forOfStatement", "_forOfStatement10", "_forOfStatement11", "_forOfStatement12", "_forOfStatement13", "_forOfStatement14", "_forOfStatement15", "_forOfStatement16", "_forOfStatement17", "_forOfStatement18", "_forOfStatement19", "_forOfStatement2", "_forOfStatement3", "_forOfStatement4", "_forOfStatement5", "_forOfStatement6", "_forOfStatement7", "_forOfStatement8", "_forOfStatement9", "a", "b", "c", "forOfStatement0", "forOfStatement1", "forOfStatement10", "forOfStatement11", "forOfStatement12", "forOfStatement13", "forOfStatement14", "forOfStatement15", "forOfStatement16", "forOfStatement17", "forOfStatement18", "forOfStatement2", "forOfStatement3", "forOfStatement4", "forOfStatement5", "forOfStatement6", "forOfStatement7", "forOfStatement8", "forOfStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forOfStatement", "_forOfStatement10", "_forOfStatement11", "_forOfStatement12", "_forOfStatement13", "_forOfStatement14", "_forOfStatement15", "_forOfStatement16", "_forOfStatement17", "_forOfStatement18", "_forOfStatement19", "_forOfStatement2", "_forOfStatement3", "_forOfStatement4", "_forOfStatement5", "_forOfStatement6", "_forOfStatement7", "_forOfStatement8", "_forOfStatement9", "forOfStatement0", "forOfStatement1", "forOfStatement10", "forOfStatement11", "forOfStatement12", "forOfStatement13", "forOfStatement14", "forOfStatement15", "forOfStatement16", "forOfStatement17", "forOfStatement18", "forOfStatement2", "forOfStatement3", "forOfStatement4", "forOfStatement5", "forOfStatement6", "forOfStatement7", "forOfStatement8", "forOfStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionForStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_forStatement", "_forStatement2", "_forStatement3", "_forStatement4", "_forStatement5", "_forStatement6", "_forStatement7", "a", "b", "c", "forStatement0", "forStatement1", "forStatement2", "forStatement3", "forStatement4", "forStatement5", "forStatement6", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_forStatement", "_forStatement2", "_forStatement3", "_forStatement4", "_forStatement5", "_forStatement6", "_forStatement7", "forStatement0", "forStatement1", "forStatement2", "forStatement3", "forStatement4", "forStatement5", "forStatement6"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionHoisting.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_hoisting", "_hoistingWithAwait", "hoisting", "hoistingWithAwait", "y"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_hoisting", "_hoistingWithAwait", "hoisting", "hoistingWithAwait"]
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "y"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionIfStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_ifStatement", "_ifStatement2", "_ifStatement3", "a", "b", "c", "ifStatement1", "ifStatement2", "ifStatement3", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_ifStatement", "_ifStatement2", "_ifStatement3", "ifStatement1", "ifStatement2", "ifStatement3"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionNestedLoops.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_nestedLoops", "a", "b", "c", "nestedLoops", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_nestedLoops", "nestedLoops"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionNewExpressions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_newExpression", "_newExpression10", "_newExpression11", "_newExpression12", "_newExpression13", "_newExpression14", "_newExpression15", "_newExpression16", "_newExpression17", "_newExpression18", "_newExpression19", "_newExpression2", "_newExpression20", "_newExpression21", "_newExpression3", "_newExpression4", "_newExpression5", "_newExpression6", "_newExpression7", "_newExpression8", "_newExpression9", "a", "b", "c", "newExpression0", "newExpression1", "newExpression10", "newExpression11", "newExpression12", "newExpression13", "newExpression14", "newExpression15", "newExpression16", "newExpression17", "newExpression18", "newExpression19", "newExpression2", "newExpression20", "newExpression3", "newExpression4", "newExpression5", "newExpression6", "newExpression7", "newExpression8", "newExpression9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_newExpression", "_newExpression10", "_newExpression11", "_newExpression12", "_newExpression13", "_newExpression14", "_newExpression15", "_newExpression16", "_newExpression17", "_newExpression18", "_newExpression19", "_newExpression2", "_newExpression20", "_newExpression21", "_newExpression3", "_newExpression4", "_newExpression5", "_newExpression6", "_newExpression7", "_newExpression8", "_newExpression9", "newExpression0", "newExpression1", "newExpression10", "newExpression11", "newExpression12", "newExpression13", "newExpression14", "newExpression15", "newExpression16", "newExpression17", "newExpression18", "newExpression19", "newExpression2", "newExpression20", "newExpression3", "newExpression4", "newExpression5", "newExpression6", "newExpression7", "newExpression8", "newExpression9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionObjectLiterals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_objectLiteral", "_objectLiteral2", "_objectLiteral3", "_objectLiteral4", "_objectLiteral5", "_objectLiteral6", "_objectLiteral7", "a", "b", "c", "objectLiteral0", "objectLiteral1", "objectLiteral2", "objectLiteral3", "objectLiteral4", "objectLiteral5", "objectLiteral6", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_objectLiteral", "_objectLiteral2", "_objectLiteral3", "_objectLiteral4", "_objectLiteral5", "_objectLiteral6", "_objectLiteral7", "objectLiteral0", "objectLiteral1", "objectLiteral2", "objectLiteral3", "objectLiteral4", "objectLiteral5", "objectLiteral6"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "b", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionPropertyAccess.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_callExpression", "_propertyAccess", "_propertyAccess2", "a", "b", "c", "callExpression0", "propertyAccess0", "propertyAccess1", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_callExpression", "_propertyAccess", "_propertyAccess2", "callExpression0", "propertyAccess0", "propertyAccess1"]
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionReturnStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_returnStatement", "_returnStatement2", "_returnStatement3", "_returnStatement4", "_returnStatement5", "_returnStatement6", "a", "b", "c", "returnStatement0", "returnStatement1", "returnStatement2", "returnStatement3", "returnStatement4", "returnStatement5", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_returnStatement", "_returnStatement2", "_returnStatement3", "_returnStatement4", "_returnStatement5", "_returnStatement6", "returnStatement0", "returnStatement1", "returnStatement2", "returnStatement3", "returnStatement4", "returnStatement5"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require", "x"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionSwitchStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_switchStatement", "_switchStatement2", "_switchStatement3", "_switchStatement4", "_switchStatement5", "_switchStatement6", "_switchStatement7", "_switchStatement8", "_switchStatement9", "a", "b", "c", "switchStatement0", "switchStatement1", "switchStatement2", "switchStatement3", "switchStatement4", "switchStatement5", "switchStatement6", "switchStatement7", "switchStatement8", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_switchStatement", "_switchStatement2", "_switchStatement3", "_switchStatement4", "_switchStatement5", "_switchStatement6", "_switchStatement7", "_switchStatement8", "_switchStatement9", "switchStatement0", "switchStatement1", "switchStatement2", "switchStatement3", "switchStatement4", "switchStatement5", "switchStatement6", "switchStatement7", "switchStatement8"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(2) "z"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "require", "x", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionTryStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_tryCatch", "_tryCatch2", "_tryCatch3", "_tryCatch4", "_tryCatchFinally", "_tryCatchFinally2", "_tryCatchFinally3", "_tryCatchFinally4", "_tryFinally", "_tryFinally2", "_tryFinally3", "a", "b", "c", "tryCatch0", "tryCatch1", "tryCatch2", "tryCatch3", "tryCatchFinally0", "tryCatchFinally1", "tryCatchFinally2", "tryCatchFinally3", "tryFinally0", "tryFinally1", "tryFinally2", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_tryCatch", "_tryCatch2", "_tryCatch3", "_tryCatch4", "_tryCatchFinally", "_tryCatchFinally2", "_tryCatchFinally3", "_tryCatchFinally4", "_tryFinally", "_tryFinally2", "_tryFinally3", "tryCatch0", "tryCatch1", "tryCatch2", "tryCatch3", "tryCatchFinally0", "tryCatchFinally1", "tryCatchFinally2", "tryCatchFinally3", "tryFinally0", "tryFinally1", "tryFinally2"]
Unresolved references mismatch:
after transform: ["Function", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/es5-asyncFunctionWhileStatements.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_whileStatement", "_whileStatement10", "_whileStatement11", "_whileStatement12", "_whileStatement13", "_whileStatement14", "_whileStatement15", "_whileStatement16", "_whileStatement17", "_whileStatement18", "_whileStatement19", "_whileStatement2", "_whileStatement3", "_whileStatement4", "_whileStatement5", "_whileStatement6", "_whileStatement7", "_whileStatement8", "_whileStatement9", "a", "b", "c", "whileStatement0", "whileStatement1", "whileStatement10", "whileStatement11", "whileStatement12", "whileStatement13", "whileStatement14", "whileStatement15", "whileStatement16", "whileStatement17", "whileStatement18", "whileStatement2", "whileStatement3", "whileStatement4", "whileStatement5", "whileStatement6", "whileStatement7", "whileStatement8", "whileStatement9", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_whileStatement", "_whileStatement10", "_whileStatement11", "_whileStatement12", "_whileStatement13", "_whileStatement14", "_whileStatement15", "_whileStatement16", "_whileStatement17", "_whileStatement18", "_whileStatement19", "_whileStatement2", "_whileStatement3", "_whileStatement4", "_whileStatement5", "_whileStatement6", "_whileStatement7", "_whileStatement8", "_whileStatement9", "whileStatement0", "whileStatement1", "whileStatement10", "whileStatement11", "whileStatement12", "whileStatement13", "whileStatement14", "whileStatement15", "whileStatement16", "whileStatement17", "whileStatement18", "whileStatement2", "whileStatement3", "whileStatement4", "whileStatement5", "whileStatement6", "whileStatement7", "whileStatement8", "whileStatement9"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments", "require"]
rebuilt        : ["arguments", "require", "x", "y"]

tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultClassDeclaration4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultFunctionDeclaration3.ts
semantic error: Symbol reference IDs mismatch for "func":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/es5ExportDefaultFunctionDeclaration4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["func"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/es5ExportEqualsDts.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 82, end: 83 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(10), ScopeId(16), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(34), ScopeId(38), ScopeId(40)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(23), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(35), ScopeId(37)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(10): [ScopeId(11), ScopeId(12)]

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest3.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Point"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1T5", "C2T5", "_defineProperty", "bigClass"]
rebuilt        : ScopeId(0): ["C1T5", "_defineProperty", "bigClass"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar", "M"]
rebuilt        : ScopeId(0): ["Bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/es6ClassTest8.ts
semantic error: Symbol reference IDs mismatch for "Vector":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(36)]
rebuilt        : SymbolId(6): [ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(25)]

tasks/coverage/typescript/tests/cases/compiler/es6ExportAll.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ExportAllInEs5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ExportAssignment4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ExportClause.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseInEs5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseWithoutModuleSpecifier.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ExportClauseWithoutModuleSpecifierInEs5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBinding.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingAmd.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingDts.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "defaultBinding2", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamedImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "defaultBinding1", "defaultBinding2", "defaultBinding3", "defaultBinding4", "defaultBinding5", "defaultBinding6", "m", "x", "x1", "y", "z"]
rebuilt        : ScopeId(0): ["a", "b", "m", "x", "x1", "y", "z"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBinding1InEs5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportDefaultBindingFollowedWithNamespaceBindingDts1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultBinding", "nameSpaceBinding", "x"]
rebuilt        : ScopeId(0): ["defaultBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportEqualsDeclaration2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportAmd.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportDts.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportInEs5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding", "nameSpaceBinding2", "x"]
rebuilt        : ScopeId(0): ["nameSpaceBinding", "x"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNameSpaceImportNoNamedExports.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["nameSpaceBinding"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportAmd.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportDts.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "xxxx1", "xxxx2", "xxxx3", "xxxx4", "xxxx5", "xxxx6", "xxxx7", "xxxx8", "xxxx9", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "xxxx1", "xxxx2", "xxxx3", "xxxx4", "xxxx5", "xxxx6", "xxxx7", "xxxx8", "xxxx9", "y", "z", "z1", "z111", "z2", "z3"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportInEs5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a11", "aaaa", "b", "bbbb", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]
rebuilt        : ScopeId(0): ["a", "a1", "a11", "b", "m", "x", "x1", "x11", "xxxx", "y", "z", "z1", "z111", "z2", "z3"]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportInIndirectExportAssignment.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "c"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/es6ImportNamedImportWithTypesAndValues.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/es6ImportWithoutFromClauseNonInstantiatedModule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/es6ModuleClassDeclaration.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c3"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "c3"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(3), SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(13): [SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(26): [SymbolId(6), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(26): [SymbolId(8), SymbolId(9), SymbolId(10)]
Symbol reference IDs mismatch for "c3":
after transform: SymbolId(3): [ReferenceId(4), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(5): [ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(30)]
Symbol reference IDs mismatch for "c3":
after transform: SymbolId(6): [ReferenceId(8), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(9): [ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(50)]
Reference symbol mismatch for "m1":
after transform: SymbolId(2) "m1"
rebuilt        : SymbolId(3) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleConst.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(14)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(20)]
rebuilt        : ScopeId(1): [SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(21)]
rebuilt        : ScopeId(2): [SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21)]
Reference symbol mismatch for "m1":
after transform: SymbolId(6) "m1"
rebuilt        : SymbolId(6) "m1"
Reference symbol mismatch for "m1":
after transform: SymbolId(6) "m1"
rebuilt        : SymbolId(6) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleConstEnumDeclaration.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "e3"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "e5"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(16)]
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(11), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(37)]
rebuilt        : ScopeId(3): [SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(24), SymbolId(28), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(38)]
rebuilt        : ScopeId(6): [SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e3":
after transform: SymbolId(11): [ReferenceId(4)]
rebuilt        : SymbolId(8): [ReferenceId(25), ReferenceId(35)]
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e5":
after transform: SymbolId(24): [ReferenceId(8)]
rebuilt        : SymbolId(18): [ReferenceId(47), ReferenceId(57)]
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "m1":
after transform: SymbolId(10) "m1"
rebuilt        : SymbolId(6) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleConstEnumDeclaration2.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "e3"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "e5"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(16)]
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(11), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(37)]
rebuilt        : ScopeId(3): [SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(24), SymbolId(28), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(38)]
rebuilt        : ScopeId(6): [SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e3":
after transform: SymbolId(11): [ReferenceId(4)]
rebuilt        : SymbolId(8): [ReferenceId(25), ReferenceId(35)]
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e5":
after transform: SymbolId(24): [ReferenceId(8)]
rebuilt        : SymbolId(18): [ReferenceId(47), ReferenceId(57)]
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "m1":
after transform: SymbolId(10) "m1"
rebuilt        : SymbolId(6) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleEnumDeclaration.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "e3"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "e5"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(16)]
Bindings mismatch:
after transform: ScopeId(1): ["a", "b", "c", "e1"]
rebuilt        : ScopeId(1): ["e1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["e2", "x", "y", "z"]
rebuilt        : ScopeId(2): ["e2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(11), SymbolId(15), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(37)]
rebuilt        : ScopeId(3): [SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Bindings mismatch:
after transform: ScopeId(4): ["a", "b", "c", "e3"]
rebuilt        : ScopeId(4): ["e3"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(5): ["e4", "x", "y", "z"]
rebuilt        : ScopeId(5): ["e4"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(24), SymbolId(28), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(38)]
rebuilt        : ScopeId(6): [SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Bindings mismatch:
after transform: ScopeId(7): ["a", "b", "c", "e5"]
rebuilt        : ScopeId(7): ["e5"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(7): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["e6", "x", "y", "z"]
rebuilt        : ScopeId(8): ["e6"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(8): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "e1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "e3":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e3":
after transform: SymbolId(11): [ReferenceId(4)]
rebuilt        : SymbolId(8): [ReferenceId(25), ReferenceId(35)]
Symbol flags mismatch for "e4":
after transform: SymbolId(15): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "e5":
after transform: SymbolId(24): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(18): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "e5":
after transform: SymbolId(24): [ReferenceId(8)]
rebuilt        : SymbolId(18): [ReferenceId(47), ReferenceId(57)]
Symbol flags mismatch for "e6":
after transform: SymbolId(28): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(20): SymbolFlags(BlockScopedVariable)
Reference symbol mismatch for "m1":
after transform: SymbolId(10) "m1"
rebuilt        : SymbolId(6) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleFunctionDeclaration.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo3"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "foo3"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(6): [SymbolId(7), SymbolId(8), SymbolId(9)]
Symbol flags mismatch for "foo3":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo3":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(3), ReferenceId(6)]
Symbol flags mismatch for "foo4":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "foo3":
after transform: SymbolId(6): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo3":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(8): [ReferenceId(11), ReferenceId(14)]
Symbol flags mismatch for "foo4":
after transform: SymbolId(7): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "m1":
after transform: SymbolId(2) "m1"
rebuilt        : SymbolId(2) "m1"

tasks/coverage/typescript/tests/cases/compiler/es6ModuleInternalImport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ModuleLet.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ModuleModuleDeclaration.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/es6ModuleVariableStatement.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/esDecoratorsClassFieldsCrash.ts
semantic error: Symbol reference IDs mismatch for "dec":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(3), ReferenceId(4)]
Unresolved references mismatch:
after transform: ["DecoratorContext", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/esNextWeakRefs_IterableWeakMap.ts
semantic error: Unresolved references mismatch:
after transform: ["FinalizationRegistry", "Generator", "Iterable", "Object", "Set", "Symbol", "WeakMap", "WeakRef", "undefined"]
rebuilt        : ["FinalizationRegistry", "Object", "Set", "Symbol", "WeakMap", "WeakRef", "undefined"]
Unresolved reference IDs mismatch for "WeakRef":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(11), ReferenceId(15), ReferenceId(33)]
rebuilt        : [ReferenceId(26)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(1), ReferenceId(14)]
rebuilt        : [ReferenceId(10)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(8), ReferenceId(55), ReferenceId(69), ReferenceId(72)]
rebuilt        : [ReferenceId(81), ReferenceId(84)]
Unresolved reference IDs mismatch for "WeakMap":
after transform: [ReferenceId(5), ReferenceId(9), ReferenceId(108), ReferenceId(109), ReferenceId(110)]
rebuilt        : [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/escapedIdentifiers.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/eventEmitterPatternWithRecordOfFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckWithNestedArrayIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/excessPropertyCheckingIntersectionWithConditional.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/exhaustiveSwitchWithWideningLiteralTypes.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionContextualTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionExpressionsWithDynamicNames2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "mySymbol":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["Symbol", "const", "true"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionNestedAssigmentsDeclared.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(13)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 44, end: 47 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionNullishProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionSymbolProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "symb":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/expandoFunctionSymbolPropertyJs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "symb":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportAssignClassAndModule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 37, end: 40 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/exportAssignValueAndType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["http", "x"]
rebuilt        : ScopeId(0): ["server", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "server":
after transform: SymbolId(2): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "server":
after transform: SymbolId(2): Span { start: 82, end: 88 }
rebuilt        : SymbolId(1): Span { start: 152, end: 158 }
Symbol redeclarations mismatch for "server":
after transform: SymbolId(2): [Span { start: 152, end: 158 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Date", "http", "module"]
rebuilt        : ["Date", "module"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/exportAssignedTypeAsTypeAnnotation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference flags mismatch for "x":
after transform: ReferenceId(1): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["Date", "module"]
rebuilt        : ["module", "x"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentClass.ts
semantic error: Missing SymbolId: "D"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "D":
after transform: SymbolId(0) "D"
rebuilt        : SymbolId(0) "D"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentError.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentFunction.ts
semantic error: Missing SymbolId: "fooFunc"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "fooFunc":
after transform: SymbolId(0) "fooFunc"
rebuilt        : SymbolId(0) "fooFunc"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference flags mismatch for "A":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["A", "module"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentInternalModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentMembersVisibleInAugmentation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["T"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentOfGenericType1.ts
semantic error: Missing SymbolId: "q"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Symbol reference IDs mismatch for "M":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "q":
after transform: SymbolId(0) "q"
rebuilt        : SymbolId(0) "q"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentVariable.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "y":
after transform: SymbolId(0) "y"
rebuilt        : SymbolId(0) "y"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithImportStatementPrivacyError.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/exportAssignmentWithPrivacyError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportClassExtendingIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/exportDeclarationForModuleOrEnumWithMemberOfSameName.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "B":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/exportDeclarationsInAmbientNamespaces.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Function", "Q", "_try"]
rebuilt        : ["Q"]

tasks/coverage/typescript/tests/cases/compiler/exportDefaultAsyncFunction.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/compiler/exportDefaultForNonInstantiatedModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["m"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportDefaultImportedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceAndFunctionOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/exportDefaultInterfaceAndValue.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/exportDefaultProperty.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(4)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 84, end: 85 }]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/exportDefaultProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 121, end: 122 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/exportDefaultVariable.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["io", "module"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportEqualCallable.ts
semantic error: Missing SymbolId: "connect"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "connect":
after transform: SymbolId(0) "connect"
rebuilt        : SymbolId(0) "connect"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportEqualNamespaces.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): ["server", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "server":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface | NameSpaceModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "server":
after transform: SymbolId(0): Span { start: 15, end: 21 }
rebuilt        : SymbolId(1): Span { start: 149, end: 155 }
Symbol reference IDs mismatch for "server":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol redeclarations mismatch for "server":
after transform: SymbolId(0): [Span { start: 77, end: 83 }, Span { start: 149, end: 155 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Date", "Object", "module"]
rebuilt        : ["Date", "module"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/exportEqualsOfModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["popsicle", "popsicle-proxy-agent", "~popsicle/dist/common", "~popsicle/dist/request"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["proxy"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/exportEqualsProperty.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(4)]
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 84, end: 85 }]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/exportEqualsProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 116, end: 117 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/exportImport.ts
semantic error: Missing SymbolId: "w"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportImportAndClodule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/exportImportCanSubstituteConstEnumForValue.ts
semantic error: Missing SymbolId: "MsPortalFx"
Missing SymbolId: "_MsPortalFx"
Missing SymbolId: "ViewModels"
Missing SymbolId: "_ViewModels"
Missing SymbolId: "Dialogs"
Missing SymbolId: "_Dialogs"
Missing ReferenceId: "_Dialogs"
Missing ReferenceId: "DialogResult"
Missing ReferenceId: "_Dialogs"
Missing ReferenceId: "someExportedFunction"
Missing ReferenceId: "_Dialogs"
Missing ReferenceId: "MessageBoxButtons"
Missing ReferenceId: "Dialogs"
Missing ReferenceId: "Dialogs"
Missing ReferenceId: "_ViewModels"
Missing ReferenceId: "_ViewModels"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "_MsPortalFx"
Missing ReferenceId: "_MsPortalFx"
Missing ReferenceId: "MsPortalFx"
Missing ReferenceId: "MsPortalFx"
Missing SymbolId: "_MsPortalFx2"
Missing SymbolId: "ViewModels"
Missing SymbolId: "_ViewModels2"
Missing ReferenceId: "_ViewModels2"
Missing ReferenceId: "SomeUsagesOfTheseConsts"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "_MsPortalFx2"
Missing ReferenceId: "_MsPortalFx2"
Missing ReferenceId: "MsPortalFx"
Missing ReferenceId: "MsPortalFx"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(27)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(28)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(12), SymbolId(13), SymbolId(29)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(4): ["Abort", "Cancel", "DialogResult", "Ignore", "No", "Ok", "Retry", "Yes"]
rebuilt        : ScopeId(4): ["DialogResult"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["AbortRetryIgnore", "MessageBoxButtons", "OK", "OKCancel", "RetryCancel", "YesNo", "YesNoCancel"]
rebuilt        : ScopeId(6): ["MessageBoxButtons"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(20), SymbolId(30)]
rebuilt        : ScopeId(7): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["Callback", "DialogButtons", "ReExportedEnum", "SomeUsagesOfTheseConsts", "_ViewModels2"]
rebuilt        : ScopeId(8): ["SomeUsagesOfTheseConsts", "_ViewModels2"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "DialogResult":
after transform: SymbolId(3): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "DialogResult":
after transform: SymbolId(3): []
rebuilt        : SymbolId(6): [ReferenceId(16)]
Symbol reference IDs mismatch for "someExportedFunction":
after transform: SymbolId(12): []
rebuilt        : SymbolId(8): [ReferenceId(18)]
Symbol flags mismatch for "MessageBoxButtons":
after transform: SymbolId(13): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "MessageBoxButtons":
after transform: SymbolId(13): []
rebuilt        : SymbolId(9): [ReferenceId(33)]
Symbol reference IDs mismatch for "SomeUsagesOfTheseConsts":
after transform: SymbolId(24): []
rebuilt        : SymbolId(14): [ReferenceId(51)]
Reference symbol mismatch for "ReExportedEnum":
after transform: SymbolId(21) "ReExportedEnum"
rebuilt        : <None>
Reference symbol mismatch for "DialogButtons":
after transform: SymbolId(22) "DialogButtons"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Dialogs", "MsPortalFx", "console"]
rebuilt        : ["DialogButtons", "ReExportedEnum", "console"]

tasks/coverage/typescript/tests/cases/compiler/exportImportMultipleFiles.ts
semantic error: Missing SymbolId: "math"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "math":
after transform: SymbolId(0) "math"
rebuilt        : SymbolId(0) "math"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/exportImportNonInstantiatedModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["A", "B"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/exportImportNonInstantiatedModule2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Widget1":
after transform: SymbolId(0) "Widget1"
rebuilt        : <None>
Reference flags mismatch for "Widget1":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Widget1", "module"]

tasks/coverage/typescript/tests/cases/compiler/exportNamespaceDeclarationRetainsVisibility.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference flags mismatch for "X":
after transform: ReferenceId(2): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)

tasks/coverage/typescript/tests/cases/compiler/exportPrivateType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/exportRedeclarationTypeAliases.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Function | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | Function)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 12, end: 15 }
rebuilt        : SymbolId(0): Span { start: 73, end: 76 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 73, end: 76 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportSpecifierAndExportedMemberDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["m2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["X", "Y"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValues9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportStarForValuesInSystem.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportTwoInterfacesWithSameName.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportVisibility.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/exportedInterfaceInaccessibleInCallbackInModule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TPromise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/exportingContainingVisibleType.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportsInAmbientModules1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/exportsInAmbientModules2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/extBaseClass1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "B"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "C2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "_N"
Missing ReferenceId: "C3"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(5): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(7): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(6)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(3): []
rebuilt        : SymbolId(6): [ReferenceId(11)]
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(5): []
rebuilt        : SymbolId(9): [ReferenceId(16)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(1) "M"

tasks/coverage/typescript/tests/cases/compiler/extendAndImplementTheSameBaseType.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/extendConstructSignatureInInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/extendedInterfaceGenericType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/extendingClassFromAliasAndUsageInIndexer.ts
semantic error: Missing SymbolId: "Backbone"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Backbone":
after transform: SymbolId(0) "Backbone"
rebuilt        : SymbolId(0) "Backbone"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/externFunc.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/externModuleClobber.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["EM", "ec", "x"]
rebuilt        : ScopeId(0): ["ec", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "EM":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/externalModuleAssignToVar.ts
semantic error: Missing SymbolId: "ext"
Missing ReferenceId: "require"
Missing SymbolId: "ext2"
Missing ReferenceId: "require"
Missing SymbolId: "ext3"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Reference symbol mismatch for "ext":
after transform: SymbolId(0) "ext"
rebuilt        : SymbolId(0) "ext"
Reference symbol mismatch for "ext":
after transform: SymbolId(0) "ext"
rebuilt        : SymbolId(0) "ext"
Reference symbol mismatch for "ext2":
after transform: SymbolId(2) "ext2"
rebuilt        : SymbolId(2) "ext2"
Reference symbol mismatch for "ext2":
after transform: SymbolId(2) "ext2"
rebuilt        : SymbolId(2) "ext2"
Reference symbol mismatch for "ext3":
after transform: SymbolId(4) "ext3"
rebuilt        : SymbolId(4) "ext3"
Reference symbol mismatch for "ext3":
after transform: SymbolId(4) "ext3"
rebuilt        : SymbolId(4) "ext3"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/externalModuleQualification.ts
semantic error: Symbol reference IDs mismatch for "DiffEditor":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "NavigateAction":
after transform: SymbolId(6): [ReferenceId(0)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/externalModuleReferenceDoubleUnderscore1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["__timezonecomplete/basics", "timezonecomplete"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/externalModuleReferenceOfImportDeclarationWithExportModifier.ts
semantic error: Missing SymbolId: "file1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "file1":
after transform: SymbolId(0) "file1"
rebuilt        : SymbolId(0) "file1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/externalModuleResolution.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/externalModuleResolution2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/externalModuleWithoutCompilerFlag1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/fakeInfinity2.ts
semantic error: Missing ReferenceId: "Infinity"
Missing ReferenceId: "Infinity"
Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "f"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "f":
after transform: SymbolId(6): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f":
after transform: SymbolId(6): []
rebuilt        : SymbolId(4): [ReferenceId(9)]
Reference symbol mismatch for "X":
after transform: SymbolId(3) "X"
rebuilt        : SymbolId(2) "X"
Unresolved references mismatch:
after transform: ["Error"]
rebuilt        : ["Error", "Infinity"]

tasks/coverage/typescript/tests/cases/compiler/fakeInfinity3.ts
semantic error: Missing ReferenceId: "Infinity"
Missing ReferenceId: "Infinity"
Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "f"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(6), SymbolId(9)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "f":
after transform: SymbolId(6): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f":
after transform: SymbolId(6): []
rebuilt        : SymbolId(4): [ReferenceId(9)]
Symbol reference IDs mismatch for "Infinity":
after transform: SymbolId(8): []
rebuilt        : SymbolId(6): [ReferenceId(2), ReferenceId(5)]
Reference symbol mismatch for "X":
after transform: SymbolId(3) "X"
rebuilt        : SymbolId(2) "X"

tasks/coverage/typescript/tests/cases/compiler/fallFromLastCase1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/fallbackToBindingPatternForTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/fatArrowSelf.ts
semantic error: Missing SymbolId: "Events"
Missing SymbolId: "_Events"
Missing ReferenceId: "_Events"
Missing ReferenceId: "EventEmitter"
Missing ReferenceId: "Events"
Missing ReferenceId: "Events"
Missing SymbolId: "Consumer"
Missing SymbolId: "_Consumer"
Missing ReferenceId: "Consumer"
Missing ReferenceId: "Consumer"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(6), SymbolId(10)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "EventEmitter":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Events"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/fatArrowfunctionAsType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b", "c"]
rebuilt        : ScopeId(0): ["c"]
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["b"]

tasks/coverage/typescript/tests/cases/compiler/fatarrowfunctions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(22)]

tasks/coverage/typescript/tests/cases/compiler/fatarrowfunctionsInFunctions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/fillInMissingTypeArgsOnConstructCalls.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/fixCrashAliasLookupForDefauledImport.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/fixingTypeParametersRepeatedly1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/fixingTypeParametersRepeatedly3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/flowAfterFinally1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/flowControlTypeGuardThenSwitch.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Kind"]
rebuilt        : ScopeId(1): ["Kind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Kind":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Kind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(14), ReferenceId(17), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(10), ReferenceId(12)]

tasks/coverage/typescript/tests/cases/compiler/flowInFinally1.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/forAwaitForUnion.ts
semantic error: Unresolved references mismatch:
after transform: ["AsyncIterable", "Iterable", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/compiler/forInModule.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/forLoopEndingMultilineComments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "consoleTestResultHandler"]
rebuilt        : ScopeId(0): ["consoleTestResultHandler"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/compiler/forOfStringConstituents.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "y":
after transform: SymbolId(7) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

tasks/coverage/typescript/tests/cases/compiler/forStatementInnerComments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/compiler/forwardRefInTypeDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Cls2", "_defineProperty", "foo4", "obj1", "obj2", "s", "s1", "s2", "s3", "s4", "s5"]
rebuilt        : ScopeId(0): ["Cls2", "_defineProperty", "obj2", "s1", "s2", "s3", "s4", "s5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "s1":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "s2":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "s3":
after transform: SymbolId(5): [ReferenceId(2)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "s4":
after transform: SymbolId(7): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "s5":
after transform: SymbolId(8): [ReferenceId(4)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "Cls2":
after transform: SymbolId(10): [ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(6): [ReferenceId(2)]
Symbol reference IDs mismatch for "obj2":
after transform: SymbolId(12): [ReferenceId(8)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Cls1", "const", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/freshLiteralInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/freshLiteralTypesInIntersections.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/funcdecl.ts
semantic error: Missing SymbolId: "m2"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(17), SymbolId(22), SymbolId(23), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(33), SymbolId(35), SymbolId(36), SymbolId(38), SymbolId(45)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(17), SymbolId(22), SymbolId(23), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(33), SymbolId(34), SymbolId(36), SymbolId(41)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15)]
Binding symbols mismatch:
after transform: ScopeId(14): [SymbolId(39), SymbolId(46)]
rebuilt        : ScopeId(12): [SymbolId(37), SymbolId(38)]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(39): []
rebuilt        : SymbolId(38): [ReferenceId(15)]
Reference symbol mismatch for "m2":
after transform: SymbolId(38) "m2"
rebuilt        : SymbolId(36) "m2"
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/functionAssignabilityWithArrayLike01.ts
semantic error: Unresolved references mismatch:
after transform: ["ArrayLike"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/functionCall5.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c1"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(1) "m1"
Unresolved references mismatch:
after transform: ["m1", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/functionDeclarationWithResolutionOfTypeNamedArguments01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionDeclarationWithResolutionOfTypeOfSameName01.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "f":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "f":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 26, end: 27 }
Symbol reference IDs mismatch for "f":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol redeclarations mismatch for "f":
after transform: SymbolId(0): [Span { start: 26, end: 27 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/functionExpressionAndLambdaMatchesFunction.ts
semantic error: Unresolved references mismatch:
after transform: ["Function", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeNamedArguments01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeOfSameName01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionExpressionWithResolutionOfTypeOfSameName02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionInIfStatementInModule.ts
semantic error: Missing SymbolId: "Midori"
Missing SymbolId: "_Midori"
Missing ReferenceId: "Midori"
Missing ReferenceId: "Midori"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/functionMergedWithModule.ts
semantic error: Missing SymbolId: "_foo"
Missing SymbolId: "Bar"
Missing SymbolId: "_Bar"
Missing ReferenceId: "_Bar"
Missing ReferenceId: "f"
Missing ReferenceId: "Bar"
Missing ReferenceId: "Bar"
Missing ReferenceId: "_foo"
Missing ReferenceId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Missing SymbolId: "_foo2"
Missing SymbolId: "Baz"
Missing SymbolId: "_Baz"
Missing ReferenceId: "_Baz"
Missing ReferenceId: "g"
Missing ReferenceId: "Baz"
Missing ReferenceId: "Baz"
Missing ReferenceId: "_foo2"
Missing ReferenceId: "_foo2"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(10)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): []
rebuilt        : SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(15), ReferenceId(16)]
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 56, end: 59 }, Span { start: 108, end: 111 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "f":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(1)]
Symbol reference IDs mismatch for "g":
after transform: SymbolId(6): []
rebuilt        : SymbolId(10): [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads12.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads13.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads14.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads15.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads16.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads21.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads22.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads23.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads24.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads25.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads26.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads28.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads30.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads31.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads32.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads33.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads35.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads36.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads38.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads39.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads42.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads43.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads44.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads45.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloads9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/functionOverloadsOnGenericArity1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/functionOverloadsOnGenericArity2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/functionOverloadsRecursiveGenericReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/functionReturnTypeQuery.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/functionTypeArgumentArrayAssignment.ts
semantic error: Missing SymbolId: "test"
Missing SymbolId: "_test"
Missing ReferenceId: "test"
Missing ReferenceId: "test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/functionsWithImplicitReturnTypeAssignableToUndefined.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["Math", "Record"]
rebuilt        : ["Math"]

tasks/coverage/typescript/tests/cases/compiler/funduleExportedClassIsUsedBeforeDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["B"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "B":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/funduleOfFunctionWithoutReturnTypeAnnotation.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/funduleUsedAcrossFileBoundary.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/generativeRecursionWithTypeOf.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "f":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(4)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(6): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericAndNonGenericOverload1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericBaseClassLiteralProperty2.ts
semantic error: Symbol reference IDs mismatch for "CollectionItem2":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceConditionalType1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "h"]
rebuilt        : ScopeId(0): ["h"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "h":
after transform: SymbolId(3): [ReferenceId(8)]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(2) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f", "g"]

tasks/coverage/typescript/tests/cases/compiler/genericCallInferenceConditionalType2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["WrappedComponent", "f", "g", "h"]
rebuilt        : ScopeId(0): ["WrappedComponent", "h"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "WrappedComponent":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "h":
after transform: SymbolId(12): [ReferenceId(16)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "f":
after transform: SymbolId(9) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(11) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["wrapComponent"]
rebuilt        : ["f", "g", "wrapComponent"]

tasks/coverage/typescript/tests/cases/compiler/genericCallWithFixedArguments.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/genericCallWithinOwnBodyCastTypeParameterIdentity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/genericCallbacksAndClassHierarchy.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C1"
Missing ReferenceId: "_M"
Missing ReferenceId: "A"
Missing ReferenceId: "_M"
Missing ReferenceId: "B"
Missing ReferenceId: "_M"
Missing ReferenceId: "D"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(17)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(7)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(5): [ReferenceId(4), ReferenceId(8), ReferenceId(11), ReferenceId(17)]
rebuilt        : SymbolId(4): [ReferenceId(6)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(7): [ReferenceId(6)]
rebuilt        : SymbolId(5): [ReferenceId(9)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(9): []
rebuilt        : SymbolId(6): [ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/genericClassImplementingGenericInterfaceFromAnotherModule.ts
semantic error: Missing SymbolId: "bar"
Missing SymbolId: "_bar"
Missing ReferenceId: "_bar"
Missing ReferenceId: "Foo"
Missing ReferenceId: "bar"
Missing ReferenceId: "bar"
Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(4): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["foo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericClassPropertyInheritanceSpecialization.ts
semantic error: Missing SymbolId: "Portal"
Missing SymbolId: "_Portal"
Missing SymbolId: "Controls"
Missing SymbolId: "_Controls"
Missing SymbolId: "Validators"
Missing SymbolId: "_Validators"
Missing ReferenceId: "_Validators"
Missing ReferenceId: "Validator"
Missing ReferenceId: "Validators"
Missing ReferenceId: "Validators"
Missing ReferenceId: "_Controls"
Missing ReferenceId: "_Controls"
Missing ReferenceId: "Controls"
Missing ReferenceId: "Controls"
Missing ReferenceId: "_Portal"
Missing ReferenceId: "_Portal"
Missing ReferenceId: "Portal"
Missing ReferenceId: "Portal"
Missing SymbolId: "PortalFx"
Missing SymbolId: "_PortalFx"
Missing SymbolId: "ViewModels"
Missing SymbolId: "_ViewModels"
Missing SymbolId: "Controls"
Missing SymbolId: "_Controls2"
Missing SymbolId: "Validators"
Missing SymbolId: "_Validators2"
Missing ReferenceId: "_Validators2"
Missing ReferenceId: "Validator"
Missing ReferenceId: "Validators"
Missing ReferenceId: "Validators"
Missing ReferenceId: "_Controls2"
Missing ReferenceId: "_Controls2"
Missing ReferenceId: "Controls"
Missing ReferenceId: "Controls"
Missing ReferenceId: "_ViewModels"
Missing ReferenceId: "_ViewModels"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "ViewModels"
Missing ReferenceId: "_PortalFx"
Missing ReferenceId: "_PortalFx"
Missing ReferenceId: "PortalFx"
Missing ReferenceId: "PortalFx"
Bindings mismatch:
after transform: ScopeId(0): ["Portal", "PortalFx", "ViewModel", "_defineProperty", "ko"]
rebuilt        : ScopeId(0): ["Portal", "PortalFx", "ViewModel", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(31), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(14)]
Binding symbols mismatch:
after transform: ScopeId(24): [SymbolId(11), SymbolId(28)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(24): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(12), SymbolId(29)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(26): [SymbolId(13), SymbolId(30)]
rebuilt        : ScopeId(3): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(31): [SymbolId(18), SymbolId(31)]
rebuilt        : ScopeId(8): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(31): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(32): [SymbolId(19), SymbolId(32)]
rebuilt        : ScopeId(9): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(33): [SymbolId(20), SymbolId(33)]
rebuilt        : ScopeId(10): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(33): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(34): [SymbolId(21), SymbolId(34)]
rebuilt        : ScopeId(11): [SymbolId(17), SymbolId(18)]
Scope flags mismatch:
after transform: ScopeId(34): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Symbol reference IDs mismatch for "Validator":
after transform: SymbolId(13): []
rebuilt        : SymbolId(7): [ReferenceId(6)]
Symbol reference IDs mismatch for "Validator":
after transform: SymbolId(21): []
rebuilt        : SymbolId(18): [ReferenceId(20)]
Reference symbol mismatch for "Portal":
after transform: SymbolId(10) "Portal"
rebuilt        : SymbolId(1) "Portal"
Unresolved references mismatch:
after transform: ["PortalFx", "ko", "require"]
rebuilt        : ["ko", "require"]

tasks/coverage/typescript/tests/cases/compiler/genericClassWithStaticFactory.ts
semantic error: Missing SymbolId: "Editor"
Missing SymbolId: "_Editor"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "List"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "ListFactory"
Missing ReferenceId: "Editor"
Missing ReferenceId: "Editor"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(29)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(19), SymbolId(28)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "List":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(10), ReferenceId(18), ReferenceId(28), ReferenceId(46), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(61), ReferenceId(63), ReferenceId(72), ReferenceId(74), ReferenceId(82), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(98), ReferenceId(100), ReferenceId(102), ReferenceId(110), ReferenceId(112)]
rebuilt        : SymbolId(3): [ReferenceId(56), ReferenceId(57), ReferenceId(63)]
Symbol reference IDs mismatch for "ListFactory":
after transform: SymbolId(19): [ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(20): [ReferenceId(6), ReferenceId(78)]

tasks/coverage/typescript/tests/cases/compiler/genericClasses0.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/genericClasses2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/genericClasses3.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericClasses4.ts
semantic error: Symbol reference IDs mismatch for "Vec2_T":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(10), ReferenceId(12), ReferenceId(16), ReferenceId(19), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/genericClassesInModule.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "B"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "A"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : SymbolId(0) "Foo"
Unresolved references mismatch:
after transform: ["Foo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericClassesInModule2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(8): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(5): [ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericCloduleInModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/genericConstraint3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericConstraintDeclaration.ts
semantic error: Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericConstraintOnExtendedBuiltinTypes.ts
semantic error: Missing SymbolId: "EndGate"
Missing SymbolId: "_EndGate"
Missing SymbolId: "Tweening"
Missing SymbolId: "_Tweening"
Missing ReferenceId: "_Tweening"
Missing ReferenceId: "Tween"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "_EndGate"
Missing ReferenceId: "_EndGate"
Missing ReferenceId: "EndGate"
Missing ReferenceId: "EndGate"
Missing SymbolId: "_EndGate2"
Missing SymbolId: "Tweening"
Missing SymbolId: "_Tweening2"
Missing ReferenceId: "_Tweening2"
Missing ReferenceId: "NumberTween"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "_EndGate2"
Missing ReferenceId: "_EndGate2"
Missing ReferenceId: "EndGate"
Missing ReferenceId: "EndGate"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(3), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(4), SymbolId(11)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(7), SymbolId(12)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(8), SymbolId(13)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "Tween":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(4)]
Symbol reference IDs mismatch for "NumberTween":
after transform: SymbolId(8): []
rebuilt        : SymbolId(10): [ReferenceId(14)]
Unresolved references mismatch:
after transform: ["EndGate", "ICloneable", "Tween", "require"]
rebuilt        : ["Tween", "require"]

tasks/coverage/typescript/tests/cases/compiler/genericConstraintOnExtendedBuiltinTypes2.ts
semantic error: Missing SymbolId: "EndGate"
Missing SymbolId: "_EndGate2"
Missing SymbolId: "Tweening"
Missing SymbolId: "_Tweening"
Missing ReferenceId: "_Tweening"
Missing ReferenceId: "Tween"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "_EndGate2"
Missing ReferenceId: "_EndGate2"
Missing ReferenceId: "EndGate"
Missing ReferenceId: "EndGate"
Missing SymbolId: "_EndGate3"
Missing SymbolId: "Tweening"
Missing SymbolId: "_Tweening2"
Missing ReferenceId: "_Tweening2"
Missing ReferenceId: "NumberTween"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "Tweening"
Missing ReferenceId: "_EndGate3"
Missing ReferenceId: "_EndGate3"
Missing ReferenceId: "EndGate"
Missing ReferenceId: "EndGate"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(3), SymbolId(11)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(4), SymbolId(12)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(7), SymbolId(13)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(8), SymbolId(14)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "Tween":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(4)]
Symbol reference IDs mismatch for "NumberTween":
after transform: SymbolId(8): []
rebuilt        : SymbolId(10): [ReferenceId(14)]
Unresolved references mismatch:
after transform: ["EndGate", "ICloneable", "Tween", "require"]
rebuilt        : ["Tween", "require"]

tasks/coverage/typescript/tests/cases/compiler/genericConstructSignatureInInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericFunctionInference2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["enhancer4", "foo", "myReducer1", "myReducer2"]
rebuilt        : ScopeId(0): ["enhancer4", "myReducer1", "myReducer2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["combineReducers", "withH"]
rebuilt        : ["combineReducers", "foo", "withH"]

tasks/coverage/typescript/tests/cases/compiler/genericFunctionSpecializations1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericFunctions2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericFunctions3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericFunctionsAndConditionalInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/genericFunctionsWithOptionalParameters1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericFunctionsWithOptionalParameters3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Collection":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(8), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/genericIndexedAccessMethodIntersectionCanBeAccessed.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericInference2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["age_v", "ko", "name_v", "o", "rr_v", "x_v", "yy_v", "zz_v"]
rebuilt        : ScopeId(0): ["age_v", "name_v", "o", "rr_v", "x_v", "yy_v", "zz_v"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericInferenceDefaultTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/genericInferenceDefaultTypeParameterJsxReact.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Component", "ComponentPropsWithRef", "ElementType", "React", "ReactNode", "_jsxFileName", "v1"]
rebuilt        : ScopeId(0): ["Component", "React", "_jsxFileName", "v1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericInheritedDefaultConstructors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(2): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/genericInstanceOf.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericInterfaceFunctionTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericInterfaceImplementation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericInterfaceTypeCall.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericMethodOverspecialization.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["document", "elements", "names", "widths", "xxx"]
rebuilt        : ScopeId(0): ["elements", "names", "widths", "xxx"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "document":
after transform: SymbolId(2) "document"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["document"]

tasks/coverage/typescript/tests/cases/compiler/genericNumberIndex.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericObjectLitReturnType.ts
semantic error: Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericObjectSpreadResultInSwitch.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_objectWithoutProperties", "getType", "params"]
rebuilt        : ScopeId(0): ["_excluded", "_objectWithoutProperties", "getType"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Reference symbol mismatch for "params":
after transform: SymbolId(6) "params"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["params", "require"]

tasks/coverage/typescript/tests/cases/compiler/genericOfACloduleType1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "X"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(8)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(6): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "C":
after transform: SymbolId(4): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(3)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(4): [Span { start: 100, end: 101 }]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["M"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericOfACloduleType2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "X"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing ReferenceId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(8)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(6), SymbolId(9)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(6): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(8), SymbolId(11)]
rebuilt        : ScopeId(8): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "C":
after transform: SymbolId(4): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(3)]
rebuilt        : SymbolId(4): [ReferenceId(2), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(4): [Span { start: 100, end: 101 }]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["M"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/genericOverloadSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(13): [ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericPrototypeProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "BaseEvent":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "MyEvent":
after transform: SymbolId(2): [ReferenceId(6)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericPrototypeProperty3.ts
semantic error: Symbol reference IDs mismatch for "BaseEvent":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "MyEvent":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericRecursiveImplicitConstructorErrors2.ts
semantic error: Missing SymbolId: "TypeScript2"
Missing SymbolId: "_TypeScript"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "PullSymbolVisibility"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "PullSymbol"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "PullTypeSymbol"
Missing ReferenceId: "TypeScript2"
Missing ReferenceId: "TypeScript2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(4), SymbolId(7), SymbolId(18), SymbolId(22)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(7)]
Bindings mismatch:
after transform: ScopeId(5): ["Private", "Public", "PullSymbolVisibility"]
rebuilt        : ScopeId(2): ["PullSymbolVisibility"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "PullSymbolVisibility":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "PullSymbolVisibility":
after transform: SymbolId(4): []
rebuilt        : SymbolId(2): [ReferenceId(6)]
Symbol reference IDs mismatch for "PullSymbol":
after transform: SymbolId(7): [ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(4): [ReferenceId(9), ReferenceId(10)]
Symbol reference IDs mismatch for "PullTypeSymbol":
after transform: SymbolId(18): [ReferenceId(3)]
rebuilt        : SymbolId(9): [ReferenceId(12)]

tasks/coverage/typescript/tests/cases/compiler/genericReversingTypeParameters.ts
semantic error: Symbol reference IDs mismatch for "BiMap":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericReversingTypeParameters2.ts
semantic error: Symbol reference IDs mismatch for "BiMap":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/genericSignatureInheritance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericSignatureInheritance2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericSpecializationToTypeLiteral1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(17)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericTemplateOverloadResolution.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fooFn"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "fooFn":
after transform: SymbolId(2) "fooFn"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "TemplateStringsArray", "expect"]
rebuilt        : ["expect", "fooFn"]

tasks/coverage/typescript/tests/cases/compiler/genericTupleWithSimplifiableElements.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericTypeWithCallableMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/genericTypeWithCallableMembers2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(2): []

tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericTypeWithMultipleBases3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericWithCallSignatureReturningSpecialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericWithCallSignatures1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/genericWithIndexerOfTypeParameterType2.ts
semantic error: Symbol reference IDs mismatch for "CollectionItem":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol reference IDs mismatch for "ListItem":
after transform: SymbolId(4): [ReferenceId(3)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/generics0.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/generics1NoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/generics2NoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/generics3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/generics4NoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/genericsManyTypeParameters.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["a10", "a11", "a12", "a13", "a14", "a15", "a16", "a17", "a18", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b1", "b10", "b11", "b12", "b13", "b14", "b15", "b16", "b17", "b18", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "c1", "c10", "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "x1", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "y1", "y10", "y12", "y13", "y14", "y15", "y16", "y17", "y18", "y19", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9"]
rebuilt        : ScopeId(1): ["a1", "a10", "a11", "a12", "a13", "a14", "a15", "a16", "a17", "a18", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b1", "b10", "b11", "b12", "b13", "b14", "b15", "b16", "b17", "b18", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "c1", "c10", "c11", "c12", "c13", "c14", "c15", "c16", "c17", "c18", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "x1", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "y1", "y10", "y12", "y13", "y14", "y15", "y16", "y17", "y18", "y19", "y2", "y3", "y4", "y5", "y6", "y7", "y8", "y9", "z1", "z10", "z11", "z12", "z13", "z14", "z15", "z16", "z17", "z18", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9"]
Symbol flags mismatch for "a1":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "a1":
after transform: SymbolId(1): Span { start: 18, end: 20 }
rebuilt        : SymbolId(4): Span { start: 724, end: 731 }
Symbol reference IDs mismatch for "a1":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(111)]
rebuilt        : SymbolId(4): [ReferenceId(3)]
Symbol redeclarations mismatch for "a1":
after transform: SymbolId(1): [Span { start: 724, end: 731 }]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/getAccessorWithImpliedReturnTypeAndFunctionClassMerge.ts
semantic error: Missing SymbolId: "MyModule"
Missing SymbolId: "_MyModule"
Missing ReferenceId: "_MyModule"
Missing ReferenceId: "MyClass"
Missing ReferenceId: "MyModule"
Missing ReferenceId: "MyModule"
Bindings mismatch:
after transform: ScopeId(0): ["MyModule", "_"]
rebuilt        : ScopeId(0): ["MyModule"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(14), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "MyClass":
after transform: SymbolId(14): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["Array", "_"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/getParameterNameAtPosition.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Function", "cases", "fn"]
rebuilt        : ["cases", "fn"]

tasks/coverage/typescript/tests/cases/compiler/getterErrorMessageNotDuplicated.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/getterSetterNonAccessor.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "PropertyDescriptor"]
rebuilt        : ["Object"]

tasks/coverage/typescript/tests/cases/compiler/getterSetterSubtypeAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(18)]

tasks/coverage/typescript/tests/cases/compiler/global.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "f":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"

tasks/coverage/typescript/tests/cases/compiler/globalFunctionAugmentationOverload.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/globalIsContextualKeyword.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo", "global", "obj"]
rebuilt        : ScopeId(0): ["a", "b", "foo", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/globalThisDeclarationEmit3.ts
semantic error: Missing SymbolId: "mod"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "mod":
after transform: SymbolId(0) "mod"
rebuilt        : SymbolId(0) "mod"

tasks/coverage/typescript/tests/cases/compiler/hidingCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/hidingConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/hidingIndexSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/higherOrderMappedIndexLookupInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "f1", "f2", "f3", "g", "h"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "h"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): []
Reference symbol mismatch for "f":
after transform: SymbolId(22) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeIntersectionAssignability.ts
semantic error: Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeNesting.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/homomorphicMappedTypeWithNonHomomorphicInstantiationSpreadable1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["PropertyKey", "Record", "func1"]
rebuilt        : ["func1"]

tasks/coverage/typescript/tests/cases/compiler/icomparable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/identicalGenericConditionalsWithInferRelated.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(3): []
Unresolved references mismatch:
after transform: ["Boolean", "Error", "Number", "String"]
rebuilt        : ["Error"]

tasks/coverage/typescript/tests/cases/compiler/identicalTypesNoDifferByCheckOrder.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Omit", "Pick", "Required"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/identityAndDivergentNormalizedTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Extract", "Omit", "RequestInit", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/identityRelationNeverTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "state":
after transform: SymbolId(9): [ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Unresolved references mismatch:
after transform: ["State", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/illegalGenericWrapping1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/implementInterfaceAnyMemberWithVoid.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/implementsInClassExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/implicitAnyGenerics.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(6): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(6): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/implicitIndexSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "E1"]
rebuilt        : ScopeId(6): ["E1"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "E2"]
rebuilt        : ScopeId(7): ["E2"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["A", "B", "E3"]
rebuilt        : ScopeId(8): ["E3"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(33): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(28): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(36): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(30): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E3":
after transform: SymbolId(39): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(32): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/importAliasAnExternalModuleInsideAnInternalModule.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "foo":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/importAliasFromNamespace.ts
semantic error: Missing SymbolId: "My"
Missing SymbolId: "_My"
Missing SymbolId: "Internal"
Missing SymbolId: "_Internal"
Missing ReferenceId: "_Internal"
Missing ReferenceId: "getThing"
Missing ReferenceId: "_Internal"
Missing ReferenceId: "WhichThing"
Missing ReferenceId: "Internal"
Missing ReferenceId: "Internal"
Missing ReferenceId: "_My"
Missing ReferenceId: "_My"
Missing ReferenceId: "My"
Missing ReferenceId: "My"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "WhichThing"]
rebuilt        : ScopeId(4): ["WhichThing"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "getThing":
after transform: SymbolId(2): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "getThing":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol flags mismatch for "WhichThing":
after transform: SymbolId(3): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "WhichThing":
after transform: SymbolId(3): []
rebuilt        : SymbolId(5): [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/importAliasWithDottedName.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/importAndVariableDeclarationConflict2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/importDecl.ts
semantic error: Symbol reference IDs mismatch for "d":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/importDeclWithExportModifierInAmbientContext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["m"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["x"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/importDeclarationUsedAsTypeQuery.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/importElisionEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["MyEnum", "a", "b", "c", "d"]
rebuilt        : ScopeId(1): ["MyEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "MyEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/importElisionExportNonExportAndDefault.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["MyFunction"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "MyFunction":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "MyFunction":
after transform: SymbolId(0): Span { start: 10, end: 20 }
rebuilt        : SymbolId(0): Span { start: 52, end: 62 }
Symbol reference IDs mismatch for "MyFunction":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol redeclarations mismatch for "MyFunction":
after transform: SymbolId(0): [Span { start: 52, end: 62 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/importHelpers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "dec", "id", "result"]
rebuilt        : ScopeId(0): ["A", "B", "C", "id", "result"]
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/compiler/importHelpersES6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "_asyncToGenerator", "_checkInRHS", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_objectSpread", "_x", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "_asyncToGenerator", "_checkInRHS", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_objectSpread", "_x", "o", "y"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["WeakMap"]
rebuilt        : ["WeakMap", "dec"]

tasks/coverage/typescript/tests/cases/compiler/importHelpersInAmbientContext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["N"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importHelpersInIsolatedModules.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "C"]
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(2) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/compiler/importHelpersInTsx.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "o", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "x"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(1) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React", "o"]

tasks/coverage/typescript/tests/cases/compiler/importHelpersWithLocalCollisions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "__decorate", "_objectSpread", "dec", "o", "y"]
rebuilt        : ScopeId(0): ["A", "_objectSpread", "o", "y"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/compiler/importInTypePosition.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/importNonExportedMember12.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importOnAliasedIdentifiers.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/importPropertyFromMappedType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["NotFound"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importShadowsGlobalName.ts
semantic error: Missing SymbolId: "Error"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Error":
after transform: SymbolId(0) "Error"
rebuilt        : SymbolId(0) "Error"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/compiler/importTypeGenericArrowTypeParenthesized.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/importUsedInExtendsList1.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Symbol reference IDs mismatch for "Sub":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/importUsedInGenericImportResolves.ts
semantic error: Unresolved references mismatch:
after transform: ["T", "theme"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/import_reference-exported-alias.ts
semantic error: Missing SymbolId: "App"
Missing SymbolId: "_App"
Missing SymbolId: "Services"
Missing SymbolId: "_Services"
Missing ReferenceId: "_Services"
Missing ReferenceId: "UserServices"
Missing ReferenceId: "Services"
Missing ReferenceId: "Services"
Missing ReferenceId: "_App"
Missing ReferenceId: "_App"
Missing ReferenceId: "App"
Missing ReferenceId: "App"
Missing SymbolId: "Mod"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "UserServices":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "App":
after transform: SymbolId(0) "App"
rebuilt        : SymbolId(0) "App"
Reference symbol mismatch for "Mod":
after transform: SymbolId(3) "Mod"
rebuilt        : SymbolId(5) "Mod"

tasks/coverage/typescript/tests/cases/compiler/import_reference-to-type-alias.ts
semantic error: Missing SymbolId: "App"
Missing SymbolId: "_App"
Missing SymbolId: "Services"
Missing SymbolId: "_Services"
Missing ReferenceId: "_Services"
Missing ReferenceId: "UserServices"
Missing ReferenceId: "Services"
Missing ReferenceId: "Services"
Missing ReferenceId: "_App"
Missing ReferenceId: "_App"
Missing ReferenceId: "App"
Missing ReferenceId: "App"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "UserServices":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/import_unneeded-require-when-referenecing-aliased-type-throug-array.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ITest"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/import_var-referencing-an-imported-module-alias.ts
semantic error: Missing SymbolId: "host"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "host":
after transform: SymbolId(0) "host"
rebuilt        : SymbolId(0) "host"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/importedAliasedConditionalTypeInstantiation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Handler", "lambdaTester"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importedAliasesInTypePositions.ts
semantic error: Missing SymbolId: "elaborate"
Missing SymbolId: "_elaborate"
Missing SymbolId: "nested"
Missing SymbolId: "_nested"
Missing SymbolId: "mod"
Missing SymbolId: "_mod"
Missing SymbolId: "name"
Missing SymbolId: "_name"
Missing ReferenceId: "_name"
Missing ReferenceId: "ReferredTo"
Missing ReferenceId: "name"
Missing ReferenceId: "name"
Missing ReferenceId: "_mod"
Missing ReferenceId: "_mod"
Missing ReferenceId: "mod"
Missing ReferenceId: "mod"
Missing ReferenceId: "_nested"
Missing ReferenceId: "_nested"
Missing ReferenceId: "nested"
Missing ReferenceId: "nested"
Missing ReferenceId: "_elaborate"
Missing ReferenceId: "_elaborate"
Missing ReferenceId: "elaborate"
Missing ReferenceId: "elaborate"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8)]
Symbol reference IDs mismatch for "ReferredTo":
after transform: SymbolId(4): []
rebuilt        : SymbolId(8): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/importedModuleClassNameClash.ts
semantic error: Missing SymbolId: "foo"
Bindings mismatch:
after transform: ScopeId(0): ["foo", "m1"]
rebuilt        : ScopeId(0): ["foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | Import)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable | Class)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }

tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/importsInAmbientModules3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inKeywordAndIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["Object", "require", "true"]
rebuilt        : ["Object", "require"]

tasks/coverage/typescript/tests/cases/compiler/inKeywordNarrowingWithNoUncheckedIndexedAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
Unresolved references mismatch:
after transform: ["Record", "invariant"]
rebuilt        : ["invariant"]

tasks/coverage/typescript/tests/cases/compiler/inKeywordTypeguard.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "AWithMethod", "AWithOptionalProp", "B", "BWithMethod", "BWithOptionalProp", "C", "ClassWithUnionProp", "D", "NegativeClassTest", "UnreachableCodeDetection", "_defineProperty", "checkIsTouchDevice", "error", "f", "f1", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "foo", "isHTMLTable", "narrowsToNever", "negativeClassesTest", "negativeIntersectionTest", "negativeMultipleClassesTest", "negativePropTest", "negativeTestClassesWithMemberMissingInBothClasses", "negativeTestClassesWithMembers", "positiveClassesTest", "positiveIntersectionTest", "positiveTestClassesWithOptionalProperties", "sym", "test1", "test2", "test3", "x"]
rebuilt        : ScopeId(0): ["A", "AWithMethod", "AWithOptionalProp", "B", "BWithMethod", "BWithOptionalProp", "C", "ClassWithUnionProp", "D", "NegativeClassTest", "UnreachableCodeDetection", "_defineProperty", "checkIsTouchDevice", "f", "f1", "f10", "f11", "f12", "f13", "f14", "f15", "f16", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "foo", "isHTMLTable", "narrowsToNever", "negativeClassesTest", "negativeIntersectionTest", "negativeMultipleClassesTest", "negativePropTest", "negativeTestClassesWithMemberMissingInBothClasses", "negativeTestClassesWithMembers", "positiveClassesTest", "positiveIntersectionTest", "positiveTestClassesWithOptionalProperties", "sym", "test1", "test2", "test3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(33), ScopeId(37), ScopeId(41), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(56), ScopeId(59), ScopeId(64), ScopeId(67), ScopeId(72), ScopeId(75), ScopeId(79), ScopeId(83), ScopeId(88), ScopeId(90), ScopeId(92), ScopeId(95), ScopeId(98), ScopeId(101), ScopeId(104), ScopeId(107), ScopeId(110), ScopeId(111), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(119), ScopeId(122)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(35), ScopeId(37), ScopeId(40), ScopeId(45), ScopeId(50), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(59), ScopeId(63), ScopeId(66), ScopeId(71), ScopeId(74), ScopeId(79), ScopeId(82), ScopeId(86), ScopeId(90), ScopeId(95), ScopeId(97), ScopeId(99), ScopeId(102), ScopeId(105), ScopeId(108), ScopeId(111), ScopeId(114), ScopeId(117), ScopeId(118), ScopeId(120), ScopeId(121), ScopeId(122), ScopeId(123), ScopeId(126), ScopeId(129)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(27), ReferenceId(34), ReferenceId(40)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(6), ReferenceId(28), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "AWithOptionalProp":
after transform: SymbolId(6): [ReferenceId(10)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "BWithOptionalProp":
after transform: SymbolId(7): [ReferenceId(11)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "AWithMethod":
after transform: SymbolId(10): [ReferenceId(15), ReferenceId(20)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "BWithMethod":
after transform: SymbolId(11): [ReferenceId(16), ReferenceId(21)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(16): [ReferenceId(29)]
rebuilt        : SymbolId(17): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(17): [ReferenceId(30)]
rebuilt        : SymbolId(18): []
Symbol reference IDs mismatch for "ClassWithUnionProp":
after transform: SymbolId(20): [ReferenceId(36)]
rebuilt        : SymbolId(21): []
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "error":
after transform: SymbolId(34) "error"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(40) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Error", "Record", "Symbol", "Window", "globalThis", "isAOrB", "require", "window"]
rebuilt        : ["Array", "Symbol", "error", "isAOrB", "require", "window", "x"]

tasks/coverage/typescript/tests/cases/compiler/incrementOnNullAssertion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/indexIntoEnum.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/indexTypeNoSubstitutionTemplateLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/indexedAccessAndNullableNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Partial", "PropertyKey", "Record", "hasOwnProperty", "undefined"]
rebuilt        : ["hasOwnProperty", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/indexedAccessCanBeHighOrder.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/indexedAccessKeyofNestedSimplifiedSubstituteUnwrapped.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Extract", "Parameters", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/indexedAccessNormalization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/indexedAccessRetainsIndexSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/indexedAccessToThisTypeOnIntersection01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/indexedAccessTypeConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/indexer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/indexer2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/indexer3.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/indexerA.ts
semantic error: Symbol reference IDs mismatch for "JQueryElement":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "JQuery":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/indexerReturningTypeParameter1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/indexingTypesWithNever.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["key", "o0NameTest", "o0Test", "o1NameTest", "o1Test", "o2NameTest", "o2Test", "o3NameTest", "o3Test", "obj", "p0NameTest", "p0Test", "p1NameTest", "p1Test", "p2NameTest", "p2Test", "p3NameTest", "p3Test", "result3", "result4", "result5", "result6"]
rebuilt        : ScopeId(0): ["result3", "result4", "result5", "result6"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "obj":
after transform: SymbolId(18) "obj"
rebuilt        : <None>
Reference symbol mismatch for "key":
after transform: SymbolId(19) "key"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "Required", "genericFn1", "genericFn2", "genericFn3"]
rebuilt        : ["genericFn1", "genericFn2", "genericFn3", "key", "obj"]

tasks/coverage/typescript/tests/cases/compiler/indirectTypeParameterReferences.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/indirectUniqueSymbolDeclarationEmit.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inferConditionalConstraintMappedMember.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick", "U"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferFromGenericFunctionReturnTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(24), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(20), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35)]
Symbol reference IDs mismatch for "SetOf":
after transform: SymbolId(38): [ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(107), ReferenceId(109), ReferenceId(111), ReferenceId(118), ReferenceId(120), ReferenceId(122), ReferenceId(124), ReferenceId(132)]
rebuilt        : SymbolId(24): [ReferenceId(44), ReferenceId(50), ReferenceId(57)]

tasks/coverage/typescript/tests/cases/compiler/inferObjectTypeFromStringLiteralToKeyof.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["two", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "two":
after transform: SymbolId(5) "two"
rebuilt        : <None>
Reference symbol mismatch for "two":
after transform: SymbolId(5) "two"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["inference1", "inference2"]
rebuilt        : ["inference1", "inference2", "two"]

tasks/coverage/typescript/tests/cases/compiler/inferParameterWithMethodCallInitializer.ts
semantic error: Symbol reference IDs mismatch for "Example":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(2): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/inferPropertyWithContextSensitiveReturnStatement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inferRestArgumentsMappedTuple.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inferSecondaryParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferStringLiteralUnionForBindingElement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/inferTInParentheses.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferTupleFromBindingPattern.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inferTypeConstraintInstantiationCircularity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferTypeParameterConstraints.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["BaseClass", "Klass", "_defineProperty", "m"]
rebuilt        : ScopeId(0): ["BaseClass", "Klass", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "BaseClass":
after transform: SymbolId(17): [ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Klass":
after transform: SymbolId(19): [ReferenceId(28)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "m":
after transform: SymbolId(29) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "require"]
rebuilt        : ["Error", "m", "require"]

tasks/coverage/typescript/tests/cases/compiler/inferTypesWithFixedTupleExtendsAtVariadicPosition.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inferenceAndHKTs.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "map", "typeClass", "x1", "x2"]
rebuilt        : ScopeId(0): ["x1", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "map":
after transform: SymbolId(9) "map"
rebuilt        : <None>
Reference symbol mismatch for "typeClass":
after transform: SymbolId(13) "typeClass"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(9) "map"
rebuilt        : <None>
Reference symbol mismatch for "typeClass":
after transform: SymbolId(13) "typeClass"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(14) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "map", "typeClass"]

tasks/coverage/typescript/tests/cases/compiler/inferenceAndSelfReferentialConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferenceDoesNotAddUndefinedOrNull.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["ReadonlyArray", "toArray", "undefined"]
rebuilt        : ["toArray", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/inferenceDoesntCompareAgainstUninstantiatedTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "ConcreteClass":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(4), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/inferenceErasedSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(21), ScopeId(23), ScopeId(28), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(32)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "SomeAbstractClass":
after transform: SymbolId(3): [ReferenceId(8), ReferenceId(12), ReferenceId(15), ReferenceId(18)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Symbol reference IDs mismatch for "SomeClass":
after transform: SymbolId(8): [ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Promise", "SomeBaseClass", "require"]
rebuilt        : ["SomeBaseClass", "require"]

tasks/coverage/typescript/tests/cases/compiler/inferenceExactOptionalProperties1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inferenceFromParameterlessLambda.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/inferenceLimit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["BrokenClass", "MyModule", "_asyncToGenerator"]
rebuilt        : ScopeId(0): ["BrokenClass", "_asyncToGenerator"]
Unresolved references mismatch:
after transform: ["Array", "Promise"]
rebuilt        : ["Promise"]

tasks/coverage/typescript/tests/cases/compiler/inferenceOfNullableObjectTypesWithCommonBase.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalProperties.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["v1", "v2", "v3", "v4", "v5", "v6", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["v1", "v2", "v3", "v4", "v5", "v6", "y1", "y2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x1":
after transform: SymbolId(2) "x1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(3) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial", "Required", "test"]
rebuilt        : ["test", "x1", "x2"]

tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalPropertiesStrict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["v1", "v2", "v3", "v4", "v5", "v6", "x1", "x2", "y1", "y2"]
rebuilt        : ScopeId(0): ["v1", "v2", "v3", "v4", "v5", "v6", "y1", "y2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x1":
after transform: SymbolId(2) "x1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(3) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial", "Required", "test"]
rebuilt        : ["test", "x1", "x2"]

tasks/coverage/typescript/tests/cases/compiler/inferenceOptionalPropertiesToIndexSignatures.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a1", "a2", "a3", "a4", "obj", "param2", "query", "x1", "x2", "x3", "x4"]
rebuilt        : ScopeId(0): ["_objectSpread", "a1", "a2", "a3", "a4", "obj", "param2", "query"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "x1":
after transform: SymbolId(2) "x1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(3) "x2"
rebuilt        : <None>
Reference symbol mismatch for "x3":
after transform: SymbolId(4) "x3"
rebuilt        : <None>
Reference symbol mismatch for "x4":
after transform: SymbolId(5) "x4"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Object", "encodeURIComponent", "foo", "require"]
rebuilt        : ["Math", "Object", "encodeURIComponent", "foo", "require", "x1", "x2", "x3", "x4"]

tasks/coverage/typescript/tests/cases/compiler/inferenceOuterResultNotIncorrectlyInstantiatedWithInnerResult.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(23): [ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(10): [ReferenceId(11)]
Unresolved references mismatch:
after transform: ["Object", "Omit"]
rebuilt        : ["Object"]

tasks/coverage/typescript/tests/cases/compiler/inferenceUnionOfObjectsMappedContextualType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingObjectLiteralMethod1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingObjectLiteralMethod2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingUsingApparentType2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingUsingApparentType3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionTypeNested.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inferentialTypingWithFunctionTypeSyntacticScenarios.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "identity":
after transform: [ReferenceId(6), ReferenceId(15), ReferenceId(16), ReferenceId(24), ReferenceId(27), ReferenceId(28), ReferenceId(31), ReferenceId(34)]
rebuilt        : [ReferenceId(0), ReferenceId(9), ReferenceId(16), ReferenceId(19), ReferenceId(22), ReferenceId(25)]

tasks/coverage/typescript/tests/cases/compiler/inferentiallyTypingAnEmptyArray.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inferredReturnTypeIncorrectReuse1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["out", "out2", "t", "t2"]
rebuilt        : ScopeId(0): ["out", "out2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "t":
after transform: SymbolId(6) "t"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(18) "t2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReturnType", "parseInt"]
rebuilt        : ["parseInt", "t", "t2"]

tasks/coverage/typescript/tests/cases/compiler/inferrenceInfiniteLoopWithSubtyping.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ObjectTypeComposer", "User"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "User":
after transform: SymbolId(1) "User"
rebuilt        : <None>
Reference symbol mismatch for "User":
after transform: SymbolId(1) "User"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["User"]

tasks/coverage/typescript/tests/cases/compiler/infiniteExpandingTypeThroughInheritanceInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingBaseTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingBaseTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "Validator2":
after transform: SymbolId(8): [ReferenceId(8)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "ViewModel":
after transform: SymbolId(10): [ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(2): []
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(12), ReferenceId(15)]
rebuilt        : [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypeAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypes5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/infinitelyExpandingTypesNonGenericBase.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
Symbol reference IDs mismatch for "Functionality":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/infinitelyGenerativeInheritance1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inheritSameNamePrivatePropertiesFromSameOrigin.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/inheritanceOfGenericConstructorMethod1.ts
semantic error: Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inheritanceOfGenericConstructorMethod2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C1"
Missing ReferenceId: "_M"
Missing ReferenceId: "C2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "_N"
Missing ReferenceId: "D1"
Missing ReferenceId: "_N"
Missing ReferenceId: "D2"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(12)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(5), SymbolId(6), SymbolId(13)]
rebuilt        : ScopeId(4): [SymbolId(5), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Symbol reference IDs mismatch for "D1":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(8)]
Symbol reference IDs mismatch for "D2":
after transform: SymbolId(6): []
rebuilt        : SymbolId(7): [ReferenceId(11)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"
Reference symbol mismatch for "N":
after transform: SymbolId(4) "N"
rebuilt        : SymbolId(4) "N"
Reference symbol mismatch for "N":
after transform: SymbolId(4) "N"
rebuilt        : SymbolId(4) "N"
Reference symbol mismatch for "N":
after transform: SymbolId(4) "N"
rebuilt        : SymbolId(4) "N"

tasks/coverage/typescript/tests/cases/compiler/inheritanceStaticMembersCompatible.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/inheritedConstructorPropertyContextualType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/inheritedFunctionAssignmentCompatibility.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inheritedGenericCallSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/inheritedMembersAndIndexSignaturesFromDifferentBases2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inheritedOverloadedSpecializedSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/initializersInAmbientEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/inlineConditionalHasSimilarAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/inlineMappedTypeModifierDeclarationEmit.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/inlinedAliasAssignableToConstraintSameAsAlias.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(5): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(8), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(21), ReferenceId(24)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/innerAliases2.ts
semantic error: Missing SymbolId: "_provider"
Missing SymbolId: "_provider2"
Missing ReferenceId: "_provider2"
Missing ReferenceId: "UsefulClass"
Missing ReferenceId: "_provider"
Missing ReferenceId: "_provider"
Missing SymbolId: "consumer"
Missing SymbolId: "_consumer"
Missing ReferenceId: "consumer"
Missing ReferenceId: "consumer"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["_consumer", "g", "provider", "use"]
rebuilt        : ScopeId(4): ["_consumer", "g", "use"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "UsefulClass":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "provider":
after transform: SymbolId(3) "provider"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["provider"]

tasks/coverage/typescript/tests/cases/compiler/innerBoundLambdaEmit.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "Foo"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["M"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/innerExtern.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "C"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["B", "BB", "_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/innerFunc.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "tungsten"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "tungsten":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/innerOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/innerTypeArgumentInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/instanceAndStaticDeclarations1.ts
semantic error: Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(10), ReferenceId(9), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(2): [ReferenceId(13), ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/instanceOfAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(14), ReferenceId(21), ReferenceId(23)]
rebuilt        : SymbolId(1): [ReferenceId(15), ReferenceId(21)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(16), ReferenceId(19), ReferenceId(25)]
rebuilt        : SymbolId(2): [ReferenceId(18), ReferenceId(24)]
Symbol reference IDs mismatch for "Animal":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(27)]
rebuilt        : SymbolId(3): [ReferenceId(5)]
Symbol reference IDs mismatch for "Mammal":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(28)]
rebuilt        : SymbolId(4): [ReferenceId(8)]
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(32), ReferenceId(33), ReferenceId(35)]
rebuilt        : [ReferenceId(12), ReferenceId(30)]

tasks/coverage/typescript/tests/cases/compiler/instanceOfInExternalModules.ts
semantic error: Missing SymbolId: "Bar"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Bar":
after transform: SymbolId(0) "Bar"
rebuilt        : SymbolId(0) "Bar"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/instanceSubtypeCheck1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/instanceofTypeAliasToGenericClass.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fn", "fn2", "o"]
rebuilt        : ScopeId(0): ["fn", "fn2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(8) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["TableClass"]
rebuilt        : ["TableClass", "o"]
Unresolved reference IDs mismatch for "TableClass":
after transform: [ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(12)]
rebuilt        : [ReferenceId(1), ReferenceId(3), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/instantiateConstraintsToTypeArguments2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/instantiateContextualTypes.ts
semantic error: Missing SymbolId: "N1"
Missing SymbolId: "_N"
Missing ReferenceId: "N1"
Missing ReferenceId: "N1"
Bindings mismatch:
after transform: ScopeId(0): ["Interesting", "N1", "NON_VOID_ACTION", "VOID_ACTION", "_defineProperty", "defaultState", "fn", "handlers", "obj", "outerBoxOfString", "x", "xx"]
rebuilt        : ScopeId(0): ["Interesting", "N1", "NON_VOID_ACTION", "VOID_ACTION", "_defineProperty", "defaultState", "fn", "obj", "xx"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(13), ScopeId(23), ScopeId(24), ScopeId(25)]
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(60), SymbolId(86)]
rebuilt        : ScopeId(8): [SymbolId(15), SymbolId(16)]
Scope children mismatch:
after transform: ScopeId(25): [ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11)]
Reference symbol mismatch for "handlers":
after transform: SymbolId(6) "handlers"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(44) "x"
rebuilt        : <None>
Reference symbol mismatch for "outerBoxOfString":
after transform: SymbolId(73) "outerBoxOfString"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Component", "GenericComponent", "Partial", "Promise", "alert", "assignPartial", "createElement", "createElement2", "createReducer", "handler", "invoke", "passContentsToFunc", "useStringOrNumber"]
rebuilt        : ["Component", "GenericComponent", "Promise", "alert", "assignPartial", "createElement", "createElement2", "createReducer", "handler", "handlers", "invoke", "outerBoxOfString", "passContentsToFunc", "useStringOrNumber", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(100), ReferenceId(102), ReferenceId(103), ReferenceId(105), ReferenceId(106), ReferenceId(108)]
rebuilt        : [ReferenceId(28), ReferenceId(30), ReferenceId(32)]
Unresolved reference IDs mismatch for "Component":
after transform: [ReferenceId(14), ReferenceId(65), ReferenceId(79)]
rebuilt        : [ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/instantiateContextuallyTypedGenericThis.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/instantiateCrossFileMerge.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/instantiatedBaseTypeConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/instantiatedBaseTypeConstraints2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/instantiatedReturnTypeContravariance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/instantiatedTypeAliasDisplay.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces0.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces1.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces2.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces3.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces4.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/interMixingModulesInterfaces5.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "createB"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["_A"]
rebuilt        : ScopeId(1): ["B", "_A"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "createB":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"

tasks/coverage/typescript/tests/cases/compiler/interface0.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfaceClassMerging.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar", "_defineProperty", "bar", "obj"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "_defineProperty", "bar", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 149, end: 152 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 149, end: 152 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/interfaceClassMerging2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "bar", "foo"]
rebuilt        : ScopeId(0): ["Bar", "Foo", "_defineProperty", "bar", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 89, end: 92 }
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 89, end: 92 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Bar":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "Bar":
after transform: SymbolId(1): Span { start: 194, end: 197 }
rebuilt        : SymbolId(2): Span { start: 273, end: 276 }
Symbol redeclarations mismatch for "Bar":
after transform: SymbolId(1): [Span { start: 273, end: 276 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/interfaceContextualType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["I2", "I3", "I4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "I2":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "I2":
after transform: SymbolId(1): Span { start: 42, end: 44 }
rebuilt        : SymbolId(0): Span { start: 55, end: 57 }
Symbol redeclarations mismatch for "I2":
after transform: SymbolId(1): [Span { start: 55, end: 57 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "I3":
after transform: SymbolId(2): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "I3":
after transform: SymbolId(2): Span { start: 73, end: 75 }
rebuilt        : SymbolId(1): Span { start: 89, end: 91 }
Symbol redeclarations mismatch for "I3":
after transform: SymbolId(2): [Span { start: 89, end: 91 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "I4":
after transform: SymbolId(3): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "I4":
after transform: SymbolId(3): Span { start: 109, end: 111 }
rebuilt        : SymbolId(2): Span { start: 120, end: 129 }
Symbol redeclarations mismatch for "I4":
after transform: SymbolId(3): [Span { start: 120, end: 129 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/interfaceDeclaration5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/interfaceExtendsClass1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Control":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/interfaceImplementation5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(12)]

tasks/coverage/typescript/tests/cases/compiler/interfaceInReopenedModule.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "n"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "n":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/interfaceInheritance2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfaceMergedUnconstrainedNoErrorIrrespectiveOfOrder.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ns"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/interfaceOnly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfacePropertiesWithSameName1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfaceSubtyping.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/interfaceWithCommaSeparators.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfaceWithOptionalProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/interfacedecl.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/internalAliasClass.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "x"
Missing SymbolId: "_x"
Missing ReferenceId: "_x"
Missing ReferenceId: "c"
Missing ReferenceId: "x"
Missing ReferenceId: "x"
Missing SymbolId: "xc"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : SymbolId(0) "x"
Reference symbol mismatch for "xc":
after transform: SymbolId(3) "xc"
rebuilt        : SymbolId(4) "xc"

tasks/coverage/typescript/tests/cases/compiler/internalAliasClassInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "x"
Missing SymbolId: "_x"
Missing ReferenceId: "_x"
Missing ReferenceId: "c"
Missing ReferenceId: "x"
Missing ReferenceId: "x"
Missing SymbolId: "xc"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : SymbolId(0) "x"
Reference symbol mismatch for "xc":
after transform: SymbolId(3) "xc"
rebuilt        : SymbolId(4) "xc"

tasks/coverage/typescript/tests/cases/compiler/internalAliasEnum.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "weekend"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["Friday", "Saturday", "Sunday", "weekend"]
rebuilt        : ScopeId(2): ["weekend"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "weekend":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "weekend":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(8)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : SymbolId(4) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasEnumInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "weekend"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["Friday", "Saturday", "Sunday", "weekend"]
rebuilt        : ScopeId(2): ["weekend"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "weekend":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "weekend":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(8)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : SymbolId(4) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasFunction.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "foo"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "foo":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(4) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(4) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasFunctionInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "foo"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "foo":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(4) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(4) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing SymbolId: "b"
Missing SymbolId: "_b"
Missing ReferenceId: "_b"
Missing ReferenceId: "c"
Missing ReferenceId: "b"
Missing ReferenceId: "b"
Missing ReferenceId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(5) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasInitializedModuleInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing SymbolId: "b"
Missing SymbolId: "_b"
Missing ReferenceId: "_b"
Missing ReferenceId: "c"
Missing ReferenceId: "b"
Missing ReferenceId: "b"
Missing ReferenceId: "_a"
Missing ReferenceId: "_a"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(5) "b"

tasks/coverage/typescript/tests/cases/compiler/internalAliasInterface.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "b"
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/internalAliasInterfaceInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "b"
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideTopLevelModuleWithExport.ts
semantic error: Missing SymbolId: "b"
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/internalAliasUninitializedModuleInsideTopLevelModuleWithoutExport.ts
semantic error: Missing SymbolId: "b"
Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["b", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/internalAliasVar.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideLocalModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideLocalModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideTopLevelModuleWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasVarInsideTopLevelModuleWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalAliasWithDottedNameEmit.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalImportInstantiatedModuleMergedWithClassNotReferencingInstanceNoConflict.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/internalImportUnInstantiatedModuleMergedWithClassNotReferencingInstanceNoConflict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_defineProperty"]
rebuilt        : ScopeId(0): ["A", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 38, end: 39 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/internalImportUnInstantiatedModuleNotReferencingInstanceNoConflict.ts
semantic error: Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Bindings mismatch:
after transform: ScopeId(0): ["A", "B"]
rebuilt        : ScopeId(0): ["B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "Y", "_B"]
rebuilt        : ScopeId(1): ["A", "_B"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/intersectionApparentTypeCaching.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/intersectionConstraintReduction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(16)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/intersectionOfMixinConstructorTypeAndNonConstructorType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/compiler/intersectionOfTypeVariableHasApparentSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Readonly", "f"]
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/intersectionReductionGenericStringLikeType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/intersectionSatisfiesConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/intersectionTypeNormalization.ts
semantic error: Missing SymbolId: "enums"
Missing SymbolId: "_enums"
Missing ReferenceId: "_enums"
Missing ReferenceId: "A"
Missing ReferenceId: "_enums"
Missing ReferenceId: "B"
Missing ReferenceId: "_enums"
Missing ReferenceId: "C"
Missing ReferenceId: "enums"
Missing ReferenceId: "enums"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7), SymbolId(13), SymbolId(20), SymbolId(25), SymbolId(27), SymbolId(49)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(13)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7)]
Binding symbols mismatch:
after transform: ScopeId(26): [SymbolId(28), SymbolId(35), SymbolId(40), SymbolId(53)]
rebuilt        : ScopeId(3): [SymbolId(6), SymbolId(7), SymbolId(9), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(26): [ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(27): ["A", "a1", "a2", "a3", "a75", "a76", "a77"]
rebuilt        : ScopeId(4): ["A"]
Scope flags mismatch:
after transform: ScopeId(27): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(28): ["B", "b1", "b2", "b86", "b87"]
rebuilt        : ScopeId(5): ["B"]
Scope flags mismatch:
after transform: ScopeId(28): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(29): ["C", "c1", "c2", "c210", "c211"]
rebuilt        : ScopeId(6): ["C"]
Scope flags mismatch:
after transform: ScopeId(29): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(28): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(28): [ReferenceId(100)]
rebuilt        : SymbolId(7): [ReferenceId(17)]
Symbol flags mismatch for "B":
after transform: SymbolId(35): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(35): [ReferenceId(101)]
rebuilt        : SymbolId(9): [ReferenceId(28)]
Symbol flags mismatch for "C":
after transform: SymbolId(40): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(40): [ReferenceId(102)]
rebuilt        : SymbolId(11): [ReferenceId(39)]
Unresolved references mismatch:
after transform: ["enums"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/intersectionTypeWithLeadingOperator.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/intersectionType_useDefineForClassFields.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/intersectionWithConstructSignaturePrototypeResult.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["EmberObject", "Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/intersectionsAndOptionalProperties2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ab_disabled_read", "ab_obj", "ab_primitive", "ab_prop_read", "ac_disabled_read", "ac_obj", "ac_primitive", "ac_prop_read"]
rebuilt        : ScopeId(0): ["ab_disabled_read", "ab_prop_read", "ac_disabled_read", "ac_prop_read"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["ab_obj", "ab_primitive", "ac_obj", "ac_primitive", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/intersectionsAndOptionalProperties3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ab_disabled_read", "ab_obj", "ab_primitive", "ab_prop_read", "ac_disabled_read", "ac_obj", "ac_primitive", "ac_prop_read"]
rebuilt        : ScopeId(0): ["ab_disabled_read", "ab_prop_read", "ac_disabled_read", "ac_prop_read"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_primitive":
after transform: SymbolId(3) "ab_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ac_primitive":
after transform: SymbolId(4) "ac_primitive"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Reference symbol mismatch for "ab_obj":
after transform: SymbolId(11) "ab_obj"
rebuilt        : <None>
Reference symbol mismatch for "ac_obj":
after transform: SymbolId(12) "ac_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["ab_obj", "ab_primitive", "ac_obj", "ac_primitive", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/invalidThisEmitInContextualObjectLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/ipromise2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Windows", "p", "p2", "x"]
rebuilt        : ScopeId(0): ["p", "p2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Windows"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/ipromise3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/ipromise4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Windows", "p"]
rebuilt        : ScopeId(0): ["p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Windows"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/isDeclarationVisibleNodeKinds.ts
semantic error: Missing SymbolId: "schema"
Missing SymbolId: "_schema"
Missing ReferenceId: "_schema"
Missing ReferenceId: "createValidator1"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema2"
Missing ReferenceId: "_schema2"
Missing ReferenceId: "createValidator2"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema3"
Missing ReferenceId: "_schema3"
Missing ReferenceId: "createValidator3"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema4"
Missing ReferenceId: "_schema4"
Missing ReferenceId: "createValidator4"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema5"
Missing ReferenceId: "_schema5"
Missing ReferenceId: "createValidator5"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema6"
Missing ReferenceId: "_schema6"
Missing ReferenceId: "createValidator6"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema7"
Missing ReferenceId: "_schema7"
Missing ReferenceId: "createValidator7"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema8"
Missing ReferenceId: "_schema8"
Missing ReferenceId: "createValidator8"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Missing SymbolId: "_schema9"
Missing ReferenceId: "_schema9"
Missing ReferenceId: "T"
Missing ReferenceId: "schema"
Missing ReferenceId: "schema"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(29)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(30)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(31)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(6): []
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(10), SymbolId(32)]
rebuilt        : ScopeId(7): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(8): []
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(13), SymbolId(33)]
rebuilt        : ScopeId(9): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(10): []
Binding symbols mismatch:
after transform: ScopeId(14): [SymbolId(16), SymbolId(34)]
rebuilt        : ScopeId(11): [SymbolId(16), SymbolId(17)]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(19), SymbolId(35)]
rebuilt        : ScopeId(13): [SymbolId(19), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(18): [SymbolId(22), SymbolId(36)]
rebuilt        : ScopeId(15): [SymbolId(22), SymbolId(23)]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(20): [SymbolId(25), SymbolId(37)]
rebuilt        : ScopeId(17): [SymbolId(25), SymbolId(26)]
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Symbol reference IDs mismatch for "createValidator1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]
Symbol reference IDs mismatch for "createValidator2":
after transform: SymbolId(4): []
rebuilt        : SymbolId(5): [ReferenceId(7)]
Symbol reference IDs mismatch for "createValidator3":
after transform: SymbolId(7): []
rebuilt        : SymbolId(8): [ReferenceId(12)]
Symbol reference IDs mismatch for "createValidator4":
after transform: SymbolId(10): []
rebuilt        : SymbolId(11): [ReferenceId(17)]
Symbol reference IDs mismatch for "createValidator5":
after transform: SymbolId(13): []
rebuilt        : SymbolId(14): [ReferenceId(22)]
Symbol reference IDs mismatch for "createValidator6":
after transform: SymbolId(16): []
rebuilt        : SymbolId(17): [ReferenceId(27)]
Symbol reference IDs mismatch for "createValidator7":
after transform: SymbolId(19): []
rebuilt        : SymbolId(20): [ReferenceId(32)]
Symbol reference IDs mismatch for "createValidator8":
after transform: SymbolId(22): []
rebuilt        : SymbolId(23): [ReferenceId(37)]
Symbol reference IDs mismatch for "T":
after transform: SymbolId(25): []
rebuilt        : SymbolId(26): [ReferenceId(42)]
Unresolved references mismatch:
after transform: ["Array", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationOutFile.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsLiterals.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/isolatedDeclarationsStrictBuiltinIteratorReturn.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a1", "a10", "a11", "a12", "a13", "a14", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "x1", "x10", "x11", "x12", "x13", "x14", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9"]
rebuilt        : ScopeId(0): ["a1", "a10", "a11", "a12", "a13", "a14", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Unresolved references mismatch:
after transform: ["BuiltinIteratorReturn", "Iterable", "IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesConstEnum.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["EventName"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesDontElideReExportStar.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesImportConstEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["BAR", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesImportConstEnumTypeOnly.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesNonAmbientConstEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "X"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-AMD.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-CommonJS.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-System.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesPlainFile-UMD.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesReExportAlias.ts
semantic error: Missing SymbolId: "events"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "events":
after transform: SymbolId(0) "events"
rebuilt        : SymbolId(0) "events"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesShadowGlobalTypeNotValue.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Event"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModulesSketchyAliasLocalMerge.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/isolatedModules_resolveJsonModule.ts
semantic error: Missing SymbolId: "j"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/isolatedModules_resolveJsonModule_strict_outDir_commonJs.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["j"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/iterableTReturnTNext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyMap", "_source", "_wrapAsyncGenerator", "doubles", "map", "r1", "r2", "r3", "set", "source"]
rebuilt        : ScopeId(0): ["MyMap", "_source", "_wrapAsyncGenerator", "doubles", "r1", "r2", "r3", "source"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(0) "map"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(1) "set"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Map", "MapIterator", "Set", "Symbol", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Symbol", "arguments", "map", "require", "set", "undefined"]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(10), ReferenceId(17)]
rebuilt        : [ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/jqueryInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["p1", "p2"]
rebuilt        : ScopeId(0): ["p2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "p1":
after transform: SymbolId(9) "p1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["shouldBeIdentity"]
rebuilt        : ["p1", "shouldBeIdentity"]

tasks/coverage/typescript/tests/cases/compiler/jsdocAccessEnumType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/jsonFileImportChecksCallCorrectlyTwice.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxCallbackWithDestructuring.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Component", "Readonly"]
rebuilt        : ["Component"]

tasks/coverage/typescript/tests/cases/compiler/jsxChildrenSingleChildConfusableWithMultipleChildrenNoError.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(8)]

tasks/coverage/typescript/tests/cases/compiler/jsxComplexSignatureHasApplicabilityError.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(17), ReferenceId(19), ReferenceId(44), ReferenceId(50), ReferenceId(54), ReferenceId(82), ReferenceId(85), ReferenceId(88), ReferenceId(102), ReferenceId(180), ReferenceId(195), ReferenceId(206), ReferenceId(209), ReferenceId(233), ReferenceId(236), ReferenceId(242)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["Array", "Exclude", "HTMLAnchorElement", "HTMLDivElement", "HTMLInputElement", "JSX", "Pick", "Promise", "ReactSelectClass", "undefined"]
rebuilt        : ["ReactSelectClass", "undefined"]
Unresolved reference IDs mismatch for "ReactSelectClass":
after transform: [ReferenceId(22), ReferenceId(196)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxContainsOnlyTriviaWhiteSpacesNotCountedAsChild.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "NoticeList", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["NoticeList", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxElementClassTooManyParams.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ElemClass", "JSX", "_jsxFileName", "_reactJsxRuntime", "elem"]
rebuilt        : ScopeId(0): ["ElemClass", "_jsxFileName", "_reactJsxRuntime", "elem"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/jsxElementsAsIdentifierNames.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["A", "B", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/jsxEmitAttributeWithPreserve.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]

tasks/coverage/typescript/tests/cases/compiler/jsxEmitWithAttributes.ts
semantic error: Missing SymbolId: "Element"
Missing SymbolId: "_Element"
Missing ReferenceId: "_Element"
Missing ReferenceId: "isElement"
Missing ReferenceId: "_Element"
Missing ReferenceId: "createElement"
Missing ReferenceId: "Element"
Missing ReferenceId: "Element"
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(3), SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Symbol flags mismatch for "isElement":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "isElement":
after transform: SymbolId(3): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol flags mismatch for "createElement":
after transform: SymbolId(5): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "createElement":
after transform: SymbolId(5): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Reference symbol mismatch for "Element":
after transform: SymbolId(2) "Element"
rebuilt        : SymbolId(0) "Element"
Unresolved references mismatch:
after transform: ["JSX", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/jsxEmptyExpressionNotCountedAsChild.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndJsxFragmentFactory.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Frag", "_jsxFileName", "h"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

tasks/coverage/typescript/tests/cases/compiler/jsxFactoryAndJsxFragmentFactoryNull.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "h"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

tasks/coverage/typescript/tests/cases/compiler/jsxFactoryIdentifier.ts
semantic error: Missing SymbolId: "Element"
Missing SymbolId: "_Element"
Missing ReferenceId: "_Element"
Missing ReferenceId: "isElement"
Missing ReferenceId: "_Element"
Missing ReferenceId: "createElement"
Missing ReferenceId: "Element"
Missing ReferenceId: "Element"
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(3), SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Symbol flags mismatch for "isElement":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "isElement":
after transform: SymbolId(3): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol flags mismatch for "createElement":
after transform: SymbolId(5): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "createElement":
after transform: SymbolId(5): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Reference symbol mismatch for "Element":
after transform: SymbolId(2) "Element"
rebuilt        : SymbolId(0) "Element"
Unresolved references mismatch:
after transform: ["JSX", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/jsxFactoryIdentifierAsParameter.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["AppComponent", "JSX", "_jsxFileName"]
rebuilt        : ScopeId(0): ["AppComponent", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxFactoryQualifiedName.ts
semantic error: Missing SymbolId: "Element"
Missing SymbolId: "_Element"
Missing ReferenceId: "_Element"
Missing ReferenceId: "isElement"
Missing ReferenceId: "_Element"
Missing ReferenceId: "createElement"
Missing ReferenceId: "Element"
Missing ReferenceId: "Element"
Bindings mismatch:
after transform: ScopeId(0): ["Element", "JSX", "createElement", "toCamelCase"]
rebuilt        : ScopeId(0): ["Element", "createElement", "toCamelCase"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(3), SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Symbol flags mismatch for "isElement":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "isElement":
after transform: SymbolId(3): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol flags mismatch for "createElement":
after transform: SymbolId(5): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "createElement":
after transform: SymbolId(5): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Reference symbol mismatch for "Element":
after transform: SymbolId(2) "Element"
rebuilt        : SymbolId(0) "Element"
Unresolved references mismatch:
after transform: ["JSX", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/jsxFragmentFactoryNoUnusedLocals.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Counter", "Fragment", "_jsxFileName", "createElement"]
rebuilt        : ScopeId(0): ["Counter", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxGenericComponentWithSpreadingResultOfGenericFunction.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "otherProps"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "otherProps":
after transform: SymbolId(7) "otherProps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["GenericComponent", "Omit", "omit", "require"]
rebuilt        : ["GenericComponent", "omit", "otherProps", "require"]

tasks/coverage/typescript/tests/cases/compiler/jsxHasLiteralType.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/jsxInExtendsClause.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved reference IDs mismatch for "React":
after transform: [ReferenceId(2), ReferenceId(4), ReferenceId(7)]
rebuilt        : [ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/jsxInferenceProducesLiteralAsExpected.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(7), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "TestObject":
after transform: SymbolId(4): [ReferenceId(11), ReferenceId(16)]
rebuilt        : SymbolId(3): [ReferenceId(6)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicElementsCompatability.tsx
semantic error: Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/jsxIntrinsicElementsExtendsRecord.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/jsxLibraryManagedAttributesUnusedGeneric.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Comp", "React", "_jsxFileName", "jsx"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Comp":
after transform: SymbolId(16) "Comp"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Comp"]

tasks/coverage/typescript/tests/cases/compiler/jsxLocalNamespaceIndexSignatureNoCrash.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 106, end: 107 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/jsxMultilineAttributeValuesReact.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName", "a", "b", "c"]
rebuilt        : ScopeId(0): ["_jsxFileName", "a", "b", "c"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceImplicitImportJSXNamespaceFromPragmaPickedOverGlobalOne.tsx
semantic error: importSource cannot be set when runtime is classic.

tasks/coverage/typescript/tests/cases/compiler/jsxNamespaceReexports.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "createElement"]
rebuilt        : ScopeId(0): ["createElement"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["JSX", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/jsxNamespacedNameNotComparedToNonMatchingIndexSignature.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsx", "_jsxFileName", "react", "tag"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName", "tag"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/jsxPartialSpread.tsx
semantic error: Symbol reference IDs mismatch for "Select":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Parameters", "Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/jsxPropsAsIdentifierNames.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsx", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/jsxSpreadFirstUnionNoErrors.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Info", "React", "_jsxFileName", "a", "b", "c", "infoProps"]
rebuilt        : ScopeId(0): ["Info", "React", "_jsxFileName", "a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "infoProps":
after transform: SymbolId(6) "infoProps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["infoProps"]

tasks/coverage/typescript/tests/cases/compiler/keyRemappingKeyofResult.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "sym", "x"]
rebuilt        : ScopeId(0): ["f", "g", "sym"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "sym":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(12), ReferenceId(14), ReferenceId(20), ReferenceId(29), ReferenceId(31), ReferenceId(37), ReferenceId(53)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(6), ReferenceId(9), ReferenceId(13), ReferenceId(16)]
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(6) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Exclude", "PropertyKey", "Record", "Symbol"]
rebuilt        : ["Symbol", "x"]

tasks/coverage/typescript/tests/cases/compiler/keyofGenericExtendingClassDoubleLayer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "PersonModel":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["Date", "Omit", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/keyofModuleObjectHasCorrectKeys.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/keyofObjectWithGlobalSymbolIncluded.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "obj":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/keywordInJsxIdentifier.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/lambdaParameterWithTupleArgsHasCorrectAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "GenericClass":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/largeTupleTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(16)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array", "ArrayValidator", "Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/letConstMatchingParameterNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/letDeclarations2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/letKeepNamesOfTopLevelItems.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/libdtsFix.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/library_RegExpExecArraySlice.ts
semantic error: Unresolved references mismatch:
after transform: ["RegExpExecArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/listFailure.ts
semantic error: Missing SymbolId: "Editor"
Missing SymbolId: "_Editor"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "Buffer"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "ListRemoveEntry"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "ListMakeHead"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "ListMakeEntry"
Missing ReferenceId: "_Editor"
Missing ReferenceId: "Line"
Missing ReferenceId: "Editor"
Missing ReferenceId: "Editor"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(19)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5), SymbolId(8), SymbolId(10), SymbolId(13), SymbolId(17), SymbolId(18)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(12), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Buffer":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(7)]
Symbol reference IDs mismatch for "ListRemoveEntry":
after transform: SymbolId(5): [ReferenceId(31)]
rebuilt        : SymbolId(7): [ReferenceId(10), ReferenceId(18)]
Symbol reference IDs mismatch for "ListMakeHead":
after transform: SymbolId(8): [ReferenceId(0)]
rebuilt        : SymbolId(9): [ReferenceId(2), ReferenceId(12)]
Symbol reference IDs mismatch for "ListMakeEntry":
after transform: SymbolId(10): [ReferenceId(25)]
rebuilt        : SymbolId(10): [ReferenceId(14), ReferenceId(16)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(13): [ReferenceId(2), ReferenceId(4), ReferenceId(10), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(29)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(17): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(15): [ReferenceId(3), ReferenceId(20)]

tasks/coverage/typescript/tests/cases/compiler/literalWideningWithCompoundLikeAssignments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["empty", "foo", "literalUnion", "numLiteral", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["empty", "foo", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "numLiteral":
after transform: SymbolId(2) "numLiteral"
rebuilt        : <None>
Reference symbol mismatch for "literalUnion":
after transform: SymbolId(12) "literalUnion"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math"]
rebuilt        : ["Math", "literalUnion", "numLiteral"]

tasks/coverage/typescript/tests/cases/compiler/localAliasExportAssignment.ts
semantic error: Missing SymbolId: "connect"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "connect":
after transform: SymbolId(0) "connect"
rebuilt        : SymbolId(0) "connect"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/localClassesInLoop.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/localClassesInLoop_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/localImportNameVsGlobalName.ts
semantic error: Missing SymbolId: "Keyboard"
Missing SymbolId: "_Keyboard"
Missing ReferenceId: "_Keyboard"
Missing ReferenceId: "Key"
Missing ReferenceId: "Keyboard"
Missing ReferenceId: "Keyboard"
Missing SymbolId: "App"
Missing SymbolId: "_App"
Missing ReferenceId: "_App"
Missing ReferenceId: "foo"
Missing ReferenceId: "App"
Missing ReferenceId: "App"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(10)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["DOWN", "Key", "LEFT", "RIGHT", "UP"]
rebuilt        : ScopeId(2): ["Key"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["Key", "_App", "foo"]
rebuilt        : ScopeId(3): ["_App", "foo"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Key":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Key":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(10)]
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(8): [ReferenceId(2), ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(6): [ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
Reference symbol mismatch for "Key":
after transform: SymbolId(7) "Key"
rebuilt        : <None>
Reference symbol mismatch for "Key":
after transform: SymbolId(7) "Key"
rebuilt        : <None>
Reference symbol mismatch for "Key":
after transform: SymbolId(7) "Key"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Key"]

tasks/coverage/typescript/tests/cases/compiler/localTypeParameterInferencePriority.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "Table":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(17), ReferenceId(22), ReferenceId(25)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Array", "Pick", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/m7Bugs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(3): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/mapConstructor.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable", "Map"]
rebuilt        : ["Map"]

tasks/coverage/typescript/tests/cases/compiler/mapConstructorOnReadonlyTuple.ts
semantic error: Unresolved references mismatch:
after transform: ["Map", "WeakMap", "const"]
rebuilt        : ["Map", "WeakMap"]

tasks/coverage/typescript/tests/cases/compiler/mapGroupBy.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved reference IDs mismatch for "Set":
after transform: [ReferenceId(4), ReferenceId(6)]
rebuilt        : [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/mapOnTupleTypes02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mappedArrayTupleIntersections.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mappedToToIndexSignatureInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "a", "fn", "x"]
rebuilt        : ScopeId(0): ["E", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(10), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(7)]
Reference symbol mismatch for "fn":
after transform: SymbolId(0) "fn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "enumValues"]
rebuilt        : ["a", "enumValues", "fn"]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeAndIndexSignatureRelation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["PropertyKey", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeCircularReferenceInAccessor.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeContextualTypesApplied.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericIndexedAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["console", "require", "true"]
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericInstantiationPreservesHomomorphism.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeGenericInstantiationPreservesInlineForm.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Unresolved references mismatch:
after transform: ["Record", "Required"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceAliasSubstitution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceCircularity.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["h"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "h":
after transform: SymbolId(5) "h"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(5) "h"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["h"]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeInferenceToMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Base"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeMultiInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeNestedGenericInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeOverArrayWithBareAnyRestCanBeUsedAsRestParam1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeParameterConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mappedTypePartialConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "MyClass":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mappedTypePartialNonHomomorphicBaseConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeRecursiveInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeTupleConstraintAssignability.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Readonly", "TupleSchema", "ZodEnum"]
rebuilt        : ["TupleSchema"]

tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithAsClauseAndLateBoundProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mappedTypeWithNameClauseAppliedToArrayType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(5) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["doArrayStuff"]
rebuilt        : ["doArrayStuff", "x"]

tasks/coverage/typescript/tests/cases/compiler/memberAccessMustUseModuleInstances.ts
semantic error: Symbol reference IDs mismatch for "Promise":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/memberVariableDeclarations1.ts
semantic error: Symbol reference IDs mismatch for "Employee":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Employee2":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/mergeMultipleInterfacesReexported.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["EventList", "p012", "t"]
rebuilt        : ScopeId(0): ["t"]
Reference symbol mismatch for "p012":
after transform: SymbolId(1) "p012"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["p012"]

tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mergedDeclarations6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./a", "A", "B"]
rebuilt        : ScopeId(0): ["A", "B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/mergedEnumDeclarationCodeGen.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E", "c"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol redeclarations mismatch for "E":
after transform: SymbolId(0): [Span { start: 33, end: 34 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mergedInstantiationAssignment.ts
semantic error: Symbol reference IDs mismatch for "GenericObject":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "GenericObjectWithoutSetter":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol reference IDs mismatch for "NormalObject":
after transform: SymbolId(7): [ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(5): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/mergedInterfaceFromMultipleFiles1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing SymbolId: "Y"
Missing SymbolId: "_Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "Y"
Missing SymbolId: "_Y2"
Missing ReferenceId: "_Y2"
Missing ReferenceId: "B"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(7)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(5): [SymbolId(6), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(9)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): []
rebuilt        : SymbolId(9): [ReferenceId(8)]

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen2.ts
semantic error: Missing SymbolId: "my"
Missing SymbolId: "_my"
Missing SymbolId: "data"
Missing SymbolId: "_data"
Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "_foo"
Missing ReferenceId: "buz"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "_data"
Missing ReferenceId: "_data"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_my"
Missing ReferenceId: "_my"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Missing SymbolId: "_my2"
Missing SymbolId: "data"
Missing SymbolId: "_data2"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_my2"
Missing ReferenceId: "_my2"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(9)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(10)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(11)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "buz":
after transform: SymbolId(3): []
rebuilt        : SymbolId(6): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen3.ts
semantic error: Missing SymbolId: "my"
Missing SymbolId: "_my"
Missing SymbolId: "data"
Missing SymbolId: "_data"
Missing ReferenceId: "_data"
Missing ReferenceId: "buz"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_my"
Missing ReferenceId: "_my"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Missing SymbolId: "_my2"
Missing SymbolId: "data"
Missing SymbolId: "_data2"
Missing SymbolId: "foo"
Missing SymbolId: "_foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "foo"
Missing ReferenceId: "_data2"
Missing ReferenceId: "_data2"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_my2"
Missing ReferenceId: "_my2"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(9)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(10)]
rebuilt        : ScopeId(4): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(4), SymbolId(11)]
rebuilt        : ScopeId(5): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(12)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "buz":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen4.ts
semantic error: Missing SymbolId: "superContain"
Missing SymbolId: "_superContain"
Missing SymbolId: "contain"
Missing SymbolId: "_contain"
Missing SymbolId: "my"
Missing SymbolId: "_my"
Missing SymbolId: "buz"
Missing SymbolId: "_buz"
Missing SymbolId: "data"
Missing SymbolId: "_data"
Missing ReferenceId: "_data"
Missing ReferenceId: "foo"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_buz"
Missing ReferenceId: "_buz"
Missing ReferenceId: "buz"
Missing ReferenceId: "buz"
Missing ReferenceId: "_my"
Missing ReferenceId: "_my"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Missing ReferenceId: "_contain"
Missing ReferenceId: "_contain"
Missing SymbolId: "_my2"
Missing SymbolId: "buz"
Missing SymbolId: "_buz2"
Missing SymbolId: "data"
Missing SymbolId: "_data2"
Missing ReferenceId: "_data2"
Missing ReferenceId: "bar"
Missing ReferenceId: "data"
Missing ReferenceId: "data"
Missing ReferenceId: "_buz2"
Missing ReferenceId: "_buz2"
Missing ReferenceId: "buz"
Missing ReferenceId: "buz"
Missing ReferenceId: "_my2"
Missing ReferenceId: "_my2"
Missing ReferenceId: "my"
Missing ReferenceId: "my"
Missing ReferenceId: "_contain"
Missing ReferenceId: "_contain"
Missing ReferenceId: "contain"
Missing ReferenceId: "contain"
Missing ReferenceId: "_superContain"
Missing ReferenceId: "_superContain"
Missing ReferenceId: "superContain"
Missing ReferenceId: "superContain"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(13)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(14)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(15)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(16)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(17)]
rebuilt        : ScopeId(5): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(6), SymbolId(18)]
rebuilt        : ScopeId(7): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(7), SymbolId(19)]
rebuilt        : ScopeId(8): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(8), SymbolId(20)]
rebuilt        : ScopeId(9): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(5): []
rebuilt        : SymbolId(10): [ReferenceId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(8): []
rebuilt        : SymbolId(16): [ReferenceId(16)]

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationCodeGen5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/mergedModuleDeclarationWithSharedExportedVar.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromAlias.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "_defineProperty", "annotation"]
rebuilt        : ScopeId(0): ["ClassA", "_defineProperty", "annotation"]
Symbol reference IDs mismatch for "annotation":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["PropertyDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromAlias2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ClassA", "SomeClass", "_defineProperty", "annotation"]
rebuilt        : ScopeId(0): ["ClassA", "_defineProperty", "annotation"]
Symbol reference IDs mismatch for "annotation":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["PropertyDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/metadataOfClassFromModule.ts
semantic error: Missing SymbolId: "MyModule"
Missing SymbolId: "_MyModule"
Missing ReferenceId: "_MyModule"
Missing ReferenceId: "inject"
Missing ReferenceId: "_MyModule"
Missing ReferenceId: "Leg"
Missing ReferenceId: "_MyModule"
Missing ReferenceId: "Person"
Missing ReferenceId: "MyModule"
Missing ReferenceId: "MyModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "inject":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol reference IDs mismatch for "Leg":
after transform: SymbolId(4): [ReferenceId(1)]
rebuilt        : SymbolId(6): [ReferenceId(4)]
Symbol reference IDs mismatch for "Person":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/metadataOfEventAlias.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/metadataOfStringLiteral.ts
semantic error: Symbol reference IDs mismatch for "PropDeco":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/metadataOfUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(5): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "PropDeco":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(27)]
rebuilt        : SymbolId(6): [ReferenceId(13)]
Unresolved references mismatch:
after transform: ["Object", "require", "true"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/metadataOfUnionWithNull.ts
semantic error: Symbol reference IDs mismatch for "PropDeco":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(3): [ReferenceId(11), ReferenceId(13)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(15)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Object", "require", "true"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/metadataReferencedWithinFilteredUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Class1", "Class2", "decorate"]
rebuilt        : ScopeId(0): ["Class2", "decorate"]

tasks/coverage/typescript/tests/cases/compiler/methodContainingLocalFunction.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "exhibitBug"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "E"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(8), SymbolId(14), SymbolId(19), SymbolId(23)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(10), SymbolId(14), SymbolId(19)]
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(20), SymbolId(27)]
rebuilt        : ScopeId(13): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(16): ["A", "E"]
rebuilt        : ScopeId(16): ["E"]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(0x0)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Symbol reference IDs mismatch for "exhibitBug":
after transform: SymbolId(20): []
rebuilt        : SymbolId(16): [ReferenceId(11)]
Symbol flags mismatch for "E":
after transform: SymbolId(23): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(19): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(28): [ReferenceId(14), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(20): [ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(18)]
Symbol reference IDs mismatch for "localFunction":
after transform: SymbolId(25): [ReferenceId(13)]
rebuilt        : SymbolId(21): []

tasks/coverage/typescript/tests/cases/compiler/methodSignatureDeclarationEmit1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/missingImportAfterModuleImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SubModule"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/missingSemicolonInModuleSpecifier.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/missingTypeArguments3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["linq"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mixedExports.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "M", "M1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mixedTypeEnumComparison.ts
semantic error: Missing ReferenceId: "E2"
Bindings mismatch:
after transform: ScopeId(0): ["E", "E2", "someNumber", "someString", "unionOfEnum"]
rebuilt        : ScopeId(0): ["E", "E2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["E", "N1", "N2", "S1", "S2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["C1", "E2", "N1", "S1"]
rebuilt        : ScopeId(5): ["E2"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(28)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
Symbol flags mismatch for "E2":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E2":
after transform: SymbolId(13): [ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34)]
rebuilt        : SymbolId(3): [ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26)]
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "unionOfEnum":
after transform: SymbolId(6) "unionOfEnum"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someString":
after transform: SymbolId(7) "someString"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Reference symbol mismatch for "someNumber":
after transform: SymbolId(5) "someNumber"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["someValue"]
rebuilt        : ["someNumber", "someString", "unionOfEnum"]

tasks/coverage/typescript/tests/cases/compiler/mixinIntersectionIsValidbaseType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/mixinOverMappedTypeNoCrash.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/mixingApparentTypeOverrides.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/mixingFunctionAndAmbientModule1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/modFunctionCrash.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_NoErrorDuplicateLibOptions2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/modularizeLibrary_TargetES5UsingES6Lib.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "console", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
rebuilt        : ScopeId(0): ["Baz", "_asyncToGenerator", "_out", "f", "gen", "gen2", "m", "o", "o1", "out", "p", "reg", "s", "str", "t"]
Reference symbol mismatch for "console":
after transform: SymbolId(15) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "require"]
rebuilt        : ["Array", "Map", "Math", "Promise", "Proxy", "Reflect", "RegExp", "Symbol", "arguments", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/moduleAliasAsFunctionArgument.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/moduleAliasInterface.ts
semantic error: Missing SymbolId: "_modes"
Missing SymbolId: "_modes2"
Missing ReferenceId: "_modes2"
Missing ReferenceId: "Mode"
Missing ReferenceId: "_modes"
Missing ReferenceId: "_modes"
Missing SymbolId: "editor"
Missing SymbolId: "_editor"
Missing ReferenceId: "editor"
Missing ReferenceId: "editor"
Missing SymbolId: "modesOuter"
Missing SymbolId: "editor2"
Missing SymbolId: "_editor2"
Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "Bar"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "editor2"
Missing ReferenceId: "editor2"
Missing SymbolId: "A1"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A1C1"
Missing ReferenceId: "A1"
Missing ReferenceId: "A1"
Missing SymbolId: "B1"
Missing SymbolId: "_B"
Missing ReferenceId: "B1"
Missing ReferenceId: "B1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(10), SymbolId(11), SymbolId(21), SymbolId(24)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(10), SymbolId(11), SymbolId(23), SymbolId(26)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(28)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(4): ["Bug", "_editor", "i", "modes"]
rebuilt        : ScopeId(3): ["Bug", "_editor", "i"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(12), SymbolId(13), SymbolId(16), SymbolId(18), SymbolId(30)]
rebuilt        : ScopeId(7): [SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(17), SymbolId(31)]
rebuilt        : ScopeId(10): [SymbolId(18), SymbolId(19)]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(15): [SymbolId(23), SymbolId(32)]
rebuilt        : ScopeId(14): [SymbolId(24), SymbolId(25)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(14): [ScopeId(15)]
Bindings mismatch:
after transform: ScopeId(18): ["A1Alias1", "_B", "c", "i"]
rebuilt        : ScopeId(16): ["_B", "c", "i"]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Symbol reference IDs mismatch for "Mode":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(17): []
rebuilt        : SymbolId(19): [ReferenceId(8)]
Symbol reference IDs mismatch for "A1C1":
after transform: SymbolId(23): []
rebuilt        : SymbolId(25): [ReferenceId(14)]
Reference symbol mismatch for "_modes":
after transform: SymbolId(0) "_modes"
rebuilt        : SymbolId(0) "_modes"
Unresolved references mismatch:
after transform: ["Foo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X", "z", "z2"]
rebuilt        : ScopeId(0): ["z", "z2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X", "z", "z2"]
rebuilt        : ScopeId(0): ["z", "z2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/moduleAndInterfaceSharingName4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["D3"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["D3"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationCollidingNamesInAugmentation1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDeclarationEmit1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDeclarationEmit2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesInterfaceMergeOfReexport.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesNamespaceEnumMergeOfReexport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Root"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDoesNamespaceMergeOfReexport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Root"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationDuringSyntheticDefaultCheck.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_moment", "moment", "moment-timezone"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendAmbientModule1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendAmbientModule2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendFileModule1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationExtendFileModule2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationGlobal4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./f1", "A", "B"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports4.ts
semantic error: Missing SymbolId: "I"
Missing SymbolId: "C"
Bindings mismatch:
after transform: ScopeId(0): ["./f1", "A", "B", "C", "I", "N"]
rebuilt        : ScopeId(0): ["A", "C", "I"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports5.ts
semantic error: Missing SymbolId: "I"
Missing SymbolId: "C"
Bindings mismatch:
after transform: ScopeId(0): ["./f1", "A", "B", "C", "I", "N"]
rebuilt        : ScopeId(0): ["A", "C", "I"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationImportsAndExports6.ts
semantic error: Missing SymbolId: "I"
Missing SymbolId: "C"
Bindings mismatch:
after transform: ScopeId(0): ["./f1", "A", "B", "C", "I", "N"]
rebuilt        : ScopeId(0): ["A", "C", "I"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationInAmbientModule4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Observable", "x"]
rebuilt        : ScopeId(0): ["x"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationNoNewNames.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./observable", "Observable"]
rebuilt        : ScopeId(0): ["Observable"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationOfAlias.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "I":
after transform: SymbolId(0) "I"
rebuilt        : <None>
Reference flags mismatch for "I":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["I"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsBundledOutput1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./m1", "Cls"]
rebuilt        : ScopeId(0): ["Cls"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./a", "A", "Cls"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./a", "A", "Cls"]
rebuilt        : ScopeId(0): ["A"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleAugmentationsImports4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]

tasks/coverage/typescript/tests/cases/compiler/moduleCodeGenTest3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleCodeGenTest5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(7): ["A", "E1"]
rebuilt        : ScopeId(9): ["E1"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(9): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(8): ["B", "E2"]
rebuilt        : ScopeId(10): ["E2"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode)
rebuilt        : ScopeId(10): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(9): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/moduleCodegenTest4.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleDeclarationExportStarShadowingGlobalIsNameable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleIdentifiers.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleImportedForTypeArgumentPosition.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleLocalImportNotIncorrectlyRedirected.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ISpinButton"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleMemberWithoutTypeAnnotation1.ts
semantic error: Missing SymbolId: "TypeScript"
Missing SymbolId: "_TypeScript"
Missing SymbolId: "Parser"
Missing SymbolId: "_Parser"
Missing ReferenceId: "Parser"
Missing ReferenceId: "Parser"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "TypeScript"
Missing ReferenceId: "TypeScript"
Missing SymbolId: "_TypeScript2"
Missing ReferenceId: "_TypeScript2"
Missing ReferenceId: "PositionedElement"
Missing ReferenceId: "_TypeScript2"
Missing ReferenceId: "PositionedToken"
Missing ReferenceId: "TypeScript"
Missing ReferenceId: "TypeScript"
Missing SymbolId: "_TypeScript3"
Missing ReferenceId: "_TypeScript3"
Missing ReferenceId: "SyntaxNode"
Missing ReferenceId: "TypeScript"
Missing ReferenceId: "TypeScript"
Missing SymbolId: "_TypeScript4"
Missing SymbolId: "Syntax"
Missing SymbolId: "_Syntax"
Missing ReferenceId: "_Syntax"
Missing ReferenceId: "childIndex"
Missing ReferenceId: "_Syntax"
Missing ReferenceId: "VariableWidthTokenWithTrailingTrivia"
Missing ReferenceId: "Syntax"
Missing ReferenceId: "Syntax"
Missing ReferenceId: "_TypeScript4"
Missing ReferenceId: "_TypeScript4"
Missing ReferenceId: "TypeScript"
Missing ReferenceId: "TypeScript"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(24)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(25)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(7), SymbolId(26)]
rebuilt        : ScopeId(5): [SymbolId(5), SymbolId(6), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8)]
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(11), SymbolId(27)]
rebuilt        : ScopeId(10): [SymbolId(12), SymbolId(13)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(18), SymbolId(28)]
rebuilt        : ScopeId(14): [SymbolId(20), SymbolId(21)]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(17): [SymbolId(19), SymbolId(20), SymbolId(29)]
rebuilt        : ScopeId(15): [SymbolId(22), SymbolId(23), SymbolId(24)]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Symbol reference IDs mismatch for "PositionedElement":
after transform: SymbolId(5): [ReferenceId(3)]
rebuilt        : SymbolId(6): [ReferenceId(8)]
Symbol reference IDs mismatch for "PositionedToken":
after transform: SymbolId(7): []
rebuilt        : SymbolId(8): [ReferenceId(10)]
Symbol reference IDs mismatch for "SyntaxNode":
after transform: SymbolId(11): []
rebuilt        : SymbolId(13): [ReferenceId(15)]
Symbol reference IDs mismatch for "childIndex":
after transform: SymbolId(19): []
rebuilt        : SymbolId(23): [ReferenceId(19)]
Symbol reference IDs mismatch for "VariableWidthTokenWithTrailingTrivia":
after transform: SymbolId(20): []
rebuilt        : SymbolId(24): [ReferenceId(24)]
Unresolved references mismatch:
after transform: ["ISyntaxToken", "PositionedElement", "PositionedToken", "Syntax", "SyntaxNode"]
rebuilt        : ["PositionedToken", "Syntax"]
Unresolved reference IDs mismatch for "PositionedToken":
after transform: [ReferenceId(5), ReferenceId(9)]
rebuilt        : [ReferenceId(20)]

tasks/coverage/typescript/tests/cases/compiler/moduleMemberWithoutTypeAnnotation2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleMerge.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "B"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(4): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/moduleMergeConstructor.ts
semantic error: Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduleNoEmit.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1)]
rebuilt        : ScopeId(1): [SymbolId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/moduleNodeImportRequireEmit.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/moduleOuterQualification.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["outer"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["outer"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/modulePreserve1.ts
semantic error: Missing SymbolId: "B"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "B":
after transform: SymbolId(1) "B"
rebuilt        : SymbolId(1) "B"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/modulePreserve2.ts
semantic error: Missing SymbolId: "cjs"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["cjs", "esm"]
rebuilt        : ScopeId(0): ["cjs"]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/modulePreserve5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["data1", "data2"]
rebuilt        : ScopeId(0): ["data2"]

tasks/coverage/typescript/tests/cases/compiler/modulePreserveImportHelpers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "dec"]
rebuilt        : ScopeId(0): ["A"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/compiler/moduleRedifinitionErrors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 19, end: 20 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleReopenedTypeOtherBlock.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C1"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "C2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["I"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/moduleReopenedTypeSameBlock.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C1"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "C2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionAsTypeReferenceDirective.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a2"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionAsTypeReferenceDirectiveAmbient.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a2"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionNoResolve.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionPackageIdWithRelativeAndAbsolutePath.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["makeSharedOption", "t"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_notSupported3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["jsx"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_unexpected2.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_withAmbientPresent.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithExtensions_withPaths.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["relative", "relative2", "test", "test2"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithRequire.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo", "require"]
rebuilt        : ScopeId(0): ["foo"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithRequireAndImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "foo", "require"]
rebuilt        : ScopeId(0): ["a", "foo"]
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Reference symbol mismatch for "require":
after transform: SymbolId(0) "require"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_empty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_notSpecified.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_oneBlank.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_dirModuleWithIndex.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModulePath.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["iosfoo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalModule_withPaths.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios", "ios2", "ios3"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_externalTSModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_one_jsModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ios"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["native"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSuffixes_threeLastIsBlank3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["base"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSymlinks.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "MyClass2", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]

tasks/coverage/typescript/tests/cases/compiler/moduleResolutionWithSymlinks_withOutDir.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyClass", "MyClass2", "x", "y"]
rebuilt        : ScopeId(0): ["x", "y"]

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_classicPrefersTs.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_explicitNodeModulesImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_explicitNodeModulesImport_implicitAny.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["y"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_notAtPackageRoot.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_notAtPackageRoot_fakeScopedPackage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_scopedPackage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_fakeScopedPackage.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_packageJson_yesAtPackageRoot_mainFieldInSubDirectory.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleResolution_relativeImportJsFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleSameValueDuplicateExportedBindings2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Animals", "Cat", "Dog"]
rebuilt        : ScopeId(1): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Animals":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/moduleScopingBug.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(5): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt.ts
semantic error: Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["M", "_M2", "bar"]
rebuilt        : ScopeId(5): ["_M2", "bar"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(6): []
rebuilt        : SymbolId(9): [ReferenceId(9)]
Reference symbol mismatch for "M":
after transform: SymbolId(5) "M"
rebuilt        : SymbolId(7) "M"

tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt2.ts
semantic error: Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["M", "_M2", "bar"]
rebuilt        : ScopeId(5): ["_M2", "bar"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(6): []
rebuilt        : SymbolId(9): [ReferenceId(9)]
Reference symbol mismatch for "M":
after transform: SymbolId(5) "M"
rebuilt        : SymbolId(7) "M"

tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt4.ts
semantic error: Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(6), SymbolId(10)]
rebuilt        : ScopeId(5): [SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(6): []
rebuilt        : SymbolId(9): [ReferenceId(9)]
Reference symbol mismatch for "M":
after transform: SymbolId(5) "M"
rebuilt        : SymbolId(7) "M"

tasks/coverage/typescript/tests/cases/compiler/moduleSharesNameWithImportDeclarationInsideIt6.ts
semantic error: Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "bar"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(4): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["M", "_M2", "bar"]
rebuilt        : ScopeId(5): ["_M2", "bar"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(6): []
rebuilt        : SymbolId(9): [ReferenceId(9)]

tasks/coverage/typescript/tests/cases/compiler/moduleSymbolMerging.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/moduleUnassignedVariable.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleVariables.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleVisibilityTest1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/moduleWithTryStatement1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Reference symbol mismatch for "M":
after transform: <None>
rebuilt        : SymbolId(0) "M"
Unresolved references mismatch:
after transform: ["M"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/module_augmentUninstantiatedModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/module_augmentUninstantiatedModule2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ng"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ng":
after transform: SymbolId(0) "ng"
rebuilt        : <None>
Unresolved reference IDs mismatch for "ng":
after transform: [ReferenceId(0)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/moduledecl.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/multiCallOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/compiler/multiExtendsSplitInterfaces2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/multiImportExport.ts
semantic error: Missing SymbolId: "Drawing"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "Drawing":
after transform: SymbolId(0) "Drawing"
rebuilt        : SymbolId(0) "Drawing"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/multiModuleClodule1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/multiModuleFundule1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/multiSignatureTypeInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ok1", "ok2", "ok3", "ok4", "ok5", "ok6"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "f1", "f2", "f3"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/multipleInferenceContexts.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Moon", "r2"]
rebuilt        : ScopeId(0): ["r2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "Moon":
after transform: SymbolId(7) "Moon"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ThisType"]
rebuilt        : ["Moon"]

tasks/coverage/typescript/tests/cases/compiler/mutrec.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveGenericBaseTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveGenericBaseTypes2.ts
semantic error: Symbol reference IDs mismatch for "foo2":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveInference.ts
semantic error: Symbol reference IDs mismatch for "X":
after transform: SymbolId(4): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/mutuallyRecursiveInterfaceDeclaration.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nameCollisionWithBlockScopedVariable1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4)]
rebuilt        : ScopeId(3): [SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/namedFunctionExpressionInModule.ts
semantic error: Missing SymbolId: "Variables"
Missing SymbolId: "_Variables"
Missing ReferenceId: "Variables"
Missing ReferenceId: "Variables"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/namespaces1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X", "x", "x2"]
rebuilt        : ScopeId(0): ["x", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/namespaces2.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "B"
Missing SymbolId: "_B"
Missing ReferenceId: "_B"
Missing ReferenceId: "C"
Missing ReferenceId: "B"
Missing ReferenceId: "B"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : SymbolId(0) "A"
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/namespacesDeclaration1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/namespacesWithTypeAliasOnlyExportsMerge.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Q", "Q2", "Q3", "Q4", "try1", "try2", "try3", "try4"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Q", "Q2", "Q3", "Q4"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/narrowByBooleanComparison.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30)]
Symbol reference IDs mismatch for "ACTOR_TYPE":
after transform: SymbolId(16): [ReferenceId(46), ReferenceId(50)]
rebuilt        : SymbolId(13): [ReferenceId(43)]
Unresolved references mismatch:
after transform: ["Array", "Error", "Function", "URIError", "console", "require"]
rebuilt        : ["Array", "Error", "URIError", "console", "require"]

tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Unresolved reference IDs mismatch for "RegExp":
after transform: [ReferenceId(25), ReferenceId(30)]
rebuilt        : [ReferenceId(19)]

tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(15), ScopeId(18), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(9), ScopeId(12), ScopeId(17)]

tasks/coverage/typescript/tests/cases/compiler/narrowByClauseExpressionInSwitchTrue9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/narrowByInstanceof.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(15), ScopeId(17)]
Symbol reference IDs mismatch for "Person":
after transform: SymbolId(16): [ReferenceId(28), ReferenceId(33), ReferenceId(39)]
rebuilt        : SymbolId(11): [ReferenceId(19)]
Symbol reference IDs mismatch for "Car":
after transform: SymbolId(17): [ReferenceId(34)]
rebuilt        : SymbolId(12): []

tasks/coverage/typescript/tests/cases/compiler/narrowByParenthesizedSwitchExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/narrowBySwitchDiscriminantUndefinedCase1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Error", "Math", "const", "undefined"]
rebuilt        : ["Error", "Math", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/narrowTypeByInstanceof.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "Match":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(11)]
Symbol reference IDs mismatch for "FileMatch":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/narrowedImports.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Reference symbol mismatch for "b1":
after transform: SymbolId(4) "b1"
rebuilt        : SymbolId(4) "b1"
Reference symbol mismatch for "b1":
after transform: SymbolId(4) "b1"
rebuilt        : SymbolId(4) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/narrowedImports_assumeInitialized.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/narrowingAssignmentReadonlyRespectsAssertion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "console"]
rebuilt        : ["Array", "console"]

tasks/coverage/typescript/tests/cases/compiler/narrowingByDiscriminantInLoop.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(11), ScopeId(15), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(10), ScopeId(13), ScopeId(17)]
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/narrowingByTypeofInSwitch.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(54), ScopeId(56), ScopeId(58), ScopeId(60), ScopeId(62), ScopeId(66)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(50), ScopeId(52), ScopeId(54), ScopeId(56), ScopeId(58), ScopeId(61)]
Scope children mismatch:
after transform: ScopeId(50): [ScopeId(51), ScopeId(52), ScopeId(53)]
rebuilt        : ScopeId(47): [ScopeId(48), ScopeId(49)]
Scope children mismatch:
after transform: ScopeId(62): [ScopeId(63), ScopeId(64), ScopeId(65)]
rebuilt        : ScopeId(58): [ScopeId(59), ScopeId(60)]
Unresolved references mismatch:
after transform: ["Function", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/narrowingConstrainedTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/narrowingDestructuring.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]

tasks/coverage/typescript/tests/cases/compiler/narrowingIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/narrowingNoInfer1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["NoInfer", "const", "require", "test2"]
rebuilt        : ["require", "test2"]

tasks/coverage/typescript/tests/cases/compiler/narrowingPastLastAssignmentInModule.ts
semantic error: Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/narrowingRestGenericCall.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_objectWithoutProperties", "call", "obj"]
rebuilt        : ScopeId(0): ["_excluded", "_objectWithoutProperties", "call"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "obj":
after transform: SymbolId(5) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["console", "require"]
rebuilt        : ["console", "obj", "require"]

tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofDiscriminant.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(11)]

tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofObject.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofUndefined1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/compiler/narrowingTypeofUndefined2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "takeArray"]
rebuilt        : ["takeArray"]

tasks/coverage/typescript/tests/cases/compiler/narrowingUnionToUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["TEST_CASES", "assertRelationIsNullOrStringArray", "broken", "check1", "check2", "example1", "example2", "example3", "f1", "f1x", "f2", "fx1", "fx10", "fx2", "fx3", "fx4", "fx5", "isEmpty", "test", "test1", "test3", "v1", "v2", "working", "workingAgain"]
rebuilt        : ScopeId(0): ["TEST_CASES", "assertRelationIsNullOrStringArray", "check1", "check2", "example1", "example2", "example3", "f1", "f1x", "f2", "fx1", "fx10", "fx2", "fx3", "fx4", "fx5", "isEmpty", "test", "test1", "test3", "v1", "v2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(38), ScopeId(41), ScopeId(46), ScopeId(49), ScopeId(54), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(80)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(23), ScopeId(26), ScopeId(31), ScopeId(34), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(57), ScopeId(60)]
Reference symbol mismatch for "working":
after transform: SymbolId(62) "working"
rebuilt        : <None>
Reference symbol mismatch for "working":
after transform: SymbolId(62) "working"
rebuilt        : <None>
Reference symbol mismatch for "working":
after transform: SymbolId(62) "working"
rebuilt        : <None>
Reference symbol mismatch for "broken":
after transform: SymbolId(63) "broken"
rebuilt        : <None>
Reference symbol mismatch for "broken":
after transform: SymbolId(63) "broken"
rebuilt        : <None>
Reference symbol mismatch for "broken":
after transform: SymbolId(63) "broken"
rebuilt        : <None>
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(64) "workingAgain"
rebuilt        : <None>
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(64) "workingAgain"
rebuilt        : <None>
Reference symbol mismatch for "workingAgain":
after transform: SymbolId(64) "workingAgain"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "X", "XS", "Y", "YS", "assert", "isA", "isEmptyArray", "isEmptyStrOrUndefined", "isEmptyString", "isFalsy", "isMaybeEmptyArray", "isMaybeEmptyString", "isMaybeZero", "isMyDiscriminatedUnion", "isXSorY", "isZero", "undefined"]
rebuilt        : ["assert", "broken", "isA", "isEmptyArray", "isEmptyStrOrUndefined", "isEmptyString", "isFalsy", "isMaybeEmptyArray", "isMaybeEmptyString", "isMaybeZero", "isMyDiscriminatedUnion", "isXSorY", "isZero", "undefined", "working", "workingAgain"]

tasks/coverage/typescript/tests/cases/compiler/narrowingUnionWithBang.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/nearbyIdenticalGenericLambdasAssignable.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fA", "fB", "fC"]
rebuilt        : ScopeId(0): ["fB", "fC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "fB":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(14), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(9), ReferenceId(15), ReferenceId(21)]
Symbol reference IDs mismatch for "fC":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(16), ReferenceId(22), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(11), ReferenceId(17), ReferenceId(23)]
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Reference symbol mismatch for "fA":
after transform: SymbolId(0) "fA"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["accA", "accB", "accC", "accL"]
rebuilt        : ["accA", "accB", "accC", "accL", "fA"]

tasks/coverage/typescript/tests/cases/compiler/nestedGenericConditionalTypeWithGenericImportType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nestedGenericSpreadInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/nestedGenerics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nestedHomomorphicMappedTypesWithArrayConstraint1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/nestedInfinitelyExpandedRecursiveTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nestedLoopWithOnlyInnerLetCaptured.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["doSomething"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "doSomething":
after transform: SymbolId(0) "doSomething"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["doSomething"]

tasks/coverage/typescript/tests/cases/compiler/nestedLoops.ts
semantic error: Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/nestedModulePrivateAccess.ts
semantic error: Missing SymbolId: "a"
Missing SymbolId: "_a"
Missing SymbolId: "b"
Missing SymbolId: "_b"
Missing ReferenceId: "b"
Missing ReferenceId: "b"
Missing ReferenceId: "a"
Missing ReferenceId: "a"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/nestedObjectRest.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_extends", "_objectDestructuringEmpty", "_ref", "_ref2", "x", "y"]
rebuilt        : ScopeId(0): ["_extends", "_objectDestructuringEmpty", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "x", "y"]
Bindings mismatch:
after transform: ScopeId(1): ["_ref3"]
rebuilt        : ScopeId(1): []
Bindings mismatch:
after transform: ScopeId(2): ["_ref4", "_ref5"]
rebuilt        : ScopeId(2): []
Symbol scope ID mismatch for "_ref3":
after transform: SymbolId(6): ScopeId(1)
rebuilt        : SymbolId(6): ScopeId(0)
Symbol scope ID mismatch for "_ref4":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(7): ScopeId(0)
Symbol scope ID mismatch for "_ref5":
after transform: SymbolId(8): ScopeId(2)
rebuilt        : SymbolId(8): ScopeId(0)

tasks/coverage/typescript/tests/cases/compiler/nestedSelf.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/nestedSuperCallEmit.ts
semantic error: Unresolved reference IDs mismatch for "Error":
after transform: [ReferenceId(1), ReferenceId(6)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/nestedThisContainer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/nestedTypeVariableInfersLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "direct", "hasZField", "nested", "nestedUnion"]
rebuilt        : ["direct", "hasZField", "nested", "nestedUnion"]

tasks/coverage/typescript/tests/cases/compiler/neverAsDiscriminantType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(14): ["DISPATCH", "GatewayOpcode", "HEARTBEAT", "HEARTBEAT_ACK", "HELLO", "IDENTIFY", "INVALID_SESSION", "PRESENCE_UPDATE", "RECONNECT", "REQUEST_GUILD_MEMBERS", "RESUME", "VOICE_STATE_UPDATE"]
rebuilt        : ScopeId(5): ["GatewayOpcode"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "GatewayOpcode":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "GatewayOpcode":
after transform: SymbolId(14): [ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(27), ReferenceId(28)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/compiler/newArrays.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/newExpressionWithTypeParameterConstrainedToOuterTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/newLineInTypeofInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["a"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/noAsConstNameLookup.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(8)]
Symbol reference IDs mismatch for "FeatureRunner":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["Promise", "const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/noBundledEmitFromNodeModules.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/noCircularDefinitionOnExportOfPrivateInMergedNamespace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "cat":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(1): SymbolFlags(Class | NameSpaceModule | Ambient)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(1): [Span { start: 61, end: 64 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionAndLocalVarInFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionAndLocalVarInLambda.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/noCollisionThisExpressionInFunctionAndVarInGlobal.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noConstraintInReturnType1.ts
semantic error: Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/noCrashOnThisTypeUsage.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/noCrashUMDMergedWithGlobalValue.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/noEmitHelpers2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "decorator"]
rebuilt        : ScopeId(0): ["A"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

tasks/coverage/typescript/tests/cases/compiler/noImplicitAnyDestructuringInPrivateMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noImplicitReturnsWithProtectedBlocks1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noIterationTypeErrorsInCFA.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noSubtypeReduction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/noUncheckedIndexAccess.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bacon", "Meat", "Sausage"]
rebuilt        : ScopeId(1): ["Meat"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "a", "b", "c"]
rebuilt        : ScopeId(2): ["A"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["B", "x", "y", "z"]
rebuilt        : ScopeId(3): ["B"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Meat":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Meat":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(21)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(15), ReferenceId(16)]
Symbol flags mismatch for "A":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "B":
after transform: SymbolId(16): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/noUsedBeforeDefinedErrorInTypeContext.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "qwe":
after transform: SymbolId(5): [ReferenceId(8)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/nodeModuleReexportFromDottedPath.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["EnhancedPrisma", "PrismaClient", "enhancePrisma"]
rebuilt        : ScopeId(0): ["EnhancedPrisma", "PrismaClient"]
Reference symbol mismatch for "enhancePrisma":
after transform: SymbolId(1) "enhancePrisma"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["enhancePrisma"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution1.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution2.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution3.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution4.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution5.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution6.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution7.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nodeResolution8.ts
semantic error: Missing SymbolId: "y"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nonConflictingRecursiveBaseTypeMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nonContextuallyTypedLogicalOr.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["result1", "result2", "thing"]
rebuilt        : ScopeId(0): ["result1", "result2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Reference symbol mismatch for "thing":
after transform: SymbolId(9) "thing"
rebuilt        : <None>
Reference symbol mismatch for "thing":
after transform: SymbolId(9) "thing"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["box", "createAndUnbox", "log", "map", "tap"]
rebuilt        : ["box", "createAndUnbox", "log", "map", "tap", "thing"]

tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["es", "filter", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "es":
after transform: SymbolId(22) "es"
rebuilt        : <None>
Reference symbol mismatch for "filter":
after transform: SymbolId(12) "filter"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReadonlyArray", "exists", "pipe"]
rebuilt        : ["es", "exists", "filter", "pipe"]

tasks/coverage/typescript/tests/cases/compiler/nonInferrableTypePropagation3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/nonNullMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/nonNullParameterExtendingStringAssignableToString.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/nonNullReferenceMatching.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["HTMLElement", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/nonNullableAndObjectIntersections.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/nonNullableReduction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(2): []

tasks/coverage/typescript/tests/cases/compiler/nonNullableReductionNonStrict.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(2): []

tasks/coverage/typescript/tests/cases/compiler/nonNullableWithNullableGenericIndexedAccessArg.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable", "StateNode"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/nondistributiveConditionalTypeInfer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/nongenericConditionalNotPartiallyComputed.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/nongenericPartialInstantiationsRelatedInBothDirections.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["cafoo", "cfoo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "cfoo":
after transform: SymbolId(4) "cfoo"
rebuilt        : <None>
Reference symbol mismatch for "cafoo":
after transform: SymbolId(3) "cafoo"
rebuilt        : <None>
Reference symbol mismatch for "cafoo":
after transform: SymbolId(3) "cafoo"
rebuilt        : <None>
Reference symbol mismatch for "cfoo":
after transform: SymbolId(4) "cfoo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["cafoo", "cfoo"]

tasks/coverage/typescript/tests/cases/compiler/nonnullAssertionPropegatesContextualType.ts
semantic error: Unresolved references mismatch:
after transform: ["SVGRectElement", "document"]
rebuilt        : ["document"]

tasks/coverage/typescript/tests/cases/compiler/nounusedTypeParameterConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/numberAssignableToEnumInsideUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/numericEnumMappedType.ts
semantic error: Missing ReferenceId: "N1"
Missing ReferenceId: "N1"
Missing ReferenceId: "N2"
Missing ReferenceId: "N2"
Bindings mismatch:
after transform: ScopeId(0): ["E", "E1", "E2", "N1", "N2", "b1", "b2", "e", "e1", "e2", "x"]
rebuilt        : ScopeId(0): ["E1", "N1", "N2", "b1", "b2", "e", "e1", "e2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["E1", "ONE", "THREE", "TWO"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "N1"]
rebuilt        : ScopeId(2): ["N1"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["C", "D", "N2"]
rebuilt        : ScopeId(3): ["N2"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5), ReferenceId(32)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8)]
Symbol flags mismatch for "N1":
after transform: SymbolId(16): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "N1":
after transform: SymbolId(16): [ReferenceId(18), ReferenceId(38)]
rebuilt        : SymbolId(6): [ReferenceId(23)]
Symbol reference IDs mismatch for "N1":
after transform: SymbolId(31): [ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37)]
rebuilt        : SymbolId(7): [ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22)]
Symbol flags mismatch for "N2":
after transform: SymbolId(19): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "N2":
after transform: SymbolId(19): [ReferenceId(19), ReferenceId(44)]
rebuilt        : SymbolId(8): [ReferenceId(31)]
Symbol reference IDs mismatch for "N2":
after transform: SymbolId(32): [ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43)]
rebuilt        : SymbolId(9): [ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30)]
Reference symbol mismatch for "E2":
after transform: SymbolId(4) "E2"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(24) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["val"]
rebuilt        : ["E", "E2"]

tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint3.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/numericIndexerConstraint4.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/objectAssignLikeNonUnionResult.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "data1":
after transform: SymbolId(6): [ReferenceId(13), ReferenceId(17)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/objectBindingPatternContextuallyTypesArgument.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/objectCreate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "e", "n", "o", "t", "u", "union"]
rebuilt        : ScopeId(0): ["a", "e", "n", "o", "t", "u"]
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "union"]

tasks/coverage/typescript/tests/cases/compiler/objectCreate2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "e", "n", "o", "t", "u", "union"]
rebuilt        : ScopeId(0): ["a", "e", "n", "o", "t", "u"]
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Reference symbol mismatch for "union":
after transform: SymbolId(0) "union"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : ["Object", "union"]

tasks/coverage/typescript/tests/cases/compiler/objectIndexer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/objectInstantiationFromUnionSpread.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["require", "true"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/objectLitGetterSetter.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "PropertyDescriptor", "eval"]
rebuilt        : ["Object", "eval"]

tasks/coverage/typescript/tests/cases/compiler/objectLiteralArraySpecialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/objectLiteralEnumPropertyNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Strs"]
rebuilt        : ScopeId(1): ["Strs"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "Nums"]
rebuilt        : ScopeId(2): ["Nums"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "Strs":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Strs":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
Symbol flags mismatch for "Nums":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/objectLiteralIndexerNoImplicitAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/objectLiteralIndexers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/objectMembersOnTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "AAA":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/objectRestBindingContextualInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectWithoutProperties", "_setupImages", "prepare", "rest", "test"]
rebuilt        : ScopeId(0): ["_objectWithoutProperties", "_setupImages", "prepare", "rest"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "test":
after transform: SymbolId(13) "test"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["File", "require", "setupImages"]
rebuilt        : ["require", "setupImages", "test"]

tasks/coverage/typescript/tests/cases/compiler/objectRestSpread.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_extends", "_obj", "_objectDestructuringEmpty", "_objectSpread", "_objectWithoutProperties", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "_ref6", "_toPropertyKey", "_wrapAsyncGenerator", "fn", "more", "nestedProp", "nestedRest", "obj", "other", "prop", "props", "test"]
rebuilt        : ScopeId(0): ["_excluded", "_extends", "_objectDestructuringEmpty", "_objectSpread", "_objectWithoutProperties", "_ref", "_ref2", "_ref3", "_ref4", "_ref5", "_ref6", "_toPropertyKey", "_wrapAsyncGenerator", "fn", "more", "nestedProp", "nestedRest", "obj", "other", "prop", "props", "test"]
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Reference symbol mismatch for "_obj":
after transform: SymbolId(18) "_obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["_obj", "require"]

tasks/coverage/typescript/tests/cases/compiler/observableInferenceCanBeMade.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Observable", "from", "of"]
rebuilt        : ["from", "of"]

tasks/coverage/typescript/tests/cases/compiler/omitTypeTests01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Omit"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/optionalAccessorsInInterface1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/optionalChainWithInstantiationExpression2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/compiler/optionalConstructorArgInSuper.ts
semantic error: Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/optionalParameterRetainsNull.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/optionalTupleElementsAndUndefined.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/outModuleTripleSlashRefs.ts
semantic error: Unresolved references mismatch:
after transform: ["GlobalFoo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/overload2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/overloadBindingAcrossDeclarationBoundaries.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadBindingAcrossDeclarationBoundaries2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadCallTest.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/overloadCrash.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadEquivalenceWithStatics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadGenericFunctionWithRestArgs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(9): [ScopeId(10)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived3":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstConstraintChecks4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Z":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(4), ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstDuplicateOverloads1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInBaseWithBadImplementationInDerived.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInCallback1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInObjectLiteralImplementingAnInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstInheritance4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoNonSpecializedSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnConstNoStringImplementation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/overloadOnGenericArity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/overloadOnGenericClassAndNonGenericClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(9)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "X1":
after transform: SymbolId(5): [ReferenceId(1)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOverNonCTLambdas.ts
semantic error: Missing SymbolId: "Bugs"
Missing SymbolId: "_Bugs"
Missing ReferenceId: "Bugs"
Missing ReferenceId: "Bugs"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(9), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(10), SymbolId(12)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(14)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/overloadResolutionOverNonCTObjectLit.ts
semantic error: Missing SymbolId: "Bugs"
Missing SymbolId: "_Bugs"
Missing ReferenceId: "Bugs"
Missing ReferenceId: "Bugs"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadResolutionWithAny.ts
semantic error: Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/overloadRet.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadReturnTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "Accessor":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/overloadWithCallbacksWithDifferingOptionalityOnArgs.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/overloadedConstructorFixesInferencesAppropriately.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Exclude", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/overloadedStaticMethodSpecialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadingOnConstantsInImplementation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/overloadsAndTypeArgumentArity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/overloadsWithConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Number", "String", "f"]
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/overrideBaseIntersectionMethod.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(7): [ReferenceId(2), ReferenceId(8)]
rebuilt        : SymbolId(4): [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/parameterReferenceInInitializer1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/parameterReferencesOtherParameter1.ts
semantic error: Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/parameterReferencesOtherParameter2.ts
semantic error: Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/parenthesisDoesNotBlockAliasSymbolCreation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/parseEntityNameWithReservedWord.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bool", "false"]
rebuilt        : ScopeId(1): ["Bool"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Bool":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Bool":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/parseGenericArrowRatherThanLeftShift.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo"]
rebuilt        : ScopeId(0): ["b", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/parseJsxExtends1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/parseShortform.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/partialOfLargeAPIIsAbleToBeWorkedWith.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["keys", "obj", "obj2"]
rebuilt        : ScopeId(0): ["obj", "obj2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Reference symbol mismatch for "keys":
after transform: SymbolId(2) "keys"
rebuilt        : <None>
Reference symbol mismatch for "keys":
after transform: SymbolId(2) "keys"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : ["keys"]

tasks/coverage/typescript/tests/cases/compiler/partialTypeNarrowedToByTypeGuard.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/partiallyAmbientClodule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 59, end: 62 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 59, end: 62 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/partiallyAmbientFundule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 62, end: 65 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 62, end: 65 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/partiallyDiscriminantedUnions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Square":
after transform: SymbolId(5): [ReferenceId(9)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Circle":
after transform: SymbolId(6): [ReferenceId(8), ReferenceId(21)]
rebuilt        : SymbolId(3): []
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(11), ReferenceId(15)]
rebuilt        : [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution3_classic.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution3_node.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution4_classic.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution4_node.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution5_classic.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution5_node.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution6_classic.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution6_node.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution7_classic.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution7_node.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution8_classic.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution8_node.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_differentRootTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar1", "bar2", "bar3", "bar4", "bar5", "bar6", "bar7", "bar8", "bar9", "foo1", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_multipleAliases.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_aliasWithRoot_realRootFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_noAliasWithRoot.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_rootImport_noAliasWithRoot_realRootFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtensionInName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingBasedModuleResolution_withExtension_MapedToNodeModules.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foobar"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingInheritedBaseUrl.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingWithoutBaseUrl1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/pathMappingWithoutBaseUrl2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["p1"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/performanceComparisonOfStructurallyIdenticalInterfacesWithGenericSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(18), ScopeId(31), ScopeId(45)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(15)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(47): [ReferenceId(111), ReferenceId(116), ReferenceId(121), ReferenceId(126), ReferenceId(131), ReferenceId(136), ReferenceId(141), ReferenceId(146), ReferenceId(151), ReferenceId(156), ReferenceId(161), ReferenceId(166), ReferenceId(171)]
rebuilt        : SymbolId(3): []
Unresolved references mismatch:
after transform: ["PromiseLike", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/pickOfLargeObjectUnionWorks.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/preserveConstEnums.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "Value", "Value2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/prespecializedGenericMembers1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/primitiveTypeAsmoduleName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["string"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/primitiveUnionDetection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyAccessorDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateGetAccessorTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicGetAccessorTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateSetAccessorTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicSetAccessorTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPrivateModuleGetAccessorTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPrivateModuleSetAccessorTypes"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPrivateGetAccessorTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicGetAccessorTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPrivateSetAccessorTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicSetAccessorTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPrivateModuleGetAccessorTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPrivateModuleSetAccessorTypes"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(11), SymbolId(16), SymbolId(21), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(34), SymbolId(69)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(11), SymbolId(16), SymbolId(21), SymbolId(26), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(34), SymbolId(70)]
Binding symbols mismatch:
after transform: ScopeId(75): [SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(46), SymbolId(51), SymbolId(56), SymbolId(61), SymbolId(62), SymbolId(65), SymbolId(66), SymbolId(104)]
rebuilt        : ScopeId(75): [SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(47), SymbolId(52), SymbolId(57), SymbolId(62), SymbolId(63), SymbolId(66), SymbolId(67)]
Binding symbols mismatch:
after transform: ScopeId(150): [SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(81), SymbolId(86), SymbolId(91), SymbolId(96), SymbolId(97), SymbolId(100), SymbolId(101), SymbolId(105)]
rebuilt        : ScopeId(150): [SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(83), SymbolId(88), SymbolId(93), SymbolId(98), SymbolId(99), SymbolId(102), SymbolId(103)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(35): [ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103)]
rebuilt        : SymbolId(36): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(36): [ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107)]
rebuilt        : SymbolId(37): [ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateGetAccessorTypes":
after transform: SymbolId(37): []
rebuilt        : SymbolId(38): [ReferenceId(27)]
Symbol reference IDs mismatch for "publicClassWithWithPublicGetAccessorTypes":
after transform: SymbolId(38): []
rebuilt        : SymbolId(39): [ReferenceId(33)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateSetAccessorTypes":
after transform: SymbolId(41): []
rebuilt        : SymbolId(42): [ReferenceId(43)]
Symbol reference IDs mismatch for "publicClassWithWithPublicSetAccessorTypes":
after transform: SymbolId(46): []
rebuilt        : SymbolId(47): [ReferenceId(45)]
Symbol reference IDs mismatch for "publicClassWithPrivateModuleGetAccessorTypes":
after transform: SymbolId(61): []
rebuilt        : SymbolId(62): [ReferenceId(49)]
Symbol reference IDs mismatch for "publicClassWithPrivateModuleSetAccessorTypes":
after transform: SymbolId(62): []
rebuilt        : SymbolId(63): [ReferenceId(51)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(70): [ReferenceId(120), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(139), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(155), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163)]
rebuilt        : SymbolId(72): [ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(71): [ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(134), ReferenceId(135), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167)]
rebuilt        : SymbolId(73): [ReferenceId(57), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateGetAccessorTypes":
after transform: SymbolId(72): []
rebuilt        : SymbolId(74): [ReferenceId(63)]
Symbol reference IDs mismatch for "publicClassWithWithPublicGetAccessorTypes":
after transform: SymbolId(73): []
rebuilt        : SymbolId(75): [ReferenceId(69)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateSetAccessorTypes":
after transform: SymbolId(76): []
rebuilt        : SymbolId(78): [ReferenceId(79)]
Symbol reference IDs mismatch for "publicClassWithWithPublicSetAccessorTypes":
after transform: SymbolId(81): []
rebuilt        : SymbolId(83): [ReferenceId(81)]
Symbol reference IDs mismatch for "publicClassWithPrivateModuleGetAccessorTypes":
after transform: SymbolId(96): []
rebuilt        : SymbolId(98): [ReferenceId(85)]
Symbol reference IDs mismatch for "publicClassWithPrivateModuleSetAccessorTypes":
after transform: SymbolId(97): []
rebuilt        : SymbolId(99): [ReferenceId(87)]
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(69) "privateModule"
rebuilt        : SymbolId(70) "privateModule"
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyCannotNameAccessorDeclFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["GlobalWidgets"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyCannotNameVarTypeDeclFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["GlobalWidgets"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyCheckAnonymousFunctionParameter.ts
semantic error: Missing SymbolId: "Query"
Missing SymbolId: "_Query"
Missing ReferenceId: "_Query"
Missing ReferenceId: "fromDoWhile"
Missing ReferenceId: "Query"
Missing ReferenceId: "Query"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(4), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(5)]
Symbol flags mismatch for "fromDoWhile":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "fromDoWhile":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(3): [ReferenceId(1), ReferenceId(2)]
Symbol flags mismatch for "fromOrderBy":
after transform: SymbolId(7): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/privacyCheckAnonymousFunctionParameter2.ts
semantic error: Missing SymbolId: "Q"
Missing SymbolId: "_Q"
Missing ReferenceId: "_Q"
Missing ReferenceId: "foo"
Missing ReferenceId: "Q"
Missing ReferenceId: "Q"
Missing SymbolId: "_Q2"
Missing ReferenceId: "Q"
Missing ReferenceId: "Q"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(4), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Symbol flags mismatch for "foo":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(4): []
rebuilt        : SymbolId(3): [ReferenceId(2)]
Symbol flags mismatch for "bar":
after transform: SymbolId(7): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/privacyCheckCallbackOfInterfaceMethodWithTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyCheckExportAssignmentOnExportedGenericInterface1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Foo":
after transform: SymbolId(0): Span { start: 7, end: 10 }
rebuilt        : SymbolId(0): Span { start: 74, end: 107 }
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol redeclarations mismatch for "Foo":
after transform: SymbolId(0): [Span { start: 59, end: 62 }, Span { start: 74, end: 107 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyCheckExportAssignmentOnExportedGenericInterface2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyCheckExternalModuleExportAssignmentOfGenericClass.ts
semantic error: Missing SymbolId: "Foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Bar":
after transform: SymbolId(1) "Bar"
rebuilt        : <None>
Reference flags mismatch for "Bar":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(2): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Bar", "module", "require"]

tasks/coverage/typescript/tests/cases/compiler/privacyCheckOnTypeParameterReferenceInConstructorParameter.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfFunction.ts
semantic error: Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfInvisibleModuleError.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyCheckTypeOfInvisibleModuleNoError.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyClass.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_c_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C3_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C4_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C7_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C8_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C11_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C12_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_c_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C3_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C4_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C7_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C8_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C11_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C12_public"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(17), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(16), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(19), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(33), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(50)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Binding symbols mismatch:
after transform: ScopeId(19): [SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(51)]
rebuilt        : ScopeId(17): [SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(17): [ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Symbol reference IDs mismatch for "m1_c_public":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(14), ReferenceId(16)]
Symbol reference IDs mismatch for "m1_C3_public":
after transform: SymbolId(7): []
rebuilt        : SymbolId(6): [ReferenceId(6)]
Symbol reference IDs mismatch for "m1_C4_public":
after transform: SymbolId(8): []
rebuilt        : SymbolId(7): [ReferenceId(9)]
Symbol reference IDs mismatch for "m1_C7_public":
after transform: SymbolId(11): []
rebuilt        : SymbolId(10): [ReferenceId(11)]
Symbol reference IDs mismatch for "m1_C8_public":
after transform: SymbolId(12): []
rebuilt        : SymbolId(11): [ReferenceId(13)]
Symbol reference IDs mismatch for "m1_C11_public":
after transform: SymbolId(15): []
rebuilt        : SymbolId(14): [ReferenceId(18)]
Symbol reference IDs mismatch for "m1_C12_public":
after transform: SymbolId(16): []
rebuilt        : SymbolId(15): [ReferenceId(21)]
Symbol reference IDs mismatch for "m2_c_public":
after transform: SymbolId(20): [ReferenceId(20), ReferenceId(22), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(18): [ReferenceId(25), ReferenceId(26), ReferenceId(28), ReferenceId(38), ReferenceId(40)]
Symbol reference IDs mismatch for "m2_C3_public":
after transform: SymbolId(24): []
rebuilt        : SymbolId(22): [ReferenceId(30)]
Symbol reference IDs mismatch for "m2_C4_public":
after transform: SymbolId(25): []
rebuilt        : SymbolId(23): [ReferenceId(33)]
Symbol reference IDs mismatch for "m2_C7_public":
after transform: SymbolId(28): []
rebuilt        : SymbolId(26): [ReferenceId(35)]
Symbol reference IDs mismatch for "m2_C8_public":
after transform: SymbolId(29): []
rebuilt        : SymbolId(27): [ReferenceId(37)]
Symbol reference IDs mismatch for "m2_C11_public":
after transform: SymbolId(32): []
rebuilt        : SymbolId(30): [ReferenceId(42)]
Symbol reference IDs mismatch for "m2_C12_public":
after transform: SymbolId(33): []
rebuilt        : SymbolId(31): [ReferenceId(45)]

tasks/coverage/typescript/tests/cases/compiler/privacyClassImplementsClauseDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassImplementingPublicInterfaceInModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassImplementingPrivateInterfaceInModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassImplementingFromPrivateModuleInterface"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassImplementingPrivateAndPublicInterface"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassImplementingPublicInterfaceInModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassImplementingPrivateInterfaceInModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassImplementingFromPrivateModuleInterface"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(10), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(9), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(27)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(28)]
rebuilt        : ScopeId(9): [SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol reference IDs mismatch for "publicClassImplementingPublicInterfaceInModule":
after transform: SymbolId(5): []
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol reference IDs mismatch for "publicClassImplementingPrivateInterfaceInModule":
after transform: SymbolId(6): []
rebuilt        : SymbolId(5): [ReferenceId(3)]
Symbol reference IDs mismatch for "publicClassImplementingFromPrivateModuleInterface":
after transform: SymbolId(8): []
rebuilt        : SymbolId(7): [ReferenceId(5)]
Symbol reference IDs mismatch for "publicClassImplementingPrivateAndPublicInterface":
after transform: SymbolId(9): []
rebuilt        : SymbolId(8): [ReferenceId(7)]
Symbol reference IDs mismatch for "publicClassImplementingPublicInterfaceInModule":
after transform: SymbolId(15): []
rebuilt        : SymbolId(13): [ReferenceId(11)]
Symbol reference IDs mismatch for "publicClassImplementingPrivateInterfaceInModule":
after transform: SymbolId(16): []
rebuilt        : SymbolId(14): [ReferenceId(13)]
Symbol reference IDs mismatch for "publicClassImplementingFromPrivateModuleInterface":
after transform: SymbolId(18): []
rebuilt        : SymbolId(16): [ReferenceId(15)]
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyFunc.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C3_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C5_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C7_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f2_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f4_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f6_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f8_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f10_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f12_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(43), SymbolId(44), SymbolId(49), SymbolId(51), SymbolId(53), SymbolId(54)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(40), SymbolId(41), SymbolId(45), SymbolId(47), SymbolId(49), SymbolId(50)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(11), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(55)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(10), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Scope children mismatch:
after transform: ScopeId(58): [ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66)]
rebuilt        : ScopeId(54): [ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61)]
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(40), ReferenceId(41), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(28), ReferenceId(29), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(43), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(32), ReferenceId(33), ReferenceId(40), ReferenceId(41)]
Symbol reference IDs mismatch for "C3_public":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(11)]
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(19): []
rebuilt        : SymbolId(16): [ReferenceId(21)]
Symbol reference IDs mismatch for "C7_public":
after transform: SymbolId(23): []
rebuilt        : SymbolId(20): [ReferenceId(23)]
Symbol reference IDs mismatch for "f2_public":
after transform: SymbolId(29): []
rebuilt        : SymbolId(26): [ReferenceId(25)]
Symbol reference IDs mismatch for "f4_public":
after transform: SymbolId(33): []
rebuilt        : SymbolId(30): [ReferenceId(27)]
Symbol reference IDs mismatch for "f6_public":
after transform: SymbolId(36): []
rebuilt        : SymbolId(33): [ReferenceId(31)]
Symbol reference IDs mismatch for "f8_public":
after transform: SymbolId(38): []
rebuilt        : SymbolId(35): [ReferenceId(35)]
Symbol reference IDs mismatch for "f10_public":
after transform: SymbolId(40): []
rebuilt        : SymbolId(37): [ReferenceId(39)]
Symbol reference IDs mismatch for "f12_public":
after transform: SymbolId(42): []
rebuilt        : SymbolId(39): [ReferenceId(43)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(43): [ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69)]
rebuilt        : SymbolId(40): [ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51)]

tasks/coverage/typescript/tests/cases/compiler/privacyFunctionCannotNameParameterTypeDeclFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["GlobalWidgets"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyFunctionCannotNameReturnTypeDeclFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["GlobalWidgets"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/privacyFunctionParameterDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPrivateModuleParameterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPrivateParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPrivateModuleParameterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(6), SymbolId(14), SymbolId(22), SymbolId(30), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(44), SymbolId(51), SymbolId(57), SymbolId(61), SymbolId(67), SymbolId(70), SymbolId(141)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(10), SymbolId(18), SymbolId(26), SymbolId(34), SymbolId(36), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(48), SymbolId(50), SymbolId(56), SymbolId(58), SymbolId(118)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(21), ScopeId(27), ScopeId(33), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(50), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(59), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(130)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(15), ScopeId(21), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(35), ScopeId(36), ScopeId(40), ScopeId(41), ScopeId(82)]
Binding symbols mismatch:
after transform: ScopeId(65): [SymbolId(71), SymbolId(72), SymbolId(77), SymbolId(85), SymbolId(93), SymbolId(101), SymbolId(109), SymbolId(111), SymbolId(113), SymbolId(115), SymbolId(122), SymbolId(128), SymbolId(132), SymbolId(138), SymbolId(212)]
rebuilt        : ScopeId(41): [SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(70), SymbolId(78), SymbolId(86), SymbolId(94), SymbolId(96), SymbolId(98), SymbolId(100), SymbolId(102), SymbolId(108), SymbolId(110), SymbolId(116)]
Scope children mismatch:
after transform: ScopeId(65): [ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(71), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(86), ScopeId(92), ScopeId(98), ScopeId(104), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(115), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(124), ScopeId(128), ScopeId(129)]
rebuilt        : ScopeId(41): [ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(50), ScopeId(56), ScopeId(62), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(76), ScopeId(77), ScopeId(81)]
Binding symbols mismatch:
after transform: ScopeId(130): [SymbolId(142), SymbolId(143), SymbolId(148), SymbolId(156), SymbolId(164), SymbolId(172), SymbolId(180), SymbolId(182), SymbolId(184), SymbolId(186), SymbolId(193), SymbolId(199), SymbolId(203), SymbolId(209), SymbolId(213)]
rebuilt        : ScopeId(82): [SymbolId(119), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(130), SymbolId(138), SymbolId(146), SymbolId(154), SymbolId(156), SymbolId(158), SymbolId(160), SymbolId(162), SymbolId(168), SymbolId(170), SymbolId(176)]
Scope children mismatch:
after transform: ScopeId(130): [ScopeId(131), ScopeId(132), ScopeId(133), ScopeId(136), ScopeId(139), ScopeId(142), ScopeId(145), ScopeId(151), ScopeId(157), ScopeId(163), ScopeId(169), ScopeId(170), ScopeId(171), ScopeId(172), ScopeId(173), ScopeId(174), ScopeId(175), ScopeId(176), ScopeId(177), ScopeId(180), ScopeId(184), ScopeId(185), ScopeId(186), ScopeId(189), ScopeId(193), ScopeId(194)]
rebuilt        : ScopeId(82): [ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(91), ScopeId(97), ScopeId(103), ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(117), ScopeId(118), ScopeId(122)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(69), ReferenceId(71)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(71): [ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(128), ReferenceId(130), ReferenceId(132), ReferenceId(134)]
rebuilt        : SymbolId(60): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(72): [ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(107), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(121), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(129), ReferenceId(131), ReferenceId(133), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(149), ReferenceId(151)]
rebuilt        : SymbolId(61): [ReferenceId(13)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateParmeterTypes":
after transform: SymbolId(77): []
rebuilt        : SymbolId(62): [ReferenceId(17)]
Symbol reference IDs mismatch for "publicClassWithWithPublicParmeterTypes":
after transform: SymbolId(85): []
rebuilt        : SymbolId(70): [ReferenceId(21)]
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(109): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(94): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(109): []
rebuilt        : SymbolId(94): [ReferenceId(27)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(111): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(96): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(111): []
rebuilt        : SymbolId(96): [ReferenceId(29)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes":
after transform: SymbolId(113): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(98): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes":
after transform: SymbolId(115): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(100): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithPrivateModuleParameterTypes":
after transform: SymbolId(122): []
rebuilt        : SymbolId(102): [ReferenceId(33)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(128): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(108): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(128): []
rebuilt        : SymbolId(108): [ReferenceId(35)]
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(138): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(116): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(142): [ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(194), ReferenceId(195), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(208), ReferenceId(210), ReferenceId(212), ReferenceId(214)]
rebuilt        : SymbolId(120): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(143): [ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(168), ReferenceId(169), ReferenceId(175), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(187), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(209), ReferenceId(211), ReferenceId(213), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(229), ReferenceId(231)]
rebuilt        : SymbolId(121): [ReferenceId(41)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateParmeterTypes":
after transform: SymbolId(148): []
rebuilt        : SymbolId(122): [ReferenceId(45)]
Symbol reference IDs mismatch for "publicClassWithWithPublicParmeterTypes":
after transform: SymbolId(156): []
rebuilt        : SymbolId(130): [ReferenceId(49)]
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(180): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(154): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(180): []
rebuilt        : SymbolId(154): [ReferenceId(55)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(182): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(156): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(182): []
rebuilt        : SymbolId(156): [ReferenceId(57)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes":
after transform: SymbolId(184): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(158): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes":
after transform: SymbolId(186): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(160): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithPrivateModuleParameterTypes":
after transform: SymbolId(193): []
rebuilt        : SymbolId(162): [ReferenceId(61)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(199): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(168): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(199): []
rebuilt        : SymbolId(168): [ReferenceId(63)]
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(209): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(176): SymbolFlags(FunctionScopedVariable)
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyFunctionReturnTypeDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes1"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes1"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPrivateModuleParameterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes1"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPrivateParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateParmeterTypes1"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPublicParmeterTypes1"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPrivateModuleParameterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateModuleParameterTypes1"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(53)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(42)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(24), ScopeId(33), ScopeId(42), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(66), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(170)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(12), ScopeId(21), ScopeId(30), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(122)]
Binding symbols mismatch:
after transform: ScopeId(85): [SymbolId(27), SymbolId(28), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(80)]
rebuilt        : ScopeId(61): [SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41)]
Scope children mismatch:
after transform: ScopeId(85): [ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(91), ScopeId(94), ScopeId(97), ScopeId(100), ScopeId(109), ScopeId(118), ScopeId(127), ScopeId(136), ScopeId(137), ScopeId(138), ScopeId(139), ScopeId(140), ScopeId(141), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147), ScopeId(148), ScopeId(151), ScopeId(156), ScopeId(157), ScopeId(158), ScopeId(159), ScopeId(162), ScopeId(167), ScopeId(168), ScopeId(169)]
rebuilt        : ScopeId(61): [ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(73), ScopeId(82), ScopeId(91), ScopeId(100), ScopeId(101), ScopeId(102), ScopeId(103), ScopeId(104), ScopeId(105), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(120), ScopeId(121)]
Binding symbols mismatch:
after transform: ScopeId(170): [SymbolId(54), SymbolId(55), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(81)]
rebuilt        : ScopeId(122): [SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63)]
Scope children mismatch:
after transform: ScopeId(170): [ScopeId(171), ScopeId(172), ScopeId(173), ScopeId(176), ScopeId(179), ScopeId(182), ScopeId(185), ScopeId(194), ScopeId(203), ScopeId(212), ScopeId(221), ScopeId(222), ScopeId(223), ScopeId(224), ScopeId(225), ScopeId(226), ScopeId(227), ScopeId(228), ScopeId(229), ScopeId(230), ScopeId(231), ScopeId(232), ScopeId(233), ScopeId(236), ScopeId(241), ScopeId(242), ScopeId(243), ScopeId(244), ScopeId(247), ScopeId(252), ScopeId(253), ScopeId(254)]
rebuilt        : ScopeId(122): [ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(134), ScopeId(143), ScopeId(152), ScopeId(161), ScopeId(162), ScopeId(163), ScopeId(164), ScopeId(165), ScopeId(166), ScopeId(167), ScopeId(168), ScopeId(169), ScopeId(174), ScopeId(175), ScopeId(176), ScopeId(181), ScopeId(182)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(56), ReferenceId(58)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(16), ReferenceId(18)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(27): [ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(98), ReferenceId(99), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117), ReferenceId(118), ReferenceId(119), ReferenceId(120), ReferenceId(121), ReferenceId(130), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(138), ReferenceId(140)]
rebuilt        : SymbolId(22): [ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(52), ReferenceId(58)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(28): [ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(94), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(106), ReferenceId(107), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(131), ReferenceId(133), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(141)]
rebuilt        : SymbolId(23): [ReferenceId(27), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(55), ReferenceId(59)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateParmeterTypes":
after transform: SymbolId(33): []
rebuilt        : SymbolId(24): [ReferenceId(33)]
Symbol reference IDs mismatch for "publicClassWithWithPublicParmeterTypes":
after transform: SymbolId(34): []
rebuilt        : SymbolId(25): [ReferenceId(39)]
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(37): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(28): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(37): []
rebuilt        : SymbolId(28): [ReferenceId(49)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(38): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(29): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(38): []
rebuilt        : SymbolId(29): [ReferenceId(51)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes":
after transform: SymbolId(39): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(30): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes":
after transform: SymbolId(40): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(31): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(41): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(32): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(41): []
rebuilt        : SymbolId(32): [ReferenceId(54)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes1":
after transform: SymbolId(42): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(33): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes1":
after transform: SymbolId(42): []
rebuilt        : SymbolId(33): [ReferenceId(57)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(43): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(34): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes1":
after transform: SymbolId(44): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithPrivateModuleParameterTypes":
after transform: SymbolId(46): []
rebuilt        : SymbolId(36): [ReferenceId(63)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(47): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(37): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(47): []
rebuilt        : SymbolId(37): [ReferenceId(65)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(48): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(38): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(48): []
rebuilt        : SymbolId(38): [ReferenceId(68)]
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(51): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(40): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(52): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(41): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(54): [ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185), ReferenceId(186), ReferenceId(187), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(199), ReferenceId(200), ReferenceId(201), ReferenceId(202), ReferenceId(203), ReferenceId(212), ReferenceId(214), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222)]
rebuilt        : SymbolId(44): [ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(100), ReferenceId(106)]
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(55): [ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(176), ReferenceId(177), ReferenceId(178), ReferenceId(179), ReferenceId(188), ReferenceId(189), ReferenceId(190), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(195), ReferenceId(204), ReferenceId(205), ReferenceId(206), ReferenceId(207), ReferenceId(208), ReferenceId(209), ReferenceId(210), ReferenceId(211), ReferenceId(213), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(221), ReferenceId(223)]
rebuilt        : SymbolId(45): [ReferenceId(75), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(103), ReferenceId(107)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateParmeterTypes":
after transform: SymbolId(60): []
rebuilt        : SymbolId(46): [ReferenceId(81)]
Symbol reference IDs mismatch for "publicClassWithWithPublicParmeterTypes":
after transform: SymbolId(61): []
rebuilt        : SymbolId(47): [ReferenceId(87)]
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(64): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(50): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes":
after transform: SymbolId(64): []
rebuilt        : SymbolId(50): [ReferenceId(97)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(65): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(51): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes":
after transform: SymbolId(65): []
rebuilt        : SymbolId(51): [ReferenceId(99)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes":
after transform: SymbolId(66): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(52): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes":
after transform: SymbolId(67): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(53): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "publicFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(68): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(54): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(68): []
rebuilt        : SymbolId(54): [ReferenceId(102)]
Symbol flags mismatch for "publicFunctionWithPublicParmeterTypes1":
after transform: SymbolId(69): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(55): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicParmeterTypes1":
after transform: SymbolId(69): []
rebuilt        : SymbolId(55): [ReferenceId(105)]
Symbol flags mismatch for "privateFunctionWithPrivateParmeterTypes1":
after transform: SymbolId(70): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(56): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicParmeterTypes1":
after transform: SymbolId(71): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(57): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithPrivateModuleParameterTypes":
after transform: SymbolId(73): []
rebuilt        : SymbolId(58): [ReferenceId(111)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(74): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(59): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(74): []
rebuilt        : SymbolId(59): [ReferenceId(113)]
Symbol flags mismatch for "publicFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(75): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(60): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(75): []
rebuilt        : SymbolId(60): [ReferenceId(116)]
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes":
after transform: SymbolId(78): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(62): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPrivateModuleParameterTypes1":
after transform: SymbolId(79): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(63): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Reference symbol mismatch for "privateModule":
after transform: SymbolId(53) "privateModule"
rebuilt        : SymbolId(42) "privateModule"
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyGetter.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C3_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C1_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C3_public"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(13), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(33)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(14), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(35)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(8), SymbolId(38)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(9)]
Binding symbols mismatch:
after transform: ScopeId(23): [SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(21), SymbolId(39)]
rebuilt        : ScopeId(23): [SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(23)]
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "C3_public":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(7)]
Symbol reference IDs mismatch for "m2_C1_public":
after transform: SymbolId(14): [ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30)]
rebuilt        : SymbolId(16): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(22), ReferenceId(23)]
Symbol reference IDs mismatch for "m2_C2_private":
after transform: SymbolId(15): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35)]
rebuilt        : SymbolId(17): [ReferenceId(18), ReferenceId(19), ReferenceId(24), ReferenceId(25)]
Symbol reference IDs mismatch for "m2_C3_public":
after transform: SymbolId(16): []
rebuilt        : SymbolId(18): [ReferenceId(21)]
Symbol reference IDs mismatch for "C5_private":
after transform: SymbolId(26): [ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53)]
rebuilt        : SymbolId(28): [ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(35)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(27): [ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48)]
rebuilt        : SymbolId(29): [ReferenceId(28), ReferenceId(29), ReferenceId(32), ReferenceId(33)]

tasks/coverage/typescript/tests/cases/compiler/privacyGloClass.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_c_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C3_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C4_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C7_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C8_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C11_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "m1_C12_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(22)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol reference IDs mismatch for "m1_c_public":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(14), ReferenceId(16)]
Symbol reference IDs mismatch for "m1_C3_public":
after transform: SymbolId(7): []
rebuilt        : SymbolId(6): [ReferenceId(6)]
Symbol reference IDs mismatch for "m1_C4_public":
after transform: SymbolId(8): []
rebuilt        : SymbolId(7): [ReferenceId(9)]
Symbol reference IDs mismatch for "m1_C7_public":
after transform: SymbolId(11): []
rebuilt        : SymbolId(10): [ReferenceId(11)]
Symbol reference IDs mismatch for "m1_C8_public":
after transform: SymbolId(12): []
rebuilt        : SymbolId(11): [ReferenceId(13)]
Symbol reference IDs mismatch for "m1_C11_public":
after transform: SymbolId(15): []
rebuilt        : SymbolId(14): [ReferenceId(18)]
Symbol reference IDs mismatch for "m1_C12_public":
after transform: SymbolId(16): []
rebuilt        : SymbolId(15): [ReferenceId(21)]

tasks/coverage/typescript/tests/cases/compiler/privacyGloFunc.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C3_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C5_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C7_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f2_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f4_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f6_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f8_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f10_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "f12_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C1_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C3_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C5_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "m2_C7_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f2_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f4_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f6_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f8_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f10_public"
Missing ReferenceId: "_m2"
Missing ReferenceId: "f12_public"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(43), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(96), SymbolId(104), SymbolId(106), SymbolId(108), SymbolId(110), SymbolId(112), SymbolId(114), SymbolId(116), SymbolId(118), SymbolId(120), SymbolId(121), SymbolId(122), SymbolId(123), SymbolId(124), SymbolId(125), SymbolId(126), SymbolId(127)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(40), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(88), SymbolId(94), SymbolId(96), SymbolId(98), SymbolId(100), SymbolId(102), SymbolId(104), SymbolId(106), SymbolId(108), SymbolId(110), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(115), SymbolId(116), SymbolId(117)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(11), SymbolId(19), SymbolId(21), SymbolId(23), SymbolId(25), SymbolId(27), SymbolId(29), SymbolId(31), SymbolId(33), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(128)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(10), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Scope children mismatch:
after transform: ScopeId(21): [ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Binding symbols mismatch:
after transform: ScopeId(57): [SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(54), SymbolId(62), SymbolId(64), SymbolId(66), SymbolId(68), SymbolId(70), SymbolId(72), SymbolId(74), SymbolId(76), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(129)]
rebuilt        : ScopeId(53): [SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(50), SymbolId(56), SymbolId(58), SymbolId(60), SymbolId(62), SymbolId(64), SymbolId(66), SymbolId(68), SymbolId(70), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79)]
Scope children mismatch:
after transform: ScopeId(61): [ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76)]
rebuilt        : ScopeId(57): [ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70)]
Scope children mismatch:
after transform: ScopeId(77): [ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92)]
rebuilt        : ScopeId(71): [ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84)]
Scope children mismatch:
after transform: ScopeId(116): [ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(122), ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(129), ScopeId(130), ScopeId(131)]
rebuilt        : ScopeId(108): [ScopeId(109), ScopeId(110), ScopeId(111), ScopeId(112), ScopeId(113), ScopeId(114), ScopeId(115), ScopeId(116), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121)]
Scope children mismatch:
after transform: ScopeId(132): [ScopeId(133), ScopeId(134), ScopeId(135), ScopeId(136), ScopeId(137), ScopeId(138), ScopeId(139), ScopeId(140), ScopeId(141), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147)]
rebuilt        : ScopeId(122): [ScopeId(123), ScopeId(124), ScopeId(125), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(129), ScopeId(130), ScopeId(131), ScopeId(132), ScopeId(133), ScopeId(134), ScopeId(135)]
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(40), ReferenceId(41), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(12), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(28), ReferenceId(29), ReferenceId(36), ReferenceId(37)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(42), ReferenceId(43), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(32), ReferenceId(33), ReferenceId(40), ReferenceId(41)]
Symbol reference IDs mismatch for "C3_public":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(11)]
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(19): []
rebuilt        : SymbolId(16): [ReferenceId(21)]
Symbol reference IDs mismatch for "C7_public":
after transform: SymbolId(23): []
rebuilt        : SymbolId(20): [ReferenceId(23)]
Symbol flags mismatch for "f1_public":
after transform: SymbolId(27): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(24): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f2_public":
after transform: SymbolId(29): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(26): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f2_public":
after transform: SymbolId(29): []
rebuilt        : SymbolId(26): [ReferenceId(25)]
Symbol flags mismatch for "f3_public":
after transform: SymbolId(31): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(28): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f4_public":
after transform: SymbolId(33): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(30): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f4_public":
after transform: SymbolId(33): []
rebuilt        : SymbolId(30): [ReferenceId(27)]
Symbol flags mismatch for "f5_public":
after transform: SymbolId(35): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(32): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f6_public":
after transform: SymbolId(36): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(33): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f6_public":
after transform: SymbolId(36): []
rebuilt        : SymbolId(33): [ReferenceId(31)]
Symbol flags mismatch for "f7_public":
after transform: SymbolId(37): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(34): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f8_public":
after transform: SymbolId(38): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f8_public":
after transform: SymbolId(38): []
rebuilt        : SymbolId(35): [ReferenceId(35)]
Symbol flags mismatch for "f9_private":
after transform: SymbolId(39): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(36): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f10_public":
after transform: SymbolId(40): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(37): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f10_public":
after transform: SymbolId(40): []
rebuilt        : SymbolId(37): [ReferenceId(39)]
Symbol flags mismatch for "f11_private":
after transform: SymbolId(41): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(38): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f12_public":
after transform: SymbolId(42): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(39): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f12_public":
after transform: SymbolId(42): []
rebuilt        : SymbolId(39): [ReferenceId(43)]
Symbol reference IDs mismatch for "m2_C1_public":
after transform: SymbolId(44): [ReferenceId(56), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(80), ReferenceId(81), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(92), ReferenceId(93), ReferenceId(96), ReferenceId(97), ReferenceId(100), ReferenceId(101), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107)]
rebuilt        : SymbolId(42): [ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(52), ReferenceId(53), ReferenceId(58), ReferenceId(59), ReferenceId(62), ReferenceId(63), ReferenceId(74), ReferenceId(75), ReferenceId(82), ReferenceId(83)]
Symbol reference IDs mismatch for "m2_C2_private":
after transform: SymbolId(45): [ReferenceId(57), ReferenceId(60), ReferenceId(61), ReferenceId(64), ReferenceId(65), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(75), ReferenceId(78), ReferenceId(79), ReferenceId(82), ReferenceId(83), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(94), ReferenceId(95), ReferenceId(98), ReferenceId(99), ReferenceId(102), ReferenceId(103), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(111)]
rebuilt        : SymbolId(43): [ReferenceId(50), ReferenceId(51), ReferenceId(54), ReferenceId(55), ReferenceId(60), ReferenceId(61), ReferenceId(64), ReferenceId(65), ReferenceId(78), ReferenceId(79), ReferenceId(86), ReferenceId(87)]
Symbol reference IDs mismatch for "m2_C3_public":
after transform: SymbolId(46): []
rebuilt        : SymbolId(44): [ReferenceId(57)]
Symbol reference IDs mismatch for "m2_C5_public":
after transform: SymbolId(62): []
rebuilt        : SymbolId(56): [ReferenceId(67)]
Symbol reference IDs mismatch for "m2_C7_public":
after transform: SymbolId(66): []
rebuilt        : SymbolId(60): [ReferenceId(69)]
Symbol flags mismatch for "f1_public":
after transform: SymbolId(70): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(64): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f2_public":
after transform: SymbolId(72): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(66): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f2_public":
after transform: SymbolId(72): []
rebuilt        : SymbolId(66): [ReferenceId(71)]
Symbol flags mismatch for "f3_public":
after transform: SymbolId(74): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(68): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f4_public":
after transform: SymbolId(76): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(70): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f4_public":
after transform: SymbolId(76): []
rebuilt        : SymbolId(70): [ReferenceId(73)]
Symbol flags mismatch for "f5_public":
after transform: SymbolId(78): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(72): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f6_public":
after transform: SymbolId(79): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(73): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f6_public":
after transform: SymbolId(79): []
rebuilt        : SymbolId(73): [ReferenceId(77)]
Symbol flags mismatch for "f7_public":
after transform: SymbolId(80): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(74): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f8_public":
after transform: SymbolId(81): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(75): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f8_public":
after transform: SymbolId(81): []
rebuilt        : SymbolId(75): [ReferenceId(81)]
Symbol flags mismatch for "f9_private":
after transform: SymbolId(82): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(76): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f10_public":
after transform: SymbolId(83): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(77): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f10_public":
after transform: SymbolId(83): []
rebuilt        : SymbolId(77): [ReferenceId(85)]
Symbol flags mismatch for "f11_private":
after transform: SymbolId(84): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(78): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "f12_public":
after transform: SymbolId(85): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(79): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f12_public":
after transform: SymbolId(85): []
rebuilt        : SymbolId(79): [ReferenceId(89)]
Symbol reference IDs mismatch for "C5_private":
after transform: SymbolId(86): [ReferenceId(112), ReferenceId(116), ReferenceId(117), ReferenceId(120), ReferenceId(121), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(129), ReferenceId(130), ReferenceId(134), ReferenceId(135), ReferenceId(138), ReferenceId(139), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167)]
rebuilt        : SymbolId(80): [ReferenceId(94), ReferenceId(95), ReferenceId(98), ReferenceId(99), ReferenceId(102), ReferenceId(103), ReferenceId(106), ReferenceId(107), ReferenceId(110), ReferenceId(111), ReferenceId(114), ReferenceId(115)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(87): [ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(118), ReferenceId(119), ReferenceId(122), ReferenceId(123), ReferenceId(124), ReferenceId(125), ReferenceId(131), ReferenceId(132), ReferenceId(133), ReferenceId(136), ReferenceId(137), ReferenceId(140), ReferenceId(141), ReferenceId(142), ReferenceId(143), ReferenceId(148), ReferenceId(149), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163)]
rebuilt        : SymbolId(81): [ReferenceId(92), ReferenceId(93), ReferenceId(96), ReferenceId(97), ReferenceId(100), ReferenceId(101), ReferenceId(104), ReferenceId(105), ReferenceId(108), ReferenceId(109), ReferenceId(112), ReferenceId(113)]

tasks/coverage/typescript/tests/cases/compiler/privacyGloGetter.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "_m"
Missing ReferenceId: "C3_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(14), SymbolId(15)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(8), SymbolId(17)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(10), ReferenceId(11)]
Symbol reference IDs mismatch for "C3_public":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(7)]
Symbol reference IDs mismatch for "C6_public":
after transform: SymbolId(13): [ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21)]
rebuilt        : SymbolId(14): [ReferenceId(14), ReferenceId(15)]

tasks/coverage/typescript/tests/cases/compiler/privacyGloImport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyGloInterface.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Bindings mismatch:
after transform: ScopeId(0): ["C5_public", "m1", "m3"]
rebuilt        : ScopeId(0): ["C5_public", "m1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(25), ScopeId(30), ScopeId(41), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(18)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(14)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(34)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(5): [ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/privacyGloVar.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyImport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyInterface.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "C1_public"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Bindings mismatch:
after transform: ScopeId(0): ["C5_public", "C6_private", "m1", "m2", "m3", "m4"]
rebuilt        : ScopeId(0): ["C5_public", "C6_private", "m1", "m2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(23), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(57), ScopeId(66), ScopeId(77), ScopeId(88), ScopeId(90), ScopeId(92), ScopeId(93), ScopeId(94), ScopeId(95), ScopeId(96), ScopeId(97)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(11)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(40)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(14)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(23): [SymbolId(6), SymbolId(7), SymbolId(41)]
rebuilt        : ScopeId(5): [SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(23): [ScopeId(24), ScopeId(26), ScopeId(27), ScopeId(36)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8)]
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(34)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C1_public":
after transform: SymbolId(6): [ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(66), ReferenceId(68), ReferenceId(70)]
rebuilt        : SymbolId(6): [ReferenceId(5)]
Symbol reference IDs mismatch for "C2_private":
after transform: SymbolId(7): [ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(67), ReferenceId(69), ReferenceId(71)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "C5_public":
after transform: SymbolId(10): [ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(100), ReferenceId(102), ReferenceId(104), ReferenceId(106)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "C6_private":
after transform: SymbolId(11): [ReferenceId(73), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(87), ReferenceId(89), ReferenceId(91), ReferenceId(93), ReferenceId(95), ReferenceId(97), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(105), ReferenceId(107)]
rebuilt        : SymbolId(9): []

tasks/coverage/typescript/tests/cases/compiler/privacyInterfaceExtendsClauseDeclFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["privateModule", "publicModule"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(11), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyLocalInternalReferenceImportWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyLocalInternalReferenceImportWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelInternalReferenceImportWithExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyTopLevelInternalReferenceImportWithoutExport.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParameterOfFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(20), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(50), ScopeId(55), ScopeId(56)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(32), ScopeId(37), ScopeId(38)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParameterOfFunctionDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPublicTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithWithPrivateModuleTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicFunctionWithPrivateMopduleTypeParameters"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClass"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPrivateTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPrivateTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPublicTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicFunctionWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(18), SymbolId(23), SymbolId(28), SymbolId(33), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(44), SymbolId(54), SymbolId(59), SymbolId(64), SymbolId(66), SymbolId(72), SymbolId(75), SymbolId(81), SymbolId(84), SymbolId(86), SymbolId(173)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(38)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(20), ScopeId(25), ScopeId(30), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(45), ScopeId(50), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(60), ScopeId(63), ScopeId(64), ScopeId(67), ScopeId(70), ScopeId(71), ScopeId(142)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(32), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(42), ScopeId(43), ScopeId(46), ScopeId(47), ScopeId(94)]
Binding symbols mismatch:
after transform: ScopeId(71): [SymbolId(87), SymbolId(88), SymbolId(105), SymbolId(110), SymbolId(115), SymbolId(120), SymbolId(125), SymbolId(127), SymbolId(129), SymbolId(131), SymbolId(141), SymbolId(146), SymbolId(151), SymbolId(153), SymbolId(159), SymbolId(162), SymbolId(168), SymbolId(171), SymbolId(242)]
rebuilt        : ScopeId(47): [SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37)]
Scope children mismatch:
after transform: ScopeId(71): [ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(83), ScopeId(86), ScopeId(91), ScopeId(96), ScopeId(101), ScopeId(106), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(113), ScopeId(116), ScopeId(121), ScopeId(126), ScopeId(127), ScopeId(128), ScopeId(131), ScopeId(134), ScopeId(135), ScopeId(138), ScopeId(141)]
rebuilt        : ScopeId(47): [ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(55), ScopeId(60), ScopeId(65), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(79), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(89), ScopeId(90), ScopeId(93)]
Binding symbols mismatch:
after transform: ScopeId(142): [SymbolId(174), SymbolId(175), SymbolId(192), SymbolId(197), SymbolId(202), SymbolId(207), SymbolId(212), SymbolId(214), SymbolId(216), SymbolId(218), SymbolId(228), SymbolId(233), SymbolId(238), SymbolId(240), SymbolId(243)]
rebuilt        : ScopeId(94): [SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53)]
Scope children mismatch:
after transform: ScopeId(142): [ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(148), ScopeId(151), ScopeId(154), ScopeId(157), ScopeId(162), ScopeId(167), ScopeId(172), ScopeId(177), ScopeId(178), ScopeId(179), ScopeId(180), ScopeId(181), ScopeId(184), ScopeId(187), ScopeId(192), ScopeId(197), ScopeId(198)]
rebuilt        : ScopeId(94): [ScopeId(95), ScopeId(96), ScopeId(97), ScopeId(102), ScopeId(107), ScopeId(112), ScopeId(117), ScopeId(118), ScopeId(119), ScopeId(120), ScopeId(121), ScopeId(126), ScopeId(131), ScopeId(132)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(87): [ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(100), ReferenceId(101), ReferenceId(102), ReferenceId(103), ReferenceId(108), ReferenceId(110)]
rebuilt        : SymbolId(20): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(88): [ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(107), ReferenceId(109), ReferenceId(111), ReferenceId(112), ReferenceId(113), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(117)]
rebuilt        : SymbolId(21): [ReferenceId(1)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateTypeParameters":
after transform: SymbolId(105): []
rebuilt        : SymbolId(22): [ReferenceId(3)]
Symbol reference IDs mismatch for "publicClassWithWithPublicTypeParameters":
after transform: SymbolId(110): []
rebuilt        : SymbolId(23): [ReferenceId(5)]
Symbol flags mismatch for "publicFunctionWithPrivateTypeParameters":
after transform: SymbolId(125): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(26): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateTypeParameters":
after transform: SymbolId(125): []
rebuilt        : SymbolId(26): [ReferenceId(7)]
Symbol flags mismatch for "publicFunctionWithPublicTypeParameters":
after transform: SymbolId(127): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(27): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicTypeParameters":
after transform: SymbolId(127): []
rebuilt        : SymbolId(27): [ReferenceId(9)]
Symbol flags mismatch for "privateFunctionWithPrivateTypeParameters":
after transform: SymbolId(129): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(28): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicTypeParameters":
after transform: SymbolId(131): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(29): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(141): []
rebuilt        : SymbolId(30): [ReferenceId(11)]
Symbol flags mismatch for "publicFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(151): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(32): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(151): []
rebuilt        : SymbolId(32): [ReferenceId(13)]
Symbol flags mismatch for "privateFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(153): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(33): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithWithPrivateModuleTypeParameters":
after transform: SymbolId(159): []
rebuilt        : SymbolId(34): [ReferenceId(15)]
Symbol flags mismatch for "publicFunctionWithPrivateMopduleTypeParameters":
after transform: SymbolId(162): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateMopduleTypeParameters":
after transform: SymbolId(162): []
rebuilt        : SymbolId(35): [ReferenceId(17)]
Symbol flags mismatch for "privateFunctionWithPrivateMopduleTypeParameters":
after transform: SymbolId(171): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(37): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(174): [ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(139), ReferenceId(140), ReferenceId(141), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(151), ReferenceId(152), ReferenceId(153), ReferenceId(160), ReferenceId(161), ReferenceId(162), ReferenceId(163), ReferenceId(168), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(176), ReferenceId(178)]
rebuilt        : SymbolId(40): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(175): [ReferenceId(142), ReferenceId(143), ReferenceId(144), ReferenceId(145), ReferenceId(146), ReferenceId(147), ReferenceId(154), ReferenceId(155), ReferenceId(156), ReferenceId(157), ReferenceId(158), ReferenceId(159), ReferenceId(164), ReferenceId(165), ReferenceId(166), ReferenceId(167), ReferenceId(172), ReferenceId(173), ReferenceId(174), ReferenceId(175), ReferenceId(177), ReferenceId(179), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(183), ReferenceId(184), ReferenceId(185)]
rebuilt        : SymbolId(41): [ReferenceId(21)]
Symbol reference IDs mismatch for "publicClassWithWithPrivateTypeParameters":
after transform: SymbolId(192): []
rebuilt        : SymbolId(42): [ReferenceId(23)]
Symbol reference IDs mismatch for "publicClassWithWithPublicTypeParameters":
after transform: SymbolId(197): []
rebuilt        : SymbolId(43): [ReferenceId(25)]
Symbol flags mismatch for "publicFunctionWithPrivateTypeParameters":
after transform: SymbolId(212): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(46): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPrivateTypeParameters":
after transform: SymbolId(212): []
rebuilt        : SymbolId(46): [ReferenceId(27)]
Symbol flags mismatch for "publicFunctionWithPublicTypeParameters":
after transform: SymbolId(214): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(47): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicTypeParameters":
after transform: SymbolId(214): []
rebuilt        : SymbolId(47): [ReferenceId(29)]
Symbol flags mismatch for "privateFunctionWithPrivateTypeParameters":
after transform: SymbolId(216): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(48): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "privateFunctionWithPublicTypeParameters":
after transform: SymbolId(218): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(49): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicClassWithWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(228): []
rebuilt        : SymbolId(50): [ReferenceId(31)]
Symbol flags mismatch for "publicFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(238): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(52): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "publicFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(238): []
rebuilt        : SymbolId(52): [ReferenceId(33)]
Symbol flags mismatch for "privateFunctionWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(240): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(53): SymbolFlags(FunctionScopedVariable)
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfClass.ts
semantic error: Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfClassDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassInPublicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPrivateTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPublicTypeParameters"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassWithTypeParametersFromPrivateModule"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassInPrivateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPrivateTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPublicTypeParameters"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassWithPublicTypeParametersWithoutExtends"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(8), SymbolId(11), SymbolId(14), SymbolId(17), SymbolId(20), SymbolId(23), SymbolId(26), SymbolId(53)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(38)]
Binding symbols mismatch:
after transform: ScopeId(19): [SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(32), SymbolId(35), SymbolId(38), SymbolId(41), SymbolId(44), SymbolId(47), SymbolId(50), SymbolId(74)]
rebuilt        : ScopeId(19): [SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(34), SymbolId(36)]
Binding symbols mismatch:
after transform: ScopeId(38): [SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(59), SymbolId(62), SymbolId(65), SymbolId(68), SymbolId(71), SymbolId(75)]
rebuilt        : ScopeId(38): [SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(44), SymbolId(46), SymbolId(48), SymbolId(50), SymbolId(52)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClassInPublicModule":
after transform: SymbolId(27): [ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(20): []
Symbol reference IDs mismatch for "publicClassInPublicModule":
after transform: SymbolId(28): [ReferenceId(34), ReferenceId(42)]
rebuilt        : SymbolId(21): [ReferenceId(9)]
Symbol reference IDs mismatch for "publicClassWithPrivateTypeParameters":
after transform: SymbolId(29): []
rebuilt        : SymbolId(22): [ReferenceId(12)]
Symbol reference IDs mismatch for "publicClassWithPublicTypeParameters":
after transform: SymbolId(32): []
rebuilt        : SymbolId(24): [ReferenceId(15)]
Symbol reference IDs mismatch for "publicClassWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(41): []
rebuilt        : SymbolId(30): [ReferenceId(20)]
Symbol reference IDs mismatch for "publicClassWithTypeParametersFromPrivateModule":
after transform: SymbolId(47): []
rebuilt        : SymbolId(34): [ReferenceId(24)]
Symbol reference IDs mismatch for "privateClassInPrivateModule":
after transform: SymbolId(54): [ReferenceId(60), ReferenceId(68)]
rebuilt        : SymbolId(40): []
Symbol reference IDs mismatch for "publicClassInPrivateModule":
after transform: SymbolId(55): [ReferenceId(64), ReferenceId(72)]
rebuilt        : SymbolId(41): [ReferenceId(29)]
Symbol reference IDs mismatch for "publicClassWithPrivateTypeParameters":
after transform: SymbolId(56): []
rebuilt        : SymbolId(42): [ReferenceId(32)]
Symbol reference IDs mismatch for "publicClassWithPublicTypeParameters":
after transform: SymbolId(59): []
rebuilt        : SymbolId(44): [ReferenceId(35)]
Symbol reference IDs mismatch for "publicClassWithPublicTypeParametersWithoutExtends":
after transform: SymbolId(68): []
rebuilt        : SymbolId(50): [ReferenceId(40)]
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(12), ScopeId(19), ScopeId(26), ScopeId(33), ScopeId(36)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(32), ReferenceId(36), ReferenceId(45), ReferenceId(49)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(25), ReferenceId(34), ReferenceId(38), ReferenceId(39), ReferenceId(47), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClassT":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(31), ReferenceId(33), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "publicClassT":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(48), ReferenceId(50), ReferenceId(54), ReferenceId(58)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/privacyTypeParametersOfInterfaceDeclFile.ts
semantic error: Missing SymbolId: "publicModule"
Missing SymbolId: "_publicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassInPublicModule"
Missing ReferenceId: "_publicModule"
Missing ReferenceId: "publicClassInPublicModuleT"
Missing ReferenceId: "publicModule"
Missing ReferenceId: "publicModule"
Missing SymbolId: "privateModule"
Missing SymbolId: "_privateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassInPrivateModule"
Missing ReferenceId: "_privateModule"
Missing ReferenceId: "publicClassInPrivateModuleT"
Missing ReferenceId: "privateModule"
Missing ReferenceId: "privateModule"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(22), SymbolId(45)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(10)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(12), ScopeId(19), ScopeId(26), ScopeId(33), ScopeId(36), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(82)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(10)]
Binding symbols mismatch:
after transform: ScopeId(41): [SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(27), SymbolId(64)]
rebuilt        : ScopeId(5): [SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(41): [ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(53), ScopeId(60), ScopeId(67), ScopeId(74), ScopeId(77), ScopeId(80), ScopeId(81)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Binding symbols mismatch:
after transform: ScopeId(82): [SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(50), SymbolId(65)]
rebuilt        : ScopeId(10): [SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Scope children mismatch:
after transform: ScopeId(82): [ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(94), ScopeId(101), ScopeId(108), ScopeId(115), ScopeId(118)]
rebuilt        : ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6), ReferenceId(10), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(32), ReferenceId(36), ReferenceId(45), ReferenceId(49)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(25), ReferenceId(34), ReferenceId(38), ReferenceId(39), ReferenceId(47), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "privateClassT":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(31), ReferenceId(33), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "publicClassT":
after transform: SymbolId(4): [ReferenceId(3), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(22), ReferenceId(24), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(48), ReferenceId(50), ReferenceId(54), ReferenceId(58)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "privateClassInPublicModule":
after transform: SymbolId(23): [ReferenceId(62), ReferenceId(68), ReferenceId(72), ReferenceId(81), ReferenceId(85), ReferenceId(88), ReferenceId(94), ReferenceId(98), ReferenceId(107), ReferenceId(111)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "publicClassInPublicModule":
after transform: SymbolId(24): [ReferenceId(70), ReferenceId(74), ReferenceId(75), ReferenceId(83), ReferenceId(87), ReferenceId(96), ReferenceId(100), ReferenceId(101), ReferenceId(109), ReferenceId(113)]
rebuilt        : SymbolId(7): [ReferenceId(1)]
Symbol reference IDs mismatch for "privateClassInPublicModuleT":
after transform: SymbolId(25): [ReferenceId(67), ReferenceId(69), ReferenceId(80), ReferenceId(82), ReferenceId(93), ReferenceId(95), ReferenceId(106), ReferenceId(108)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "publicClassInPublicModuleT":
after transform: SymbolId(27): [ReferenceId(65), ReferenceId(71), ReferenceId(73), ReferenceId(78), ReferenceId(84), ReferenceId(86), ReferenceId(91), ReferenceId(97), ReferenceId(99), ReferenceId(104), ReferenceId(110), ReferenceId(112), ReferenceId(116), ReferenceId(120)]
rebuilt        : SymbolId(9): [ReferenceId(3)]
Symbol reference IDs mismatch for "privateClassInPrivateModule":
after transform: SymbolId(46): [ReferenceId(124), ReferenceId(130), ReferenceId(134), ReferenceId(143), ReferenceId(147), ReferenceId(150), ReferenceId(156), ReferenceId(160), ReferenceId(169), ReferenceId(173)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "publicClassInPrivateModule":
after transform: SymbolId(47): [ReferenceId(132), ReferenceId(136), ReferenceId(137), ReferenceId(145), ReferenceId(149), ReferenceId(158), ReferenceId(162), ReferenceId(163), ReferenceId(171), ReferenceId(175)]
rebuilt        : SymbolId(13): [ReferenceId(7)]
Symbol reference IDs mismatch for "privateClassInPrivateModuleT":
after transform: SymbolId(48): [ReferenceId(129), ReferenceId(131), ReferenceId(142), ReferenceId(144), ReferenceId(155), ReferenceId(157), ReferenceId(168), ReferenceId(170)]
rebuilt        : SymbolId(14): []
Symbol reference IDs mismatch for "publicClassInPrivateModuleT":
after transform: SymbolId(50): [ReferenceId(127), ReferenceId(133), ReferenceId(135), ReferenceId(140), ReferenceId(146), ReferenceId(148), ReferenceId(153), ReferenceId(159), ReferenceId(161), ReferenceId(166), ReferenceId(172), ReferenceId(174), ReferenceId(178), ReferenceId(182)]
rebuilt        : SymbolId(15): [ReferenceId(9)]
Unresolved references mismatch:
after transform: ["privateModule"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/privacyVar.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privacyVarDeclFile.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/privateInstanceVisibility.ts
semantic error: Missing SymbolId: "Test"
Missing SymbolId: "_Test"
Missing ReferenceId: "_Test"
Missing ReferenceId: "Example"
Missing ReferenceId: "Test"
Missing ReferenceId: "Test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Example":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(1)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/compiler/privatePropertyInUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "SyncableObject":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/privatePropertyUsingObjectType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/promiseChaining.ts
semantic error: Symbol reference IDs mismatch for "Chain":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/promiseTest.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/promiseType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9"]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Promise", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Promise", "arguments", "p", "require", "undefined", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(9), ReferenceId(18), ReferenceId(34), ReferenceId(36), ReferenceId(49), ReferenceId(51), ReferenceId(73), ReferenceId(76), ReferenceId(89), ReferenceId(91), ReferenceId(104), ReferenceId(106), ReferenceId(128), ReferenceId(131), ReferenceId(153), ReferenceId(156), ReferenceId(169), ReferenceId(171), ReferenceId(184), ReferenceId(186), ReferenceId(199), ReferenceId(201), ReferenceId(203), ReferenceId(206), ReferenceId(208), ReferenceId(210), ReferenceId(213), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222), ReferenceId(223), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(238), ReferenceId(241), ReferenceId(243), ReferenceId(245), ReferenceId(247), ReferenceId(248), ReferenceId(250), ReferenceId(251), ReferenceId(252), ReferenceId(254), ReferenceId(255), ReferenceId(257), ReferenceId(258), ReferenceId(259), ReferenceId(261), ReferenceId(262), ReferenceId(263), ReferenceId(265), ReferenceId(266), ReferenceId(267), ReferenceId(268), ReferenceId(270), ReferenceId(271), ReferenceId(272)]
rebuilt        : [ReferenceId(43), ReferenceId(70), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(127), ReferenceId(130), ReferenceId(143), ReferenceId(145), ReferenceId(158), ReferenceId(160), ReferenceId(182), ReferenceId(185), ReferenceId(207), ReferenceId(210), ReferenceId(223), ReferenceId(225), ReferenceId(238), ReferenceId(240), ReferenceId(253), ReferenceId(255), ReferenceId(257), ReferenceId(260), ReferenceId(262), ReferenceId(264), ReferenceId(267), ReferenceId(270), ReferenceId(272), ReferenceId(274), ReferenceId(276), ReferenceId(277), ReferenceId(279), ReferenceId(280), ReferenceId(282), ReferenceId(285), ReferenceId(287), ReferenceId(289), ReferenceId(292), ReferenceId(295), ReferenceId(297), ReferenceId(299), ReferenceId(301), ReferenceId(302), ReferenceId(304), ReferenceId(305), ReferenceId(306), ReferenceId(308), ReferenceId(310), ReferenceId(312), ReferenceId(314)]

tasks/coverage/typescript/tests/cases/compiler/promiseTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["CPromise", "convert", "load"]
rebuilt        : ["convert", "load"]

tasks/coverage/typescript/tests/cases/compiler/promiseTypeInferenceUnion.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "PromiseLike"]
rebuilt        : ["Promise"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/promiseTypeStrictNull.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9", "x"]
rebuilt        : ScopeId(0): ["A", "B", "C", "D", "E", "F", "G", "H", "I", "_A", "_B", "_C", "_D", "_E", "_F", "_G", "_H", "_I", "_asyncToGenerator", "p00", "p01", "p10", "p11", "p12", "p13", "p14", "p15", "p16", "p17", "p18", "p19", "p20", "p21", "p22", "p23", "p24", "p25", "p26", "p27", "p28", "p29", "p30", "p31", "p32", "p33", "p34", "p35", "p36", "p37", "p38", "p39", "p40", "p41", "p42", "p43", "p44", "p45", "p46", "p47", "p48", "p49", "p50", "p51", "p52", "p53", "p54", "p55", "p56", "p57", "p58", "p59", "p60", "p61", "p62", "p63", "p64", "p65", "p66", "p67", "p68", "p69", "p70", "p71", "p72", "p73", "p74", "p75", "p76", "p77", "p78", "p79", "p80", "p81", "p82", "p83", "p84", "p85", "p86", "p87", "p88", "p89", "p90", "p91", "p92", "p93", "p94", "p95", "p96", "p97", "p98", "p99", "pa0", "pa1", "pa2", "pa3", "pa4", "pa5", "pa6", "pa7", "pa8", "pa9", "pb0", "pb1", "pb2", "pb3", "pb4", "pb5", "pb6", "pb7", "pb8", "pb9", "pc0", "pc1", "pc2", "pc3", "pc4", "pc5", "pc6", "pc7", "pc8", "pc9"]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(1) "x"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Promise", "arguments", "require", "undefined"]
rebuilt        : ["Error", "Promise", "arguments", "p", "require", "undefined", "x"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(9), ReferenceId(18), ReferenceId(34), ReferenceId(36), ReferenceId(49), ReferenceId(51), ReferenceId(73), ReferenceId(76), ReferenceId(89), ReferenceId(91), ReferenceId(104), ReferenceId(106), ReferenceId(128), ReferenceId(131), ReferenceId(153), ReferenceId(156), ReferenceId(169), ReferenceId(171), ReferenceId(184), ReferenceId(186), ReferenceId(199), ReferenceId(201), ReferenceId(203), ReferenceId(206), ReferenceId(208), ReferenceId(210), ReferenceId(213), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(222), ReferenceId(223), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(238), ReferenceId(241), ReferenceId(243), ReferenceId(245), ReferenceId(247), ReferenceId(248), ReferenceId(250), ReferenceId(251)]
rebuilt        : [ReferenceId(43), ReferenceId(70), ReferenceId(88), ReferenceId(90), ReferenceId(103), ReferenceId(105), ReferenceId(127), ReferenceId(130), ReferenceId(143), ReferenceId(145), ReferenceId(158), ReferenceId(160), ReferenceId(182), ReferenceId(185), ReferenceId(207), ReferenceId(210), ReferenceId(223), ReferenceId(225), ReferenceId(238), ReferenceId(240), ReferenceId(253), ReferenceId(255), ReferenceId(257), ReferenceId(260), ReferenceId(262), ReferenceId(264), ReferenceId(267), ReferenceId(270), ReferenceId(272), ReferenceId(274), ReferenceId(276), ReferenceId(277), ReferenceId(279), ReferenceId(280), ReferenceId(282), ReferenceId(285), ReferenceId(287), ReferenceId(289), ReferenceId(292), ReferenceId(295), ReferenceId(297), ReferenceId(299), ReferenceId(301), ReferenceId(302), ReferenceId(304), ReferenceId(305)]

tasks/coverage/typescript/tests/cases/compiler/promiseVoidErrorCallback.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Error", "Promise"]
rebuilt        : ["Promise"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/promiseWithResolvers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/promises.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/propTypeValidatorInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "PropTypes":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(20)]
Symbol reference IDs mismatch for "propTypes":
after transform: SymbolId(5): [ReferenceId(26)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "propTypesWithoutAnnotation":
after transform: SymbolId(6): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/propagateNonInferrableType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/propagationOfPromiseInitialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/propertyAccessOnObjectLiteral.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/propertyNamesWithStringLiteral.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/prototypeOnConstructorFunctions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/qualifiedName_ImportDeclarations-entity-names-referencing-a-var.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/ramdaToolsNoInfinite.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Curry", "R", "Tools"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(29), ScopeId(31)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["NonNullable", "Parameters", "R", "Record", "ReturnType", "Tools", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/ramdaToolsNoInfinite2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Any/Cast", "Any/Compute", "Any/Extends", "Any/Implements", "Any/Key", "Any/Kind", "Any/Type", "Any/_Internal", "Any/x", "Boolean/Boolean", "Boolean/Not", "Function/Curry", "Function/Function", "Function/Parameters", "Function/Return", "Iteration/Format", "Iteration/Iteration", "Iteration/IterationOf", "Iteration/Key", "Iteration/Next", "Iteration/Pos", "Iteration/Prev", "Iteration/_Internal", "List/Append", "List/Concat", "List/Drop", "List/Keys", "List/Length", "List/List", "List/NonNullable", "List/ObjectOf", "List/Prepend", "List/Reverse", "List/Tail", "List/_Internal", "Number/Number", "Number/NumberOf", "Number/_Internal", "Object/At", "Object/Keys", "Object/ListOf", "Object/Merge", "Object/NonNullable", "Object/Omit", "Object/Overwrite", "Object/Pick", "Object/_Internal", "Union/Exclude", "Union/Has", "Union/Keys", "Union/NonNullable", "Union/Union"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(13), ScopeId(19), ScopeId(21), ScopeId(25), ScopeId(31), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(44), ScopeId(48), ScopeId(51), ScopeId(53), ScopeId(56), ScopeId(62), ScopeId(64), ScopeId(71), ScopeId(73), ScopeId(81), ScopeId(88), ScopeId(92), ScopeId(98), ScopeId(100), ScopeId(103), ScopeId(106), ScopeId(108), ScopeId(111), ScopeId(113), ScopeId(115), ScopeId(120), ScopeId(127), ScopeId(132), ScopeId(141), ScopeId(143), ScopeId(145), ScopeId(148), ScopeId(151), ScopeId(154), ScopeId(156), ScopeId(162), ScopeId(167), ScopeId(171), ScopeId(173), ScopeId(175), ScopeId(177), ScopeId(180), ScopeId(182), ScopeId(184), ScopeId(186), ScopeId(190)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude", "Function", "ReadonlyArray", "Required"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/reExportUndefined2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/reachabilityCheckWithEmptyDefault.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/reactHOCSpreadprops.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/reactNamespaceImportPresevation.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsx", "_jsxFileName", "foo", "myReactLib"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName"]

tasks/coverage/typescript/tests/cases/compiler/reactNamespaceJSXEmit.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar", "_Bar", "_jsxFileName", "_objectSpread", "foo", "myReactLib", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(2) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Reference symbol mismatch for "_Bar":
after transform: SymbolId(3) "_Bar"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["React"]
rebuilt        : ["Bar", "React", "_Bar", "x"]

tasks/coverage/typescript/tests/cases/compiler/reactReadonlyHOCAssignabilityReal.tsx
semantic error: Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/reactSFCAndFunctionResolvable.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Checkbox", "OtherRadio", "Radio", "RandomComponent", "React", "_jsxFileName", "condition1", "condition2", "condition3"]
rebuilt        : ScopeId(0): ["RandomComponent", "React", "_jsxFileName"]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(14), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(10)]
Reference symbol mismatch for "condition1":
after transform: SymbolId(4) "condition1"
rebuilt        : <None>
Reference symbol mismatch for "Radio":
after transform: SymbolId(1) "Radio"
rebuilt        : <None>
Reference symbol mismatch for "Checkbox":
after transform: SymbolId(3) "Checkbox"
rebuilt        : <None>
Reference symbol mismatch for "condition2":
after transform: SymbolId(5) "condition2"
rebuilt        : <None>
Reference symbol mismatch for "OtherRadio":
after transform: SymbolId(2) "OtherRadio"
rebuilt        : <None>
Reference symbol mismatch for "Checkbox":
after transform: SymbolId(3) "Checkbox"
rebuilt        : <None>
Reference symbol mismatch for "condition1":
after transform: SymbolId(4) "condition1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Checkbox", "OtherRadio", "Radio", "condition1", "condition2"]

tasks/coverage/typescript/tests/cases/compiler/reactTagNameComponentWithPropsNoOOM.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "Tag", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Tag":
after transform: SymbolId(1) "Tag"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Tag"]

tasks/coverage/typescript/tests/cases/compiler/reactTagNameComponentWithPropsNoOOM2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "Tag", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
rebuilt        : ScopeId(0): ["React", "_jsxFileName", "_objectSpread", "children", "classes", "rest"]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Reference symbol mismatch for "Tag":
after transform: SymbolId(1) "Tag"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : ["Tag"]

tasks/coverage/typescript/tests/cases/compiler/readonlyFloat32ArrayAssignableWithFloat32Array.ts
semantic error: Unresolved references mismatch:
after transform: ["Float32Array", "Readonly"]
rebuilt        : ["Float32Array"]
Unresolved reference IDs mismatch for "Float32Array":
after transform: [ReferenceId(1), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(14), ReferenceId(15)]
rebuilt        : [ReferenceId(9)]

tasks/coverage/typescript/tests/cases/compiler/readonlyInDeclarationFile.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(21), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(21), ScopeId(25)]
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/reboundBaseClassSymbol.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/rectype.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "f":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(2): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/recursiveArrayNotCircular.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["ActionType", "Bar", "Batch", "Baz", "Foo"]
rebuilt        : ScopeId(1): ["ActionType"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "ActionType":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "ActionType":
after transform: SymbolId(3): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(36)]
rebuilt        : SymbolId(0): [ReferenceId(9), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18)]

tasks/coverage/typescript/tests/cases/compiler/recursiveBaseConstructorCreation1.ts
semantic error: Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/recursiveBaseConstructorCreation2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["abc", "base", "xyz"]
rebuilt        : ["xyz"]
Unresolved reference IDs mismatch for "xyz":
after transform: [ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/recursiveClassBaseType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Base", "Base1", "C", "Derived1", "p"]
rebuilt        : ScopeId(0): ["Base1", "C", "Derived1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(6)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "Base":
after transform: SymbolId(2) "Base"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["Base", "p", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/recursiveClassInstantiationsWithDefaultConstructors.ts
semantic error: Missing SymbolId: "TypeScript2"
Missing SymbolId: "_TypeScript"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "MemberName"
Missing ReferenceId: "_TypeScript"
Missing ReferenceId: "MemberNameArray"
Missing ReferenceId: "TypeScript2"
Missing ReferenceId: "TypeScript2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "MemberName":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(4)]
Symbol reference IDs mismatch for "MemberNameArray":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(6)]
Reference symbol mismatch for "TypeScript2":
after transform: SymbolId(0) "TypeScript2"
rebuilt        : SymbolId(1) "TypeScript2"

tasks/coverage/typescript/tests/cases/compiler/recursiveCloduleReference.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/recursiveComplicatedClasses.ts
semantic error: Symbol reference IDs mismatch for "Symbol":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "ParameterSymbol":
after transform: SymbolId(6): [ReferenceId(0)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "TypeSymbol":
after transform: SymbolId(7): [ReferenceId(2)]
rebuilt        : SymbolId(8): []

tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalCrash3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(16), ScopeId(24), ScopeId(25), ScopeId(33), ScopeId(36), ScopeId(37), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalEvaluationNonInfinite.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x", "y"]
rebuilt        : ScopeId(0): ["b", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "x"]

tasks/coverage/typescript/tests/cases/compiler/recursiveConditionalTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(20), ScopeId(22)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["NonNullable", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/recursiveExcessPropertyChecks.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/recursiveExportAssignmentAndFindAliasedType7.ts
semantic error: Missing SymbolId: "self"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "self":
after transform: SymbolId(0) "self"
rebuilt        : SymbolId(0) "self"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/compiler/recursiveFieldSetting.ts
semantic error: Symbol reference IDs mismatch for "Recursive1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Recursive2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Recursive3":
after transform: SymbolId(3): [ReferenceId(2)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/recursiveFunctionTypes1.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveGenericMethodCall.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/recursiveGenericTypeHierarchy.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveGenericUnionType1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Test1", "Test2", "s1", "s2", "x"]
rebuilt        : ScopeId(0): ["s1", "s2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Test1", "Test2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/recursiveGenericUnionType2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Test1", "Test2", "s1", "s2", "x"]
rebuilt        : ScopeId(0): ["s1", "s2", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Test1", "Test2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/recursiveIdenticalAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveIdenticalOverloadResolution.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/recursiveInheritance2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "x", "y", "z"]
rebuilt        : ScopeId(0): ["x", "y", "z"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(7) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c"]

tasks/coverage/typescript/tests/cases/compiler/recursiveMods.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "C"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Missing SymbolId: "_Foo2"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(3): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol flags mismatch for "Bar":
after transform: SymbolId(2): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "Baz":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "Gar":
after transform: SymbolId(5): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Unresolved reference IDs mismatch for "C":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(6)]
rebuilt        : [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/recursiveResolveDeclaredMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["E"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/recursiveReverseMappedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/recursiveSpecializationOfExtendedTypeWithError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveSpecializationOfSignatures.ts
semantic error: Symbol reference IDs mismatch for "S0":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTupleTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTupleTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTypeAliasWithSpreadConditionalReturnNotCircular.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["opt1", "opt2", "opt3", "zipped1", "zipped2", "zipped3"]
rebuilt        : ScopeId(0): ["zipped1", "zipped2", "zipped3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Reference symbol mismatch for "opt1":
after transform: SymbolId(18) "opt1"
rebuilt        : <None>
Reference symbol mismatch for "opt2":
after transform: SymbolId(19) "opt2"
rebuilt        : <None>
Reference symbol mismatch for "opt3":
after transform: SymbolId(20) "opt3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["opt1", "opt2", "opt3"]

tasks/coverage/typescript/tests/cases/compiler/recursiveTypeComparison.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTypeIdentity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTypeParameterReferenceError1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(6): [ReferenceId(6)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTypeParameterReferenceError2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/recursiveUnionTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/recursivelySpecializedConstructorDeclaration.ts
semantic error: Missing SymbolId: "MsPortal"
Missing SymbolId: "_MsPortal"
Missing SymbolId: "Controls"
Missing SymbolId: "_Controls"
Missing SymbolId: "Base"
Missing SymbolId: "_Base"
Missing SymbolId: "ItemList"
Missing SymbolId: "_ItemList"
Missing ReferenceId: "_ItemList"
Missing ReferenceId: "ItemValue"
Missing ReferenceId: "_ItemList"
Missing ReferenceId: "ViewModel"
Missing ReferenceId: "ItemList"
Missing ReferenceId: "ItemList"
Missing ReferenceId: "_Base"
Missing ReferenceId: "_Base"
Missing ReferenceId: "Base"
Missing ReferenceId: "Base"
Missing ReferenceId: "_Controls"
Missing ReferenceId: "_Controls"
Missing ReferenceId: "Controls"
Missing ReferenceId: "Controls"
Missing ReferenceId: "_MsPortal"
Missing ReferenceId: "_MsPortal"
Missing ReferenceId: "MsPortal"
Missing ReferenceId: "MsPortal"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(11)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(12)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(13)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(6), SymbolId(9), SymbolId(14)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "ItemValue":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(8): [ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "ViewModel":
after transform: SymbolId(9): [ReferenceId(0)]
rebuilt        : SymbolId(10): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/redeclarationOfVarWithGenericType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/reducibleIndexedAccessTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Type"]
rebuilt        : ScopeId(1): ["Type"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Type":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(14), ReferenceId(33)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8)]

tasks/coverage/typescript/tests/cases/compiler/reexportNameAliasedAndHoisted.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Sizing"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "Sizing":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Sizing":
after transform: SymbolId(0): Span { start: 12, end: 18 }
rebuilt        : SymbolId(0): Span { start: 39, end: 45 }
Symbol redeclarations mismatch for "Sizing":
after transform: SymbolId(0): [Span { start: 39, end: 45 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/reexportWrittenCorrectlyInDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Test", "_defineProperty", "things"]
rebuilt        : ScopeId(0): ["Test", "_defineProperty"]

tasks/coverage/typescript/tests/cases/compiler/regexpExecAndMatchTypeUsages.ts
semantic error: Unresolved references mismatch:
after transform: ["Math", "RegExpExecArray", "RegExpMatchArray", "undefined"]
rebuilt        : ["Math", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/relatedViaDiscriminatedTypeNoError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/relatedViaDiscriminatedTypeNoError2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(5) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(6) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(6) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(5) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

tasks/coverage/typescript/tests/cases/compiler/reorderProperties.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireEmitSemicolon.ts
semantic error: Missing SymbolId: "Models"
Missing SymbolId: "_Models"
Missing ReferenceId: "_Models"
Missing ReferenceId: "Person"
Missing ReferenceId: "Models"
Missing ReferenceId: "Models"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "Person":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFile.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileNonRelative.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileNonRelativeWithoutExtensionResolvesToTs.ts
semantic error: Missing SymbolId: "f"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileTypes.ts
semantic error: Missing SymbolId: "b"
Missing ReferenceId: "require"
Missing SymbolId: "c"
Missing ReferenceId: "require"
Missing SymbolId: "d"
Missing ReferenceId: "require"
Missing SymbolId: "e"
Missing ReferenceId: "require"
Missing SymbolId: "f"
Missing ReferenceId: "require"
Missing SymbolId: "g"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "c":
after transform: SymbolId(1) "c"
rebuilt        : SymbolId(1) "c"
Reference symbol mismatch for "d":
after transform: SymbolId(2) "d"
rebuilt        : SymbolId(2) "d"
Reference symbol mismatch for "e":
after transform: SymbolId(3) "e"
rebuilt        : SymbolId(3) "e"
Reference symbol mismatch for "f":
after transform: SymbolId(4) "f"
rebuilt        : SymbolId(4) "f"
Reference symbol mismatch for "g":
after transform: SymbolId(5) "g"
rebuilt        : SymbolId(5) "g"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithAlwaysStrictWithoutErrors.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithDeclaration.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithEmptyObject.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleEmitUndefined.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitAmd.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitAmdOutFile.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitEs2015.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitEsNext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithModuleNodeResolutionEmitUndefined.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithSourceMap.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithTraillingComma.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutAllowJs.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutEsModuleInterop.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutExtensionResolvesToTs.ts
semantic error: Missing SymbolId: "c1"
Missing ReferenceId: "require"
Missing SymbolId: "c2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "c1":
after transform: SymbolId(0) "c1"
rebuilt        : SymbolId(0) "c1"
Reference symbol mismatch for "c2":
after transform: SymbolId(2) "c2"
rebuilt        : SymbolId(2) "c2"
Reference symbol mismatch for "c1":
after transform: SymbolId(0) "c1"
rebuilt        : SymbolId(0) "c1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFileWithoutOutDir.ts
semantic error: Missing SymbolId: "b1"
Missing ReferenceId: "require"
Missing SymbolId: "b2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Reference symbol mismatch for "b2":
after transform: SymbolId(2) "b2"
rebuilt        : SymbolId(2) "b2"
Reference symbol mismatch for "b1":
after transform: SymbolId(0) "b1"
rebuilt        : SymbolId(0) "b1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/requireOfJsonFile_PathMapping.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foobar"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/requiredInitializedParameter3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/reservedNameOnModuleImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["mstring"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/resolutionCandidateFromPackageJsonField2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/resolveInterfaceNameWithSameLetDeclarationName1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "bar":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(0): Span { start: 22, end: 30 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(0): [Span { start: 22, end: 30 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/resolveInterfaceNameWithSameLetDeclarationName2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["bar", "foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "bar":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "bar":
after transform: SymbolId(1): Span { start: 28, end: 31 }
rebuilt        : SymbolId(0): Span { start: 40, end: 54 }
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "bar":
after transform: SymbolId(1): [Span { start: 40, end: 54 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Interface)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 10, end: 13 }
rebuilt        : SymbolId(1): Span { start: 60, end: 74 }
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 60, end: 74 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/resolveModuleNameWithSameLetDeclarationName1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "foo":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | NameSpaceModule | Ambient)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "foo":
after transform: SymbolId(0): Span { start: 15, end: 18 }
rebuilt        : SymbolId(0): Span { start: 56, end: 68 }
Symbol redeclarations mismatch for "foo":
after transform: SymbolId(0): [Span { start: 56, end: 68 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["foo"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/resolveModuleNameWithSameLetDeclarationName2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["punycode"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/resolveNameWithNamspace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "myAssert":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | NameSpaceModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "myAssert":
after transform: SymbolId(0): Span { start: 44, end: 52 }
rebuilt        : SymbolId(0): Span { start: 91, end: 99 }
Symbol redeclarations mismatch for "myAssert":
after transform: SymbolId(0): [Span { start: 91, end: 99 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/resolveTypeAliasWithSameLetDeclarationName1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): ["C", "baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "baz":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | TypeAlias)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable)
Symbol span mismatch for "baz":
after transform: SymbolId(1): Span { start: 17, end: 20 }
rebuilt        : SymbolId(1): Span { start: 30, end: 38 }
Symbol reference IDs mismatch for "baz":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol redeclarations mismatch for "baz":
after transform: SymbolId(1): [Span { start: 30, end: 38 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/restParamUsingMappedTypeOverUnionConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/restParameterAssignmentCompatibility.ts
semantic error: Symbol reference IDs mismatch for "T":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "S":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "T1":
after transform: SymbolId(7): [ReferenceId(4)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/compiler/restParameterTypeInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/restTypeRetainsMappyness.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/restUnion2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_extends", "_objectDestructuringEmpty", "nullUnion", "rest2", "rest3", "undefinedUnion"]
rebuilt        : ScopeId(0): ["_extends", "_objectDestructuringEmpty", "rest2", "rest3"]
Reference symbol mismatch for "undefinedUnion":
after transform: SymbolId(0) "undefinedUnion"
rebuilt        : <None>
Reference symbol mismatch for "undefinedUnion":
after transform: SymbolId(0) "undefinedUnion"
rebuilt        : <None>
Reference symbol mismatch for "nullUnion":
after transform: SymbolId(2) "nullUnion"
rebuilt        : <None>
Reference symbol mismatch for "nullUnion":
after transform: SymbolId(2) "nullUnion"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["nullUnion", "require", "undefinedUnion"]

tasks/coverage/typescript/tests/cases/compiler/returnInfiniteIntersection.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/returnTypeInferenceNotTooBroad.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/returnTypeParameterWithModules.ts
semantic error: Missing SymbolId: "M1"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "reduce"
Missing ReferenceId: "M1"
Missing ReferenceId: "M1"
Missing SymbolId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "compose"
Missing ReferenceId: "_M2"
Missing ReferenceId: "compose2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["A", "_M2", "compose", "compose2"]
rebuilt        : ScopeId(3): ["_M2", "compose", "compose2"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "reduce":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(7)]
Symbol reference IDs mismatch for "compose":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(14)]
Symbol reference IDs mismatch for "compose2":
after transform: SymbolId(9): [ReferenceId(11)]
rebuilt        : SymbolId(9): [ReferenceId(12), ReferenceId(19)]
Reference symbol mismatch for "A":
after transform: SymbolId(7) "A"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "arguments"]
rebuilt        : ["A", "Array", "arguments"]
Unresolved reference IDs mismatch for "Array":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/reuseInnerModuleMember.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/reverseMappedContravariantInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedIntersectionInference1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedIntersectionInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTupleContext.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Record", "create", "test1", "test2", "test4"]
rebuilt        : ["create", "test1", "test2", "test4"]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeAssignableToIndex.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeContextualTypesPerElementOfTupleConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["EventTarget", "Extract", "HTMLButtonElement", "Parameters", "bindAll"]
rebuilt        : ["bindAll"]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeDeepDeclarationEmit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ObjValidator", "SimpleStringValidator", "outputExample", "test", "validatorFunc"]
rebuilt        : ScopeId(0): ["outputExample", "test", "validatorFunc"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "SimpleStringValidator":
after transform: SymbolId(7) "SimpleStringValidator"
rebuilt        : <None>
Reference symbol mismatch for "ObjValidator":
after transform: SymbolId(8) "ObjValidator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["ObjValidator", "SimpleStringValidator"]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeInferenceSameSource1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypePrimitiveConstraintProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/reverseMappedTypeRecursiveInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/reverseMappedUnionInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["const", "createExtractor", "isIdentifier", "isStringLiteral", "unionType"]
rebuilt        : ["createExtractor", "isIdentifier", "isStringLiteral", "unionType"]

tasks/coverage/typescript/tests/cases/compiler/reversedRecusiveTypeInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/selfInLambdas.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["X", "_defineProperty", "o", "window"]
rebuilt        : ScopeId(0): ["X", "_defineProperty", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Reference symbol mismatch for "window":
after transform: SymbolId(1) "window"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["require", "window"]

tasks/coverage/typescript/tests/cases/compiler/selfReference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/selfReferencingTypeReferenceInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/selfReferentialFunctionType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["f", "g", "h"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/separate1-2.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "f"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "f":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/shebangBeforeReferences.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/sigantureIsSubTypeIfTheyAreIdentical.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/signatureCombiningRestParameters2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "console":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/signatureInstantiationWithRecursiveConstraints.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/signatureOverloadsWithComments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): [ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/silentNeverPropagation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/simpleRecursionWithBaseCase2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_foo", "_foo2", "_rec", "_rec2", "_rec3", "_rec4", "_rec5", "_rec6", "foo1", "foo2", "ps", "rec1", "rec2", "rec3", "rec4", "rec5", "rec6"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_foo", "_foo2", "_rec", "_rec2", "_rec3", "_rec4", "_rec5", "_rec6", "foo1", "foo2", "rec1", "rec2", "rec3", "rec4", "rec5", "rec6"]
Reference symbol mismatch for "ps":
after transform: SymbolId(6) "ps"
rebuilt        : <None>
Reference symbol mismatch for "ps":
after transform: SymbolId(6) "ps"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Promise", "arguments", "require"]
rebuilt        : ["Math", "arguments", "ps", "require"]

tasks/coverage/typescript/tests/cases/compiler/simplifyingConditionalWithInteriorConditionalIsRelated.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(5): []

tasks/coverage/typescript/tests/cases/compiler/singletonLabeledTuple.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/sliceResultCast.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/compiler/sourceMap-Comments.ts
semantic error: Missing SymbolId: "sas"
Missing SymbolId: "_sas"
Missing SymbolId: "tools"
Missing SymbolId: "_tools"
Missing ReferenceId: "_tools"
Missing ReferenceId: "Test"
Missing ReferenceId: "tools"
Missing ReferenceId: "tools"
Missing ReferenceId: "_sas"
Missing ReferenceId: "_sas"
Missing ReferenceId: "sas"
Missing ReferenceId: "sas"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(5)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol reference IDs mismatch for "Test":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/sourceMap-FileWithComments.ts
semantic error: Missing SymbolId: "Shapes"
Missing SymbolId: "_Shapes"
Missing ReferenceId: "_Shapes"
Missing ReferenceId: "Point"
Missing ReferenceId: "_Shapes"
Missing ReferenceId: "foo"
Missing ReferenceId: "Shapes"
Missing ReferenceId: "Shapes"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(8), SymbolId(9), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(2): [ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(4): [ReferenceId(5), ReferenceId(7), ReferenceId(10)]
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(6): []
rebuilt        : SymbolId(8): [ReferenceId(12)]
Reference symbol mismatch for "Shapes":
after transform: SymbolId(1) "Shapes"
rebuilt        : SymbolId(1) "Shapes"

tasks/coverage/typescript/tests/cases/compiler/sourceMap-InterfacePrecedingVariableDeclaration1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/sourceMap-StringLiteralWithNewLine.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Bindings mismatch:
after transform: ScopeId(0): ["Foo", "window"]
rebuilt        : ScopeId(0): ["Foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Reference symbol mismatch for "window":
after transform: SymbolId(2) "window"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["window"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapForFunctionInInternalModuleWithCommentPrecedingStatement01.ts
semantic error: Missing SymbolId: "Q"
Missing SymbolId: "_Q"
Missing ReferenceId: "Q"
Missing ReferenceId: "Q"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationClasses.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing SymbolId: "Bar"
Missing SymbolId: "_Bar"
Missing ReferenceId: "Bar"
Missing ReferenceId: "Bar"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(15)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(13), SymbolId(14), SymbolId(16)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(15), SymbolId(16)]
Symbol reference IDs mismatch for "Greeter":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(4): [ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(12)]
Symbol flags mismatch for "foo":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "foo2":
after transform: SymbolId(8): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDecorators.ts
semantic error: Unexpected token

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobotA", "multiRobotB", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForArrayBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobot", "robot"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobot", "robot"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "multiRobot", "robot"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "multiRobot", "robot"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForObjectBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobot", "getRobot", "i", "multiRobot", "name", "nameA", "primary", "primaryA", "robot", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotB", "multiRobots", "robotA", "robotB", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiRobots", "nameA", "nameA2", "nameB", "nameMA", "numberA2", "numberA3", "numberB", "primarySkillA", "robotA", "robotAInfo", "robotB", "robots", "secondarySkillA", "skillA2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobots", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobots", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "multiRobots", "robots"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "multiRobots", "robots"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringForOfObjectBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
rebuilt        : ScopeId(0): ["getMultiRobots", "getRobots", "i", "multiRobots", "name", "nameA", "primary", "primaryA", "robots", "secondary", "secondaryA", "skill", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterNestedObjectBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "hello", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "hello", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParameterObjectBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "hello", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "hello", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "foo4", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "foo4", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringParametertArrayBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "foo1", "foo2", "foo3", "robotA"]
rebuilt        : ScopeId(0): ["foo1", "foo2", "foo3", "robotA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatement.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatement1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "b", "b1", "c", "c1", "console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["a", "a1", "b", "b1", "c", "c1", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
rebuilt        : ScopeId(0): ["nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "multiRobotA", "multiRobotAInfo", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
rebuilt        : ScopeId(0): ["multiRobotA", "multiRobotAInfo", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPattern3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
rebuilt        : ScopeId(0): ["getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
rebuilt        : ScopeId(0): ["nameA", "nameA2", "nameC", "numberA2", "numberA3", "numberB", "numberC", "numberC2", "robotA", "robotAInfo", "robotB", "skillA2", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "multiRobotA", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
rebuilt        : ScopeId(0): ["multiRobotA", "multiRobotB", "nameMA", "nameMB", "nameMC", "nameMC2", "primarySkillA", "primarySkillC", "secondarySkillA", "secondarySkillC", "skillA"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementArrayBindingPatternDefaultValues3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
rebuilt        : ScopeId(0): ["getMultiRobotB", "getRobotB", "multiRobotA", "multiRobotAInfo", "multiRobotB", "multiSkillB", "nameA", "nameB", "nameMB", "numberB", "primarySkillB", "robotA", "robotAInfo", "robotB", "secondarySkillB", "skillB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
rebuilt        : ScopeId(0): ["hello", "nameA", "nameB", "nameC", "robotA", "robotB", "skillB", "skillC"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(1) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
rebuilt        : ScopeId(0): ["nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationDestructuringVariableStatementNestedObjectBindingPatternWithDefaultValues.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["console", "nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
rebuilt        : ScopeId(0): ["nameB", "nameC", "primaryA", "primaryB", "robotA", "robotB", "secondaryA", "secondaryB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationImport.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Missing SymbolId: "a"
Missing SymbolId: "b"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "m":
after transform: SymbolId(0) "m"
rebuilt        : SymbolId(0) "m"
Reference symbol mismatch for "m":
after transform: SymbolId(0) "m"
rebuilt        : SymbolId(0) "m"
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : SymbolId(3) "a"
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : SymbolId(4) "b"

tasks/coverage/typescript/tests/cases/compiler/sourceMapValidationModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/sourceMapWithMultipleFilesWithFileEndingWithInterface.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/sourcemapValidationDuplicateNames.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "c"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "_m2"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "c":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(1)]
Reference symbol mismatch for "m1":
after transform: SymbolId(0) "m1"
rebuilt        : SymbolId(0) "m1"

tasks/coverage/typescript/tests/cases/compiler/specedNoStackBlown.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array", "Partial", "ReadonlyArray", "spected", "true"]
rebuilt        : ["spected"]

tasks/coverage/typescript/tests/cases/compiler/specializationError.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/specializationOfExportedClass.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"

tasks/coverage/typescript/tests/cases/compiler/specializationsShouldNotAffectEachOther.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/specializeVarArgs1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/specializedInheritedConstructors1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "Model":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(3): [ReferenceId(3), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/specializedLambdaTypeArguments.ts
semantic error: Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/specializedOverloadWithRestParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/specializedSignatureInInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/specializedSignatureOverloadReturnTypeWithIndexers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/spreadBooleanRespectsFreshness.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo1", "foo2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "foo1":
after transform: SymbolId(3) "foo1"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Reference symbol mismatch for "foo2":
after transform: SymbolId(4) "foo2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : ["Array", "foo1", "foo2"]

tasks/coverage/typescript/tests/cases/compiler/spreadExpressionContextualType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/spreadIdenticalTypesRemoved.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/spreadIntersectionJsx.tsx
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/spreadObjectNoCircular1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_objectSpread", "b"]
rebuilt        : ScopeId(0): ["Foo", "_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["b", "require"]

tasks/coverage/typescript/tests/cases/compiler/spreadObjectPermutations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c", "v_a", "v_ab", "v_abc", "v_ac", "v_acb", "v_b", "v_ba", "v_bac", "v_bc", "v_bca", "v_c", "v_ca", "v_cab", "v_cb", "v_cba"]
rebuilt        : ScopeId(0): ["_objectSpread", "v_a", "v_ab", "v_abc", "v_ac", "v_acb", "v_b", "v_ba", "v_bac", "v_bc", "v_bca", "v_c", "v_ca", "v_cab", "v_cb", "v_cba"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "b", "c", "require"]

tasks/coverage/typescript/tests/cases/compiler/spreadObjectWithIndexDoesNotAddUndefinedToLocalIndex.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "m", "x"]
rebuilt        : ScopeId(0): ["_objectSpread", "x"]
Reference symbol mismatch for "m":
after transform: SymbolId(0) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["m", "require"]

tasks/coverage/typescript/tests/cases/compiler/spreadOfObjectLiteralAssignableToIndexSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record", "require", "undefined"]
rebuilt        : ["require", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/spreadParameterTupleType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(3): [ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/spreadTypeRemovesReadonly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/spreadsAndContextualTupleTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["const", "foo", "fx1", "fx2"]
rebuilt        : ["foo", "fx1", "fx2"]

tasks/coverage/typescript/tests/cases/compiler/spuriousCircularityOnTypeImport.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/stackDepthLimitCastingType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Backbone", "BackboneFetchCache", "hoge"]
rebuilt        : ScopeId(0): ["Backbone", "hoge"]
Symbol reference IDs mismatch for "Backbone":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/staticAnonymousTypeNotReferencingTypeParameter.ts
semantic error: Missing SymbolId: "tessst"
Missing SymbolId: "_tessst"
Missing ReferenceId: "_tessst"
Missing ReferenceId: "funkyFor"
Missing ReferenceId: "tessst"
Missing ReferenceId: "tessst"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(13), SymbolId(24), SymbolId(124), SymbolId(131)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(11), SymbolId(19), SymbolId(102)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(12), ScopeId(14), ScopeId(55), ScopeId(56), ScopeId(57)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(12)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(14), SymbolId(130)]
rebuilt        : ScopeId(6): [SymbolId(12), SymbolId(13)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "ListWrapper2":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(9), ReferenceId(12)]
rebuilt        : SymbolId(5): [ReferenceId(7)]
Symbol reference IDs mismatch for "funkyFor":
after transform: SymbolId(14): []
rebuilt        : SymbolId(13): [ReferenceId(24)]
Symbol reference IDs mismatch for "ListWrapper":
after transform: SymbolId(24): [ReferenceId(34), ReferenceId(37), ReferenceId(40), ReferenceId(44), ReferenceId(54), ReferenceId(59), ReferenceId(66), ReferenceId(72), ReferenceId(77), ReferenceId(80), ReferenceId(90), ReferenceId(93), ReferenceId(99), ReferenceId(107), ReferenceId(118), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(137), ReferenceId(147), ReferenceId(155), ReferenceId(161), ReferenceId(170), ReferenceId(173), ReferenceId(177), ReferenceId(200), ReferenceId(201)]
rebuilt        : SymbolId(19): [ReferenceId(50), ReferenceId(133), ReferenceId(134)]
Reference symbol mismatch for "tessst":
after transform: SymbolId(13) "tessst"
rebuilt        : SymbolId(11) "tessst"

tasks/coverage/typescript/tests/cases/compiler/staticFieldWithInterfaceContext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_Class", "_Class10", "_Class11", "_Class12", "_Class13", "_Class14", "_Class15", "_Class2", "_Class4", "_Class5", "_Class6", "_Class7", "_Class8", "_Class9", "_defineProperty", "c", "c10", "c11", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ex", "f"]
rebuilt        : ScopeId(0): ["_Class", "_Class10", "_Class11", "_Class12", "_Class13", "_Class14", "_Class15", "_Class2", "_Class3", "_Class4", "_Class5", "_Class6", "_Class7", "_Class8", "_Class9", "_defineProperty", "c", "c10", "c11", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ex", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Bindings mismatch:
after transform: ScopeId(4): ["_Class3", "c"]
rebuilt        : ScopeId(3): ["c"]
Symbol scope ID mismatch for "_Class3":
after transform: SymbolId(18): ScopeId(4)
rebuilt        : SymbolId(3): ScopeId(0)

tasks/coverage/typescript/tests/cases/compiler/staticInitializersAndLegacyClassDecorators.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "_C", "_C2", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "_C", "_C2", "_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution.ts
semantic error: Symbol reference IDs mismatch for "Comment":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/staticInstanceResolution3.ts
semantic error: Symbol reference IDs mismatch for "Promise":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/staticInterfaceAssignmentCompat.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Shape":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/staticMethodWithTypeParameterExtendsClauseDeclFile.ts
semantic error: Symbol reference IDs mismatch for "privateClass":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "publicClass":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/staticPrototypePropertyOnClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(5): [ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/strictFunctionTypes1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "never", "t1", "t2", "t3", "t4", "t5", "t6", "x", "x1", "x10", "x11", "x2", "x3", "x4"]
rebuilt        : ScopeId(0): ["t1", "t2", "t3", "t4", "t5", "t6", "x", "x1", "x10", "x11", "x2", "x3", "x4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "never":
after transform: SymbolId(23) "never"
rebuilt        : <None>
Reference symbol mismatch for "never":
after transform: SymbolId(23) "never"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(33) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(34) "b"
rebuilt        : <None>
Reference symbol mismatch for "never":
after transform: SymbolId(23) "never"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(33) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(34) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Object", "ReadonlyArray", "acceptA", "acceptUnion", "coAndContra", "coAndContraArray", "f1", "f2", "f3", "f4", "fo", "foo", "fs", "fx"]
rebuilt        : ["a", "acceptA", "acceptUnion", "b", "coAndContra", "coAndContraArray", "f1", "f2", "f3", "f4", "fo", "foo", "fs", "fx", "never"]

tasks/coverage/typescript/tests/cases/compiler/strictModeEnumMemberNameReserved.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "static"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/strictNullNotNullIndexTypeShouldWork.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/strictOptionalProperties2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/strictTypeofUnionNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(4): []

tasks/coverage/typescript/tests/cases/compiler/stringLiteralObjectLiteralDeclaration1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/stripMembersOptionality.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["someVal", "someVal2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "someVal":
after transform: SymbolId(0) "someVal"
rebuilt        : <None>
Reference symbol mismatch for "someVal2":
after transform: SymbolId(1) "someVal2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Required"]
rebuilt        : ["someVal", "someVal2"]

tasks/coverage/typescript/tests/cases/compiler/structural1.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "f":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/structuralTypeInDeclareFileForModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/styledComponentsInstantiaionLimitNotReached.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(16), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(30), ScopeId(32), ScopeId(35), ScopeId(38)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "JSX", "Omit", "Partial", "Pick", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/subclassThisTypeAssignable02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(12): [ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/subclassWithPolymorphicThisIsAssignable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/substituteReturnTypeSatisfiesConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ReturnType"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForIndexedAccessType1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForIndexedAccessType2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypeForNonGenericIndexedAccessType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypeNoMergeOfAssignableType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypePassedToExtends.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Set"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypesCompareCorrectlyInRestrictiveInstances.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/substitutionTypesInIndexedAccessTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/subtypeReductionUnionConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/subtypingTransitivity.ts
semantic error: Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "D2":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/superAccessCastedCall.ts
semantic error: Unresolved references mismatch:
after transform: ["Number", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/superAccessInFatArrow1.ts
semantic error: Missing SymbolId: "test"
Missing SymbolId: "_test"
Missing ReferenceId: "_test"
Missing ReferenceId: "A"
Missing ReferenceId: "_test"
Missing ReferenceId: "B"
Missing ReferenceId: "test"
Missing ReferenceId: "test"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericType1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "B":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/superCallFromClassThatDerivesFromGenericType2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "B":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/superHasMethodsFromMergedInterface.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Sub"]
rebuilt        : ScopeId(0): ["C", "Sub"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 31, end: 32 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/superWithGenericSpecialization.ts
semantic error: Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/superWithGenerics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "B":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/switchComparableCompatForBrands.ts
semantic error: Symbol reference IDs mismatch for "MyBrand":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/symbolLinkDeclarationEmitModuleNames.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Constructor"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/symbolLinkDeclarationEmitModuleNamesRootDir.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Constructor"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/symbolMergeValueAndImportedType.ts
semantic error: Symbol flags mismatch for "X":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable | Import)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "X":
after transform: SymbolId(0): Span { start: 9, end: 10 }
rebuilt        : SymbolId(0): Span { start: 35, end: 36 }
Symbol redeclarations mismatch for "X":
after transform: SymbolId(0): [Span { start: 35, end: 36 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/symbolObserverMismatchingPolyfillsWorkTogether.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/systemExportAssignment.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/systemExportAssignment3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/systemModule15.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/systemModule17.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/systemModule18.ts
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/systemModule7.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]

tasks/coverage/typescript/tests/cases/compiler/systemModuleAmbientDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "c", "e", "foo", "promise"]
rebuilt        : ScopeId(0): ["c", "e", "foo", "promise"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "E":
after transform: SymbolId(0) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["C", "Foo", "Promise"]
rebuilt        : ["C", "E", "Foo", "Promise"]

tasks/coverage/typescript/tests/cases/compiler/systemModuleConstEnums.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "NonTopLevelConstEnum"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(2): ["TopLevelConstEnum", "X"]
rebuilt        : ScopeId(1): ["TopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(5): ["NonTopLevelConstEnum", "X"]
rebuilt        : ScopeId(4): ["NonTopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelConstEnum":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(5): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(5): []
rebuilt        : SymbolId(5): [ReferenceId(12)]
Reference symbol mismatch for "M":
after transform: SymbolId(4) "M"
rebuilt        : SymbolId(3) "M"

tasks/coverage/typescript/tests/cases/compiler/systemModuleConstEnumsSeparateCompilation.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "NonTopLevelConstEnum"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(2): ["TopLevelConstEnum", "X"]
rebuilt        : ScopeId(1): ["TopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Bindings mismatch:
after transform: ScopeId(5): ["NonTopLevelConstEnum", "X"]
rebuilt        : ScopeId(4): ["NonTopLevelConstEnum"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelConstEnum":
after transform: SymbolId(1): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(5): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "NonTopLevelConstEnum":
after transform: SymbolId(5): []
rebuilt        : SymbolId(5): [ReferenceId(12)]
Reference symbol mismatch for "M":
after transform: SymbolId(4) "M"
rebuilt        : SymbolId(3) "M"

tasks/coverage/typescript/tests/cases/compiler/systemModuleDeclarationMerging.ts
semantic error: Missing SymbolId: "_F"
Missing ReferenceId: "F"
Missing ReferenceId: "F"
Missing SymbolId: "_C"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing SymbolId: "_E"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(1), SymbolId(6)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(5): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(8)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Symbol flags mismatch for "F":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Function | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | Function)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(0): []
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(0): [Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "C":
after transform: SymbolId(2): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(2): [Span { start: 83, end: 84 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(6): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "E":
after transform: SymbolId(4): [Span { start: 128, end: 129 }]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/compiler/systemModuleNonTopLevelModuleMembers.ts
semantic error: Missing SymbolId: "TopLevelModule"
Missing SymbolId: "_TopLevelModule"
Missing ReferenceId: "TopLevelModule"
Missing ReferenceId: "TopLevelModule"
Missing SymbolId: "TopLevelModule2"
Missing SymbolId: "_TopLevelModule2"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "NonTopLevelClass"
Missing SymbolId: "NonTopLevelModule"
Missing SymbolId: "_NonTopLevelModule"
Missing ReferenceId: "NonTopLevelModule"
Missing ReferenceId: "NonTopLevelModule"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "NonTopLevelFunction"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "NonTopLevelEnum"
Missing ReferenceId: "TopLevelModule2"
Missing ReferenceId: "TopLevelModule2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(13)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3)]
Bindings mismatch:
after transform: ScopeId(4): ["E", "TopLevelEnum"]
rebuilt        : ScopeId(4): ["TopLevelEnum"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(14)]
rebuilt        : ScopeId(5): [SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(13), SymbolId(14)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(9), SymbolId(15)]
rebuilt        : ScopeId(7): [SymbolId(11), SymbolId(12)]
Bindings mismatch:
after transform: ScopeId(9): ["E", "NonTopLevelEnum"]
rebuilt        : ScopeId(9): ["NonTopLevelEnum"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode)
rebuilt        : ScopeId(9): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "TopLevelEnum":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "NonTopLevelClass":
after transform: SymbolId(7): []
rebuilt        : SymbolId(9): [ReferenceId(6)]
Symbol flags mismatch for "NonTopLevelFunction":
after transform: SymbolId(10): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "NonTopLevelFunction":
after transform: SymbolId(10): []
rebuilt        : SymbolId(13): [ReferenceId(12)]
Symbol flags mismatch for "NonTopLevelEnum":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "NonTopLevelEnum":
after transform: SymbolId(11): []
rebuilt        : SymbolId(14): [ReferenceId(17)]

tasks/coverage/typescript/tests/cases/compiler/systemNamespaceAliasEmit.ts
semantic error: Missing SymbolId: "ns"
Missing SymbolId: "_ns"
Missing ReferenceId: "ns"
Missing ReferenceId: "ns"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["AnEnum", "ONE", "TWO"]
rebuilt        : ScopeId(2): ["AnEnum"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AnEnum":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Reference symbol mismatch for "ns":
after transform: SymbolId(0) "ns"
rebuilt        : SymbolId(0) "ns"
Reference symbol mismatch for "ns":
after transform: SymbolId(0) "ns"
rebuilt        : SymbolId(0) "ns"

tasks/coverage/typescript/tests/cases/compiler/taggedPrimitiveNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Error", "true"]
rebuilt        : ["Error"]

tasks/coverage/typescript/tests/cases/compiler/taggedTemplateStringWithSymbolExpression01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/taggedTemplatesInDifferentScopes.ts
semantic error: Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/taggedTemplatesInModuleAndGlobal.ts
semantic error: Missing SymbolId: "n"
Missing SymbolId: "_n"
Missing ReferenceId: "n"
Missing ReferenceId: "n"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(5)]
Symbol flags mismatch for "id":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "templateObjectFactory":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/tailRecursiveConditionalTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/targetEs6DecoratorMetadataImportNotElided.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Input", "MyComponent", "TemplateRef", "_defineProperty"]
rebuilt        : ScopeId(0): ["Input", "MyComponent", "_defineProperty"]

tasks/coverage/typescript/tests/cases/compiler/templateExpressionAsPossiblyDiscriminantValue.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/templateExpressionNoInlininingOfConstantBindingWithInitializer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/templateLiteralConstantEvaluation.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["lowercasePath", "options1", "path"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "path":
after transform: SymbolId(1) "path"
rebuilt        : <None>
Reference symbol mismatch for "options1":
after transform: SymbolId(2) "options1"
rebuilt        : <None>
Reference symbol mismatch for "lowercasePath":
after transform: SymbolId(3) "lowercasePath"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Lowercase"]
rebuilt        : ["lowercasePath", "options1", "path"]

tasks/coverage/typescript/tests/cases/compiler/templateLiteralIntersection4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize", "Omit", "createStore"]
rebuilt        : ["createStore"]

tasks/coverage/typescript/tests/cases/compiler/templateLiteralsAndDecoratorMetadata.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Greeter", "_defineProperty", "format"]
rebuilt        : ScopeId(0): ["Greeter", "_defineProperty"]

tasks/coverage/typescript/tests/cases/compiler/testContainerList.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/testTypings.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/thisConditionalOnMethodReturnOfGenericInstance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(7)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(5), ReferenceId(8)]
rebuilt        : SymbolId(3): [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/compiler/thisExpressionOfGenericObject.ts
semantic error: Symbol reference IDs mismatch for "MyClass1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/thisInGenericStaticMembers.ts
semantic error: Symbol reference IDs mismatch for "B":
after transform: SymbolId(6): [ReferenceId(7), ReferenceId(8), ReferenceId(10), ReferenceId(11)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/thisInModuleFunction1.ts
semantic error: Missing SymbolId: "bar"
Missing SymbolId: "_bar"
Missing ReferenceId: "_bar"
Missing ReferenceId: "bar"
Missing ReferenceId: "bar"
Missing ReferenceId: "bar"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "bar":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]
Reference symbol mismatch for "bar":
after transform: SymbolId(0) "bar"
rebuilt        : SymbolId(0) "bar"

tasks/coverage/typescript/tests/cases/compiler/thisInPropertyBoundDeclarations.ts
semantic error: Symbol reference IDs mismatch for "Bug":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Function", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/thisInTupleTypeParameterConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(13)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/thisInTypeQuery.ts
semantic error: Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(8): []
Unresolved references mismatch:
after transform: ["Error", "require", "this"]
rebuilt        : ["Error", "require"]

tasks/coverage/typescript/tests/cases/compiler/thisIndexOnExistingReadonlyFieldIsNotNever.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Component", "Readonly", "require"]
rebuilt        : ["Component", "require"]
Unresolved reference IDs mismatch for "Component":
after transform: [ReferenceId(6), ReferenceId(9)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/this_inside-object-literal-getters-and-setters.ts
semantic error: Missing SymbolId: "ObjectLiteral"
Missing SymbolId: "_ObjectLiteral"
Missing ReferenceId: "ObjectLiteral"
Missing ReferenceId: "ObjectLiteral"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/tooFewArgumentsInGenericFunctionTypedArgument.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/topLevel.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/topLevelBlockExpando.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/trackedSymbolsNoCrash.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83), ScopeId(84), ScopeId(85), ScopeId(86), ScopeId(87), ScopeId(88), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92), ScopeId(93), ScopeId(94), ScopeId(95), ScopeId(96), ScopeId(97), ScopeId(98), ScopeId(99), ScopeId(100), ScopeId(101), ScopeId(102)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["Node0", "Node1", "Node10", "Node11", "Node12", "Node13", "Node14", "Node15", "Node16", "Node17", "Node18", "Node19", "Node2", "Node20", "Node21", "Node22", "Node23", "Node24", "Node25", "Node26", "Node27", "Node28", "Node29", "Node3", "Node30", "Node31", "Node32", "Node33", "Node34", "Node35", "Node36", "Node37", "Node38", "Node39", "Node4", "Node40", "Node41", "Node42", "Node43", "Node44", "Node45", "Node46", "Node47", "Node48", "Node49", "Node5", "Node50", "Node51", "Node52", "Node53", "Node54", "Node55", "Node56", "Node57", "Node58", "Node59", "Node6", "Node60", "Node61", "Node62", "Node63", "Node64", "Node65", "Node66", "Node67", "Node68", "Node69", "Node7", "Node70", "Node71", "Node72", "Node73", "Node74", "Node75", "Node76", "Node77", "Node78", "Node79", "Node8", "Node80", "Node81", "Node82", "Node83", "Node84", "Node85", "Node86", "Node87", "Node88", "Node89", "Node9", "Node90", "Node91", "Node92", "Node93", "Node94", "Node95", "Node96", "Node97", "Node98", "Node99", "SyntaxKind"]
rebuilt        : ScopeId(1): ["SyntaxKind"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SyntaxKind":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "SyntaxKind":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(85), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(95), ReferenceId(96), ReferenceId(97), ReferenceId(98), ReferenceId(99)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/transformNestedGeneratorsWithTry.ts
semantic error: Symbol reference IDs mismatch for "Bluebird":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/transformsElideNullUndefinedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32)]

tasks/coverage/typescript/tests/cases/compiler/transitiveTypeArgumentInference1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/trivialSubtypeReductionNoStructuralCheck2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Wizard", "_objectSpread", "props"]
rebuilt        : ScopeId(0): ["Wizard", "_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Wizard":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "props":
after transform: SymbolId(0) "props"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["props"]

tasks/coverage/typescript/tests/cases/compiler/truthinessCallExpressionCoercion3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/tslibReExportHelpers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "decorator"]
rebuilt        : ScopeId(0): ["Foo"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

tasks/coverage/typescript/tests/cases/compiler/tslibReExportHelpers2.ts
semantic error: Symbol flags mismatch for "_test":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable | Function)

tasks/coverage/typescript/tests/cases/compiler/tsxAttributeQuickinfoTypesSameAsObjectLiteral.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["Foo", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/tsxAttributesHasInferrableIndex.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "createElement":
after transform: SymbolId(2): SymbolFlags(BlockScopedVariable | Function | NameSpaceModule)
rebuilt        : SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
Symbol redeclarations mismatch for "createElement":
after transform: SymbolId(2): [Span { start: 243, end: 256 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Date", "React"]
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/tsxDefaultImports.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["SomeEnum", "one"]
rebuilt        : ScopeId(1): ["SomeEnum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SomeEnum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/tsxDiscriminantPropertyInference.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Comp", "JSX", "parseInt", "require", "true", "undefined"]
rebuilt        : ["Comp", "parseInt", "require", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/tsxFragmentChildrenCheck.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["MyComponent", "_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/compiler/tsxInferenceShouldNotYieldAnyOnUnions.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "ShouldInferFromData", "_jsxFileName", "_reactJsxRuntime", "f1", "f2", "f3"]
rebuilt        : ScopeId(0): ["ShouldInferFromData", "_jsxFileName", "_reactJsxRuntime", "f1", "f2", "f3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/tsxReactPropsInferenceSucceedsOnIntersections.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "React":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["Button", "HTMLButtonElement"]
rebuilt        : ["Button"]

tasks/coverage/typescript/tests/cases/compiler/tsxResolveExternalModuleExportsTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Test", "_jsx", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Foo", "_jsx", "_jsxFileName"]

tasks/coverage/typescript/tests/cases/compiler/tsxStatelessComponentDefaultProps.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/tsxUnionMemberChecksFilterDataProps.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "ReactElement", "RootHappy", "RootNotHappy", "_jsxFileName"]
rebuilt        : ScopeId(0): ["React", "RootHappy", "RootNotHappy", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/tsxUnionSpread.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["AnimalComponent", "JSX", "_jsx", "_jsxFileName", "_objectSpread", "component", "component2", "getProps", "props", "props2"]
rebuilt        : ScopeId(0): ["AnimalComponent", "_jsx", "_jsxFileName", "_objectSpread", "component", "component2", "getProps", "props", "props2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["JSX", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/tupleTypeInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["$q", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Reference symbol mismatch for "$q":
after transform: SymbolId(0) "$q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["$q"]

tasks/coverage/typescript/tests/cases/compiler/tupleTypeInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/twiceNestedKeyofIndexInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Exclude", "Pick", "Required", "set"]
rebuilt        : ["set"]

tasks/coverage/typescript/tests/cases/compiler/typeAliasDeclarationEmit2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeAliasDoesntMakeModuleInstantiated.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["m"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "m"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeAliasExport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeAliasFunctionTypeSharedSymbol.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["Mixin"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "Mixin":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Mixin":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "Mixin":
after transform: SymbolId(0): [Span { start: 152, end: 157 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeAnnotationBestCommonTypeInArrayLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeArgInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeArgInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceApparentType1.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceApparentType2.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceOrdering.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeArgumentInferenceWithRecursivelyReferencedTypeAliasToTypeLiteral02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeCheckObjectCreationExpressionWithUndefinedCallResolutionData.ts
semantic error: Missing SymbolId: "f"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : SymbolId(0) "f"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/typeConstraintsWithConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeGuardConstructorNarrowPrimitivesInUnion.ts
semantic error: Unresolved references mismatch:
after transform: ["Array", "Boolean", "Number", "String", "true"]
rebuilt        : ["Array", "Boolean", "Number", "String"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardConstructorPrimitiveTypes.ts
semantic error: Unresolved reference IDs mismatch for "BigInt":
after transform: [ReferenceId(16), ReferenceId(22), ReferenceId(36)]
rebuilt        : [ReferenceId(16), ReferenceId(31)]
Unresolved reference IDs mismatch for "String":
after transform: [ReferenceId(1), ReferenceId(18), ReferenceId(24)]
rebuilt        : [ReferenceId(1), ReferenceId(19)]
Unresolved reference IDs mismatch for "Number":
after transform: [ReferenceId(4), ReferenceId(19), ReferenceId(27)]
rebuilt        : [ReferenceId(4), ReferenceId(22)]
Unresolved reference IDs mismatch for "Boolean":
after transform: [ReferenceId(7), ReferenceId(20), ReferenceId(30)]
rebuilt        : [ReferenceId(7), ReferenceId(25)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(13), ReferenceId(21), ReferenceId(33)]
rebuilt        : [ReferenceId(13), ReferenceId(28)]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowByMutableUntypedField.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["arrayLikeOrIterable"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(4) "arrayLikeOrIterable"
rebuilt        : <None>
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(4) "arrayLikeOrIterable"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ArrayLike", "Iterable", "PropertyKey", "hasOwnProperty"]
rebuilt        : ["arrayLikeOrIterable", "hasOwnProperty"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowByUntypedField.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["arrayLikeOrIterable"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(4) "arrayLikeOrIterable"
rebuilt        : <None>
Reference symbol mismatch for "arrayLikeOrIterable":
after transform: SymbolId(4) "arrayLikeOrIterable"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ArrayLike", "Iterable", "PropertyKey", "hasOwnProperty"]
rebuilt        : ["arrayLikeOrIterable", "hasOwnProperty"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty11.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "m"]
rebuilt        : ScopeId(0): ["E"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(7), ReferenceId(9)]
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["m"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty12.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "m"]
rebuilt        : ScopeId(0): ["E"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(5), ReferenceId(7)]
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Reference symbol mismatch for "m":
after transform: SymbolId(3) "m"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["m"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty2.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "aIndex", "b", "bIndex", "c", "cIndex"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "aIndex":
after transform: SymbolId(0) "aIndex"
rebuilt        : <None>
Reference symbol mismatch for "bIndex":
after transform: SymbolId(2) "bIndex"
rebuilt        : <None>
Reference symbol mismatch for "bIndex":
after transform: SymbolId(2) "bIndex"
rebuilt        : <None>
Reference symbol mismatch for "cIndex":
after transform: SymbolId(4) "cIndex"
rebuilt        : <None>
Reference symbol mismatch for "cIndex":
after transform: SymbolId(4) "cIndex"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["aIndex", "bIndex", "cIndex"]

tasks/coverage/typescript/tests/cases/compiler/typeGuardNarrowsIndexedAccessOfKnownProperty7.ts
semantic error: Missing SymbolId: "Foo"
Missing SymbolId: "_Foo"
Missing ReferenceId: "_Foo"
Missing ReferenceId: "Foo"
Missing ReferenceId: "Foo"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(3), SymbolId(4)]
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : SymbolId(2) "Foo"
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : SymbolId(2) "Foo"

tasks/coverage/typescript/tests/cases/compiler/typeGuardOnContainerTypeNoHang.ts
semantic error: Missing SymbolId: "TypeGuards"
Missing SymbolId: "_TypeGuards"
Missing ReferenceId: "_TypeGuards"
Missing ReferenceId: "IsObject"
Missing ReferenceId: "TypeGuards"
Missing ReferenceId: "TypeGuards"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "IsObject":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "IsObject":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceCacheInvalidation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceFixEarly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceLiteralUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Symbol reference IDs mismatch for "NumCoercible":
after transform: SymbolId(2): [ReferenceId(13), ReferenceId(15), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(6)]
Unresolved references mismatch:
after transform: ["Array", "Date", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceReturnTypeCallback.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceTypePredicate.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithExcessProperties.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithExcessPropertiesJsx.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["JSX", "T", "require"]
rebuilt        : ["T", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(13)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeInferenceWithTypeAnnotation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeLiteralCallback.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/typeOfYieldWithUnionInContextualReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/typeParameterAndArgumentOfSameName1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["r"]
rebuilt        : ScopeId(1): ["A", "r"]
Symbol flags mismatch for "A":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeParameter)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "A":
after transform: SymbolId(1): Span { start: 11, end: 12 }
rebuilt        : SymbolId(1): Span { start: 29, end: 33 }
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol redeclarations mismatch for "A":
after transform: SymbolId(1): [Span { start: 29, end: 33 }]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Number"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeParameterCompatibilityAccrossDeclarations.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterConstrainedToOuterTypeParameter2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeParameterConstraintInstantiation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterDoesntBlockParameterLookup.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendingUnion1.ts
semantic error: Symbol reference IDs mismatch for "Animal":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(4)]
Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Dog":
after transform: SymbolId(2): [ReferenceId(5)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendingUnion2.ts
semantic error: Symbol reference IDs mismatch for "Cat":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Dog":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(6)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/typeParameterExtendsPrimitive.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterFixingWithContextSensitiveArguments5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typeParameterLeak.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_f", "b", "f"]
rebuilt        : ScopeId(0): ["_f", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f":
after transform: SymbolId(8) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/compiler/typeParameterOrderReversal.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/typePartameterConstraintInstantiatedWithDefaultWhenCheckingDefault.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Identity":
after transform: SymbolId(3): [ReferenceId(3), ReferenceId(10), ReferenceId(12), ReferenceId(18), ReferenceId(26)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/typePredicateAcceptingPartialOfRefinedType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typePredicateFreshLiteralWidening.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typePredicateStructuralMatch.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/typePredicateWithThisParameter.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["isFoo1", "isFoo2", "test"]
rebuilt        : ScopeId(0): ["isFoo1", "isFoo2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Reference symbol mismatch for "test":
after transform: SymbolId(6) "test"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["test"]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesCanNarrowByDiscriminant.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fruit", "fruit2", "kind"]
rebuilt        : ScopeId(0): ["kind"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit":
after transform: SymbolId(0) "fruit"
rebuilt        : <None>
Reference symbol mismatch for "fruit2":
after transform: SymbolId(5) "fruit2"
rebuilt        : <None>
Reference symbol mismatch for "fruit2":
after transform: SymbolId(5) "fruit2"
rebuilt        : <None>
Reference symbol mismatch for "fruit2":
after transform: SymbolId(5) "fruit2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const", "isOneOf"]
rebuilt        : ["fruit", "fruit2", "isOneOf"]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "isString":
after transform: [ReferenceId(0), ReferenceId(3)]
rebuilt        : [ReferenceId(1)]
Unresolved reference IDs mismatch for "isNumber":
after transform: [ReferenceId(1), ReferenceId(5)]
rebuilt        : [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesInUnion_noMatch.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["NonNullable", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/compiler/typePredicatesOptionalChaining3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives10.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives13.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives4.ts
semantic error: Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["$"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives6.ts
semantic error: Unresolved references mismatch:
after transform: ["$"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives7.ts
semantic error: Symbol reference IDs mismatch for "$":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives8.ts
semantic error: Unresolved references mismatch:
after transform: ["Lib"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeReferenceDirectives9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["./main", "Cls"]
rebuilt        : ScopeId(0): ["Cls"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Lib", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/typeResolution.ts
semantic error: Missing SymbolId: "TopLevelModule1"
Missing SymbolId: "_TopLevelModule"
Missing SymbolId: "SubModule1"
Missing SymbolId: "_SubModule"
Missing SymbolId: "SubSubModule1"
Missing SymbolId: "_SubSubModule"
Missing ReferenceId: "_SubSubModule"
Missing ReferenceId: "ClassA"
Missing ReferenceId: "_SubSubModule"
Missing ReferenceId: "ClassB"
Missing ReferenceId: "SubSubModule1"
Missing ReferenceId: "SubSubModule1"
Missing ReferenceId: "_SubModule"
Missing ReferenceId: "_SubModule"
Missing ReferenceId: "SubModule1"
Missing ReferenceId: "SubModule1"
Missing ReferenceId: "_TopLevelModule"
Missing ReferenceId: "_TopLevelModule"
Missing SymbolId: "SubModule2"
Missing SymbolId: "_SubModule2"
Missing SymbolId: "SubSubModule2"
Missing SymbolId: "_SubSubModule2"
Missing ReferenceId: "_SubSubModule2"
Missing ReferenceId: "ClassA"
Missing ReferenceId: "_SubSubModule2"
Missing ReferenceId: "ClassB"
Missing ReferenceId: "_SubSubModule2"
Missing ReferenceId: "ClassC"
Missing ReferenceId: "SubSubModule2"
Missing ReferenceId: "SubSubModule2"
Missing ReferenceId: "_SubModule2"
Missing ReferenceId: "_SubModule2"
Missing ReferenceId: "SubModule2"
Missing ReferenceId: "SubModule2"
Missing ReferenceId: "_TopLevelModule"
Missing ReferenceId: "_TopLevelModule"
Missing SymbolId: "NotExportedModule"
Missing SymbolId: "_NotExportedModule"
Missing ReferenceId: "_NotExportedModule"
Missing ReferenceId: "ClassA"
Missing ReferenceId: "NotExportedModule"
Missing ReferenceId: "NotExportedModule"
Missing ReferenceId: "TopLevelModule1"
Missing ReferenceId: "TopLevelModule1"
Missing SymbolId: "TopLevelModule2"
Missing SymbolId: "_TopLevelModule2"
Missing SymbolId: "SubModule3"
Missing SymbolId: "_SubModule3"
Missing ReferenceId: "_SubModule3"
Missing ReferenceId: "ClassA"
Missing ReferenceId: "SubModule3"
Missing ReferenceId: "SubModule3"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "_TopLevelModule2"
Missing ReferenceId: "TopLevelModule2"
Missing ReferenceId: "TopLevelModule2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(49)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(50)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(37), SymbolId(45), SymbolId(47), SymbolId(52)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(39), SymbolId(46), SymbolId(47)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(16), ScopeId(29), ScopeId(31), ScopeId(33)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(14), ScopeId(22), ScopeId(24)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(2), SymbolId(31), SymbolId(53)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4), SymbolId(33)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(13), SymbolId(25), SymbolId(54)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6), SymbolId(16), SymbolId(27)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(6), ScopeId(8)]
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(38), SymbolId(55)]
rebuilt        : ScopeId(14): [SymbolId(40), SymbolId(41)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(27)]
rebuilt        : ScopeId(14): [ScopeId(15)]
Binding symbols mismatch:
after transform: ScopeId(17): [SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(56)]
rebuilt        : ScopeId(15): [SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(18), ScopeId(20)]
Binding symbols mismatch:
after transform: ScopeId(33): [SymbolId(48), SymbolId(57)]
rebuilt        : ScopeId(24): [SymbolId(48), SymbolId(49)]
Binding symbols mismatch:
after transform: ScopeId(35): [SymbolId(50), SymbolId(58)]
rebuilt        : ScopeId(26): [SymbolId(51), SymbolId(52)]
Binding symbols mismatch:
after transform: ScopeId(36): [SymbolId(51), SymbolId(59)]
rebuilt        : ScopeId(27): [SymbolId(53), SymbolId(54)]
Symbol reference IDs mismatch for "ClassA":
after transform: SymbolId(3): [ReferenceId(0), ReferenceId(18)]
rebuilt        : SymbolId(6): [ReferenceId(10)]
Symbol reference IDs mismatch for "ClassB":
after transform: SymbolId(13): [ReferenceId(8), ReferenceId(26)]
rebuilt        : SymbolId(16): [ReferenceId(22)]
Symbol reference IDs mismatch for "ClassA":
after transform: SymbolId(39): []
rebuilt        : SymbolId(43): [ReferenceId(40)]
Symbol reference IDs mismatch for "ClassB":
after transform: SymbolId(40): []
rebuilt        : SymbolId(44): [ReferenceId(42)]
Symbol reference IDs mismatch for "ClassC":
after transform: SymbolId(41): []
rebuilt        : SymbolId(45): [ReferenceId(44)]
Symbol reference IDs mismatch for "ClassA":
after transform: SymbolId(48): []
rebuilt        : SymbolId(49): [ReferenceId(54)]
Symbol reference IDs mismatch for "ClassA":
after transform: SymbolId(51): []
rebuilt        : SymbolId(54): [ReferenceId(60)]
Unresolved references mismatch:
after transform: ["SubModule1", "SubSubModule1", "TopLevelModule1", "TopLevelModule2"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeVal.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["I"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "I":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "I":
after transform: SymbolId(0): Span { start: 10, end: 11 }
rebuilt        : SymbolId(0): Span { start: 35, end: 38 }
Symbol reference IDs mismatch for "I":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol redeclarations mismatch for "I":
after transform: SymbolId(0): [Span { start: 35, end: 38 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeVariableConstraintIntersections.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(7), ScopeId(8), ScopeId(9)]

tasks/coverage/typescript/tests/cases/compiler/typeVariableTypeGuards.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(8), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21)]
Unresolved references mismatch:
after transform: ["Partial", "Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typedArrayConstructorOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["ArrayBuffer", "BigInt64ArrayConstructor", "Float64ArrayConstructor"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typedArrays.ts
semantic error: Unresolved references mismatch:
after transform: ["ArrayLike", "Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]
rebuilt        : ["Float32Array", "Float64Array", "Int16Array", "Int32Array", "Int8Array", "Uint16Array", "Uint32Array", "Uint8Array", "Uint8ClampedArray"]

tasks/coverage/typescript/tests/cases/compiler/typeofEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "e1", "e2"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/typeofImportInstantiationExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record", "true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeofInterface.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["j", "k"]
rebuilt        : ScopeId(0): ["I", "j", "k"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol flags mismatch for "I":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "I":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): []
Symbol redeclarations mismatch for "I":
after transform: SymbolId(0): [Span { start: 32, end: 33 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "k":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/typeofObjectInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12)]
Symbol reference IDs mismatch for "val":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(15), ReferenceId(17), ReferenceId(22)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(10)]

tasks/coverage/typescript/tests/cases/compiler/typeofStrictNull.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/compiler/typeofStripsFreshness.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ALL":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "ANOTHER":
after transform: SymbolId(7): [ReferenceId(8)]
rebuilt        : SymbolId(2): []
Reference symbol mismatch for "Collection":
after transform: SymbolId(0) "Collection"
rebuilt        : <None>
Reference symbol mismatch for "Collection":
after transform: SymbolId(0) "Collection"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Collection"]

tasks/coverage/typescript/tests/cases/compiler/typeofThisInMethodSignature.ts
semantic error: Unresolved references mismatch:
after transform: ["this"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeofUndefined.ts
semantic error: Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/typeofUsedBeforeBlockScoped.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "o":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/compiler/umdGlobalConflict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["v1", "v2"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unaryPlus.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "some", "thing"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/compiler/uncalledFunctionChecksInConditionalPerf.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["b"]

tasks/coverage/typescript/tests/cases/compiler/uncaughtCompilerError1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "index", "lineTokens", "token", "tokens"]
rebuilt        : ScopeId(0): ["f"]
Reference symbol mismatch for "lineTokens":
after transform: SymbolId(1) "lineTokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "token":
after transform: SymbolId(2) "token"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Reference symbol mismatch for "tokens":
after transform: SymbolId(3) "tokens"
rebuilt        : <None>
Reference symbol mismatch for "index":
after transform: SymbolId(0) "index"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["index", "lineTokens", "token", "tokens"]

tasks/coverage/typescript/tests/cases/compiler/undefinedAsDiscriminantWithUnknown.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["s"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(1) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["s", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/underscoreEscapedNameInEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "__foo", "bar"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(6)]
Symbol reference IDs mismatch for "E":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
Reference symbol mismatch for "E":
after transform: SymbolId(0) "E"
rebuilt        : SymbolId(1) "E"

tasks/coverage/typescript/tests/cases/compiler/underscoreMapFirst.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyView", "_"]
rebuilt        : ScopeId(0): ["MyView"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unexportedInstanceClassVariables.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Missing SymbolId: "_M2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(4), SymbolId(6)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/compiler/unionCallMixedTypeParameterPresence.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["e", "e2"]
rebuilt        : ScopeId(0): ["e2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "e":
after transform: SymbolId(5) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["e"]

tasks/coverage/typescript/tests/cases/compiler/unionExcessPropertyCheckNoApparentPropTypeMismatchErrors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unionExcessPropsWithPartialMember.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "ab"]
rebuilt        : ScopeId(0): ["_objectSpread"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "ab":
after transform: SymbolId(2) "ab"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "ab", "require"]

tasks/coverage/typescript/tests/cases/compiler/unionOfArraysFilterCall.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/compiler/unionOfClassCalls.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "arr", "arr1", "arr2", "tmp"]
rebuilt        : ScopeId(0): ["arr", "arr1", "arr2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Reference symbol mismatch for "tmp":
after transform: SymbolId(5) "tmp"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(30) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Bar", "Baz", "Foo", "Promise", "Test"]
rebuilt        : ["a", "tmp"]

tasks/coverage/typescript/tests/cases/compiler/unionOfEnumInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "Enum"]
rebuilt        : ScopeId(1): ["Enum"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Enum":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Enum":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(19)]
rebuilt        : SymbolId(0): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/unionOfFunctionAndSignatureIsCallable.ts
semantic error: Symbol reference IDs mismatch for "c1":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(0)]
Symbol reference IDs mismatch for "c2":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/unionReductionMutualSubtypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["k", "run", "val"]
rebuilt        : ScopeId(0): ["k", "run"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Reference symbol mismatch for "val":
after transform: SymbolId(2) "val"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["val"]

tasks/coverage/typescript/tests/cases/compiler/unionReductionWithStringMappingAndIdenticalBaseTypeExistsNoCrash.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Capitalize", "upperFirst"]
rebuilt        : ["upperFirst"]

tasks/coverage/typescript/tests/cases/compiler/unionSignaturesWithThisParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/compiler/unionTypeParameterInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexAndMethodSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexAndTuple.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unionTypeWithIndexedLiteralType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unionTypeWithLeadingOperator.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unionTypeWithRecursiveSubtypeReduction1.ts
semantic error: Symbol reference IDs mismatch for "Module":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Namespace":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Class":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Property":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(7)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/compiler/unionWithIndexSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved reference IDs mismatch for "Int32Array":
after transform: [ReferenceId(6), ReferenceId(8), ReferenceId(11)]
rebuilt        : [ReferenceId(2)]
Unresolved reference IDs mismatch for "Uint8Array":
after transform: [ReferenceId(7), ReferenceId(9), ReferenceId(13)]
rebuilt        : [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolAssignmentOnGlobalAugmentationSuceeds.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "FOO_SYMBOL":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["Promise", "Symbol"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/compiler/uniqueSymbolPropertyDeclarationEmit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Op"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Op":
after transform: SymbolId(0) "Op"
rebuilt        : <None>
Reference flags mismatch for "Op":
after transform: ReferenceId(0): ReferenceFlags(Read)
rebuilt        : ReferenceId(0): ReferenceFlags(Read | Type)
Unresolved references mismatch:
after transform: []
rebuilt        : ["Op"]

tasks/coverage/typescript/tests/cases/compiler/unknownLikeUnionObjectFlagsNotPropagated.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/compiler/unknownPropertiesAreAssignableToObjectUnion.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/unmatchedParameterPositions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["s", "t1", "t2"]
rebuilt        : ScopeId(0): ["t1", "t2"]
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["s"]

tasks/coverage/typescript/tests/cases/compiler/unreachableDeclarations.ts
semantic error: A namespace declaration is only allowed at the top level of a namespace or module.
A namespace declaration is only allowed at the top level of a namespace or module.

tasks/coverage/typescript/tests/cases/compiler/untypedArgumentInLambdaExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/compiler/unusedClassesinNamespace3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/unusedImportDeclaration.ts
semantic error: Missing SymbolId: "B"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["foo"]
rebuilt        : ["foo", "require"]

tasks/coverage/typescript/tests/cases/compiler/unusedImports11.ts
semantic error: Missing SymbolId: "r"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Reference symbol mismatch for "r":
after transform: SymbolId(4) "r"
rebuilt        : SymbolId(4) "r"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/unusedImports13.ts
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/unusedImports14.ts
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/unusedImports15.ts
semantic error: Missing SymbolId: "Element"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/unusedImports16.ts
semantic error: Missing SymbolId: "Element"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Unresolved references mismatch:
after transform: ["React"]
rebuilt        : ["React", "require"]

tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace4.ts
semantic error: Missing SymbolId: "Validation"
Missing SymbolId: "_Validation"
Missing ReferenceId: "_Validation"
Missing ReferenceId: "c1"
Missing ReferenceId: "Validation"
Missing ReferenceId: "Validation"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "c1":
after transform: SymbolId(4): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/unusedInterfaceinNamespace5.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/unusedLocalProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Animal", "console"]
rebuilt        : ScopeId(0): ["Animal"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersDeferred.ts
semantic error: Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(23), SymbolId(29), SymbolId(32)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(10), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(23), SymbolId(29)]
Binding symbols mismatch:
after transform: ScopeId(43): [SymbolId(30), SymbolId(31)]
rebuilt        : ScopeId(45): [SymbolId(30), SymbolId(31)]
Reference symbol mismatch for "N":
after transform: SymbolId(29) "N"
rebuilt        : SymbolId(29) "N"

tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersOverloadSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/unusedLocalsAndParametersTypeAliases.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/unusedMethodsInInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unusedParameterUsedInTypeOf.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/unusedParametersThis.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/unusedTypeParameters9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "C2", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "C1":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C1":
after transform: SymbolId(0): [Span { start: 46, end: 48 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "C2":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol redeclarations mismatch for "C2":
after transform: SymbolId(3): [Span { start: 116, end: 118 }]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/compiler/unusedTypeParametersNotCheckedByNoUnusedLocals.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]

tasks/coverage/typescript/tests/cases/compiler/unwitnessedTypeParameterVariance.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "foo"]
rebuilt        : ScopeId(0): ["foo"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "b":
after transform: SymbolId(14) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(13) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b"]

tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration.ts
semantic error: Missing SymbolId: "ts"
Missing SymbolId: "_ts"
Missing ReferenceId: "_ts"
Missing ReferenceId: "printVersion"
Missing ReferenceId: "_ts"
Missing ReferenceId: "log"
Missing ReferenceId: "ts"
Missing ReferenceId: "ts"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Symbol flags mismatch for "printVersion":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "printVersion":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol flags mismatch for "log":
after transform: SymbolId(2): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "log":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(3): [ReferenceId(0), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/compiler/useBeforeDeclaration_classDecorators.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "C4", "C5", "C6", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "C4", "C5", "C6", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(27)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(25)]
Scope children mismatch:
after transform: ScopeId(39): [ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(58), ScopeId(60)]
rebuilt        : ScopeId(37): [ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(54), ScopeId(56)]
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(85)]
rebuilt        : SymbolId(4): [ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
Symbol reference IDs mismatch for "C5":
after transform: SymbolId(10): [ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(49), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(57), ReferenceId(88)]
rebuilt        : SymbolId(10): [ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47), ReferenceId(49), ReferenceId(52), ReferenceId(54), ReferenceId(56)]
Symbol reference IDs mismatch for "C6":
after transform: SymbolId(16): [ReferenceId(59), ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(67), ReferenceId(69), ReferenceId(71), ReferenceId(73), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(81), ReferenceId(83), ReferenceId(91)]
rebuilt        : SymbolId(16): [ReferenceId(58), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(74), ReferenceId(77), ReferenceId(79), ReferenceId(81)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/compiler/usingModuleWithExportImportInValuePosition.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/validUseOfThisInSuper.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/compiler/valueOfTypedArray.ts
semantic error: Unresolved reference IDs mismatch for "Float32Array":
after transform: [ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(6)]
Unresolved reference IDs mismatch for "Int16Array":
after transform: [ReferenceId(4), ReferenceId(5)]
rebuilt        : [ReferenceId(2)]
Unresolved reference IDs mismatch for "BigUint64Array":
after transform: [ReferenceId(18), ReferenceId(19)]
rebuilt        : [ReferenceId(9)]
Unresolved reference IDs mismatch for "BigInt64Array":
after transform: [ReferenceId(16), ReferenceId(17)]
rebuilt        : [ReferenceId(8)]
Unresolved reference IDs mismatch for "Uint8Array":
after transform: [ReferenceId(2), ReferenceId(3)]
rebuilt        : [ReferenceId(1)]
Unresolved reference IDs mismatch for "Int32Array":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(4)]
Unresolved reference IDs mismatch for "Int8Array":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]
Unresolved reference IDs mismatch for "Uint16Array":
after transform: [ReferenceId(6), ReferenceId(7)]
rebuilt        : [ReferenceId(3)]
Unresolved reference IDs mismatch for "Uint32Array":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(5)]
Unresolved reference IDs mismatch for "Float64Array":
after transform: [ReferenceId(14), ReferenceId(15)]
rebuilt        : [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/compiler/varArgsOnConstructorTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/vardecl.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/varianceCallbacksAndIndexedAccesses.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["AddEventListenerOptions", "EventListenerOrEventListenerObject", "Window", "WindowEventMap"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/varianceCantBeStrictWhileStructureIsnt.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a2", "b", "b2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(6) "a2"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Reference symbol mismatch for "b2":
after transform: SymbolId(7) "b2"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "a2", "b", "b2"]

tasks/coverage/typescript/tests/cases/compiler/varianceProblingAndZeroOrderIndexSignatureRelationsAlign.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14)]
Symbol reference IDs mismatch for "Left":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Right":
after transform: SymbolId(11): [ReferenceId(3), ReferenceId(29)]
rebuilt        : SymbolId(5): [ReferenceId(8)]
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(19): [ReferenceId(51), ReferenceId(60)]
rebuilt        : SymbolId(9): []

tasks/coverage/typescript/tests/cases/compiler/varianceProblingAndZeroOrderIndexSignatureRelationsAlign2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14)]
Symbol reference IDs mismatch for "Left":
after transform: SymbolId(3): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Right":
after transform: SymbolId(11): [ReferenceId(3), ReferenceId(29)]
rebuilt        : SymbolId(5): [ReferenceId(8)]
Symbol reference IDs mismatch for "Type":
after transform: SymbolId(19): [ReferenceId(51), ReferenceId(60)]
rebuilt        : SymbolId(9): []

tasks/coverage/typescript/tests/cases/compiler/varianceRepeatedlyPropegatesWithUnreliableFlag.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/verbatim-declarations-parameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Exclude"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/verbatimModuleSyntaxDefaultValue.ts
semantic error: Symbol reference IDs mismatch for "Task":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/compiler/verifyDefaultLib_dom.ts
semantic error: Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/verifyDefaultLib_webworker.ts
semantic error: Unresolved references mismatch:
after transform: ["Worker"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/visSyntax.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/compiler/visibilityOfCrossModuleTypeUsage.ts
semantic error: Missing SymbolId: "fs"
Missing ReferenceId: "require"
Missing SymbolId: "server"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/voidConstructor.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/compiler/voidReturnIndexUnionInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Readonly", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/compiler/voidUndefinedReduction.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo", "isDefined"]
rebuilt        : ScopeId(0): ["isDefined"]
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(3) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["console", "undefined"]
rebuilt        : ["console", "foo", "undefined"]

tasks/coverage/typescript/tests/cases/compiler/vueLikeDataAndPropsInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Readonly", "Record", "ThisType", "test"]
rebuilt        : ["test"]

tasks/coverage/typescript/tests/cases/compiler/vueLikeDataAndPropsInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Readonly", "Record", "ThisType", "test"]
rebuilt        : ["test"]

tasks/coverage/typescript/tests/cases/compiler/weakTypeAndPrimitiveNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/compiler/wideningWithTopLevelTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(20): [ScopeId(21)]
rebuilt        : ScopeId(6): []

tasks/coverage/typescript/tests/cases/compiler/withExportDecl.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m3"
Missing SymbolId: "_m2"
Missing ReferenceId: "_m2"
Missing ReferenceId: "foo"
Missing ReferenceId: "m3"
Missing ReferenceId: "m3"
Bindings mismatch:
after transform: ScopeId(0): ["anotherVar", "arrayVar", "deckareVarWithType", "declareVar2", "declaredVar", "eVar1", "eVar2", "eVar22", "eVar3", "eVar4", "eVar5", "exportedArrayVar", "exportedDeclaredVar", "exportedFunction", "exportedSimpleVar", "exportedVarWithInitialValue", "exportedWithComplicatedValue", "m1", "m2", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
rebuilt        : ScopeId(0): ["anotherVar", "arrayVar", "eVar1", "eVar2", "eVar22", "eVar3", "eVar4", "eVar5", "exportedArrayVar", "exportedFunction", "exportedSimpleVar", "exportedVarWithInitialValue", "exportedWithComplicatedValue", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(18), SymbolId(29)]
rebuilt        : ScopeId(3): [SymbolId(14), SymbolId(15)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(22), SymbolId(30)]
rebuilt        : ScopeId(5): [SymbolId(17), SymbolId(18)]
Symbol flags mismatch for "foo":
after transform: SymbolId(18): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(15): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(18): []
rebuilt        : SymbolId(15): [ReferenceId(3)]
Symbol flags mismatch for "foo":
after transform: SymbolId(22): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(18): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(22): []
rebuilt        : SymbolId(18): [ReferenceId(8)]
Reference symbol mismatch for "m1":
after transform: SymbolId(17) "m1"
rebuilt        : SymbolId(13) "m1"

tasks/coverage/typescript/tests/cases/compiler/withImportDecl.ts
semantic error: Missing SymbolId: "m1"
Missing SymbolId: "_m"
Missing ReferenceId: "_m"
Missing ReferenceId: "foo"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Missing SymbolId: "m3"
Missing ReferenceId: "require"
Bindings mismatch:
after transform: ScopeId(0): ["anotherVar", "arrayVar", "b", "deckareVarWithType", "declareVar2", "declaredVar", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
rebuilt        : ScopeId(0): ["anotherVar", "arrayVar", "b", "m1", "m3", "simpleFunction", "simpleVar", "varWithArrayType", "varWithInitialValue", "varWithSimpleType", "withComplicatedValue"]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(12), SymbolId(15)]
rebuilt        : ScopeId(2): [SymbolId(9), SymbolId(10)]
Symbol flags mismatch for "foo":
after transform: SymbolId(12): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "foo":
after transform: SymbolId(12): []
rebuilt        : SymbolId(10): [ReferenceId(1)]
Reference symbol mismatch for "m3":
after transform: SymbolId(13) "m3"
rebuilt        : SymbolId(11) "m3"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/compiler/withStatementInternalComments.ts
semantic error: 'with' statements are not allowed

tasks/coverage/typescript/tests/cases/compiler/yieldStarContextualType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "g"]
rebuilt        : ScopeId(0): ["f"]
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Generator"]
rebuilt        : ["g"]

tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E1", "E2", "E3", "M1", "external1", "m", "n", "p", "q", "x"]
rebuilt        : ScopeId(0): ["p", "q", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "E3":
after transform: SymbolId(28) "E3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["M1", "cls"]
rebuilt        : ["E3", "M1"]

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsExternal.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["equ", "equ2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientEnumDeclaration1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientEnumDeclaration2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "E1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleMerging.ts
semantic error: Missing SymbolId: "M"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(0) "M"
rebuilt        : SymbolId(0) "M"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientInsideNonAmbient.ts
semantic error: Missing SymbolId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Bindings mismatch:
after transform: ScopeId(0): ["M", "M2"]
rebuilt        : ScopeId(0): ["M2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(6): ["E", "M", "_M2", "x"]
rebuilt        : ScopeId(1): ["_M2"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientInsideNonAmbientExternalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "M", "x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand.ts
semantic error: Missing SymbolId: "boom"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Reference symbol mismatch for "boom":
after transform: SymbolId(3) "boom"
rebuilt        : SymbolId(3) "boom"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_declarationEmit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_duplicate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/ambient/ambientShorthand_merging.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction1_es2017.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es2017.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require", "someOtherFunction"]
rebuilt        : ["arguments", "require", "someOtherFunction"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncAwait_es2017.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f1"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(20), SymbolId(22), SymbolId(41)]
rebuilt        : ScopeId(53): [SymbolId(34), SymbolId(35), SymbolId(36)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "f1":
after transform: SymbolId(20): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f1":
after transform: SymbolId(20): []
rebuilt        : SymbolId(35): [ReferenceId(63)]
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncUseStrict_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression1_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression2_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression3_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression4_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitBinaryExpression/awaitBinaryExpression5_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression1_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression2_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression3_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression4_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "pfn":
after transform: SymbolId(6) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "pfn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression5_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression6_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression7_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitCallExpression/awaitCallExpression8_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "po":
after transform: SymbolId(7) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "po", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitClassExpression_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["C", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/awaitInheritedPromise_es2017.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration11_es2017.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration14_es2017.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration1_es2017.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction1_es5.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require", "someOtherFunction"]
rebuilt        : ["arguments", "require", "someOtherFunction"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAwaitNestedClasses_es5.ts
semantic error: Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAwait_es5.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f1"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(20), SymbolId(22), SymbolId(41)]
rebuilt        : ScopeId(53): [SymbolId(34), SymbolId(35), SymbolId(36)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "f1":
after transform: SymbolId(20): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f1":
after transform: SymbolId(20): []
rebuilt        : SymbolId(35): [ReferenceId(63)]
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncImportedPromise_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Task", "Test", "_asyncToGenerator"]
rebuilt        : ScopeId(0): ["Test", "_asyncToGenerator"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncQualifiedReturnType_es5.ts
semantic error: Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "MyPromise"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "MyPromise":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(3)]
Unresolved references mismatch:
after transform: ["Promise", "X", "arguments", "require"]
rebuilt        : ["Promise", "arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncUseStrict_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression1_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression2_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression3_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression4_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitBinaryExpression/awaitBinaryExpression5_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression1_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression2_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression3_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression4_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "pfn":
after transform: SymbolId(6) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "pfn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression5_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression6_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression7_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitCallExpression/awaitCallExpression8_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "po":
after transform: SymbolId(7) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "po", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitClassExpression_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["C", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/awaitUnion_es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "b", "c", "d", "e", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["PromiseLike", "arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "d", "e", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration11_es5.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration14_es5.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration1_es5.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAliasReturnType_es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction1_es6.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncUnParenthesizedArrowFunction_es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require", "someOtherFunction"]
rebuilt        : ["arguments", "require", "someOtherFunction"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAwait_es6.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "f1"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Bindings mismatch:
after transform: ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "mp", "o", "p"]
rebuilt        : ScopeId(0): ["C", "M", "_asyncToGenerator", "_f", "_f2", "_f3", "_f5", "f0", "f1", "f10", "f11", "f12", "f13", "f14", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "o"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(18), ScopeId(25), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(60), ScopeId(61)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(53), ScopeId(57), ScopeId(58)]
Binding symbols mismatch:
after transform: ScopeId(25): [SymbolId(20), SymbolId(22), SymbolId(41)]
rebuilt        : ScopeId(53): [SymbolId(34), SymbolId(35), SymbolId(36)]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(53): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(58): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(54): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(59): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(55): ScopeFlags(Function)
Symbol flags mismatch for "f1":
after transform: SymbolId(20): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(35): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "f1":
after transform: SymbolId(20): []
rebuilt        : SymbolId(35): [ReferenceId(63)]
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "mp":
after transform: SymbolId(3) "mp"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(2) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "mp", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncUseStrict_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["a", "arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts
semantic error: Identifier `x` has already been declared

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression1_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression2_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression3_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression4_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitBinaryExpression/awaitBinaryExpression5_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["after", "arguments", "before", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression1_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression2_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression3_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "fn", "require"]
rebuilt        : ["a", "after", "arguments", "before", "fn", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression4_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "pfn":
after transform: SymbolId(6) "pfn"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "pfn", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression5_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression6_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression7_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "o":
after transform: SymbolId(5) "o"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "p":
after transform: SymbolId(1) "p"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "o", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitCallExpression/awaitCallExpression8_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "a", "func", "o", "p", "pfn", "po"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "po":
after transform: SymbolId(7) "po"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "after", "arguments", "before", "require"]
rebuilt        : ["a", "after", "arguments", "before", "po", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitClassExpression_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_func", "func", "p"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_func", "func"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "p":
after transform: SymbolId(0) "p"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["C", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "p", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/awaitUnion_es6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "b", "c", "d", "e", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["PromiseLike", "arguments", "require"]
rebuilt        : ["a", "arguments", "b", "c", "d", "e", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration11_es6.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration14_es6.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration1_es6.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments", "require"]
rebuilt        : ["arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/asyncGenerators/asyncGeneratorGenericNonWrappedReturn.ts
semantic error: Unresolved references mismatch:
after transform: ["AsyncGenerator", "arguments"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/conformance/asyncGenerators/asyncGeneratorPromiseNextType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Promise", "arguments", "console", "require"]
rebuilt        : ["Promise", "arguments", "console", "require"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(10), ReferenceId(19), ReferenceId(20), ReferenceId(22), ReferenceId(27)]
rebuilt        : [ReferenceId(10), ReferenceId(21), ReferenceId(30)]

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAndInterfaceWithSameName.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Bindings mismatch:
after transform: ScopeId(0): ["M", "_defineProperty"]
rebuilt        : ScopeId(0): ["C", "M", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["_M"]
rebuilt        : ScopeId(3): ["D", "_M"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 35, end: 36 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "D":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol redeclarations mismatch for "D":
after transform: SymbolId(2): [Span { start: 122, end: 123 }]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classBody/classWithEmptyBody.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classAppearsToHaveMembersOfObject.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingClass.ts
semantic error: Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(2): [ReferenceId(8)]
Symbol reference IDs mismatch for "D2":
after transform: SymbolId(12): [ReferenceId(11), ReferenceId(15)]
rebuilt        : SymbolId(12): [ReferenceId(16)]

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/constructorFunctionTypeIsAssignableToBaseType.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/constructorFunctionTypeIsAssignableToBaseType2.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/derivedTypeDoesNotRequireExtendsClause.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergeClassInterfaceAndModule.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergedClassInterface.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["c5"]
rebuilt        : ScopeId(0): ["C3", "C4", "c5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "C3":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol redeclarations mismatch for "C3":
after transform: SymbolId(2): [Span { start: 104, end: 106 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "C4":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol span mismatch for "C4":
after transform: SymbolId(3): Span { start: 122, end: 124 }
rebuilt        : SymbolId(1): Span { start: 136, end: 138 }
Symbol redeclarations mismatch for "C4":
after transform: SymbolId(3): [Span { start: 136, end: 138 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/mergedInheritedClassInterface.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["BaseClass", "Grandchild", "_defineProperty", "child", "grandchild"]
rebuilt        : ScopeId(0): ["BaseClass", "Child", "ChildNoBaseClass", "Grandchild", "_defineProperty", "child", "grandchild"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
Symbol flags mismatch for "Child":
after transform: SymbolId(2): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(2): SymbolFlags(Class)
Symbol span mismatch for "Child":
after transform: SymbolId(2): Span { start: 150, end: 155 }
rebuilt        : SymbolId(2): Span { start: 213, end: 218 }
Symbol reference IDs mismatch for "Child":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol redeclarations mismatch for "Child":
after transform: SymbolId(2): [Span { start: 213, end: 218 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(4): SymbolFlags(Class)
Symbol span mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): Span { start: 294, end: 310 }
rebuilt        : SymbolId(4): Span { start: 368, end: 384 }
Symbol redeclarations mismatch for "ChildNoBaseClass":
after transform: SymbolId(3): [Span { start: 368, end: 384 }]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Grandchild":
after transform: SymbolId(4): [ReferenceId(12)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/classes/classExpression.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["C", "_Class", "_Class2", "_defineProperty", "x"]
Bindings mismatch:
after transform: ScopeId(2): ["C", "_Class", "b"]
rebuilt        : ScopeId(2): ["C", "b"]
Bindings mismatch:
after transform: ScopeId(4): ["_Class2", "b", "d", "x"]
rebuilt        : ScopeId(4): ["b", "d", "x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(0)
Symbol scope ID mismatch for "_Class2":
after transform: SymbolId(9): ScopeId(4)
rebuilt        : SymbolId(2): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["_Class", "_defineProperty"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "b"]
rebuilt        : ScopeId(1): ["b"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(1): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "x"]
rebuilt        : ScopeId(0): ["C", "_Class", "_Class2", "_defineProperty", "x"]
Bindings mismatch:
after transform: ScopeId(2): ["C", "_Class", "b"]
rebuilt        : ScopeId(2): ["C", "b"]
Bindings mismatch:
after transform: ScopeId(4): ["_Class2", "b", "d", "x"]
rebuilt        : ScopeId(4): ["b", "d", "x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(7): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(0)
Symbol scope ID mismatch for "_Class2":
after transform: SymbolId(9): ScopeId(4)
rebuilt        : SymbolId(2): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty"]
rebuilt        : ScopeId(0): ["_Class", "_defineProperty"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "b"]
rebuilt        : ScopeId(1): ["b"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(1): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/extendClassExpressionFromModule.ts
semantic error: Missing SymbolId: "foo1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "foo1":
after transform: SymbolId(0) "foo1"
rebuilt        : SymbolId(0) "foo1"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock11.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock17.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(9), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(13)]
rebuilt        : SymbolId(5): [ReferenceId(24)]

tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorParametersAccessibility3.ts
semantic error: Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorImplementationWithDefaultValues.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorOverloadsWithOptionalParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/classPropertyIsPublicByDefault.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/privateClassPropertyAccessibleWithinNestedClass.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(16)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedClass.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(16)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/genericSetterInClassType.ts
semantic error: Missing SymbolId: "Generic"
Missing SymbolId: "_Generic"
Missing ReferenceId: "Generic"
Missing ReferenceId: "Generic"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/indexersInClassType.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/constructorHasPrototypeProperty.ts
semantic error: Missing SymbolId: "NonGeneric"
Missing SymbolId: "_NonGeneric"
Missing ReferenceId: "NonGeneric"
Missing ReferenceId: "NonGeneric"
Missing SymbolId: "Generic"
Missing SymbolId: "_Generic"
Missing ReferenceId: "Generic"
Missing ReferenceId: "Generic"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(18)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(8)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(6), SymbolId(9), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(17)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassIncludesInheritedMembers.ts
semantic error: Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(4): [ReferenceId(1), ReferenceId(2), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
rebuilt        : SymbolId(5): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(13): [ReferenceId(14)]
rebuilt        : SymbolId(14): []
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesIndexersWithAssignmentCompatibility.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(23)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(12)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesProtectedMembers2.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(26), ReferenceId(29), ReferenceId(33), ReferenceId(36), ReferenceId(40), ReferenceId(45)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(30), ReferenceId(34)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(8): [ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(9): [ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(33)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(24): [ReferenceId(46)]
rebuilt        : SymbolId(25): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassOverridesPublicMembers.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(23), ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(1): [ReferenceId(1), ReferenceId(2), ReferenceId(12)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(26), ReferenceId(29), ReferenceId(33), ReferenceId(36), ReferenceId(40), ReferenceId(45)]
rebuilt        : SymbolId(2): [ReferenceId(10), ReferenceId(11), ReferenceId(20), ReferenceId(23), ReferenceId(27), ReferenceId(30), ReferenceId(34)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(8): [ReferenceId(24), ReferenceId(25), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(57), ReferenceId(59)]
rebuilt        : SymbolId(9): [ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(33)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(24): [ReferenceId(46)]
rebuilt        : SymbolId(25): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(4): ["_x"]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["B", "require", "undefined"]
rebuilt        : ["B", "_x", "require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(4): ["_x"]
rebuilt        : ScopeId(1): []
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Reference symbol mismatch for "_x":
after transform: SymbolId(5) "_x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["B", "require", "undefined"]
rebuilt        : ["B", "_x", "require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/thisAndSuperInStaticMembers4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInInstanceMember2.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(6)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsCallExpression.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameClassExpressionLoop.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_classPrivateFieldInitSpec", "_classPrivateMethodInitSpec", "_myField", "array"]
rebuilt        : ScopeId(0): ["_C_brand", "_classPrivateFieldInitSpec", "_classPrivateMethodInitSpec", "_myField", "array"]
Bindings mismatch:
after transform: ScopeId(2): ["_C_brand", "_get_accessor", "_method", "_set_accessor"]
rebuilt        : ScopeId(2): ["_get_accessor", "_method", "_set_accessor"]
Symbol scope ID mismatch for "_C_brand":
after transform: SymbolId(8): ScopeId(2)
rebuilt        : SymbolId(5): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameComputedPropertyName1.ts
semantic error: Unresolved references mismatch:
after transform: ["Record", "WeakMap", "console", "require"]
rebuilt        : ["WeakMap", "console", "require"]

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameComputedPropertyName2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function | Arrow)
rebuilt        : ScopeId(1): ScopeFlags(Function | Arrow)
Scope parent mismatch:
after transform: ScopeId(2): Some(ScopeId(1))
rebuilt        : ScopeId(1): Some(ScopeId(0))
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(6)]
rebuilt        : SymbolId(6): [ReferenceId(13)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameConstructorSignature.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_x"]
rebuilt        : ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_classPrivateFieldSet", "_x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "C":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(3): SymbolFlags(Class)
Symbol redeclarations mismatch for "C":
after transform: SymbolId(1): [Span { start: 185, end: 186 }]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameFieldDestructuredBinding.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(5): [ReferenceId(8)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameInLhsReceiverExpression.ts
semantic error: Symbol reference IDs mismatch for "Test":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAsync.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsCallExpression.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldAssignment.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(26), ReferenceId(25), ReferenceId(24), ReferenceId(23), ReferenceId(22), ReferenceId(21), ReferenceId(20), ReferenceId(19), ReferenceId(18), ReferenceId(17), ReferenceId(16), ReferenceId(15), ReferenceId(14), ReferenceId(13), ReferenceId(54), ReferenceId(57), ReferenceId(58), ReferenceId(62), ReferenceId(66), ReferenceId(67), ReferenceId(71), ReferenceId(75), ReferenceId(76), ReferenceId(80), ReferenceId(84), ReferenceId(85), ReferenceId(89), ReferenceId(93), ReferenceId(94), ReferenceId(98), ReferenceId(105), ReferenceId(106), ReferenceId(110), ReferenceId(114), ReferenceId(115), ReferenceId(119), ReferenceId(123), ReferenceId(124), ReferenceId(128), ReferenceId(132), ReferenceId(133), ReferenceId(137), ReferenceId(141), ReferenceId(142), ReferenceId(146), ReferenceId(150), ReferenceId(151), ReferenceId(155), ReferenceId(159), ReferenceId(160), ReferenceId(164)]
rebuilt        : SymbolId(1): [ReferenceId(29), ReferenceId(30), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(42), ReferenceId(44), ReferenceId(46), ReferenceId(51), ReferenceId(53), ReferenceId(55), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(71), ReferenceId(73), ReferenceId(76), ReferenceId(81), ReferenceId(83), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(94), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(112), ReferenceId(117), ReferenceId(119), ReferenceId(121), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(135), ReferenceId(137), ReferenceId(139), ReferenceId(142)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDestructuredBinding.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(25), ReferenceId(28)]
rebuilt        : SymbolId(2): [ReferenceId(3), ReferenceId(16), ReferenceId(19)]

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticsAndStaticMethods.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndMethods.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndStaticMethods.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAssertion.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode)
rebuilt        : ScopeId(10): ScopeFlags(0x0)

tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/typeFromPrivatePropertyAssignment.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClasses.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["AbstractBase", "ConcreteBase", "DerivedFromAbstract", "DerivedFromConcrete", "wasAbstract", "wasConcrete"]
rebuilt        : ScopeId(0): ["AbstractBase", "ConcreteBase", "DerivedFromAbstract", "DerivedFromConcrete", "Mixin", "wasAbstract", "wasConcrete"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(6): []
Symbol flags mismatch for "Mixin":
after transform: SymbolId(0): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Mixin":
after transform: SymbolId(0): Span { start: 10, end: 15 }
rebuilt        : SymbolId(0): Span { start: 55, end: 60 }
Symbol reference IDs mismatch for "Mixin":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(11)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(7)]
Symbol redeclarations mismatch for "Mixin":
after transform: SymbolId(0): [Span { start: 55, end: 60 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClassesReturnTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesAnnotated.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Base", "Derived", "Thing1", "Thing2", "Thing3", "_defineProperty", "f1", "f2"]
rebuilt        : ScopeId(0): ["Base", "Derived", "Printable", "Tagged", "Thing1", "Thing2", "Thing3", "_defineProperty", "f1", "f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol flags mismatch for "Printable":
after transform: SymbolId(9): SymbolFlags(BlockScopedVariable | ConstVariable | Interface)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "Printable":
after transform: SymbolId(9): Span { start: 247, end: 256 }
rebuilt        : SymbolId(8): Span { start: 287, end: 296 }
Symbol reference IDs mismatch for "Printable":
after transform: SymbolId(9): [ReferenceId(8), ReferenceId(22)]
rebuilt        : SymbolId(8): [ReferenceId(19)]
Symbol redeclarations mismatch for "Printable":
after transform: SymbolId(9): [Span { start: 287, end: 296 }]
rebuilt        : SymbolId(8): []
Symbol flags mismatch for "Tagged":
after transform: SymbolId(13): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Tagged":
after transform: SymbolId(13): Span { start: 557, end: 563 }
rebuilt        : SymbolId(12): Span { start: 596, end: 602 }
Symbol reference IDs mismatch for "Tagged":
after transform: SymbolId(13): [ReferenceId(14), ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(12): [ReferenceId(16), ReferenceId(18)]
Symbol redeclarations mismatch for "Tagged":
after transform: SymbolId(13): [Span { start: 596, end: 602 }]
rebuilt        : SymbolId(12): []

tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesAnonymous.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/classes/mixinClassesMembers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C2", "C3", "Mixed1", "Mixed2", "Mixed3", "Mixed4", "Mixed5", "f1", "f2", "f3", "f4", "f5", "f6"]
rebuilt        : ScopeId(0): ["C2", "C3", "f1", "f2", "f3", "f4", "f5", "f6"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9)]
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(4) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(4) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(5) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(5) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(7) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(7) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(8) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(4) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(4) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(5) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed2":
after transform: SymbolId(5) "Mixed2"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(7) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(7) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed4":
after transform: SymbolId(7) "Mixed4"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(8) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(8) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed5":
after transform: SymbolId(8) "Mixed5"
rebuilt        : <None>
Reference symbol mismatch for "Mixed1":
after transform: SymbolId(4) "Mixed1"
rebuilt        : <None>
Reference symbol mismatch for "Mixed3":
after transform: SymbolId(6) "Mixed3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["C1", "M1", "M2"]
rebuilt        : ["Mixed1", "Mixed2", "Mixed3", "Mixed4", "Mixed5"]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C"]
rebuilt        : ScopeId(0): ["B", "C"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(Class | Interface)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 40, end: 41 }
rebuilt        : SymbolId(0): Span { start: 62, end: 63 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 62, end: 63 }]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["classWithProperties", "const"]
rebuilt        : ["classWithProperties"]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ApiEnum", "ApiEnumMember", "ApiItem"]
rebuilt        : ScopeId(0): ["ApiEnum", "ApiEnumMember", "ApiItem", "ApiItemContainerMixin"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(8)]
Symbol reference IDs mismatch for "ApiItem":
after transform: SymbolId(6): [ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(22), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(5)]
Symbol reference IDs mismatch for "ApiEnumMember":
after transform: SymbolId(7): [ReferenceId(27)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "ApiItemContainerMixin":
after transform: SymbolId(8): SymbolFlags(BlockScopedVariable | Function | Interface)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable | Function)
Symbol span mismatch for "ApiItemContainerMixin":
after transform: SymbolId(8): Span { start: 462, end: 483 }
rebuilt        : SymbolId(2): Span { start: 558, end: 579 }
Symbol reference IDs mismatch for "ApiItemContainerMixin":
after transform: SymbolId(8): [ReferenceId(17), ReferenceId(19), ReferenceId(24)]
rebuilt        : SymbolId(2): [ReferenceId(4)]
Symbol redeclarations mismatch for "ApiItemContainerMixin":
after transform: SymbolId(8): [Span { start: 558, end: 579 }]
rebuilt        : SymbolId(2): []
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor2.ts
semantic error: Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12)]
rebuilt        : SymbolId(3): [ReferenceId(7)]
Reference symbol mismatch for "":
after transform: SymbolId(0) "C1"
rebuilt        : <None>
Reference symbol mismatch for "":
after transform: SymbolId(0) "C1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["", "require"]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorAllowedModifiers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializationOrdering1.ts
semantic error: Symbol reference IDs mismatch for "Helper":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/instanceMemberInitialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(4): []

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/accessorsAreNotContextuallyTyped.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberAccessorDeclarations/ambientAccessors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(16): [ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/typeOfThisInMemberFunctions.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/overrideInterfaceProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Reference symbol mismatch for "Mup":
after transform: SymbolId(0) "Mup"
rebuilt        : <None>
Reference symbol mismatch for "Mup":
after transform: SymbolId(0) "Mup"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Mup", "require"]

tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts
semantic error: Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Classes may not have a static property named prototype
Missing SymbolId: "TestOnDefaultExportedClass_1"
Missing SymbolId: "_TestOnDefaultExportedClass_"
Missing ReferenceId: "TestOnDefaultExportedClass_1"
Missing ReferenceId: "TestOnDefaultExportedClass_1"
Missing SymbolId: "TestOnDefaultExportedClass_2"
Missing SymbolId: "_TestOnDefaultExportedClass_2"
Missing ReferenceId: "TestOnDefaultExportedClass_2"
Missing ReferenceId: "TestOnDefaultExportedClass_2"
Missing SymbolId: "TestOnDefaultExportedClass_3"
Missing SymbolId: "_TestOnDefaultExportedClass_3"
Missing ReferenceId: "TestOnDefaultExportedClass_3"
Missing ReferenceId: "TestOnDefaultExportedClass_3"
Missing SymbolId: "TestOnDefaultExportedClass_4"
Missing SymbolId: "_TestOnDefaultExportedClass_4"
Missing ReferenceId: "TestOnDefaultExportedClass_4"
Missing ReferenceId: "TestOnDefaultExportedClass_4"
Missing SymbolId: "TestOnDefaultExportedClass_5"
Missing SymbolId: "_TestOnDefaultExportedClass_5"
Missing ReferenceId: "TestOnDefaultExportedClass_5"
Missing ReferenceId: "TestOnDefaultExportedClass_5"
Missing SymbolId: "TestOnDefaultExportedClass_6"
Missing SymbolId: "_TestOnDefaultExportedClass_6"
Missing ReferenceId: "TestOnDefaultExportedClass_6"
Missing ReferenceId: "TestOnDefaultExportedClass_6"
Missing SymbolId: "TestOnDefaultExportedClass_7"
Missing SymbolId: "_TestOnDefaultExportedClass_7"
Missing ReferenceId: "TestOnDefaultExportedClass_7"
Missing ReferenceId: "TestOnDefaultExportedClass_7"
Missing SymbolId: "TestOnDefaultExportedClass_8"
Missing SymbolId: "_TestOnDefaultExportedClass_8"
Missing ReferenceId: "TestOnDefaultExportedClass_8"
Missing ReferenceId: "TestOnDefaultExportedClass_8"
Missing SymbolId: "TestOnDefaultExportedClass_9"
Missing SymbolId: "_TestOnDefaultExportedClass_9"
Missing ReferenceId: "TestOnDefaultExportedClass_9"
Missing ReferenceId: "TestOnDefaultExportedClass_9"
Missing SymbolId: "TestOnDefaultExportedClass_10"
Missing SymbolId: "_TestOnDefaultExportedClass_10"
Missing ReferenceId: "TestOnDefaultExportedClass_10"
Missing ReferenceId: "TestOnDefaultExportedClass_10"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(43), SymbolId(44), SymbolId(46), SymbolId(47), SymbolId(49), SymbolId(50), SymbolId(52), SymbolId(53), SymbolId(55), SymbolId(56), SymbolId(58), SymbolId(59), SymbolId(61), SymbolId(62), SymbolId(64), SymbolId(65), SymbolId(67), SymbolId(68), SymbolId(70), SymbolId(81), SymbolId(82), SymbolId(83), SymbolId(84), SymbolId(85), SymbolId(86), SymbolId(87), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(92), SymbolId(93), SymbolId(94), SymbolId(95), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(100), SymbolId(101), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(106), SymbolId(107), SymbolId(108), SymbolId(109), SymbolId(110), SymbolId(111), SymbolId(112), SymbolId(113), SymbolId(114), SymbolId(115), SymbolId(116), SymbolId(117), SymbolId(118), SymbolId(119), SymbolId(120), SymbolId(121)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(76), SymbolId(77), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(82), SymbolId(85), SymbolId(86), SymbolId(89), SymbolId(90), SymbolId(93), SymbolId(94), SymbolId(97), SymbolId(98), SymbolId(101), SymbolId(102), SymbolId(105), SymbolId(106), SymbolId(109), SymbolId(110), SymbolId(113), SymbolId(114), SymbolId(117), SymbolId(118), SymbolId(121)]
Binding symbols mismatch:
after transform: ScopeId(81): [SymbolId(42), SymbolId(71)]
rebuilt        : ScopeId(101): [SymbolId(83), SymbolId(84)]
Binding symbols mismatch:
after transform: ScopeId(84): [SymbolId(45), SymbolId(72)]
rebuilt        : ScopeId(106): [SymbolId(87), SymbolId(88)]
Binding symbols mismatch:
after transform: ScopeId(91): [SymbolId(48), SymbolId(73)]
rebuilt        : ScopeId(113): [SymbolId(91), SymbolId(92)]
Binding symbols mismatch:
after transform: ScopeId(94): [SymbolId(51), SymbolId(74)]
rebuilt        : ScopeId(118): [SymbolId(95), SymbolId(96)]
Binding symbols mismatch:
after transform: ScopeId(101): [SymbolId(54), SymbolId(75)]
rebuilt        : ScopeId(125): [SymbolId(99), SymbolId(100)]
Binding symbols mismatch:
after transform: ScopeId(104): [SymbolId(57), SymbolId(76)]
rebuilt        : ScopeId(130): [SymbolId(103), SymbolId(104)]
Binding symbols mismatch:
after transform: ScopeId(111): [SymbolId(60), SymbolId(77)]
rebuilt        : ScopeId(137): [SymbolId(107), SymbolId(108)]
Binding symbols mismatch:
after transform: ScopeId(114): [SymbolId(63), SymbolId(78)]
rebuilt        : ScopeId(142): [SymbolId(111), SymbolId(112)]
Binding symbols mismatch:
after transform: ScopeId(121): [SymbolId(66), SymbolId(79)]
rebuilt        : ScopeId(149): [SymbolId(115), SymbolId(116)]
Binding symbols mismatch:
after transform: ScopeId(124): [SymbolId(69), SymbolId(80)]
rebuilt        : ScopeId(154): [SymbolId(119), SymbolId(120)]
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum1.ts
semantic error: Enum member must have initializer.

tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(1): ["TestType", "bar", "foo"]
rebuilt        : ScopeId(1): ["TestType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "TestType":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TestType":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(6), ReferenceId(14)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(7), ReferenceId(9)]

tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumPropertyAccess3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/controlFlow/constLocalsInFunctionExpressions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAssignmentExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["fn", "true"]
rebuilt        : ["fn"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAssignmentPatternOrder.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Unresolved references mismatch:
after transform: ["const", "f"]
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowBinaryOrExpression.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowBindingElement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(9): [ScopeId(10), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(12): [ScopeId(13), ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
Unresolved references mismatch:
after transform: ["Error", "console", "const", "undefined"]
rebuilt        : ["Error", "console", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowComputedPropertyNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(8), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(11)]
Unresolved references mismatch:
after transform: ["Record", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowDoWhileStatement.ts
semantic error: Unresolved references mismatch:
after transform: ["Function", "RegExp", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowElementAccess2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["config"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Reference symbol mismatch for "config":
after transform: SymbolId(0) "config"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["config"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowElementAccessNoCrash1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForInStatement.ts
semantic error: Unresolved references mismatch:
after transform: ["Function", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForInStatement2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["c", "keywordA", "keywordB", "stringB"]
rebuilt        : ScopeId(0): ["keywordA", "keywordB", "stringB"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "keywordA":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(2)]
Symbol reference IDs mismatch for "keywordB":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["c"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForOfStatement.ts
semantic error: Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIfStatement.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(15): [ReferenceId(29), ReferenceId(30)]
rebuilt        : SymbolId(11): [ReferenceId(23)]
Unresolved references mismatch:
after transform: ["Error", "JSON", "RegExp"]
rebuilt        : ["Error", "JSON"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInOperator.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "d", "uniqueID_54790", "uniqueID_54790_2", "uniqueID_54790_3"]
rebuilt        : ScopeId(0): ["a", "b", "d", "uniqueID_54790", "uniqueID_54790_2", "uniqueID_54790_3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(13), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(11), ScopeId(15)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9), ReferenceId(13)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(9)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(5) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Error", "Number", "undefined"]
rebuilt        : ["Error", "Number", "c", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInstanceOfGuardPrimitives.ts
semantic error: Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(11)]
rebuilt        : [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowInstanceofExtendsFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "X":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(7), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(6), ReferenceId(8)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowOptionalChain2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(26)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowStringIndex.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(1) "value"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["value"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowSuperPropertyAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowTruthiness.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(25)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowWithTemplateLiterals.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["envVar", "obj"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "envVar":
after transform: SymbolId(0) "envVar"
rebuilt        : <None>
Reference symbol mismatch for "envVar":
after transform: SymbolId(0) "envVar"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["envVar", "obj"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/dependentDestructuredVariablesFromNestedPatterns.ts
semantic error: Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Unresolved references mismatch:
after transform: ["Awaited", "Error", "Math", "Promise", "String", "arguments", "const", "require", "undefined"]
rebuilt        : ["Error", "Math", "Promise", "String", "arguments", "require", "undefined"]
Unresolved reference IDs mismatch for "Error":
after transform: [ReferenceId(0), ReferenceId(4), ReferenceId(15), ReferenceId(22), ReferenceId(29)]
rebuilt        : [ReferenceId(17)]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/typeGuardsNestedAssignments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(6), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(13)]
Unresolved references mismatch:
after transform: ["Object", "RegExpExecArray", "getFooOrNull", "getStringOrNumberOrNull", "require"]
rebuilt        : ["getFooOrNull", "getStringOrNumberOrNull", "require"]

tasks/coverage/typescript/tests/cases/conformance/controlFlow/typeGuardsTypeParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/classDoesNotDependOnPrivateMember.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "C"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): []
rebuilt        : SymbolId(3): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/leaveOptionalParameterAsWritten.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceDeclarationEmit.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["elem"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceDeclarationEmitBundle.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["elem"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLElement"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceNoLib.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/libReferenceNoLibBundle.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitIdentifierPredicatesWithPrivateName01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicates01.ts
semantic error: Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicates02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicatesWithPrivateName01.ts
semantic error: Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typePredicates/declarationEmitThisPredicatesWithPrivateName02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typeReferenceRelatedFiles.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["FSWatcher", "f"]
rebuilt        : ScopeId(0): ["f"]

tasks/coverage/typescript/tests/cases/conformance/declarationEmit/typeofImportTypeOnlyExport.ts
semantic error: Symbol reference IDs mismatch for "ClassMapDirective":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/decorators/1.0lib-noErrors.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Infinity", "NaN"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(76), ScopeId(77), ScopeId(96), ScopeId(140), ScopeId(141), ScopeId(142), ScopeId(143), ScopeId(144), ScopeId(145), ScopeId(146), ScopeId(147), ScopeId(170), ScopeId(174), ScopeId(175), ScopeId(176), ScopeId(177), ScopeId(178), ScopeId(179), ScopeId(180), ScopeId(181), ScopeId(182), ScopeId(183), ScopeId(184), ScopeId(185), ScopeId(186), ScopeId(187), ScopeId(188), ScopeId(189), ScopeId(196), ScopeId(222), ScopeId(223), ScopeId(224), ScopeId(225)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(15)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor3.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "C"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Function", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "IFoo":
after transform: SymbolId(0) "IFoo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["IFoo", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass1.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass2.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedBlockScopedClass3.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(1), ReferenceId(2)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(3): [ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(4), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsCommonJS1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_Testing", "_defineProperty"]
rebuilt        : ScopeId(0): ["Testing123", "_Testing", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "Something":
after transform: SymbolId(1) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsCommonJS2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123"]
rebuilt        : ScopeId(0): ["Testing123"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "Something":
after transform: SymbolId(1) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsSystem1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123", "_Testing", "_defineProperty"]
rebuilt        : ScopeId(0): ["Testing123", "_Testing", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "Something":
after transform: SymbolId(1) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassExportsSystem2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Something", "Testing123"]
rebuilt        : ScopeId(0): ["Testing123"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "Something":
after transform: SymbolId(1) "Something"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Something"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratedClassFromExternalModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Decorated"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "_B", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["A", "B", "_B", "_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod13.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod14.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["decorator", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod15.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["decorator", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod16.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_defineProperty"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["decorator", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod18.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "_defineProperty", "decorator"]
rebuilt        : ScopeId(0): ["Foo", "_defineProperty"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod19.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_x", "_x2", "decorator"]
rebuilt        : ScopeId(0): ["C1", "C2", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_x", "_x2"]
Symbol reference IDs mismatch for "C1":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(3): [ReferenceId(4)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(0) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["WeakMap", "require"]
rebuilt        : ["WeakMap", "decorator", "require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethodOverload2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Object", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(1)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Object", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["dec", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["dec", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty12.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["dec", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty13.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["PropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["dec", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorInAmbientContext.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Symbol", "decorator"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadata.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "Service", "decorator"]
rebuilt        : ScopeId(0): ["MyComponent"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadataWithTypeOnlyImport.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "Service", "decorator"]
rebuilt        : ScopeId(0): ["MyComponent"]
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Reference symbol mismatch for "decorator":
after transform: SymbolId(1) "decorator"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["decorator"]

tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorMetadataWithTypeOnlyImport2.ts
semantic error: Missing SymbolId: "Services"
Missing SymbolId: "_Services"
Missing ReferenceId: "_Services"
Missing ReferenceId: "Service"
Missing ReferenceId: "Services"
Missing ReferenceId: "Services"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "Service":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/decorators/legacyDecorators-contextualTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(19)]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression2ES2020.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpression4ES2020.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["directory", "moduleFile", "p0", "p1", "p2", "returnDynamicLoad", "whatToLoad"]
rebuilt        : ScopeId(0): ["p0", "p1", "p2", "returnDynamicLoad"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "directory":
after transform: SymbolId(1) "directory"
rebuilt        : <None>
Reference symbol mismatch for "moduleFile":
after transform: SymbolId(2) "moduleFile"
rebuilt        : <None>
Reference symbol mismatch for "whatToLoad":
after transform: SymbolId(0) "whatToLoad"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["getSpecifier"]
rebuilt        : ["directory", "getSpecifier", "moduleFile", "whatToLoad"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionDeclarationEmit3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Zero", "p0", "p1", "p2"]
rebuilt        : ScopeId(0): ["p0", "p1", "p2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Promise", "getPath"]
rebuilt        : ["getPath"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInAMD2.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInAMD4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS2.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise", "arguments"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS3.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInCJS5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts
semantic error: Cannot assign to 'arguments' in strict mode

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInSystem2.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInSystem4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInUMD2.ts
semantic error: Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInUMD4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty", "console"]
rebuilt        : ScopeId(0): ["C", "D", "_asyncToGenerator", "_defineProperty"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["arguments"]
rebuilt        : ["arguments", "console"]

tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionReturnPromiseOfAny.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["defaultModule", "directory", "j", "loadModule", "moduleFile", "p1", "p11", "p2", "p3", "whatToLoad"]
rebuilt        : ScopeId(0): ["j", "loadModule", "p1", "p11", "p2", "p3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "directory":
after transform: SymbolId(2) "directory"
rebuilt        : <None>
Reference symbol mismatch for "moduleFile":
after transform: SymbolId(3) "moduleFile"
rebuilt        : <None>
Reference symbol mismatch for "whatToLoad":
after transform: SymbolId(1) "whatToLoad"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise", "ValidSomeCondition", "getSpecifier"]
rebuilt        : ["ValidSomeCondition", "directory", "getSpecifier", "moduleFile", "whatToLoad"]

tasks/coverage/typescript/tests/cases/conformance/enums/enumBasics.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E2"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["E3", "X", "Y", "Z"]
rebuilt        : ScopeId(3): ["E3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["E4", "X", "Y", "Z"]
rebuilt        : ScopeId(4): ["E4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E5"]
rebuilt        : ScopeId(5): ["E5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["A", "B", "C", "E6"]
rebuilt        : ScopeId(6): ["E6"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "E7"]
rebuilt        : ScopeId(7): ["E7"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["B", "E8"]
rebuilt        : ScopeId(8): ["E8"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(9): ["A", "B", "E9"]
rebuilt        : ScopeId(9): ["E9"]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(30)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10)]
Symbol flags mismatch for "E2":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E3":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(7): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E4":
after transform: SymbolId(15): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(9): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E5":
after transform: SymbolId(19): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E6":
after transform: SymbolId(23): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(13): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E7":
after transform: SymbolId(27): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(15): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E8":
after transform: SymbolId(29): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(17): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E9":
after transform: SymbolId(31): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(19): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/enums/enumClassification.ts
semantic error: Missing ReferenceId: "E20"
Bindings mismatch:
after transform: ScopeId(1): ["A", "E01"]
rebuilt        : ScopeId(1): ["E01"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "E02"]
rebuilt        : ScopeId(2): ["E02"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["A", "E03"]
rebuilt        : ScopeId(3): ["E03"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "E04"]
rebuilt        : ScopeId(4): ["E04"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E05"]
rebuilt        : ScopeId(5): ["E05"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["A", "B", "C", "E06"]
rebuilt        : ScopeId(6): ["E06"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "B", "C", "D", "E", "E07", "F"]
rebuilt        : ScopeId(7): ["E07"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "C", "D", "E", "E08"]
rebuilt        : ScopeId(8): ["E08"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(0x0)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "C", "E11"]
rebuilt        : ScopeId(10): ["E11"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["A", "B", "C", "E12"]
rebuilt        : ScopeId(11): ["E12"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(12): ["A", "B", "C", "D", "E20"]
rebuilt        : ScopeId(12): ["E20"]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(0x0)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Symbol flags mismatch for "E01":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E02":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E03":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E04":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E05":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E06":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E07":
after transform: SymbolId(18): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E08":
after transform: SymbolId(25): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E10":
after transform: SymbolId(31): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(16): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E11":
after transform: SymbolId(32): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(18): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E12":
after transform: SymbolId(36): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(20): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E20":
after transform: SymbolId(40): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(22): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E20":
after transform: SymbolId(56): [ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(23): [ReferenceId(72), ReferenceId(73), ReferenceId(74), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(78), ReferenceId(79), ReferenceId(81)]

tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithStringEmitDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6"]
rebuilt        : ScopeId(0): ["T1", "T2", "T3", "T4", "T5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Bindings mismatch:
after transform: ScopeId(1): ["T1", "a", "b", "c"]
rebuilt        : ScopeId(1): ["T1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["T2", "a", "b"]
rebuilt        : ScopeId(2): ["T2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["T3", "a", "b"]
rebuilt        : ScopeId(3): ["T3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["T4", "a"]
rebuilt        : ScopeId(4): ["T4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["T5", "a"]
rebuilt        : ScopeId(5): ["T5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol flags mismatch for "T1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T2":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T3":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T4":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T5":
after transform: SymbolId(12): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMemberWithTemplateLiteralsEmitDeclaration.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6", "T7"]
rebuilt        : ScopeId(0): ["T1", "T2", "T3", "T4", "T5", "T6"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["T1", "a"]
rebuilt        : ScopeId(1): ["T1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["T2", "a", "b", "c"]
rebuilt        : ScopeId(2): ["T2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["T3", "a"]
rebuilt        : ScopeId(3): ["T3"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["T4", "a", "b", "c", "d", "e"]
rebuilt        : ScopeId(4): ["T4"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["T5", "a", "b", "c", "d"]
rebuilt        : ScopeId(5): ["T5"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(6): ["T6", "a", "b"]
rebuilt        : ScopeId(6): ["T6"]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "T1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T3":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T4":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T5":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "T6":
after transform: SymbolId(19): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/enums/enumExportMergingES6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Animals", "Cat"]
rebuilt        : ScopeId(1): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["Animals", "Dog"]
rebuilt        : ScopeId(2): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(3): ["Animals", "CatDog"]
rebuilt        : ScopeId(3): ["Animals"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Animals":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "Animals":
after transform: SymbolId(0): [Span { start: 45, end: 52 }, Span { start: 78, end: 85 }]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Cat", "Dog"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/enums/enumMerging.ts
semantic error: Missing SymbolId: "M1"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "EConst1"
Missing ReferenceId: "_M"
Missing ReferenceId: "EConst1"
Missing ReferenceId: "M1"
Missing ReferenceId: "M1"
Missing SymbolId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "EComp2"
Missing ReferenceId: "_M2"
Missing ReferenceId: "EComp2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "M3"
Missing SymbolId: "_M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing SymbolId: "M4"
Missing SymbolId: "_M4"
Missing ReferenceId: "_M4"
Missing ReferenceId: "Color"
Missing ReferenceId: "M4"
Missing ReferenceId: "M4"
Missing SymbolId: "M5"
Missing SymbolId: "_M5"
Missing ReferenceId: "_M5"
Missing ReferenceId: "Color"
Missing ReferenceId: "M5"
Missing ReferenceId: "M5"
Missing SymbolId: "M6"
Missing SymbolId: "_M6"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Color"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_M6"
Missing ReferenceId: "_M6"
Missing ReferenceId: "M6"
Missing ReferenceId: "M6"
Missing SymbolId: "_M7"
Missing SymbolId: "A"
Missing SymbolId: "_A2"
Missing ReferenceId: "_A2"
Missing ReferenceId: "Color"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_M7"
Missing ReferenceId: "_M7"
Missing ReferenceId: "M6"
Missing ReferenceId: "M6"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(16), SymbolId(25), SymbolId(32), SymbolId(37), SymbolId(42)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(9), SymbolId(15), SymbolId(20), SymbolId(24), SymbolId(27)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(8), SymbolId(15), SymbolId(52)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "EImpl1"]
rebuilt        : ScopeId(2): ["EImpl1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(3): ["D", "E", "EImpl1", "F"]
rebuilt        : ScopeId(3): ["EImpl1"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["A", "B", "C", "EConst1"]
rebuilt        : ScopeId(4): ["EConst1"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["D", "E", "EConst1", "F"]
rebuilt        : ScopeId(5): ["EConst1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(17), SymbolId(24), SymbolId(53)]
rebuilt        : ScopeId(6): [SymbolId(10), SymbolId(11), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["A", "B", "C", "EComp2"]
rebuilt        : ScopeId(7): ["EComp2"]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(8): ["D", "E", "EComp2", "F"]
rebuilt        : ScopeId(8): ["EComp2"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(26), SymbolId(54)]
rebuilt        : ScopeId(9): [SymbolId(16), SymbolId(17)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(10): ["A", "B", "EInit"]
rebuilt        : ScopeId(10): ["EInit"]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(0x0)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(11): ["C", "D", "E", "EInit"]
rebuilt        : ScopeId(11): ["EInit"]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(0x0)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(33), SymbolId(55)]
rebuilt        : ScopeId(12): [SymbolId(21), SymbolId(22)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(13): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(13): ["Color"]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(0x0)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(14): ["Color", "_M5"]
rebuilt        : ScopeId(14): ["_M5"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(15): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(15): ["Color"]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(0x0)
rebuilt        : ScopeId(15): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(43), SymbolId(57)]
rebuilt        : ScopeId(16): [SymbolId(28), SymbolId(29)]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(17): ["Color", "_A"]
rebuilt        : ScopeId(17): ["_A"]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(18): ["Blue", "Color", "Green", "Red"]
rebuilt        : ScopeId(18): ["Color"]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(0x0)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(19): [SymbolId(48), SymbolId(51), SymbolId(59)]
rebuilt        : ScopeId(19): [SymbolId(32), SymbolId(33), SymbolId(36)]
Scope flags mismatch:
after transform: ScopeId(19): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(19): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(20): ["Color", "_A2"]
rebuilt        : ScopeId(20): ["_A2"]
Scope flags mismatch:
after transform: ScopeId(20): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(20): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(21): ["Color", "Yellow"]
rebuilt        : ScopeId(21): ["Color"]
Scope flags mismatch:
after transform: ScopeId(21): ScopeFlags(0x0)
rebuilt        : ScopeId(21): ScopeFlags(Function)
Symbol flags mismatch for "EImpl1":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EImpl1":
after transform: SymbolId(1): [Span { start: 238, end: 244 }]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "EConst1":
after transform: SymbolId(8): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "EConst1":
after transform: SymbolId(8): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(45), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(24), ReferenceId(25), ReferenceId(33), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41)]
Symbol redeclarations mismatch for "EConst1":
after transform: SymbolId(8): [Span { start: 351, end: 358 }]
rebuilt        : SymbolId(5): []
Symbol flags mismatch for "EComp2":
after transform: SymbolId(17): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "EComp2":
after transform: SymbolId(17): [ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(61), ReferenceId(62)]
rebuilt        : SymbolId(11): [ReferenceId(52), ReferenceId(53), ReferenceId(61), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(68), ReferenceId(69)]
Symbol redeclarations mismatch for "EComp2":
after transform: SymbolId(17): [Span { start: 684, end: 690 }]
rebuilt        : SymbolId(11): []
Symbol flags mismatch for "EInit":
after transform: SymbolId(26): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(17): SymbolFlags(BlockScopedVariable)
Symbol redeclarations mismatch for "EInit":
after transform: SymbolId(26): [Span { start: 1009, end: 1014 }]
rebuilt        : SymbolId(17): []
Symbol flags mismatch for "Color":
after transform: SymbolId(33): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(22): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "Color":
after transform: SymbolId(33): []
rebuilt        : SymbolId(22): [ReferenceId(96)]
Reference symbol mismatch for "Color":
after transform: SymbolId(38) "Color"
rebuilt        : <None>
Reference symbol mismatch for "Color":
after transform: SymbolId(38) "Color"
rebuilt        : <None>
Reference symbol mismatch for "Color":
after transform: SymbolId(44) "Color"
rebuilt        : <None>
Reference symbol mismatch for "Color":
after transform: SymbolId(44) "Color"
rebuilt        : <None>
Reference symbol mismatch for "Color":
after transform: SymbolId(49) "Color"
rebuilt        : <None>
Reference symbol mismatch for "Color":
after transform: SymbolId(49) "Color"
rebuilt        : <None>
Reference symbol mismatch for "A":
after transform: SymbolId(48) "A"
rebuilt        : SymbolId(33) "A"
Reference symbol mismatch for "A":
after transform: SymbolId(48) "A"
rebuilt        : SymbolId(33) "A"
Unresolved references mismatch:
after transform: []
rebuilt        : ["Color"]

tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "B", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(14): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es2018/es2018IntlAPIs.ts
semantic error: Unresolved references mismatch:
after transform: ["Intl", "console", "const"]
rebuilt        : ["Intl", "console"]

tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisTypeIndexAccess.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["w_e"]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["globalThis"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts
semantic error: The only valid meta property for import is import.meta

tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMetaNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingES2019.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingES2020.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es2020/bigintMissingESNext.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es2020/intlNumberFormatES2020.ts
semantic error: Unresolved reference IDs mismatch for "Intl":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/es2020/localesObjectArgument.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Intl", "Readonly"]
rebuilt        : ["Date", "Intl"]

tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ns":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_c", "_f", "_i", "a", "b", "c", "d", "e", "f", "g", "h", "i"]
rebuilt        : ScopeId(0): ["_c", "_f", "_i"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(3) "d"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(4) "e"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(5) "f"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(6) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(6) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(7) "h"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(7) "h"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(8) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(8) "i"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "d", "e", "f", "g", "h", "i"]

tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_a$foo", "_a$foo$bar", "_b$foo", "_b$foo$bar", "_c$baz", "_c$foo", "_c$foo$bar", "_c$foo$bar$baz", "_c$foo$baz", "a", "b", "c", "result"]
rebuilt        : ScopeId(0): ["_a$foo", "_a$foo$bar", "_b$foo", "_b$foo$bar", "_c$baz", "_c$foo", "_c$foo$bar", "_c$foo$bar$baz", "_c$foo$baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "result"]

tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_c$baz", "a", "b", "c", "result"]
rebuilt        : ScopeId(0): ["_c$baz"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "result":
after transform: SymbolId(1) "result"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c", "result"]

tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_x$a", "x"]
rebuilt        : ScopeId(0): ["_x$a"]
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_module.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["importStarTestA", "importTest", "reimportTest", "someValue", "typeA", "typeB", "typeC", "valueX", "valueY", "valueZ"]
rebuilt        : ScopeId(0): ["importStarTestA", "importTest", "reimportTest", "someValue", "valueX", "valueY", "valueZ"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es2022/es2022IntlAPIs.ts
semantic error: Unresolved references mismatch:
after transform: ["Intl", "const"]
rebuilt        : ["Intl"]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit7.ts
semantic error: Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty11.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty13.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty14.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty15.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Unresolved references mismatch:
after transform: ["Symbol", "bar", "foo"]
rebuilt        : ["bar", "foo"]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty16.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(2): [ReferenceId(6)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty20.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(5)]
rebuilt        : [ReferenceId(0), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty22.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(9)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty23.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty28.ts
semantic error: Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty37.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty38.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty40.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(4), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty41.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(6), ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(4), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty48.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty49.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty50.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty51.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Bindings mismatch:
after transform: ScopeId(1): ["C", "Symbol", "_M"]
rebuilt        : ScopeId(1): ["C", "_M"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty55.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Unresolved references mismatch:
after transform: ["Symbol", "SymbolConstructor"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty56.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty58.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty60.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["mySymbol"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty61.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Unresolved reference IDs mismatch for "Symbol":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(6), ReferenceId(11)]
rebuilt        : [ReferenceId(0), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType16.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType17.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType18.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType19.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(6)]
rebuilt        : SymbolId(0): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationOverloadInES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(3): [ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithConstructorInES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(4): [ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithExtensionAndTypeArgumentInES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(4): [ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/emitClassDeclarationWithTypeArgumentAndOverloadInES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Base", "D", "Factory", "_defineProperty"]
rebuilt        : ScopeId(0): ["Base", "D", "_defineProperty"]
Reference symbol mismatch for "Factory":
after transform: SymbolId(0) "Factory"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Factory", "require"]

tasks/coverage/typescript/tests/cases/conformance/es6/classExpressions/typeArgumentInferenceWithClassExpression1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_Class2", "_defineProperty", "foo"]
rebuilt        : ScopeId(0): ["_Class", "_Class2", "_defineProperty", "foo"]
Bindings mismatch:
after transform: ScopeId(1): ["_Class", "x"]
rebuilt        : ScopeId(1): ["x"]
Symbol scope ID mismatch for "_Class":
after transform: SymbolId(3): ScopeId(1)
rebuilt        : SymbolId(1): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames37_ES5.ts
semantic error: Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames37_ES6.ts
semantic error: Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames41_ES5.ts
semantic error: Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames41_ES6.ts
semantic error: Symbol reference IDs mismatch for "Foo2":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames47_ES5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E1", "x"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "x"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames47_ES6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E1", "x"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "x"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames7_ES5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "member"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames7_ES6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "member"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType1_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType1_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType2_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType2_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType3_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType3_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType4_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType4_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType5_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType5_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType6_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType6_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType7_ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesContextualType7_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/accessor/decoratorOnClassAccessor1.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass1.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass2.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass3.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass4.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass5.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass6.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass7.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/decoratorOnClass8.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/method/decoratorOnClassMethod1.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["TypedPropertyDescriptor", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/method/parameter/decoratorOnClassMethodParameter1.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Object", "dec"]
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/es6/decorators/class/property/decoratorOnClassProperty1.es6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["dec"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/declarationInAmbientContext.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "d"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment5SiblingInitializer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "f4", "yadda"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "f4"]
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["yadda"]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment1ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment1ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["K", "a", "b"]
rebuilt        : ScopeId(1): ["K"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "K":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment9SiblingInitializer.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "f3", "f4", "yadda"]
rebuilt        : ScopeId(0): ["f1", "f2", "f3", "f4"]
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Reference symbol mismatch for "yadda":
after transform: SymbolId(15) "yadda"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["yadda"]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration10.ts
semantic error: Unresolved references mismatch:
after transform: ["Partial", "Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration7ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration7ES5iterable.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringVoid.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["v"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "v":
after transform: SymbolId(0) "v"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["v"]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern15.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern20.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern3.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern4.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of57.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of58.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["arr"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "arr":
after transform: SymbolId(2) "arr"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["arr"]

tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsAmd/decoratedDefaultExportsGetExportedAmd.ts
semantic error: Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsCommonjs/decoratedDefaultExportsGetExportedCommonjs.ts
semantic error: Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/decoratedDefaultExportsGetExportedSystem.ts
semantic error: Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts
semantic error: 'with' statements are not allowed

tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsUmd/decoratedDefaultExportsGetExportedUmd.ts
semantic error: Unresolved references mismatch:
after transform: ["ClassDecorator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportWithOverloads01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1-amd.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1-es6.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3-amd.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3-es6.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports3.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports4-amd.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports4-es6.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports4.ts
semantic error: Missing SymbolId: "a"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : SymbolId(0) "a"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImports5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithContextualKeywordNames02.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["as"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithUnderscores4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_", "__", "___", "___hello", "__esmodule", "__proto", "_hi", "console"]
rebuilt        : ScopeId(0): ["_", "__", "___", "___hello", "__esmodule", "__proto", "_hi"]
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Reference symbol mismatch for "console":
after transform: SymbolId(0) "console"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/conformance/es6/newTarget/newTargetNarrowing.ts
semantic error: Unresolved references mismatch:
after transform: ["true"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesWithModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesWithModuleES6.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray11.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithManyCallAndMemberExpressions.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithManyCallAndMemberExpressionsES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution2_ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypedTags.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithTypedTagsES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateUntypedTagCall01.ts
semantic error: Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplatesWithTypeArguments1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c", "obj"]
rebuilt        : ScopeId(0): ["_objectSpread", "a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Reference symbol mismatch for "obj":
after transform: SymbolId(20) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(20) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "TemplateStringsArray", "f", "g"]
rebuilt        : ["f", "g", "obj"]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext6.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "generator"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "generator":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "generator":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads5.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol flags mismatch for "f":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck1.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck10.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck11.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck12.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck13.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck17.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck19.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Unresolved references mismatch:
after transform: ["IterableIterator", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck2.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck26.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck27.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck28.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator", "Symbol"]
rebuilt        : ["Symbol"]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck29.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable", "Iterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck3.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck30.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable", "Iterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck38.ts
semantic error: Symbol reference IDs mismatch for "yield":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck45.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Iterator", "foo", "undefined"]
rebuilt        : ["foo", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck46.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Iterable", "Symbol", "foo", "undefined"]
rebuilt        : ["Symbol", "foo", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(28)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(22), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(31), ReferenceId(34), ReferenceId(37), ReferenceId(39)]

tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithEnumUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(23), ReferenceId(29)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(28), ReferenceId(31), ReferenceId(34), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(43), ReferenceId(45)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(35)]
rebuilt        : SymbolId(2): [ReferenceId(11)]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStatic.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "method3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_get_method", "_set_method", "dec"]
rebuilt        : ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_get_method", "_set_method"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-static.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "method3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-staticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_get_method", "_get_method2", "_set_method", "_set_method2", "_toSetter", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_get_method", "_get_method2", "_set_method", "_set_method2", "_toSetter"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["C", "_C", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_superPropGet", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_superPropGet"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["C", "_C", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_defineProperty", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["C", "_C", "_defineProperty", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classSuper/esDecorators-classDeclaration-classSuper.6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classThisReference/esDecorators-classDeclaration-classThisReference.es5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C", "_C", "_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/classThisReference/esDecorators-classDeclaration-classThisReference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C", "_C", "_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commentPreservation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["C", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Symbol flags mismatch for "_method":
after transform: SymbolId(4): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
Symbol flags mismatch for "_get_x":
after transform: SymbolId(5): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
Symbol flags mismatch for "_set_x":
after transform: SymbolId(6): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(5): SymbolFlags(BlockScopedVariable | Function)
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commonjs-classNamespaceMerge.ts
semantic error: Missing SymbolId: "_Example"
Missing ReferenceId: "_Example"
Missing ReferenceId: "Example"
Missing ReferenceId: "Example"
Bindings mismatch:
after transform: ScopeId(0): ["Example", "deco"]
rebuilt        : ScopeId(0): ["Example"]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(3): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "Example":
after transform: SymbolId(1): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "Example":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4)]
Symbol redeclarations mismatch for "Example":
after transform: SymbolId(1): [Span { start: 93, end: 100 }]
rebuilt        : SymbolId(0): []
Reference symbol mismatch for "deco":
after transform: SymbolId(0) "deco"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["deco"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-commonjs.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Example", "deco"]
rebuilt        : ScopeId(0): ["Example"]
Reference symbol mismatch for "deco":
after transform: SymbolId(0) "deco"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["deco"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-multipleDecorators.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec1", "dec2"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "dec1":
after transform: SymbolId(0) "dec1"
rebuilt        : <None>
Reference symbol mismatch for "dec2":
after transform: SymbolId(1) "dec2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec1", "dec2"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-outerThisReference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "_a", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_defineProperty", "_f", "_f2", "dec", "f"]
rebuilt        : ScopeId(0): ["A", "B", "C", "_a", "_classPrivateFieldGet", "_classPrivateFieldInitSpec", "_defineProperty", "_f", "_f2"]
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "_classPrivateFieldGet":
after transform: SymbolId(11): [ReferenceId(22)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "_a":
after transform: SymbolId(9): [ReferenceId(18), ReferenceId(21)]
rebuilt        : SymbolId(7): [ReferenceId(18)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(8)]
rebuilt        : SymbolId(8): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["WeakMap", "require"]
rebuilt        : ["WeakMap", "dec", "f", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-parameterProperties.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "bound"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "bound":
after transform: SymbolId(0) "bound"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["bound"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-setFunctionName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-simpleTransformation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-sourceMap.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["C", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStatic.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "_defineProperty", "field3"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAccessor.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "field3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_field", "dec"]
rebuilt        : ScopeId(0): ["C", "_classPrivateFieldInitSpec", "_field"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticPrivateAccessor.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-static.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_defineProperty", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "_defineProperty", "field3"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticAccessor.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "dec", "field3"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "field3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_field", "_field2", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "_field", "_field2"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticPrivateAccessor.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_D", "_assertClassBrand", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_D", "_assertClassBrand"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStatic.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "method3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_method", "dec"]
rebuilt        : ScopeId(0): ["C", "_C_brand", "_classPrivateMethodInitSpec", "_method"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-static.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "dec", "method3"]
rebuilt        : ScopeId(0): ["C", "method3"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-staticPrivate.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "_method", "_method2", "dec"]
rebuilt        : ScopeId(0): ["C", "D", "_method", "_method2"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["_C", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_C2", "_C3", "_superPropGet", "dec"]
rebuilt        : ScopeId(0): ["_C", "_C2", "_C3", "_superPropGet"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["_C", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "_superPropGet", "dec", "method"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "_superPropGet", "method"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "dec", "x"]
rebuilt        : ScopeId(0): ["_C", "_C2", "_C3", "_defineProperty", "_super$x", "_super$x10", "_super$x11", "_super$x12", "_super$x13", "_super$x14", "_super$x15", "_super$x16", "_super$x17", "_super$x18", "_super$x2", "_super$x3", "_super$x4", "_super$x5", "_super$x6", "_super$x7", "_super$x8", "_super$x9", "_superPropGet", "_superPropSet", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/classSuper/esDecorators-classExpression-classSuper.6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Base", "require"]
rebuilt        : ["Base", "dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/esDecorators-classExpression-commentPreservation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_C", "_defineProperty", "_get_x", "_method", "_set_x", "_y", "dec"]
rebuilt        : ScopeId(0): ["_C", "_defineProperty", "_get_x", "_method", "_set_x", "_y"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "_x", "_x2", "dec", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "_x", "_x2", "x"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.10.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "f"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(1) "f"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "f", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.11.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "f", "x"]
rebuilt        : ScopeId(0): ["_defineProperty", "f", "x"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "x1", "x2"]
rebuilt        : ScopeId(0): ["_defineProperty", "x1", "x2"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "obj"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "obj", "require"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "obj", "require", "x"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "obj", "require", "x"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_defineProperty", "dec", "obj", "x"]
rebuilt        : ScopeId(0): ["_defineProperty"]
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(2) "x"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(1) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["dec", "obj", "require", "x"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["dec"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/classExpression/namedEvaluation/esDecorators-classExpression-namedEvaluation.9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["dec"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["dec", "module"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-contextualTypes.2.ts
semantic error: Unresolved references mismatch:
after transform: ["ClassMethodDecoratorContext", "console"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-contextualTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["g", "h", "x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(3) "h"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(1) "g"
rebuilt        : <None>
Reference symbol mismatch for "h":
after transform: SymbolId(3) "h"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["g", "h", "x"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["g"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Reference symbol mismatch for "g":
after transform: SymbolId(0) "g"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["g"]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-preservesThis.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "D", "instance"]
rebuilt        : ScopeId(0): ["C", "D"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Reference symbol mismatch for "instance":
after transform: SymbolId(3) "instance"
rebuilt        : <None>
Reference symbol mismatch for "instance":
after transform: SymbolId(3) "instance"
rebuilt        : <None>
Reference symbol mismatch for "instance":
after transform: SymbolId(3) "instance"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["DecoratorContext", "DecoratorProvider"]
rebuilt        : ["DecoratorProvider", "instance"]
Unresolved reference IDs mismatch for "DecoratorProvider":
after transform: [ReferenceId(0), ReferenceId(4), ReferenceId(8)]
rebuilt        : [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/esDecorators/metadata/esDecoratorsMetadata5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "metadata"]
rebuilt        : ScopeId(0): ["C"]
Reference symbol mismatch for "metadata":
after transform: SymbolId(0) "metadata"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["metadata"]

tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiteralInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["AdvancedList", "AppType", "Composite", "HeaderDetail", "HeaderMultiDetail", "ListOnly", "ModuleSettings", "Relationship", "Report", "Standard"]
rebuilt        : ScopeId(1): ["AppType"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["AppStyle", "MiniApp", "PivotTable", "Standard", "Tree", "TreeEntity"]
rebuilt        : ScopeId(2): ["AppStyle"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "AppType":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "AppType":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(5), ReferenceId(8), ReferenceId(12)]
rebuilt        : SymbolId(0): [ReferenceId(22), ReferenceId(25), ReferenceId(29)]
Symbol flags mismatch for "AppStyle":
after transform: SymbolId(10): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "AppStyle":
after transform: SymbolId(10): [ReferenceId(3), ReferenceId(6), ReferenceId(7), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(13), ReferenceId(14)]
rebuilt        : SymbolId(2): [ReferenceId(23), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(31)]
Unresolved references mismatch:
after transform: ["Array", "Map", "foo"]
rebuilt        : ["Map", "foo"]
Unresolved reference IDs mismatch for "Map":
after transform: [ReferenceId(0), ReferenceId(4)]
rebuilt        : [ReferenceId(21)]

tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals2ES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "Number", "String", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/arrayLiterals/arrayLiterals2ES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "Number", "String", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOpEmitParens.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperator3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorASI.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentGenericLookupTypeNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentTypeNarrowing.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithAnyAndEveryType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithConstrainedTypeParameter.ts
semantic error: Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithNumberAndEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(34)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(18), ReferenceId(40)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(27)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/additionOperator/additionOperatorWithStringAndEveryType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(31), ReferenceId(33), ReferenceId(45)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(37), ReferenceId(39)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(41), ReferenceId(43), ReferenceId(44), ReferenceId(55), ReferenceId(57), ReferenceId(59), ReferenceId(60), ReferenceId(61), ReferenceId(63), ReferenceId(65), ReferenceId(66), ReferenceId(77), ReferenceId(79), ReferenceId(81), ReferenceId(82), ReferenceId(83), ReferenceId(85), ReferenceId(87), ReferenceId(88), ReferenceId(99), ReferenceId(101), ReferenceId(103), ReferenceId(104), ReferenceId(105), ReferenceId(107), ReferenceId(109), ReferenceId(110), ReferenceId(121), ReferenceId(123), ReferenceId(125), ReferenceId(126), ReferenceId(127), ReferenceId(129), ReferenceId(131), ReferenceId(132), ReferenceId(143), ReferenceId(145), ReferenceId(147), ReferenceId(148), ReferenceId(149), ReferenceId(151), ReferenceId(153), ReferenceId(154), ReferenceId(165), ReferenceId(167), ReferenceId(169), ReferenceId(170), ReferenceId(171), ReferenceId(173), ReferenceId(175), ReferenceId(176), ReferenceId(187), ReferenceId(189), ReferenceId(191), ReferenceId(192), ReferenceId(193), ReferenceId(195), ReferenceId(197), ReferenceId(198), ReferenceId(209), ReferenceId(211), ReferenceId(213), ReferenceId(214), ReferenceId(215), ReferenceId(217), ReferenceId(219), ReferenceId(220), ReferenceId(226)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(38), ReferenceId(40), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(60), ReferenceId(62), ReferenceId(64), ReferenceId(65), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(71), ReferenceId(82), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(93), ReferenceId(104), ReferenceId(106), ReferenceId(108), ReferenceId(109), ReferenceId(110), ReferenceId(112), ReferenceId(114), ReferenceId(115), ReferenceId(126), ReferenceId(128), ReferenceId(130), ReferenceId(131), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(137), ReferenceId(148), ReferenceId(150), ReferenceId(152), ReferenceId(153), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(159), ReferenceId(170), ReferenceId(172), ReferenceId(174), ReferenceId(175), ReferenceId(176), ReferenceId(178), ReferenceId(180), ReferenceId(181), ReferenceId(192), ReferenceId(194), ReferenceId(196), ReferenceId(197), ReferenceId(198), ReferenceId(200), ReferenceId(202), ReferenceId(203), ReferenceId(214), ReferenceId(216), ReferenceId(218), ReferenceId(219), ReferenceId(220), ReferenceId(222), ReferenceId(224), ReferenceId(225)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithEnumUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["F", "c", "d"]
rebuilt        : ScopeId(2): ["F"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(23), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(45), ReferenceId(56), ReferenceId(58), ReferenceId(60), ReferenceId(61), ReferenceId(62), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(78), ReferenceId(80), ReferenceId(82), ReferenceId(83), ReferenceId(84), ReferenceId(86), ReferenceId(88), ReferenceId(89), ReferenceId(100), ReferenceId(102), ReferenceId(104), ReferenceId(105), ReferenceId(106), ReferenceId(108), ReferenceId(110), ReferenceId(111), ReferenceId(122), ReferenceId(124), ReferenceId(126), ReferenceId(127), ReferenceId(128), ReferenceId(130), ReferenceId(132), ReferenceId(133), ReferenceId(144), ReferenceId(146), ReferenceId(148), ReferenceId(149), ReferenceId(150), ReferenceId(152), ReferenceId(154), ReferenceId(155), ReferenceId(166), ReferenceId(168), ReferenceId(170), ReferenceId(171), ReferenceId(172), ReferenceId(174), ReferenceId(176), ReferenceId(177), ReferenceId(188), ReferenceId(190), ReferenceId(192), ReferenceId(193), ReferenceId(194), ReferenceId(196), ReferenceId(198), ReferenceId(199), ReferenceId(210), ReferenceId(212), ReferenceId(214), ReferenceId(215), ReferenceId(216), ReferenceId(218), ReferenceId(220), ReferenceId(221), ReferenceId(227)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(33), ReferenceId(44), ReferenceId(46), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(52), ReferenceId(54), ReferenceId(55), ReferenceId(66), ReferenceId(68), ReferenceId(70), ReferenceId(71), ReferenceId(72), ReferenceId(74), ReferenceId(76), ReferenceId(77), ReferenceId(88), ReferenceId(90), ReferenceId(92), ReferenceId(93), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(99), ReferenceId(110), ReferenceId(112), ReferenceId(114), ReferenceId(115), ReferenceId(116), ReferenceId(118), ReferenceId(120), ReferenceId(121), ReferenceId(132), ReferenceId(134), ReferenceId(136), ReferenceId(137), ReferenceId(138), ReferenceId(140), ReferenceId(142), ReferenceId(143), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(159), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(165), ReferenceId(176), ReferenceId(178), ReferenceId(180), ReferenceId(181), ReferenceId(182), ReferenceId(184), ReferenceId(186), ReferenceId(187), ReferenceId(198), ReferenceId(200), ReferenceId(202), ReferenceId(203), ReferenceId(204), ReferenceId(206), ReferenceId(208), ReferenceId(209), ReferenceId(220), ReferenceId(222), ReferenceId(224), ReferenceId(225), ReferenceId(226), ReferenceId(228), ReferenceId(230), ReferenceId(231)]
Symbol flags mismatch for "F":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(233)]
rebuilt        : SymbolId(2): [ReferenceId(11)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithIdenticalObjects.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10), ScopeId(11)]
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B1":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(12)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(3), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(5): [ReferenceId(12), ReferenceId(13)]
Symbol reference IDs mismatch for "A2":
after transform: SymbolId(6): [ReferenceId(7)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "B2":
after transform: SymbolId(7): [ReferenceId(13)]
rebuilt        : SymbolId(8): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnInstantiatedCallSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(17)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNoRelationshipObjectsOnInstantiatedConstructorSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(17)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithNumericLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsAny.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(33), ReferenceId(265)]
rebuilt        : SymbolId(1): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsUndefined.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(34), ReferenceId(266)]
rebuilt        : SymbolId(1): [ReferenceId(7)]
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeEnumAndNumber.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b", "c"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(15), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(25), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(35), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(45), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(55), ReferenceId(58), ReferenceId(59), ReferenceId(60), ReferenceId(65), ReferenceId(68), ReferenceId(69), ReferenceId(70), ReferenceId(75), ReferenceId(78), ReferenceId(79), ReferenceId(80), ReferenceId(88)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(12), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(22), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(32), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(42), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(52), ReferenceId(55), ReferenceId(56), ReferenceId(57), ReferenceId(62), ReferenceId(65), ReferenceId(66), ReferenceId(67), ReferenceId(72), ReferenceId(75), ReferenceId(76), ReferenceId(77), ReferenceId(82), ReferenceId(85), ReferenceId(86), ReferenceId(87)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnCallSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(15)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnConstructorSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(13), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(27)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnIndexSignature.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnInstantiatedCallSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(16)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnInstantiatedConstructorSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(16)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnOptionalProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithSubtypeObjectOnProperty.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(4)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A1":
after transform: SymbolId(2): [ReferenceId(6)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "B1":
after transform: SymbolId(3): [ReferenceId(8)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "A2":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(6): [ReferenceId(10)]
Symbol reference IDs mismatch for "B2":
after transform: SymbolId(5): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidStaticToString.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved reference IDs mismatch for "StaticToString":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(1)]
Unresolved reference IDs mismatch for "StaticToNumber":
after transform: [ReferenceId(3), ReferenceId(5)]
rebuilt        : [ReferenceId(3)]
Unresolved reference IDs mismatch for "NormalToString":
after transform: [ReferenceId(6), ReferenceId(8)]
rebuilt        : [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithLHSIsObject.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Function", "Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithRHSHasSymbolHasInstance.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["lhs0", "lhs1", "lhs2", "lhs3", "lhs4", "obj", "rhs0", "rhs1", "rhs14", "rhs15", "rhs2", "rhs3", "rhs4", "rhs5", "rhs6"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(38), ScopeId(39), ScopeId(41), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs6":
after transform: SymbolId(10) "rhs6"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs1":
after transform: SymbolId(19) "lhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs2":
after transform: SymbolId(20) "lhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "rhs6":
after transform: SymbolId(10) "rhs6"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs3":
after transform: SymbolId(21) "lhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs0":
after transform: SymbolId(4) "rhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs1":
after transform: SymbolId(5) "rhs1"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs2":
after transform: SymbolId(6) "rhs2"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs3":
after transform: SymbolId(7) "rhs3"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs4":
after transform: SymbolId(8) "rhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "rhs5":
after transform: SymbolId(9) "rhs5"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "lhs4":
after transform: SymbolId(22) "lhs4"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(27) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(27) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(27) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(27) "obj"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs14":
after transform: SymbolId(30) "rhs14"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Reference symbol mismatch for "rhs15":
after transform: SymbolId(34) "rhs15"
rebuilt        : <None>
Reference symbol mismatch for "lhs0":
after transform: SymbolId(18) "lhs0"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["A", "B", "Rhs10", "Rhs11", "Rhs12", "Rhs13", "Rhs7", "Rhs8", "Rhs9", "Symbol", "globalThis", "true"]
rebuilt        : ["A", "B", "Rhs10", "Rhs11", "Rhs12", "Rhs13", "Rhs7", "Rhs8", "Rhs9", "lhs0", "lhs1", "lhs2", "lhs3", "lhs4", "obj", "rhs0", "rhs1", "rhs14", "rhs15", "rhs2", "rhs3", "rhs4", "rhs5", "rhs6"]
Unresolved reference IDs mismatch for "A":
after transform: [ReferenceId(237), ReferenceId(239)]
rebuilt        : [ReferenceId(175)]

tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithRHSIsSubtypeOfFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Function", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandAnyType.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandBooleanType.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandNumberType.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandObjectType.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["Date", "require"]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithSecondOperandStringType.ts
semantic error: Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(29), ReferenceId(38)]
rebuilt        : [ReferenceId(28), ReferenceId(37)]

tasks/coverage/typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorsMultipleOperators.ts
semantic error: Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(0), ReferenceId(33), ReferenceId(36)]
rebuilt        : [ReferenceId(32), ReferenceId(35)]

tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsBooleanType.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorWithIdenticalBCT.ts
semantic error: Symbol reference IDs mismatch for "X":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(9), ReferenceId(19), ReferenceId(25), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(7)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(12), ReferenceId(22)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E", "blue", "red"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(29)]
rebuilt        : SymbolId(0): [ReferenceId(5)]
Symbol reference IDs mismatch for "a0":
after transform: SymbolId(3): [ReferenceId(5)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Class":
after transform: SymbolId(6): [ReferenceId(1)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Number"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/functionExpressionContextualTyping3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/iterableContextualTyping1.ts
semantic error: Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/superCallParameterContextualTyping3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/taggedTemplateContextualTyping1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined", "x"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/taggedTemplateContextualTyping2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["TemplateStringsArray", "undefined", "x"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/elementAccess/stringEnumInElementAccess01.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "e", "item", "snb"]
rebuilt        : ScopeId(0): ["E", "snb"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(4)]
Reference symbol mismatch for "item":
after transform: SymbolId(5) "item"
rebuilt        : <None>
Reference symbol mismatch for "e":
after transform: SymbolId(6) "e"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["e", "item"]

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpreadES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpread.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpreadES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/newWithSpreadES6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(7): [ReferenceId(0), ReferenceId(1), ReferenceId(45), ReferenceId(46), ReferenceId(48)]
rebuilt        : SymbolId(6): [ReferenceId(36), ReferenceId(37), ReferenceId(39)]

tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/typeArgumentInferenceTransitiveConstraints.ts
semantic error: Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(4), ReferenceId(5), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/expressions/functions/contextuallyTypedFunctionExpressionsAndReturnAnnotations.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/expressions/functions/typeOfThisInFunctionExpression.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(7), SymbolId(11), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(8), SymbolId(12)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(19)]
rebuilt        : ScopeId(8): [SymbolId(13), SymbolId(14), SymbolId(16), SymbolId(18)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/expressions/functions/voidParamAssignmentCompatibility.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["gg", "o"]
rebuilt        : ScopeId(0): ["gg"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o":
after transform: SymbolId(4) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["g"]
rebuilt        : ["g", "o"]

tasks/coverage/typescript/tests/cases/conformance/expressions/newOperator/newOperatorConformance.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C0", "C1", "T", "a", "anyCtor", "anyCtor1", "c1", "d", "fnVoid", "n", "nested", "newFn1", "newFn2", "t"]
rebuilt        : ScopeId(0): ["C0", "C1", "T", "a", "anyCtor", "anyCtor1", "c1", "d", "fnVoid", "n", "nested", "nestedCtor", "newFn1", "newFn2", "t"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(6): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(7): []
Symbol reference IDs mismatch for "C0":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "T":
after transform: SymbolId(4): [ReferenceId(5), ReferenceId(6)]
rebuilt        : SymbolId(4): [ReferenceId(1)]
Symbol flags mismatch for "nestedCtor":
after transform: SymbolId(9): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "nestedCtor":
after transform: SymbolId(9): Span { start: 197, end: 207 }
rebuilt        : SymbolId(8): Span { start: 240, end: 262 }
Symbol reference IDs mismatch for "nestedCtor":
after transform: SymbolId(9): [ReferenceId(1), ReferenceId(2), ReferenceId(15)]
rebuilt        : SymbolId(8): [ReferenceId(8)]
Symbol redeclarations mismatch for "nestedCtor":
after transform: SymbolId(9): [Span { start: 240, end: 262 }]
rebuilt        : SymbolId(8): []

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_ref", "_ref2", "_ref3", "_ref4", "_ref5", "a1", "a2", "a3", "a4", "a5", "a6", "aa1"]
rebuilt        : ScopeId(0): ["_ref", "_ref2", "_ref3", "_ref4", "_ref5", "aa1"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c", "f", "foo1", "foo2", "foo3"]
rebuilt        : ScopeId(0): ["f", "foo1", "foo2", "foo3"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(2) "c"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b", "c"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_a$m", "_a$m2", "_a$p", "_ref", "_ref2", "a", "b", "n1", "n2", "n3"]
rebuilt        : ScopeId(0): ["_a$m", "_a$m2", "_a$p", "_ref", "_ref2", "n1", "n2", "n3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a", "b"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "g", "gg"]
rebuilt        : ScopeId(0): ["g", "gg"]
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Reference symbol mismatch for "f":
after transform: SymbolId(0) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): ["_a", "a"]
Bindings mismatch:
after transform: ScopeId(2): ["_a", "c"]
rebuilt        : ScopeId(2): ["c"]
Symbol scope ID mismatch for "_a":
after transform: SymbolId(2): ScopeId(2)
rebuilt        : SymbolId(0): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator_es2020.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9", "b", "c", "x1", "x2", "x3", "x4", "x5", "x6", "y1", "y2", "y3", "y4", "y5", "y6"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9", "x1", "x2", "x3", "x4", "x5", "x6", "y1", "y2", "y3", "y4", "y5", "y6"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(20) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(18) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(19) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["a", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b", "c"]

tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator_not_strict.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
rebuilt        : ScopeId(0): ["aa1", "aa2", "aa3", "aa4", "aa5", "aa6", "aa7", "aa8", "aa9"]
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a1":
after transform: SymbolId(0) "a1"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a2":
after transform: SymbolId(1) "a2"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a3":
after transform: SymbolId(2) "a3"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a4":
after transform: SymbolId(3) "a4"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a5":
after transform: SymbolId(4) "a5"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a6":
after transform: SymbolId(5) "a6"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a7":
after transform: SymbolId(6) "a7"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a8":
after transform: SymbolId(7) "a8"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Reference symbol mismatch for "a9":
after transform: SymbolId(8) "a9"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9"]

tasks/coverage/typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralGettersAndSetters.ts
semantic error: Symbol reference IDs mismatch for "anyVar":
after transform: SymbolId(30): [ReferenceId(11)]
rebuilt        : SymbolId(30): []
Unresolved references mismatch:
after transform: ["Array", "Date", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChain.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChain.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o3$b10", "_o3$b11", "_o3$b12", "_o3$b2", "_o3$b3", "_o3$b4", "_o3$b5", "_o3$b6", "_o3$b7", "_o3$b8", "_o3$b9", "o1", "o2", "o3", "o4", "o5", "v"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o3$b10", "_o3$b11", "_o3$b12", "_o3$b2", "_o3$b3", "_o3$b4", "_o3$b5", "_o3$b6", "_o3$b7", "_o3$b8", "_o3$b9", "v"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(7) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["incr"]
rebuilt        : ["incr", "o1", "o2", "o3", "o4", "o5"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/callChainInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["value"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Reference symbol mismatch for "value":
after transform: SymbolId(2) "value"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["value"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/callChain/parentheses.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o4$b", "o1", "o2", "o3", "o4"]
rebuilt        : ScopeId(0): ["_o4$b"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "_o3$b2", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b", "_o3$b2"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o3$b2", "_o4$b", "_o4$b2", "_o5$b", "_o5$b2", "_o5$b3", "_o5$b4", "o1", "o2", "o3", "o4", "o5", "o6"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o3$b2", "_o4$b", "_o4$b2", "_o5$b", "_o5$b2", "_o5$b3", "_o5$b4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o6":
after transform: SymbolId(5) "o6"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4", "o5", "o6"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterBindingPattern.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_a", "c"]
rebuilt        : ScopeId(3): ["_a"]
Scope parent mismatch:
after transform: ScopeId(2): Some(ScopeId(0))
rebuilt        : ScopeId(3): Some(ScopeId(2))
Symbol scope ID mismatch for "c":
after transform: SymbolId(1): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(2)

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterInitializer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(2): ["_a", "b"]
rebuilt        : ScopeId(3): ["_a"]
Scope parent mismatch:
after transform: ScopeId(2): Some(ScopeId(0))
rebuilt        : ScopeId(3): Some(ScopeId(2))
Symbol scope ID mismatch for "b":
after transform: SymbolId(1): ScopeId(2)
rebuilt        : SymbolId(1): ScopeId(2)

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInference.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "fnu", "ofnu", "osu", "su", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"]
rebuilt        : ScopeId(0): ["b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "v1", "v2", "v3", "v4", "v5", "v6", "v7", "v8"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "fnu":
after transform: SymbolId(3) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "fnu":
after transform: SymbolId(3) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "fnu":
after transform: SymbolId(3) "fnu"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "su":
after transform: SymbolId(2) "su"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "osu":
after transform: SymbolId(4) "osu"
rebuilt        : <None>
Reference symbol mismatch for "ofnu":
after transform: SymbolId(5) "ofnu"
rebuilt        : <None>
Reference symbol mismatch for "ofnu":
after transform: SymbolId(5) "ofnu"
rebuilt        : <None>
Reference symbol mismatch for "ofnu":
after transform: SymbolId(5) "ofnu"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["unbox"]
rebuilt        : ["fnu", "ofnu", "osu", "su", "unbox"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o3$b", "o1", "o2", "o3"]
rebuilt        : ScopeId(0): ["_o3$b"]
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3"]

tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_o", "_o3$b", "_o4$b", "_o5$b", "o1", "o2", "o3", "o4", "o5", "o6"]
rebuilt        : ScopeId(0): ["_o", "_o3$b", "_o4$b", "_o5$b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o3":
after transform: SymbolId(2) "o3"
rebuilt        : <None>
Reference symbol mismatch for "o4":
after transform: SymbolId(3) "o4"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o5":
after transform: SymbolId(4) "o5"
rebuilt        : <None>
Reference symbol mismatch for "o6":
after transform: SymbolId(5) "o6"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o1":
after transform: SymbolId(0) "o1"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Reference symbol mismatch for "o2":
after transform: SymbolId(1) "o2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["o1", "o2", "o3", "o4", "o5", "o6"]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/constAssertionOnEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "Foo"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/TypeGuardWithArrayUnion.ts
semantic error: Symbol reference IDs mismatch for "Message":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/TypeGuardWithEnumUnion.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["B", "Color", "G", "R"]
rebuilt        : ScopeId(1): ["Color"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Color":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Color":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(5), ReferenceId(10), ReferenceId(15), ReferenceId(23)]
rebuilt        : SymbolId(0): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardEnums.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(9)]
rebuilt        : SymbolId(0): [ReferenceId(1)]
Symbol flags mismatch for "V":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "V":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(11)]
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(14), ReferenceId(19), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(34), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(6), ReferenceId(15), ReferenceId(43), ReferenceId(44)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4), ReferenceId(10), ReferenceId(20), ReferenceId(21), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32), ReferenceId(35), ReferenceId(42)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionGenerics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(22), ReferenceId(29)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThis.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(29), ScopeId(31), ScopeId(33)]
Symbol reference IDs mismatch for "RoyalGuard":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(4)]
Symbol reference IDs mismatch for "LeadGuard":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(62)]
rebuilt        : SymbolId(2): [ReferenceId(1)]
Symbol reference IDs mismatch for "FollowerGuard":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(3), ReferenceId(7), ReferenceId(63)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "ArrowElite":
after transform: SymbolId(8): [ReferenceId(22), ReferenceId(23)]
rebuilt        : SymbolId(8): [ReferenceId(19)]
Symbol reference IDs mismatch for "ArrowMedic":
after transform: SymbolId(9): [ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(9): [ReferenceId(21)]
Symbol reference IDs mismatch for "MimicLeader":
after transform: SymbolId(17): [ReferenceId(47), ReferenceId(48)]
rebuilt        : SymbolId(13): [ReferenceId(37)]
Symbol reference IDs mismatch for "MimicFollower":
after transform: SymbolId(18): [ReferenceId(49), ReferenceId(50)]
rebuilt        : SymbolId(14): [ReferenceId(38)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardIntersectionTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(32)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(20)]
Unresolved references mismatch:
after transform: ["Object", "isX", "isY", "isZ", "log"]
rebuilt        : ["isX", "isY", "isZ", "log"]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsPrimitiveIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol flags mismatch for "Tag2":
after transform: SymbolId(5): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Tag2":
after transform: SymbolId(5): [ReferenceId(8), ReferenceId(9), ReferenceId(17)]
rebuilt        : SymbolId(1): [ReferenceId(7)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsToLiteralType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardNarrowsToLiteralTypeUnion.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1AndExpr2.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(23)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormExpr1OrExpr2.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(19)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormFunctionEquality.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Object", "isString1", "isString2"]
rebuilt        : ["isString1", "isString2"]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormInstanceOf.ts
semantic error: Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5), ReferenceId(36), ReferenceId(38), ReferenceId(41), ReferenceId(44), ReferenceId(48), ReferenceId(54), ReferenceId(58), ReferenceId(61), ReferenceId(65)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(9), ReferenceId(36), ReferenceId(39), ReferenceId(43), ReferenceId(50), ReferenceId(54)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(9), ReferenceId(19), ReferenceId(23), ReferenceId(34), ReferenceId(39), ReferenceId(45), ReferenceId(51), ReferenceId(56), ReferenceId(62), ReferenceId(67)]
rebuilt        : SymbolId(2): [ReferenceId(13), ReferenceId(25), ReferenceId(46), ReferenceId(56)]
Symbol reference IDs mismatch for "D1":
after transform: SymbolId(2): [ReferenceId(13), ReferenceId(17), ReferenceId(20), ReferenceId(27), ReferenceId(31), ReferenceId(33), ReferenceId(55)]
rebuilt        : SymbolId(3): [ReferenceId(17), ReferenceId(21), ReferenceId(29), ReferenceId(33)]
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(3): [ReferenceId(46), ReferenceId(63)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormInstanceOfOnInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsType.ts
semantic error: Symbol reference IDs mismatch for "C1":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(22), ReferenceId(36)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "D1":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(23), ReferenceId(37)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormIsTypeOnInterfaces.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfBoolean.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfFunction.ts
semantic error: Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfNumber.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfPrimitiveSubtype.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormTypeOfString.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFromPropNameInUnionType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(27), ScopeId(30), ScopeId(34), ScopeId(38), ScopeId(39)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(25), ScopeId(28), ScopeId(30), ScopeId(33), ScopeId(35), ScopeId(38), ScopeId(43), ScopeId(48)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(7), ReferenceId(27), ReferenceId(32), ReferenceId(43)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(8), ReferenceId(28), ReferenceId(33), ReferenceId(44)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(9)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(3): [ReferenceId(10)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "AWithOptionalProp":
after transform: SymbolId(14): [ReferenceId(19), ReferenceId(24)]
rebuilt        : SymbolId(15): [ReferenceId(19)]
Symbol reference IDs mismatch for "BWithOptionalProp":
after transform: SymbolId(15): [ReferenceId(20)]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "ClassWithUnionProp":
after transform: SymbolId(23): [ReferenceId(34), ReferenceId(38)]
rebuilt        : SymbolId(24): []
Symbol reference IDs mismatch for "NestedClassWithProp":
after transform: SymbolId(28): [ReferenceId(39)]
rebuilt        : SymbolId(29): []
Unresolved references mismatch:
after transform: ["Date", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInFunctionAndModuleBlock.ts
semantic error: Missing SymbolId: "m"
Missing SymbolId: "_m"
Missing SymbolId: "m2"
Missing SymbolId: "_m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m"
Missing ReferenceId: "m"
Missing SymbolId: "m1"
Missing SymbolId: "_m3"
Missing SymbolId: "m2"
Missing SymbolId: "_m4"
Missing SymbolId: "m3"
Missing SymbolId: "_m5"
Missing ReferenceId: "m3"
Missing ReferenceId: "m3"
Missing ReferenceId: "_m4"
Missing ReferenceId: "_m4"
Missing ReferenceId: "m2"
Missing ReferenceId: "m2"
Missing ReferenceId: "m1"
Missing ReferenceId: "m1"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(16), SymbolId(21), SymbolId(26)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(16), SymbolId(21), SymbolId(28)]
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(22), SymbolId(23), SymbolId(32)]
rebuilt        : ScopeId(12): [SymbolId(22), SymbolId(23), SymbolId(24)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(24), SymbolId(25), SymbolId(33)]
rebuilt        : ScopeId(13): [SymbolId(25), SymbolId(26), SymbolId(27)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(16): [SymbolId(27), SymbolId(28), SymbolId(34)]
rebuilt        : ScopeId(16): [SymbolId(29), SymbolId(30), SymbolId(31)]
Scope flags mismatch:
after transform: ScopeId(16): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(16): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(17): [SymbolId(29), SymbolId(35)]
rebuilt        : ScopeId(17): [SymbolId(32), SymbolId(33)]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(17): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(18): [SymbolId(30), SymbolId(31), SymbolId(36)]
rebuilt        : ScopeId(18): [SymbolId(34), SymbolId(35), SymbolId(36)]
Scope flags mismatch:
after transform: ScopeId(18): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInProperties.ts
semantic error: Symbol reference IDs mismatch for "C1":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typePredicateASI.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_asConstArrays.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_contextualTyping1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_contextualTyping3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Function"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_ensureInterfaceImpl.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyValueConformance1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyValueConformance2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "x":
after transform: SymbolId(3): [ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(7), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(5), ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithBooleanType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithEnumType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["", "A", "B", "ENUM1"]
rebuilt        : ScopeId(1): ["ENUM1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "ENUM1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithNumberType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithStringType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithAnyOtherType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithNumberType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithBooleanType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithEnumType.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["", "A", "B", "ENUM1"]
rebuilt        : ScopeId(2): ["ENUM1"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "ENUM":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol flags mismatch for "ENUM1":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithNumberType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorWithStringType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/amdImportAsPrimaryExpression.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/amdImportNotAsPrimaryExpression.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "E1", "M1", "_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "E1", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(3): ["E1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/asiPreventsParsingAsAmbientExternalModule02.ts
semantic error: Missing SymbolId: "container"
Missing SymbolId: "_container"
Missing ReferenceId: "container"
Missing ReferenceId: "container"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/externalModules/commonJSImportAsPrimaryExpression.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/commonJSImportNotAsPrimaryExpression.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "E1", "M1", "_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "E1", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "B", "C", "E1"]
rebuilt        : ScopeId(3): ["E1"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target11.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target12.ts
semantic error: Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing SymbolId: "_E"
Missing ReferenceId: "_E"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing SymbolId: "_E2"
Missing ReferenceId: "_E2"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing SymbolId: "_N2"
Missing ReferenceId: "_N2"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Missing SymbolId: "_F"
Missing ReferenceId: "_F"
Missing ReferenceId: "F"
Missing ReferenceId: "F"
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "F", "N"]
rebuilt        : ScopeId(0): ["C", "E", "F"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(1), SymbolId(11)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "w"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["E", "x"]
rebuilt        : ScopeId(4): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(12)]
rebuilt        : ScopeId(5): [SymbolId(6), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(13)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(8), SymbolId(15)]
rebuilt        : ScopeId(7): [SymbolId(10), SymbolId(11)]
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(10), SymbolId(16)]
rebuilt        : ScopeId(9): [SymbolId(13), SymbolId(14)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): []
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(15), ReferenceId(16)]
Symbol redeclarations mismatch for "E":
after transform: SymbolId(2): [Span { start: 109, end: 110 }, Span { start: 143, end: 144 }, Span { start: 191, end: 192 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "F":
after transform: SymbolId(9): SymbolFlags(BlockScopedVariable | Function | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable | Function)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(9): []
rebuilt        : SymbolId(12): [ReferenceId(21), ReferenceId(22)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(9): [Span { start: 336, end: 337 }]
rebuilt        : SymbolId(12): []
Unresolved references mismatch:
after transform: []
rebuilt        : ["N"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E1", "value1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "value1"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target7.ts
semantic error: Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Bindings mismatch:
after transform: ScopeId(0): ["N", "N2"]
rebuilt        : ScopeId(0): ["N"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target11.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target12.ts
semantic error: Missing SymbolId: "_C"
Missing ReferenceId: "_C"
Missing ReferenceId: "C"
Missing ReferenceId: "C"
Missing SymbolId: "_E"
Missing ReferenceId: "_E"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing SymbolId: "_E2"
Missing ReferenceId: "_E2"
Missing ReferenceId: "E"
Missing ReferenceId: "E"
Missing SymbolId: "_N2"
Missing ReferenceId: "_N2"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Missing SymbolId: "_F"
Missing ReferenceId: "_F"
Missing ReferenceId: "F"
Missing ReferenceId: "F"
Bindings mismatch:
after transform: ScopeId(0): ["C", "E", "F", "N"]
rebuilt        : ScopeId(0): ["C", "E", "F"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(1), SymbolId(11)]
rebuilt        : ScopeId(2): [SymbolId(1), SymbolId(2)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "w"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode)
rebuilt        : ScopeId(3): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(4): ["E", "x"]
rebuilt        : ScopeId(4): ["E"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode)
rebuilt        : ScopeId(4): ScopeFlags(StrictMode | Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(12)]
rebuilt        : ScopeId(5): [SymbolId(6), SymbolId(7)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(13)]
rebuilt        : ScopeId(6): [SymbolId(8), SymbolId(9)]
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(8), SymbolId(15)]
rebuilt        : ScopeId(7): [SymbolId(10), SymbolId(11)]
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(10), SymbolId(16)]
rebuilt        : ScopeId(9): [SymbolId(13), SymbolId(14)]
Symbol flags mismatch for "C":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): []
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2)]
Symbol redeclarations mismatch for "C":
after transform: SymbolId(0): [Span { start: 37, end: 38 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "E":
after transform: SymbolId(2): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(15), ReferenceId(16)]
Symbol redeclarations mismatch for "E":
after transform: SymbolId(2): [Span { start: 109, end: 110 }, Span { start: 143, end: 144 }, Span { start: 191, end: 192 }]
rebuilt        : SymbolId(3): []
Symbol flags mismatch for "F":
after transform: SymbolId(9): SymbolFlags(BlockScopedVariable | Function | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(BlockScopedVariable | Function)
Symbol reference IDs mismatch for "F":
after transform: SymbolId(9): []
rebuilt        : SymbolId(12): [ReferenceId(21), ReferenceId(22)]
Symbol redeclarations mismatch for "F":
after transform: SymbolId(9): [Span { start: 336, end: 337 }]
rebuilt        : SymbolId(12): []
Unresolved references mismatch:
after transform: []
rebuilt        : ["N"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["E1", "value1"]
rebuilt        : ScopeId(1): ["E1"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(2): ["E2", "value1"]
rebuilt        : ScopeId(2): ["E2"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode)
rebuilt        : ScopeId(2): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E1":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)
Symbol flags mismatch for "E2":
after transform: SymbolId(2): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target7.ts
semantic error: Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Bindings mismatch:
after transform: ScopeId(0): ["N", "N2"]
rebuilt        : ScopeId(0): ["N"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAmbientClassNameWithObject.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignDottedName.ts
semantic error: Missing SymbolId: "foo1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "foo1":
after transform: SymbolId(0) "foo1"
rebuilt        : SymbolId(0) "foo1"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignImportedIdentifier.ts
semantic error: Missing SymbolId: "foo1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "foo1":
after transform: SymbolId(0) "foo1"
rebuilt        : SymbolId(0) "foo1"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignTypes.ts
semantic error: Missing SymbolId: "iString"
Missing ReferenceId: "require"
Missing SymbolId: "iNumber"
Missing ReferenceId: "require"
Missing SymbolId: "iBoolean"
Missing ReferenceId: "require"
Missing SymbolId: "iArray"
Missing ReferenceId: "require"
Missing SymbolId: "iObject"
Missing ReferenceId: "require"
Missing SymbolId: "iAny"
Missing ReferenceId: "require"
Missing SymbolId: "iGeneric"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
Reference symbol mismatch for "iString":
after transform: SymbolId(0) "iString"
rebuilt        : SymbolId(0) "iString"
Reference symbol mismatch for "iNumber":
after transform: SymbolId(2) "iNumber"
rebuilt        : SymbolId(2) "iNumber"
Reference symbol mismatch for "iBoolean":
after transform: SymbolId(4) "iBoolean"
rebuilt        : SymbolId(4) "iBoolean"
Reference symbol mismatch for "iArray":
after transform: SymbolId(6) "iArray"
rebuilt        : SymbolId(6) "iArray"
Reference symbol mismatch for "iObject":
after transform: SymbolId(8) "iObject"
rebuilt        : SymbolId(8) "iObject"
Reference symbol mismatch for "iAny":
after transform: SymbolId(10) "iAny"
rebuilt        : SymbolId(10) "iAny"
Reference symbol mismatch for "iGeneric":
after transform: SymbolId(12) "iGeneric"
rebuilt        : SymbolId(12) "iGeneric"
Unresolved references mismatch:
after transform: ["Array", "Object"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentCircularModules.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentGenericType.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentMergedInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Foo":
after transform: SymbolId(0) "Foo"
rebuilt        : <None>
Reference flags mismatch for "Foo":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Foo", "module"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentMergedModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelClodule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelEnumdule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelFundule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentTopLevelIdentifier.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportDeclaredModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M1"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference flags mismatch for "M1":
after transform: ReferenceId(0): ReferenceFlags(Read | Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportNonVisibleType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/exportTypeMergedWithExportStarAsNamespace.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "Something":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/globalAugmentationModuleResolution.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/importImportOnlyModule.ts
semantic error: Missing SymbolId: "c1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithExtensions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleScoping.ts
semantic error: Missing SymbolId: "file3"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Reference symbol mismatch for "file3":
after transform: SymbolId(0) "file3"
rebuilt        : SymbolId(0) "file3"
Unresolved references mismatch:
after transform: ["NaN", "v1", "v2"]
rebuilt        : ["NaN", "require", "v1", "v2"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/nameDelimitedBySlashes.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/nameWithFileExtension.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/nameWithRelativePaths.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/externalModules/reexportClassDefinition.ts
semantic error: Missing SymbolId: "foo1"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "foo1":
after transform: SymbolId(0) "foo1"
rebuilt        : SymbolId(0) "foo1"
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["module", "require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/relativePathToDeclarationFile.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Missing SymbolId: "other"
Missing ReferenceId: "require"
Missing SymbolId: "relMod"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "relMod":
after transform: SymbolId(2) "relMod"
rebuilt        : SymbolId(2) "relMod"
Reference symbol mismatch for "other":
after transform: SymbolId(1) "other"
rebuilt        : SymbolId(1) "other"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/nodeModulesTsFiles.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["add"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAmbientModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "C1", "C2", "C3", "_await", "_defineProperty", "dec", "x", "y"]
rebuilt        : ScopeId(0): ["C", "C1", "C2", "C3", "_defineProperty", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Reference symbol mismatch for "dec":
after transform: SymbolId(6) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["f"]
rebuilt        : ["dec", "f"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.2.ts
semantic error: Missing SymbolId: "await"
Bindings mismatch:
after transform: ScopeId(0): ["await", "foo"]
rebuilt        : ScopeId(0): ["await"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelFileModule.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Missing SymbolId: "fum"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "fum":
after transform: SymbolId(1) "fum"
rebuilt        : SymbolId(1) "fum"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeAndNamespaceExportMerge.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/ambient.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "ns"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/cjsImportInES2015.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["SpecialError", "handleError"]
rebuilt        : ScopeId(0): ["handleError"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_moduleSpecifier-isolatedModules.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_value.ts
semantic error: Unresolved references mismatch:
after transform: ["A"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/implementsClause.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["type"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["from"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importDefaultNamedType3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["from"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/mergedWithLocalValue.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceImportTypeQuery2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/nestedNamespace.ts
semantic error: Missing SymbolId: "types"
Missing SymbolId: "_types"
Missing ReferenceId: "_types"
Missing ReferenceId: "A"
Missing ReferenceId: "types"
Missing ReferenceId: "types"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/preserveValueImports_errors.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/typeQuery.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "AConstructor"]
rebuilt        : ScopeId(0): ["AConstructor"]

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/typeValueMerge1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): []
rebuilt        : ScopeId(0): ["A", "B"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol flags mismatch for "A":
after transform: SymbolId(0): SymbolFlags(BlockScopedVariable | Function | TypeAlias)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable | Function)
Symbol span mismatch for "A":
after transform: SymbolId(0): Span { start: 12, end: 13 }
rebuilt        : SymbolId(0): Span { start: 33, end: 34 }
Symbol redeclarations mismatch for "A":
after transform: SymbolId(0): [Span { start: 33, end: 34 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "B":
after transform: SymbolId(1): SymbolFlags(FunctionScopedVariable | TypeAlias)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "B":
after transform: SymbolId(1): Span { start: 67, end: 68 }
rebuilt        : SymbolId(1): Span { start: 83, end: 84 }
Symbol redeclarations mismatch for "B":
after transform: SymbolId(1): [Span { start: 83, end: 84 }]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-1.ts
semantic error: Symbol reference IDs mismatch for "m":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-2.ts
semantic error: Unresolved reference IDs mismatch for "Math2d":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-3.ts
semantic error: Symbol reference IDs mismatch for "m":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd-augmentation-4.ts
semantic error: Unresolved reference IDs mismatch for "Math2d":
after transform: [ReferenceId(0), ReferenceId(1), ReferenceId(3)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd1.ts
semantic error: Unresolved reference IDs mismatch for "Foo":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd3.ts
semantic error: Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/umd4.ts
semantic error: Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxConstEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxConstEnumUsage.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Foo", "a", "b", "c"]
rebuilt        : ScopeId(1): ["Foo"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Foo":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxRestrictionsESM.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid03.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/functions/functionParameterObjectRestAndInitializers.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(6): []
Reference symbol mismatch for "a":
after transform: SymbolId(1) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "require"]

tasks/coverage/typescript/tests/cases/conformance/functions/strictBindCallApply2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Unresolved references mismatch:
after transform: ["ThisParameterType"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeFallback.5.ts
semantic error: Unresolved references mismatch:
after transform: ["IterableIterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/generators/generatorReturnTypeIndirectReferenceToGlobalType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Iterator"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/generators/generatorYieldContextualType.ts
semantic error: Missing SymbolId: "_Directive"
Missing ReferenceId: "_Directive"
Missing ReferenceId: "is"
Missing ReferenceId: "Directive"
Missing ReferenceId: "Directive"
Missing SymbolId: "StepResult"
Missing SymbolId: "_StepResult"
Missing ReferenceId: "_StepResult"
Missing ReferenceId: "StepResult"
Missing ReferenceId: "StepResult"
Bindings mismatch:
after transform: ScopeId(0): ["Directive", "_wrapAsyncGenerator", "canPickStepContinue", "createPickStep", "showStep"]
rebuilt        : ScopeId(0): ["Directive", "StepResult", "_wrapAsyncGenerator", "canPickStepContinue", "createPickStep", "showStep"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Bindings mismatch:
after transform: ScopeId(5): ["Back", "Cancel", "Directive", "LoadMore", "Noop"]
rebuilt        : ScopeId(3): ["Directive"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(15), SymbolId(53)]
rebuilt        : ScopeId(4): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(15): [SymbolId(27), SymbolId(54)]
rebuilt        : ScopeId(6): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "Directive":
after transform: SymbolId(10): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(3): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Directive":
after transform: SymbolId(10): [ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(51), ReferenceId(54), ReferenceId(64), ReferenceId(101)]
rebuilt        : SymbolId(3): [ReferenceId(13), ReferenceId(15), ReferenceId(19), ReferenceId(20)]
Symbol redeclarations mismatch for "Directive":
after transform: SymbolId(10): [Span { start: 381, end: 390 }]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "is":
after transform: SymbolId(15): []
rebuilt        : SymbolId(6): [ReferenceId(18)]
Symbol reference IDs mismatch for "step":
after transform: SymbolId(51): [ReferenceId(83), ReferenceId(84), ReferenceId(86)]
rebuilt        : SymbolId(20): [ReferenceId(27), ReferenceId(29)]
Reference symbol mismatch for "StepResult":
after transform: SymbolId(26) "StepResult"
rebuilt        : SymbolId(8) "StepResult"
Unresolved references mismatch:
after transform: ["AsyncGenerator", "Generator", "Partial", "Record", "Symbol", "f1", "f2", "require"]
rebuilt        : ["Symbol", "f1", "f2", "require"]

tasks/coverage/typescript/tests/cases/conformance/generators/yieldStatementNoAsiAfterTransform.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_f", "a", "f"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_f", "f"]

tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/inferFromBindingPattern.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/genericAndNonGenericInterfaceWithTheSameName2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M", "M2", "N"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeThreeInterfaces.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27)]
rebuilt        : ScopeId(1): [SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeThreeInterfaces2.ts
semantic error: Missing SymbolId: "M2"
Missing SymbolId: "_M"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M3"
Missing SymbolId: "M3"
Missing SymbolId: "_M4"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "_M3"
Missing ReferenceId: "_M3"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M5"
Missing SymbolId: "M3"
Missing SymbolId: "_M6"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "_M5"
Missing ReferenceId: "_M5"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M7"
Missing SymbolId: "M3"
Missing SymbolId: "_M8"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "_M7"
Missing ReferenceId: "_M7"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(27)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(28)]
rebuilt        : ScopeId(2): [SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(2): []
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(10), SymbolId(29)]
rebuilt        : ScopeId(3): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(30)]
rebuilt        : ScopeId(4): [SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(4): []
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(15), SymbolId(31)]
rebuilt        : ScopeId(5): [SymbolId(16), SymbolId(17)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(32)]
rebuilt        : ScopeId(6): [SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(6): []
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(21), SymbolId(33)]
rebuilt        : ScopeId(7): [SymbolId(23), SymbolId(24)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(34)]
rebuilt        : ScopeId(8): [SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14)]
rebuilt        : ScopeId(8): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeTwoInterfaces.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(1): [SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergeTwoInterfaces2.ts
semantic error: Missing SymbolId: "M2"
Missing SymbolId: "_M"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M2"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M3"
Missing SymbolId: "M3"
Missing SymbolId: "_M4"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "_M3"
Missing ReferenceId: "_M3"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Missing SymbolId: "_M5"
Missing SymbolId: "M3"
Missing SymbolId: "_M6"
Missing ReferenceId: "M3"
Missing ReferenceId: "M3"
Missing ReferenceId: "_M5"
Missing ReferenceId: "_M5"
Missing ReferenceId: "M2"
Missing ReferenceId: "M2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(19)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2)]
rebuilt        : ScopeId(1): []
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(20)]
rebuilt        : ScopeId(2): [SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4)]
rebuilt        : ScopeId(2): []
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(9), SymbolId(21)]
rebuilt        : ScopeId(3): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(22)]
rebuilt        : ScopeId(4): [SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(4): []
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(14), SymbolId(23)]
rebuilt        : ScopeId(5): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(24)]
rebuilt        : ScopeId(6): [SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10)]
rebuilt        : ScopeId(6): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithConflictingPropertyNames2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M", "M2", "M3"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithIndexers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(7), SymbolId(9), SymbolId(14), SymbolId(15)]
rebuilt        : ScopeId(7): [SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(7): [ScopeId(8), ScopeId(10), ScopeId(12)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(7): [ReferenceId(7)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(9): [ReferenceId(10)]
rebuilt        : SymbolId(9): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases2.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(22)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11)]
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(9), SymbolId(11), SymbolId(13), SymbolId(15), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(11): [SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(11): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(1): [ReferenceId(2)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(11)]
rebuilt        : SymbolId(10): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(11): [ReferenceId(16)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(13): [ReferenceId(13)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(15): [ReferenceId(17)]
rebuilt        : SymbolId(13): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithMultipleBases3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "C3":
after transform: SymbolId(4): [ReferenceId(5)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C4":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Date", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoMergedInterfacesWithDifferingOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoMergedInterfacesWithDifferingOverloads2.ts
semantic error: Missing SymbolId: "G"
Missing SymbolId: "_G"
Missing ReferenceId: "G"
Missing ReferenceId: "G"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
rebuilt        : ScopeId(1): [SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(3): [ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface03.ts
semantic error: Missing SymbolId: "n"
Missing SymbolId: "_n"
Missing ReferenceId: "n"
Missing ReferenceId: "n"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/derivedInterfaceDoesNotHideBaseSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendsObjectIntersection.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C20", "C21", "C22", "C23", "C3", "C4", "C5", "C6", "C7", "EX", "NX", "_defineProperty"]
rebuilt        : ScopeId(0): ["C1", "C2", "C20", "C21", "C22", "C23", "C3", "C4", "C5", "C6", "C7", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21)]
Unresolved references mismatch:
after transform: ["CX", "Constructor", "NX", "Partial", "Readonly", "fx", "require"]
rebuilt        : ["Constructor", "require"]

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatHidesBaseProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallAndConstructSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallSignaturesThatHidesBaseSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithCallSignaturesThatHidesBaseSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithConstructSignaturesThatHidesBaseSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithConstructSignaturesThatHidesBaseSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithOverloadedCallAndConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithPropertyOfEveryType.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithSpecializedCallAndConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Foo":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/AmbientModuleAndNonAmbientClassWithSameNameAndCommonRoot.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticFunctionAndNonExportedFunctionThatShareAName.ts
semantic error: Missing SymbolId: "_Point"
Missing ReferenceId: "Point"
Missing ReferenceId: "Point"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing SymbolId: "_Point2"
Missing ReferenceId: "Point"
Missing ReferenceId: "Point"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(3), SymbolId(9)]
rebuilt        : ScopeId(4): [SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(6): [SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(8), SymbolId(11)]
rebuilt        : ScopeId(10): [SymbolId(10), SymbolId(11)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 135, end: 140 }]
rebuilt        : SymbolId(0): []
Symbol flags mismatch for "Point":
after transform: SymbolId(5): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(7): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(5): [ReferenceId(1)]
rebuilt        : SymbolId(7): [ReferenceId(7), ReferenceId(8), ReferenceId(9)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(5): [Span { start: 399, end: 404 }]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticVariableAndNonExportedVarThatShareAName.ts
semantic error: Missing SymbolId: "_Point"
Missing ReferenceId: "Point"
Missing ReferenceId: "Point"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing SymbolId: "_Point2"
Missing ReferenceId: "Point"
Missing ReferenceId: "Point"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(6)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(9)]
rebuilt        : ScopeId(3): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(4): [SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(8), SymbolId(11)]
rebuilt        : ScopeId(7): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol flags mismatch for "Point":
after transform: SymbolId(0): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(1): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(1): [ReferenceId(4), ReferenceId(5), ReferenceId(6)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(0): [Span { start: 124, end: 129 }]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "Point":
after transform: SymbolId(5): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(Class)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(5): [ReferenceId(1), ReferenceId(8)]
rebuilt        : SymbolId(8): [ReferenceId(10), ReferenceId(12), ReferenceId(13), ReferenceId(14)]
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(5): [Span { start: 362, end: 367 }]
rebuilt        : SymbolId(8): []

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/EnumAndModuleWithSameNameAndCommonRoot.ts
semantic error: Missing SymbolId: "_enumdule"
Missing ReferenceId: "_enumdule"
Missing ReferenceId: "Point"
Missing ReferenceId: "enumdule"
Missing ReferenceId: "enumdule"
Bindings mismatch:
after transform: ScopeId(1): ["Blue", "Red", "enumdule"]
rebuilt        : ScopeId(1): ["enumdule"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "enumdule":
after transform: SymbolId(0): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "enumdule":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13)]
Symbol redeclarations mismatch for "enumdule":
after transform: SymbolId(0): [Span { start: 40, end: 48 }]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(3): []
rebuilt        : SymbolId(3): [ReferenceId(9)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/FunctionAndModuleWithSameNameAndDifferentCommonRoot.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Symbol flags mismatch for "Point":
after transform: SymbolId(1): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndEnumWithSameNameAndCommonRoot.ts
semantic error: Missing SymbolId: "enumdule"
Missing SymbolId: "_enumdule"
Missing ReferenceId: "_enumdule"
Missing ReferenceId: "Point"
Missing ReferenceId: "enumdule"
Missing ReferenceId: "enumdule"
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(8)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(4): ["Blue", "Red", "enumdule"]
rebuilt        : ScopeId(4): ["enumdule"]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(0x0)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): []
rebuilt        : SymbolId(2): [ReferenceId(3)]
Symbol flags mismatch for "enumdule":
after transform: SymbolId(0): SymbolFlags(RegularEnum | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable | BlockScopedVariable)
Symbol span mismatch for "enumdule":
after transform: SymbolId(0): Span { start: 7, end: 15 }
rebuilt        : SymbolId(0): Span { start: 0, end: 0 }
Symbol reference IDs mismatch for "enumdule":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(10)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(11), ReferenceId(12), ReferenceId(13)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedClassesOfTheSameName.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "_A2"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing SymbolId: "X"
Missing SymbolId: "_X"
Missing SymbolId: "Y"
Missing SymbolId: "_Y"
Missing SymbolId: "Z"
Missing SymbolId: "_Z"
Missing ReferenceId: "_Z"
Missing ReferenceId: "Line"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "_Y"
Missing ReferenceId: "_Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X"
Missing ReferenceId: "_X"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Missing SymbolId: "_X2"
Missing SymbolId: "Y"
Missing SymbolId: "_Y2"
Missing SymbolId: "Z"
Missing SymbolId: "_Z2"
Missing ReferenceId: "Z"
Missing ReferenceId: "Z"
Missing ReferenceId: "_Y2"
Missing ReferenceId: "_Y2"
Missing ReferenceId: "Y"
Missing ReferenceId: "Y"
Missing ReferenceId: "_X2"
Missing ReferenceId: "_X2"
Missing ReferenceId: "X"
Missing ReferenceId: "X"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(12), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(7), SymbolId(8), SymbolId(21)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(13)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(14)]
rebuilt        : ScopeId(4): [SymbolId(4), SymbolId(5)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(4): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(6), SymbolId(15)]
rebuilt        : ScopeId(7): [SymbolId(9), SymbolId(10)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(7): [SymbolId(7), SymbolId(16)]
rebuilt        : ScopeId(8): [SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(7): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(8): [SymbolId(8), SymbolId(17)]
rebuilt        : ScopeId(9): [SymbolId(13), SymbolId(14)]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(9): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(9), SymbolId(18)]
rebuilt        : ScopeId(12): [SymbolId(15), SymbolId(16)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(11): [SymbolId(10), SymbolId(19)]
rebuilt        : ScopeId(13): [SymbolId(17), SymbolId(18)]
Scope flags mismatch:
after transform: ScopeId(11): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(13): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(11), SymbolId(20)]
rebuilt        : ScopeId(14): [SymbolId(19), SymbolId(20)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(14): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(8): []
rebuilt        : SymbolId(14): [ReferenceId(13)]
Unresolved references mismatch:
after transform: ["A", "X", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedInterfacesOfTheSameName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "l", "p"]
rebuilt        : ScopeId(0): ["l", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(13), ScopeId(17)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["A", "X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedAndNonExportedLocalVarsOfTheSameName.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedInterfacesOfTheSameName.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "X", "l", "p"]
rebuilt        : ScopeId(0): ["l", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(14), ScopeId(18)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["A", "X"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedModulesOfTheSameName.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesWithTheSameNameAndDifferentCommonRoot.ts
semantic error: Missing SymbolId: "Root"
Missing SymbolId: "_Root"
Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "Utils"
Missing SymbolId: "_Utils"
Missing ReferenceId: "_Utils"
Missing ReferenceId: "mirror"
Missing ReferenceId: "Utils"
Missing ReferenceId: "Utils"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Missing ReferenceId: "_Root"
Missing ReferenceId: "_Root"
Missing ReferenceId: "Root"
Missing ReferenceId: "Root"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(2): [SymbolId(3), SymbolId(8)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(4), SymbolId(9)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Symbol flags mismatch for "mirror":
after transform: SymbolId(4): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(6): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "mirror":
after transform: SymbolId(4): []
rebuilt        : SymbolId(6): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesWithTheSameNameAndSameCommonRoot.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing SymbolId: "Utils"
Missing SymbolId: "_Utils"
Missing ReferenceId: "_Utils"
Missing ReferenceId: "mirror"
Missing ReferenceId: "Utils"
Missing ReferenceId: "Utils"
Missing ReferenceId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(3), SymbolId(7)]
rebuilt        : ScopeId(2): [SymbolId(3), SymbolId(4)]
Symbol flags mismatch for "mirror":
after transform: SymbolId(3): SymbolFlags(BlockScopedVariable | Function)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "mirror":
after transform: SymbolId(3): []
rebuilt        : SymbolId(4): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/exportCodeGen.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/importStatements.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/nameCollision.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWhichExtendsInterfaceWithInaccessibleType.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point2d"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(2), SymbolId(6)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Symbol reference IDs mismatch for "Point2d":
after transform: SymbolId(2): []
rebuilt        : SymbolId(2): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithAccessibleTypesInTypeParameterConstraintsClassHeritageListMemberTypeAnnotations.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithInaccessibleTypeInIndexerTypeAnnotations.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "points"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "points":
after transform: SymbolId(2): []
rebuilt        : SymbolId(4): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportClassWithInaccessibleTypeInTypeParameterConstraint.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithAccessibleTypesInParameterAndReturnTypeAnnotation.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing ReferenceId: "_A"
Missing ReferenceId: "Line"
Missing ReferenceId: "_A"
Missing ReferenceId: "fromOrigin"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(8), ReferenceId(9)]
Symbol reference IDs mismatch for "fromOrigin":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(12)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithInaccessibleTypesInParameterTypeAnnotation.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Line"
Missing ReferenceId: "_A"
Missing ReferenceId: "fromOrigin"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(7)]
Symbol reference IDs mismatch for "fromOrigin":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportFunctionWithInaccessibleTypesInReturnTypeAnnotation.ts
semantic error: Missing SymbolId: "A"
Missing SymbolId: "_A"
Missing ReferenceId: "_A"
Missing ReferenceId: "Point"
Missing ReferenceId: "_A"
Missing ReferenceId: "fromOrigin"
Missing ReferenceId: "A"
Missing ReferenceId: "A"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(5), SymbolId(7)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol reference IDs mismatch for "Line":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(4)]
rebuilt        : SymbolId(4): [ReferenceId(7)]
Symbol reference IDs mismatch for "fromOrigin":
after transform: SymbolId(5): []
rebuilt        : SymbolId(7): [ReferenceId(10)]

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithAccessibleTypesInTypeParameterConstraintsClassHeritageListMemberTypeAnnotations.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithInaccessibleTypeInIndexerTypeAnnotations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportInterfaceWithInaccessibleTypeInTypeParameterConstraint.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportModuleWithAccessibleTypesOnItsExportedMembers.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportObjectLiteralAndObjectTypeLiteralWithAccessibleTypesInMemberTypeAnnotations.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportObjectLiteralAndObjectTypeLiteralWithAccessibleTypesInNestedMemberTypeAnnotations.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableOfGenericTypeWithInaccessibleTypeAsTypeArgument.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableWithAccessibleTypeInTypeAnnotation.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ExportVariableWithInaccessibleTypeInTypeAnnotation.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/exportImportAlias.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/importAliasIdentifiers.ts
semantic error: Missing SymbolId: "moduleA"
Missing SymbolId: "_moduleA"
Missing ReferenceId: "_moduleA"
Missing ReferenceId: "Point"
Missing ReferenceId: "moduleA"
Missing ReferenceId: "moduleA"
Missing SymbolId: "alias"
Missing SymbolId: "_clodule"
Missing ReferenceId: "clodule"
Missing ReferenceId: "clodule"
Missing SymbolId: "clolias"
Missing SymbolId: "_fundule"
Missing ReferenceId: "fundule"
Missing ReferenceId: "fundule"
Missing SymbolId: "funlias"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(11), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(11), SymbolId(12), SymbolId(15)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(12)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(5): ["_clodule"]
rebuilt        : ScopeId(6): ["Point", "_clodule"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6)]
rebuilt        : ScopeId(6): []
Bindings mismatch:
after transform: ScopeId(8): ["_fundule"]
rebuilt        : ScopeId(8): ["Point", "_fundule"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(8): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9)]
rebuilt        : ScopeId(8): []
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(1): []
rebuilt        : SymbolId(3): [ReferenceId(4)]
Symbol flags mismatch for "clodule":
after transform: SymbolId(6): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(8): SymbolFlags(Class)
Symbol reference IDs mismatch for "clodule":
after transform: SymbolId(6): [ReferenceId(4), ReferenceId(6)]
rebuilt        : SymbolId(8): [ReferenceId(9), ReferenceId(10), ReferenceId(11)]
Symbol redeclarations mismatch for "clodule":
after transform: SymbolId(6): [Span { start: 257, end: 264 }]
rebuilt        : SymbolId(8): []
Symbol flags mismatch for "Point":
after transform: SymbolId(7): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(7): Span { start: 288, end: 293 }
rebuilt        : SymbolId(10): Span { start: 340, end: 352 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(7): [ReferenceId(3)]
rebuilt        : SymbolId(10): []
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(7): [Span { start: 340, end: 352 }]
rebuilt        : SymbolId(10): []
Symbol flags mismatch for "fundule":
after transform: SymbolId(9): SymbolFlags(FunctionScopedVariable | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(12): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "fundule":
after transform: SymbolId(9): [ReferenceId(8)]
rebuilt        : SymbolId(12): [ReferenceId(12), ReferenceId(13), ReferenceId(14)]
Symbol redeclarations mismatch for "fundule":
after transform: SymbolId(9): [Span { start: 539, end: 546 }]
rebuilt        : SymbolId(12): []
Symbol flags mismatch for "Point":
after transform: SymbolId(10): SymbolFlags(FunctionScopedVariable | Interface)
rebuilt        : SymbolId(14): SymbolFlags(FunctionScopedVariable)
Symbol span mismatch for "Point":
after transform: SymbolId(10): Span { start: 570, end: 575 }
rebuilt        : SymbolId(14): Span { start: 622, end: 634 }
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(10): [ReferenceId(7)]
rebuilt        : SymbolId(14): []
Symbol redeclarations mismatch for "Point":
after transform: SymbolId(10): [Span { start: 622, end: 634 }]
rebuilt        : SymbolId(14): []
Reference symbol mismatch for "moduleA":
after transform: SymbolId(0) "moduleA"
rebuilt        : SymbolId(1) "moduleA"
Unresolved references mismatch:
after transform: ["fundule", "moduleA", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleBody/moduleWithStatementsOfEveryKind.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/asiPreventsParsingAsNamespace03.ts
semantic error: Missing SymbolId: "container"
Missing SymbolId: "_container"
Missing ReferenceId: "container"
Missing ReferenceId: "container"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3)]
rebuilt        : ScopeId(1): [SymbolId(3)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/asiPreventsParsingAsNamespace05.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/instantiatedModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/nestedModules.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/nonInstantiatedModule.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/reExportAliasMakesInstantiated.ts
semantic error: Missing SymbolId: "test1"
Bindings mismatch:
after transform: ScopeId(0): ["mod1", "mod2", "pack1", "pack2", "test1", "test2"]
rebuilt        : ScopeId(0): ["test1", "test2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["mod1", "mod2", "pack1", "pack2"]
rebuilt        : ["mod2", "pack2"]

tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassImplementsGenericsSerialization.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Uint8Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsPrivateFields01.ts
semantic error: Symbol flags mismatch for "_calcHello":
after transform: SymbolId(4): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(7): SymbolFlags(BlockScopedVariable | Function)
Symbol flags mismatch for "_get_screamingHello":
after transform: SymbolId(5): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(8): SymbolFlags(BlockScopedVariable | Function)
Symbol flags mismatch for "_set_screamingHello":
after transform: SymbolId(6): SymbolFlags(FunctionScopedVariable)
rebuilt        : SymbolId(9): SymbolFlags(BlockScopedVariable | Function)

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag16.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag18.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag19.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag20.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocLinkTag5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTwoLineTypedef.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTag.ts
semantic error: Unresolved references mismatch:
after transform: ["Function", "Promise"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/seeTag1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["NS", "a", "b", "c"]
rebuilt        : ScopeId(0): ["a", "b", "c"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescript.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescriptComments1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsdoc/tsNoCheckForTypescriptComments2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsdoc/typeParameterExtendsUnionConstraintDistributed.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(18)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty10.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Button", "JSX", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
rebuilt        : ScopeId(0): ["Button", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty11.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Button", "JSX", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
rebuilt        : ScopeId(0): ["Button", "_defineProperty", "_jsxFileName", "_reactJsxRuntime", "k1", "k2", "k3", "k4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty12.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Symbol reference IDs mismatch for "Button":
after transform: SymbolId(2): [ReferenceId(0)]
rebuilt        : SymbolId(4): []
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(20), ReferenceId(21)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty16.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Foo", "JSX", "true"]
rebuilt        : ["Foo", "require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty3.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(18)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty6.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(48)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty8.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: ["JSX", "require"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(48)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty9.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(15)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxIntersectionElementPropsType.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "JSX", "_jsxFileName", "_reactJsxRuntime", "x", "y"]
rebuilt        : ScopeId(0): ["C", "_jsxFileName", "_reactJsxRuntime", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Component", "Readonly", "require"]
rebuilt        : ["Component", "require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxSubtleSkipContextSensitiveBug.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Exclude", "Promise", "arguments", "true"]
rebuilt        : ["arguments"]

tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxUnionSFXContextualTypeInferredCorrectly.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
Unresolved references mismatch:
after transform: ["console", "true"]
rebuilt        : ["console"]

tasks/coverage/typescript/tests/cases/conformance/jsx/commentEmittingInPreserveJsx1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxAndJsxFragPragmaOverridesCompilerOptions.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Fragment", "_jsxFileName", "createElement"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryOverridesCompilerOption.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "p"]
rebuilt        : ScopeId(0): ["_jsxFileName"]

tasks/coverage/typescript/tests/cases/conformance/jsx/jsxParsingError4.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "a", "b"]
rebuilt        : ScopeId(0): ["_jsxFileName", "a", "b"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/jsxReactTestSuite.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Child", "Component", "Composite", "Composite2", "Namespace", "React", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "bar", "foo", "hasOwnProperty", "x", "y", "z"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Symbol span mismatch for "x":
after transform: SymbolId(9): Span { start: 231, end: 236 }
rebuilt        : SymbolId(3): Span { start: 537, end: 538 }
Symbol redeclarations mismatch for "x":
after transform: SymbolId(9): [Span { start: 537, end: 538 }]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "foo":
after transform: SymbolId(6) "foo"
rebuilt        : <None>
Reference symbol mismatch for "bar":
after transform: SymbolId(7) "bar"
rebuilt        : <None>
Reference symbol mismatch for "Composite":
after transform: SymbolId(2) "Composite"
rebuilt        : <None>
Reference symbol mismatch for "Composite":
after transform: SymbolId(2) "Composite"
rebuilt        : <None>
Reference symbol mismatch for "Composite2":
after transform: SymbolId(3) "Composite2"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Namespace":
after transform: SymbolId(5) "Namespace"
rebuilt        : <None>
Reference symbol mismatch for "Namespace":
after transform: SymbolId(5) "Namespace"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(8) "y"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(8) "y"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "Child":
after transform: SymbolId(4) "Child"
rebuilt        : <None>
Reference symbol mismatch for "Component":
after transform: SymbolId(1) "Component"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Reference symbol mismatch for "z":
after transform: SymbolId(10) "z"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["Child", "Component", "Composite", "Composite2", "Namespace", "bar", "foo", "require", "y", "z"]

tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformNestedSelfClosingChild.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "_jsx", "_jsxFileName", "_jsxs"]
rebuilt        : ScopeId(0): ["_jsx", "_jsxFileName", "_jsxs"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution16.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution8.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxCorrectlyParseLessThanComparison1.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "ShortDetails", "_jsxFileName"]
rebuilt        : ScopeId(0): ["ShortDetails", "_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["JSX", "React"]
rebuilt        : ["React"]
Unresolved reference IDs mismatch for "React":
after transform: [ReferenceId(2)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDefaultAttributesResolution1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(7)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDefaultAttributesResolution2.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(2) "React"
Unresolved references mismatch:
after transform: ["require", "true"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(8)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName4.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["CustomTag", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["CustomTag", "_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName6.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "foo", "t"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "foo", "t"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution.tsx
semantic error: Missing SymbolId: "Dotted"
Missing SymbolId: "_Dotted"
Missing ReferenceId: "_Dotted"
Missing ReferenceId: "Name"
Missing ReferenceId: "Dotted"
Missing ReferenceId: "Dotted"
Bindings mismatch:
after transform: ScopeId(0): ["Dotted", "JSX", "Other", "_jsxFileName", "_reactJsxRuntime", "a", "b", "d", "e", "foundFirst"]
rebuilt        : ScopeId(0): ["Dotted", "Other", "_jsxFileName", "_reactJsxRuntime", "a", "b", "d", "e", "foundFirst"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(5), SymbolId(10)]
rebuilt        : ScopeId(3): [SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "Name":
after transform: SymbolId(5): []
rebuilt        : SymbolId(6): [ReferenceId(2)]
Reference symbol mismatch for "Dotted":
after transform: SymbolId(4) "Dotted"
rebuilt        : SymbolId(4) "Dotted"

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution13.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "obj1"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "obj1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution14.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "obj1"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "obj1"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution17.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "elements1", "elements2"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution19.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "MyClass"]
rebuilt        : ScopeId(0): ["MyClass"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution5.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit1.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "SomeClass", "_jsxFileName", "_reactJsxRuntime", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
rebuilt        : ScopeId(0): ["SomeClass", "_jsxFileName", "_reactJsxRuntime", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_objectSpread", "_reactJsxRuntime", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "_reactJsxRuntime", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmitSpreadAttribute.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["React", "T1", "T10", "T11", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "__proto__", "_jsxFileName", "_objectSpread"]
rebuilt        : ScopeId(0): ["T1", "T10", "T11", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(32) "__proto__"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(32) "__proto__"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React", "__proto__"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxExternalModuleEmit2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo", "Main", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["Main", "_jsxFileName"]
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(1) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(1) "Foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Foo", "React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxFragmentPreserveEmit.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxFragmentReactEmit.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(9), SymbolId(14), SymbolId(15), SymbolId(16)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(10)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(31), ReferenceId(32)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType2.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(11), ReferenceId(12)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType3.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(11), ReferenceId(12)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType4.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(11), ReferenceId(12)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType5.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(4) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(4) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(14), ReferenceId(15), ReferenceId(16)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType6.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(4) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(4) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(14), ReferenceId(15), ReferenceId(16)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType7.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Component", "JSX", "require"]
rebuilt        : ["Component", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(15), ReferenceId(16)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType8.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(6), SymbolId(9), SymbolId(10), SymbolId(11)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Component", "JSX", "require"]
rebuilt        : ["Component", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(14), ReferenceId(15)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxGenericAttributesType9.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved references mismatch:
after transform: ["JSX"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxInArrowFunction.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedAttributeName1.tsx
semantic error: Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedAttributeName2.tsx
semantic error: Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedTagName1.tsx
semantic error: Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.
Namespace tags are not supported by default. React's JSX doesn't support namespace tags. You can set `throwIfNamespace: false` to bypass this warning.

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxOpeningClosingNames.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "JSX", "_jsxFileName", "_reactJsxRuntime"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxParseTests1.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxParseTests2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "_jsxFileName", "_reactJsxRuntime", "x"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_reactJsxRuntime", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxPreserveEmit1.tsx
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxPreserveEmit3.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(7)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter2.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(10)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit1.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "SomeClass", "_jsxFileName", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
rebuilt        : ScopeId(0): ["SomeClass", "_jsxFileName", "openClosed1", "openClosed2", "openClosed3", "openClosed4", "openClosed5", "p", "selfClosed1", "selfClosed2", "selfClosed3", "selfClosed4", "selfClosed5", "selfClosed6", "selfClosed7", "whitespace1", "whitespace2", "whitespace3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "_objectSpread", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
rebuilt        : ScopeId(0): ["_jsxFileName", "_objectSpread", "p1", "p2", "p3", "spreads1", "spreads2", "spreads3", "spreads4", "spreads5"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit3.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar", "Foo", "JSX", "React", "_jsxFileName", "baz"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Foo":
after transform: SymbolId(3) "Foo"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(2) "React"
rebuilt        : <None>
Reference symbol mismatch for "Bar":
after transform: SymbolId(4) "Bar"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["Bar", "Foo", "React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit5.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit6.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitEntities.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitNesting.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_jsxFileName", "ctrl", "model", "render", "vdom"]
rebuilt        : ScopeId(0): ["_jsxFileName", "render"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitSpreadAttribute.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["T1", "T10", "T11", "T12", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "__proto__", "_jsx", "_jsxFileName", "_objectSpread"]
rebuilt        : ScopeId(0): ["T1", "T10", "T11", "T12", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "_jsx", "_jsxFileName", "_objectSpread"]
Reference symbol mismatch for "__proto__":
after transform: SymbolId(36) "__proto__"
rebuilt        : <None>
Reference symbol mismatch for "__proto__":
after transform: SymbolId(36) "__proto__"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["__proto__"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitWhitespace.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName", "p"]
rebuilt        : ScopeId(0): ["_jsxFileName", "p"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmitWhitespace2.tsx
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["JSX", "React", "_jsxFileName"]
rebuilt        : ScopeId(0): ["_jsxFileName"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Reference symbol mismatch for "React":
after transform: SymbolId(3) "React"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["React"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSfcReturnNull.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(8)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(6)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSfcReturnNullStrictNullChecks.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(8)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(6)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(11), ReferenceId(12)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution11.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved references mismatch:
after transform: ["require", "true"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(40), ReferenceId(41)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution13.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(6), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution15.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution3.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(12), ReferenceId(13)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution7.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved references mismatch:
after transform: ["require", "true"]
rebuilt        : ["require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(17), ReferenceId(18)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution8.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(18), ReferenceId(19)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution9.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(3) "React"
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(28), ReferenceId(29)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadChildren.tsx
semantic error: Spread children are not supported in React.

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadChildrenInvalidType.tsx
semantic error: Spread children are not supported in React.
Spread children are not supported in React.

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload2.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["JSX", "OneThing", "require"]
rebuilt        : ["OneThing", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(51), ReferenceId(52)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload3.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["JSX", "ThreeThing", "ZeroThingOrTwoThing", "require"]
rebuilt        : ["ThreeThing", "ZeroThingOrTwoThing", "require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload6.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(11), SymbolId(14), SymbolId(15), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(10), SymbolId(11), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(24)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Unresolved references mismatch:
after transform: ["JSX", "console"]
rebuilt        : ["console", "require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentWithDefaultTypeParameter1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(10)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponents3.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(9)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(16)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(4), SymbolId(13), SymbolId(16), SymbolId(23), SymbolId(25), SymbolId(26), SymbolId(27)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(9), SymbolId(12), SymbolId(15)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Unresolved references mismatch:
after transform: ["Array", "ComponentWithTwoAttributes", "InferParamComponent", "JSX", "Link", "require"]
rebuilt        : ["ComponentWithTwoAttributes", "InferParamComponent", "Link", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(34), ReferenceId(35)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments3.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(7), SymbolId(23), SymbolId(29), SymbolId(30), SymbolId(31)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["JSX", "Link", "OverloadComponent", "require"]
rebuilt        : ["Link", "OverloadComponent", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(59), ReferenceId(60)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments5.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(12), SymbolId(19), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Component", "ComponentSpecific", "ComponentSpecific1", "JSX", "require"]
rebuilt        : ["Component", "ComponentSpecific", "ComponentSpecific1", "require"]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(43), ReferenceId(44)]
rebuilt        : [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxTypeArgumentsJsxPreserveOutput.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5), SymbolId(6)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved reference IDs mismatch for "require":
after transform: [ReferenceId(76)]
rebuilt        : [ReferenceId(0), ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType5.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionTypeComponent1.tsx
semantic error: Missing SymbolId: "React"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(4), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Reference symbol mismatch for "React":
after transform: SymbolId(0) "React"
rebuilt        : SymbolId(1) "React"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/allowImportingTypesDtsExtension.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["User", "getUser", "user"]
rebuilt        : ScopeId(0): ["getUser", "user"]

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerDirectoryModule.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["test"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerImportESM.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["esm"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/customConditions.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/extensionLoadingPriority.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "dir"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/packageJsonMain.ts
semantic error: Missing SymbolId: "foo"
Missing ReferenceId: "require"
Missing SymbolId: "bar"
Missing ReferenceId: "require"
Missing SymbolId: "baz"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2)]
Reference symbol mismatch for "foo":
after transform: SymbolId(0) "foo"
rebuilt        : SymbolId(0) "foo"
Reference symbol mismatch for "bar":
after transform: SymbolId(1) "bar"
rebuilt        : SymbolId(1) "bar"
Reference symbol mismatch for "baz":
after transform: SymbolId(2) "baz"
rebuilt        : SymbolId(2) "baz"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeImportType1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["x"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTypeOnlyImport1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Default", "Import", "ImportRelative", "Require", "RequireRelative"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolvesWithoutExportsDiagnostic1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["bar", "foo"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/scopedPackages.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x", "y", "z"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/scopedPackagesClassic.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/selfNameModuleAugmentation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["simple"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/typesVersions.emptyTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/typesVersions.justIndex.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/untypedModuleImport.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/conformance/moduleResolution/untypedModuleImport_vsAmbient.ts
semantic error: Expected a semicolon or an implicit semicolon after a statement, but found none

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAssignments.ts
semantic error: Missing SymbolId: "fs"
Missing ReferenceId: "require"
Missing SymbolId: "fs2"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1)]
Reference symbol mismatch for "fs":
after transform: SymbolId(0) "fs"
rebuilt        : SymbolId(0) "fs"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesTypeModeDeclarationEmit.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface", "RequireInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportTypeModeDeclarationEmit1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface", "RequireInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["RequireInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["RequireInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["ImportInterface", "RequireInterface"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit6.ts
semantic error: Symbol reference IDs mismatch for "obj":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeDeclarationEmit7.ts
semantic error: Unresolved references mismatch:
after transform: ["const"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/nonjsExtensions/declarationFilesForNodeNativeModules.ts
semantic error: Missing SymbolId: "mod"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "mod":
after transform: SymbolId(0) "mod"
rebuilt        : SymbolId(0) "mod"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/override/override10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): []
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(2): [ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration16.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration17.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration19.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration20.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(1): [ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["IsIndexer", "IsNumberIndexer", "IsStringIndexer", "None", "SignatureFlags"]
rebuilt        : ScopeId(1): ["SignatureFlags"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["IsIndexer", "IsNumberIndexer", "IsStringIndexer", "None", "SignatureFlags"]
rebuilt        : ScopeId(1): ["SignatureFlags"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum3.ts
semantic error: Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "SignatureFlags":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "E", "Foo"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserInterfaceKeywordInEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "interface"]
rebuilt        : ScopeId(1): ["Bar"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Bar":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserInterfaceKeywordInEnum1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["Bar", "interface"]
rebuilt        : ScopeId(1): ["Bar"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "Bar":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IncompleteMemberVariables/parserErrorRecovery_IncompleteMemberVariable1.ts
semantic error: Missing SymbolId: "Shapes"
Missing SymbolId: "_Shapes"
Missing ReferenceId: "_Shapes"
Missing ReferenceId: "Point"
Missing ReferenceId: "Shapes"
Missing ReferenceId: "Shapes"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(5), SymbolId(6), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(7), SymbolId(8)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(3): [SymbolId(2), SymbolId(7), SymbolId(9)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol reference IDs mismatch for "Point":
after transform: SymbolId(2): [ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(8), ReferenceId(11)]
Reference symbol mismatch for "Shapes":
after transform: SymbolId(1) "Shapes"
rebuilt        : SymbolId(1) "Shapes"

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnPropertySignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature11.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature12.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MethodSignatures/parserMethodSignature9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModule1.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration11.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["string", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved reference IDs mismatch for "string":
after transform: [ReferenceId(0), ReferenceId(1)]
rebuilt        : [ReferenceId(0)]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration12.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Foo"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["M"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["number"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["number"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature10.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature11.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature12.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature7.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/PropertySignatures/parserPropertySignature9.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser643728.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645484.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolIndexer1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserExportAsFunctionIdentifier.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserNotRegex2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "B", "C", "x"]
rebuilt        : ScopeId(0): ["x"]
Reference symbol mismatch for "A":
after transform: SymbolId(0) "A"
rebuilt        : <None>
Reference symbol mismatch for "B":
after transform: SymbolId(1) "B"
rebuilt        : <None>
Reference symbol mismatch for "C":
after transform: SymbolId(2) "C"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["A", "B", "C"]

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserOptionalTypeMembers1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserOverloadOnConstants1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["HTMLCanvasElement", "HTMLDivElement", "HTMLElement", "HTMLSpanElement"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolIndexer1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolProperty9.ts
semantic error: Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/salsa/inferingFromAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Partial"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportAlias.ts
semantic error: Missing SymbolId: "b"
Missing ReferenceId: "require"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Reference symbol mismatch for "b":
after transform: SymbolId(0) "b"
rebuilt        : SymbolId(0) "b"
Unresolved references mismatch:
after transform: []
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/salsa/plainJSRedeclare3.ts
semantic error: Identifier `orbitol` has already been declared

tasks/coverage/typescript/tests/cases/conformance/salsa/privateIdentifierExpando.ts
semantic error: Private identifier '#bar' is not allowed outside class bodies

tasks/coverage/typescript/tests/cases/conformance/salsa/propertyAssignmentUseParentType1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/salsa/sourceFileMergeWithFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment30.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerEnum1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["CodeGenTarget", "ES3", "ES5"]
rebuilt        : ScopeId(1): ["CodeGenTarget"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode)
rebuilt        : ScopeId(1): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "CodeGenTarget":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(BlockScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInitializer.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "A"
Missing ReferenceId: "_M"
Missing ReferenceId: "F2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(31)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(26), SymbolId(27), SymbolId(28)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(11)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(8), SymbolId(30)]
rebuilt        : ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(17), ReferenceId(18), ReferenceId(20)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(19)]
Symbol reference IDs mismatch for "F":
after transform: SymbolId(4): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(21), ReferenceId(22)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(7): []
rebuilt        : SymbolId(7): [ReferenceId(7)]
Symbol reference IDs mismatch for "F2":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(10)]
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Unresolved references mismatch:
after transform: ["Date", "M", "Object", "require", "undefined"]
rebuilt        : ["Date", "Object", "require", "undefined"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(13)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(14)]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithInitializer.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "A"
Missing ReferenceId: "_M"
Missing ReferenceId: "F2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(8), SymbolId(27)]
rebuilt        : ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(13)]
rebuilt        : SymbolId(2): [ReferenceId(18)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(7): []
rebuilt        : SymbolId(7): [ReferenceId(7)]
Symbol reference IDs mismatch for "F2":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(10)]
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.ts
semantic error: Scope children mismatch:
after transform: ScopeId(7): [ScopeId(2), ScopeId(15)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(8), ScopeId(9)]
Scope parent mismatch:
after transform: ScopeId(4): Some(ScopeId(2))
rebuilt        : ScopeId(8): Some(ScopeId(5))
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(4)]
rebuilt        : ScopeId(9): []

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.1.ts
semantic error: Missing SymbolId: "N"
Missing SymbolId: "_N"
Missing ReferenceId: "N"
Missing ReferenceId: "N"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(3), SymbolId(5), SymbolId(7), SymbolId(9), SymbolId(11), SymbolId(22), SymbolId(24), SymbolId(26), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(41), SymbolId(43), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(15), SymbolId(17), SymbolId(28), SymbolId(30), SymbolId(32), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(49), SymbolId(51)]
Binding symbols mismatch:
after transform: ScopeId(37): [SymbolId(27), SymbolId(44)]
rebuilt        : ScopeId(43): [SymbolId(33), SymbolId(34)]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsDeclarationEmit.2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "r1":
after transform: SymbolId(0): [ReferenceId(1)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "r2":
after transform: SymbolId(2): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForAwaitOf.ts
semantic error: Scope children mismatch:
after transform: ScopeId(6): [ScopeId(2)]
rebuilt        : ScopeId(5): [ScopeId(6), ScopeId(7)]
Scope parent mismatch:
after transform: ScopeId(3): Some(ScopeId(2))
rebuilt        : ScopeId(6): Some(ScopeId(5))
Scope children mismatch:
after transform: ScopeId(2): [ScopeId(3)]
rebuilt        : ScopeId(7): []

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsNamedEvaluationDecoratorsAndClassFields.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C1", "C2", "C3", "C4", "_Class", "_Class2", "_Symbol$dispose", "_Symbol$dispose2", "_defineProperty", "dec"]
rebuilt        : ScopeId(0): ["C1", "C2", "C3", "C4", "_Class", "_Class2", "_Symbol$dispose", "_Symbol$dispose2", "_defineProperty"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Symbol"]
rebuilt        : ["Symbol", "dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.10.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["after", "dec"]
rebuilt        : ScopeId(0): ["after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.11.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.12.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["before", "dec"]
rebuilt        : ScopeId(0): ["before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithESClassDecorators.9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.10.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["after", "dec"]
rebuilt        : ScopeId(0): ["after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.11.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.12.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["before", "dec"]
rebuilt        : ScopeId(0): ["before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.5.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.6.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "before", "dec"]
rebuilt        : ScopeId(0): ["C", "before"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.8.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithLegacyClassDecorators.9.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "after", "dec"]
rebuilt        : ScopeId(0): ["C", "after"]
Reference symbol mismatch for "dec":
after transform: SymbolId(0) "dec"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["dec"]

tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/validMultipleVariableDeclarations.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6)]
Symbol reference IDs mismatch for "p":
after transform: SymbolId(4): [ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(8): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/statements/for-await-ofStatements/emitter.forAwait.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["y"]
rebuilt        : ScopeId(3): ["_didIteratorError", "_iterator", "_iteratorAbruptCompletion", "_iteratorError", "_step", "y"]
Bindings mismatch:
after transform: ScopeId(3): ["_didIteratorError", "_iterator", "_iteratorAbruptCompletion", "_iteratorError", "_step"]
rebuilt        : ScopeId(5): []
Symbol scope ID mismatch for "_iteratorAbruptCompletion":
after transform: SymbolId(6): ScopeId(3)
rebuilt        : SymbolId(6): ScopeId(3)
Symbol scope ID mismatch for "_didIteratorError":
after transform: SymbolId(5): ScopeId(3)
rebuilt        : SymbolId(7): ScopeId(3)
Symbol scope ID mismatch for "_iteratorError":
after transform: SymbolId(7): ScopeId(3)
rebuilt        : SymbolId(8): ScopeId(3)
Symbol scope ID mismatch for "_iterator":
after transform: SymbolId(8): ScopeId(3)
rebuilt        : SymbolId(9): ScopeId(3)
Symbol scope ID mismatch for "_step":
after transform: SymbolId(3): ScopeId(3)
rebuilt        : SymbolId(10): ScopeId(3)

tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsArray.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/statements/forStatements/forStatements.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "A"
Missing ReferenceId: "_M"
Missing ReferenceId: "F2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(31)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(26), SymbolId(27), SymbolId(28)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(39), ScopeId(41), ScopeId(43)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(41), ScopeId(43), ScopeId(45)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(8), SymbolId(30)]
rebuilt        : ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(21)]
rebuilt        : SymbolId(1): [ReferenceId(17), ReferenceId(18), ReferenceId(20)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(18), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(19)]
Symbol reference IDs mismatch for "F":
after transform: SymbolId(4): [ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25)]
rebuilt        : SymbolId(3): [ReferenceId(21), ReferenceId(22)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(7): []
rebuilt        : SymbolId(7): [ReferenceId(7)]
Symbol reference IDs mismatch for "F2":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(10)]
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Unresolved references mismatch:
after transform: ["Date", "M", "Object", "require", "undefined"]
rebuilt        : ["Date", "Object", "require", "undefined"]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(13)]
Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(10), ReferenceId(11)]
rebuilt        : [ReferenceId(14)]

tasks/coverage/typescript/tests/cases/conformance/statements/forStatements/forStatementsMultipleValidDecl.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(28), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(39), ScopeId(41), ScopeId(43), ScopeId(45), ScopeId(47), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(27), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48)]
Symbol reference IDs mismatch for "p":
after transform: SymbolId(4): [ReferenceId(6)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(5): [ReferenceId(7)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(8): [ReferenceId(9)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/returnStatementNoAsiAfterTransform.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
rebuilt        : ScopeId(0): ["t1", "t10", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["a"]

tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/returnStatements.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(4), ReferenceId(7), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(9): [ReferenceId(4), ReferenceId(7)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(1), ReferenceId(2)]
rebuilt        : [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/statements/throwStatements/throwStatements.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "_M"
Missing ReferenceId: "A"
Missing ReferenceId: "_M"
Missing ReferenceId: "F2"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(30)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(10), ScopeId(11), ScopeId(12)]
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(7), SymbolId(8), SymbolId(29)]
rebuilt        : ScopeId(6): [SymbolId(6), SymbolId(7), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(5), ReferenceId(21), ReferenceId(42)]
rebuilt        : SymbolId(2): [ReferenceId(26), ReferenceId(46)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(7): []
rebuilt        : SymbolId(7): [ReferenceId(7)]
Symbol reference IDs mismatch for "F2":
after transform: SymbolId(8): []
rebuilt        : SymbolId(8): [ReferenceId(10)]
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"
Reference symbol mismatch for "M":
after transform: SymbolId(6) "M"
rebuilt        : SymbolId(5) "M"

tasks/coverage/typescript/tests/cases/conformance/types/any/assignEveryTypeToAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(7): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(8): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(12): [ReferenceId(25)]
rebuilt        : SymbolId(12): []
Unresolved reference IDs mismatch for "undefined":
after transform: [ReferenceId(11), ReferenceId(14)]
rebuilt        : [ReferenceId(12)]

tasks/coverage/typescript/tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.es2018.1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(49): [ScopeId(50)]
rebuilt        : ScopeId(103): []
Unresolved references mismatch:
after transform: ["AsyncIterable", "AsyncIterableIterator", "AsyncIterator", "Promise", "PromiseLike", "arguments", "require"]
rebuilt        : ["Promise", "arguments", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["P", "foo", "foo2"]
rebuilt        : ["foo", "foo2"]

tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtends1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f1", "f2", "x1", "x2"]
rebuilt        : ScopeId(0): ["f1", "f2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(61), ScopeId(63), ScopeId(64), ScopeId(67), ScopeId(69), ScopeId(71), ScopeId(73), ScopeId(77), ScopeId(80), ScopeId(84), ScopeId(87), ScopeId(89), ScopeId(90), ScopeId(91), ScopeId(92), ScopeId(95), ScopeId(96), ScopeId(98), ScopeId(99), ScopeId(100), ScopeId(101), ScopeId(102), ScopeId(103), ScopeId(107), ScopeId(108), ScopeId(109), ScopeId(110), ScopeId(111)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "x1":
after transform: SymbolId(127) "x1"
rebuilt        : <None>
Reference symbol mismatch for "x2":
after transform: SymbolId(133) "x2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Promise"]
rebuilt        : ["x1", "x2"]

tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtendsDependingOnTypeVariables.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/conditional/variance.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5)]
rebuilt        : ScopeId(2): []
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(6): [ReferenceId(9), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(5): [ReferenceId(4), ReferenceId(6)]
Unresolved references mismatch:
after transform: ["const", "require", "true"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/asyncFunctions/contextuallyTypeAsyncFunctionAwaitOperand.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(4)]
rebuilt        : [ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/asyncFunctions/contextuallyTypeAsyncFunctionReturnType.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncToGenerator", "_copyExtensions", "_fn", "_fn2", "_fn3", "_fn4", "copyExtensions", "fn1", "fn2", "fn3", "fn4", "test"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "_copyExtensions", "_fn", "_fn2", "_fn3", "_fn4", "copyExtensions", "fn1", "fn2", "fn3", "fn4"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(20), ScopeId(21)]
Reference symbol mismatch for "test":
after transform: SymbolId(11) "test"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Context", "Error", "Promise", "PromiseLike", "arguments", "getProcessTree", "scanMetadata"]
rebuilt        : ["Error", "Promise", "arguments", "getProcessTree", "scanMetadata", "test"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(24), ReferenceId(31), ReferenceId(34), ReferenceId(37)]
rebuilt        : [ReferenceId(10), ReferenceId(24), ReferenceId(30), ReferenceId(40)]

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedBindingInitializer.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/methodDeclarations/contextuallyTypedObjectLiteralMethodDeclaration01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/partiallyAnnotatedFunction/partiallyAnnotatedFunctionInferenceWithTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(11), ReferenceId(14), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/partiallyAnnotatedFunction/partiallyAnnotatedFunctionWitoutTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/forAwait/types.forAwait.es2018.1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_asyncIterator", "_asyncToGenerator", "_awaitAsyncGenerator", "_f", "_f2", "_wrapAsyncGenerator", "asyncIterable", "f1", "f2", "iterable", "iterableOfPromise"]
rebuilt        : ScopeId(0): ["_asyncIterator", "_asyncToGenerator", "_awaitAsyncGenerator", "_f", "_f2", "_wrapAsyncGenerator", "f1", "f2"]
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Reference symbol mismatch for "asyncIterable":
after transform: SymbolId(0) "asyncIterable"
rebuilt        : <None>
Reference symbol mismatch for "iterable":
after transform: SymbolId(1) "iterable"
rebuilt        : <None>
Reference symbol mismatch for "iterableOfPromise":
after transform: SymbolId(2) "iterableOfPromise"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterable", "Iterable", "Promise", "arguments", "require"]
rebuilt        : ["arguments", "asyncIterable", "iterable", "iterableOfPromise", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeAmbient.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Bar2", "_defineProperty", "foo", "foo2", "shim", "x", "y"]
rebuilt        : ScopeId(0): ["Bar2", "_defineProperty", "shim", "x", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Bar", "Baz", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeAmdBundleRewrite.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeGenericTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Point":
after transform: SymbolId(0) "Point"
rebuilt        : <None>
Reference flags mismatch for "Point":
after transform: ReferenceId(1): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Point", "module"]

tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeLocal.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "Point":
after transform: SymbolId(0) "Point"
rebuilt        : <None>
Reference flags mismatch for "Point":
after transform: ReferenceId(0): ReferenceFlags(Type)
rebuilt        : ReferenceId(1): ReferenceFlags(Read)
Unresolved references mismatch:
after transform: ["module"]
rebuilt        : ["Point", "module"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionMemberOfUnionNarrowsCorrectly.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(4) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionOfUnionNarrowing.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["q"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(2) "q"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["q", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionOfUnionOfUnitTypes.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "D", "E", "F"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(7), ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(16), ReferenceId(17), ReferenceId(18), ReferenceId(19), ReferenceId(20), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(26), ReferenceId(27), ReferenceId(28), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(32), ReferenceId(33), ReferenceId(34), ReferenceId(35), ReferenceId(36), ReferenceId(37), ReferenceId(38), ReferenceId(39), ReferenceId(40), ReferenceId(41), ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(58)]
rebuilt        : SymbolId(0): [ReferenceId(13)]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionThisTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeEquivalence.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Symbol reference IDs mismatch for "ab":
after transform: SymbolId(5): [ReferenceId(17)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "bc":
after transform: SymbolId(6): [ReferenceId(20)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeInference2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "obj"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(9) "obj"
rebuilt        : <None>
Reference symbol mismatch for "obj":
after transform: SymbolId(9) "obj"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["f", "f2"]
rebuilt        : ["a", "b", "f", "f2", "obj"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeInference3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "c1", "c2"]
rebuilt        : ScopeId(0): ["c1", "c2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(4) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(5) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "Set", "Symbol", "from"]
rebuilt        : ["Array", "a", "b", "from"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeOverloading.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionsAndEmptyObjects.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Object", "Promise", "mock", "true"]
rebuilt        : ["Object", "mock"]

tasks/coverage/typescript/tests/cases/conformance/types/intersection/operatorsAndIntersectionTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndForIn.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(17)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(14)]

tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Record"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/literal/booleanLiteralTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(19)]
Unresolved references mismatch:
after transform: ["Error", "g", "true"]
rebuilt        : ["Error", "g"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/booleanLiteralTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(19), ScopeId(22), ScopeId(23), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(19)]
Unresolved references mismatch:
after transform: ["Error", "g", "true"]
rebuilt        : ["Error", "g"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(20)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(59), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(82), ReferenceId(83), ReferenceId(86), ReferenceId(87), ReferenceId(96), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(105), ReferenceId(109), ReferenceId(111), ReferenceId(122)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(52), ReferenceId(54), ReferenceId(63), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(78), ReferenceId(80), ReferenceId(83), ReferenceId(85)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(20)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(59), ReferenceId(63), ReferenceId(64), ReferenceId(65), ReferenceId(68), ReferenceId(70), ReferenceId(72), ReferenceId(82), ReferenceId(83), ReferenceId(86), ReferenceId(87), ReferenceId(96), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(105), ReferenceId(109), ReferenceId(111), ReferenceId(122)]
rebuilt        : SymbolId(0): [ReferenceId(7), ReferenceId(52), ReferenceId(54), ReferenceId(63), ReferenceId(64), ReferenceId(66), ReferenceId(67), ReferenceId(74), ReferenceId(78), ReferenceId(80), ReferenceId(83), ReferenceId(85)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypeWidening.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["E", "Set", "_excluded", "_objectSpread", "_objectWithoutProperties", "a", "arr", "b", "doWork", "f1", "f2", "f3", "f4", "f5", "f6", "increment", "isFailure", "isSuccess", "keys", "langCodeSet", "langCodes", "onMouseOver", "result", "test", "x"]
rebuilt        : ScopeId(0): ["E", "FAILURE", "Set", "_excluded", "_objectSpread", "_objectWithoutProperties", "a", "arr", "b", "doWork", "f1", "f2", "f3", "f4", "f5", "f6", "increment", "isFailure", "isSuccess", "keys", "langCodeSet", "langCodes", "onMouseOver", "result", "test", "x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Bindings mismatch:
after transform: ScopeId(26): ["A", "B", "E"]
rebuilt        : ScopeId(18): ["E"]
Scope flags mismatch:
after transform: ScopeId(26): ScopeFlags(StrictMode)
rebuilt        : ScopeId(18): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "FAILURE":
after transform: SymbolId(63): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(62): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "FAILURE":
after transform: SymbolId(63): Span { start: 2229, end: 2236 }
rebuilt        : SymbolId(62): Span { start: 2256, end: 2263 }
Symbol reference IDs mismatch for "FAILURE":
after transform: SymbolId(63): [ReferenceId(55), ReferenceId(58), ReferenceId(66), ReferenceId(68)]
rebuilt        : SymbolId(62): [ReferenceId(50), ReferenceId(54)]
Symbol redeclarations mismatch for "FAILURE":
after transform: SymbolId(63): [Span { start: 2256, end: 2263 }]
rebuilt        : SymbolId(62): []
Symbol reference IDs mismatch for "langCodeSet":
after transform: SymbolId(90): [ReferenceId(97), ReferenceId(99)]
rebuilt        : SymbolId(79): [ReferenceId(70)]
Symbol flags mismatch for "E":
after transform: SymbolId(102): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(87): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(102): [ReferenceId(112), ReferenceId(113), ReferenceId(124)]
rebuilt        : SymbolId(87): [ReferenceId(84), ReferenceId(86)]
Unresolved references mismatch:
after transform: ["NonNullable", "Object", "Record", "f", "nonWidening", "true", "widening"]
rebuilt        : ["Object", "f", "nonWidening", "widening"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(10)]
Unresolved references mismatch:
after transform: ["true", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(15), ScopeId(18), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29)]
Bindings mismatch:
after transform: ScopeId(1): ["A", "B", "C", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(1): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(9), ReferenceId(11), ReferenceId(12), ReferenceId(16), ReferenceId(33), ReferenceId(34), ReferenceId(38), ReferenceId(98)]
rebuilt        : SymbolId(1): [ReferenceId(8), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(13), ReferenceId(14), ReferenceId(15), ReferenceId(19), ReferenceId(44), ReferenceId(53), ReferenceId(57)]
Unresolved references mismatch:
after transform: ["g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "require", "true", "undefined"]
rebuilt        : ["g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/literalTypesAndDestructuring.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_x$a", "_x$a2", "_x$a3", "a1", "a2", "a3", "a4", "b1", "b2", "b3", "b4", "bar", "x"]
rebuilt        : ScopeId(0): ["_x$a", "_x$a2", "_x$a3", "a1", "a2", "a3", "a4", "b1", "b2", "b3", "b4", "bar"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["const"]
rebuilt        : ["x"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(26), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/numericStringLiteralTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Unresolved references mismatch:
after transform: ["Capitalize", "createContainer", "f"]
rebuilt        : ["createContainer", "f"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(19)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(85), ReferenceId(89), ReferenceId(91), ReferenceId(99)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(31), ReferenceId(33), ReferenceId(42), ReferenceId(43), ReferenceId(45), ReferenceId(46), ReferenceId(53), ReferenceId(57), ReferenceId(59), ReferenceId(62), ReferenceId(64)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(20), ScopeId(23), ScopeId(24), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(14), ScopeId(17), ScopeId(19)]
Bindings mismatch:
after transform: ScopeId(1): ["Choice", "No", "Unknown", "Yes"]
rebuilt        : ScopeId(1): ["Choice"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "Choice":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "Choice":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(9), ReferenceId(10), ReferenceId(11), ReferenceId(12), ReferenceId(15), ReferenceId(22), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(48), ReferenceId(50), ReferenceId(52), ReferenceId(62), ReferenceId(63), ReferenceId(66), ReferenceId(67), ReferenceId(76), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(85), ReferenceId(89), ReferenceId(91), ReferenceId(99)]
rebuilt        : SymbolId(0): [ReferenceId(4), ReferenceId(31), ReferenceId(33), ReferenceId(42), ReferenceId(43), ReferenceId(45), ReferenceId(46), ReferenceId(53), ReferenceId(57), ReferenceId(59), ReferenceId(62), ReferenceId(64)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithTypeAssertions01.ts
semantic error: Symbol reference IDs mismatch for "fooOrBar":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/stringMappingDeferralInConditionalTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Capitalize", "Lowercase"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/literal/stringMappingReduction.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_virtualOn", "virtualOn"]
rebuilt        : ScopeId(0): ["virtualOn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "_virtualOn":
after transform: SymbolId(18) "_virtualOn"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Capitalize", "Lowercase"]
rebuilt        : ["_virtualOn"]

tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes6.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes8.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Bindings mismatch:
after transform: ScopeId(1): ["E", "a", "b"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(ConstEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(7)]
rebuilt        : SymbolId(0): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/localTypes/localTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(2): ["A", "B", "C", "E"]
rebuilt        : ScopeId(2): ["E"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(7): ["C", "E", "a"]
rebuilt        : ScopeId(6): ["C", "a"]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(8): ["A", "B", "C", "E"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(8): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(13): ["E"]
rebuilt        : ScopeId(11): []
Bindings mismatch:
after transform: ScopeId(14): ["A", "B", "C", "E"]
rebuilt        : ScopeId(12): ["E"]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(0x0)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(15): [ScopeId(16), ScopeId(17), ScopeId(18)]
rebuilt        : ScopeId(13): [ScopeId(14)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(16): [ScopeId(17)]
Bindings mismatch:
after transform: ScopeId(24): ["C", "E"]
rebuilt        : ScopeId(20): ["C"]
Bindings mismatch:
after transform: ScopeId(25): ["A", "B", "C", "E"]
rebuilt        : ScopeId(21): ["E"]
Scope flags mismatch:
after transform: ScopeId(25): ScopeFlags(0x0)
rebuilt        : ScopeId(21): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(27): ["C", "E"]
rebuilt        : ScopeId(24): ["C"]
Bindings mismatch:
after transform: ScopeId(28): ["A", "B", "C", "E"]
rebuilt        : ScopeId(25): ["E"]
Scope flags mismatch:
after transform: ScopeId(28): ScopeFlags(0x0)
rebuilt        : ScopeId(25): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(31): ["C", "E"]
rebuilt        : ScopeId(29): ["C"]
Bindings mismatch:
after transform: ScopeId(32): ["A", "B", "C", "E"]
rebuilt        : ScopeId(30): ["E"]
Scope flags mismatch:
after transform: ScopeId(32): ScopeFlags(StrictMode)
rebuilt        : ScopeId(30): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(34): ["C", "E"]
rebuilt        : ScopeId(33): ["C"]
Bindings mismatch:
after transform: ScopeId(35): ["A", "B", "C", "E"]
rebuilt        : ScopeId(34): ["E"]
Scope flags mismatch:
after transform: ScopeId(35): ScopeFlags(StrictMode)
rebuilt        : ScopeId(34): ScopeFlags(StrictMode | Function)
Bindings mismatch:
after transform: ScopeId(37): ["C", "E"]
rebuilt        : ScopeId(37): ["C"]
Bindings mismatch:
after transform: ScopeId(38): ["A", "B", "C", "E"]
rebuilt        : ScopeId(38): ["E"]
Scope flags mismatch:
after transform: ScopeId(38): ScopeFlags(StrictMode)
rebuilt        : ScopeId(38): ScopeFlags(StrictMode | Function)
Symbol flags mismatch for "E":
after transform: SymbolId(1): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(BlockScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(1), ReferenceId(6)]
rebuilt        : SymbolId(2): [ReferenceId(11)]
Reference symbol mismatch for "E":
after transform: SymbolId(11) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(11) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(11) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(21) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(21) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(21) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(21) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(35) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(35) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(41) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(41) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(47) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(47) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(52) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(52) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(57) "E"
rebuilt        : <None>
Reference symbol mismatch for "E":
after transform: SymbolId(57) "E"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["E", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/localTypes/localTypes5.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/isomorphicMappedTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
Scope children mismatch:
after transform: ScopeId(19): [ScopeId(20)]
rebuilt        : ScopeId(16): []
Unresolved references mismatch:
after transform: ["Partial", "Pick", "applySpec", "clone", "f20", "f21", "f22", "f23", "f24", "validate", "validateAndClone"]
rebuilt        : ["applySpec", "clone", "f20", "f21", "f22", "f23", "f24", "validate", "validateAndClone"]

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
Unresolved references mismatch:
after transform: ["Exclude", "Extract", "Pick", "Record", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeIndexSignatureModifiers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Pick"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeModifiers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(29): [ScopeId(30)]
rebuilt        : ScopeId(4): []
Unresolved references mismatch:
after transform: ["Partial", "Pick", "Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeOverlappingStringEnumKeys.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Bindings mismatch:
after transform: ScopeId(1): ["CAT", "DOG", "TerrestrialAnimalTypes"]
rebuilt        : ScopeId(1): ["TerrestrialAnimalTypes"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Bindings mismatch:
after transform: ScopeId(2): ["AlienAnimalTypes", "CAT"]
rebuilt        : ScopeId(2): ["AlienAnimalTypes"]
Scope flags mismatch:
after transform: ScopeId(2): ScopeFlags(0x0)
rebuilt        : ScopeId(2): ScopeFlags(Function)
Symbol flags mismatch for "TerrestrialAnimalTypes":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "TerrestrialAnimalTypes":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(11), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(3), ReferenceId(7)]
Symbol flags mismatch for "AlienAnimalTypes":
after transform: SymbolId(3): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(2): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "AlienAnimalTypes":
after transform: SymbolId(3): [ReferenceId(1), ReferenceId(3), ReferenceId(12), ReferenceId(19)]
rebuilt        : SymbolId(2): [ReferenceId(6), ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Extract"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(24), ScopeId(26), ScopeId(28), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(36), ScopeId(38), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(46), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(54)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Number", "f1", "f2", "f3", "f4"]
rebuilt        : ["f1", "f2", "f3", "f4"]

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(6), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(28), ScopeId(29)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []
Unresolved references mismatch:
after transform: ["Partial", "Pick", "Readonly", "Record", "assign", "freeze", "mapObject", "pick", "proxify"]
rebuilt        : ["assign", "freeze", "mapObject", "pick", "proxify"]

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "Box":
after transform: SymbolId(0): [ReferenceId(2), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(30)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Partial", "Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesArraysTuples.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["acceptMappedArray", "f1", "f2", "x10", "x11", "x12", "x20", "x21", "x22", "y10", "y11", "y12", "y20", "y21", "y22"]
rebuilt        : ScopeId(0): ["acceptMappedArray", "f1", "f2", "y10", "y11", "y12", "y20", "y21", "y22"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(42), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Reference symbol mismatch for "x10":
after transform: SymbolId(35) "x10"
rebuilt        : <None>
Reference symbol mismatch for "x11":
after transform: SymbolId(37) "x11"
rebuilt        : <None>
Reference symbol mismatch for "x12":
after transform: SymbolId(39) "x12"
rebuilt        : <None>
Reference symbol mismatch for "x20":
after transform: SymbolId(43) "x20"
rebuilt        : <None>
Reference symbol mismatch for "x21":
after transform: SymbolId(45) "x21"
rebuilt        : <None>
Reference symbol mismatch for "x22":
after transform: SymbolId(47) "x22"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "Partial", "Promise", "PromiseLike", "Readonly", "ReadonlyArray", "Required", "acceptArray", "all", "mapArray", "nonpartial", "unboxify"]
rebuilt        : ["acceptArray", "all", "mapArray", "nonpartial", "unboxify", "x10", "x11", "x12", "x20", "x21", "x22"]

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesGenericTuples.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(32)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Readonly"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypesGenericTuples2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/members/augmentedTypeBracketAccessIndexSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfObject.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypePropertyAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureAppearsToBeFunctionType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureHidingMembersOfExtendedFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithCallSignatureHidingMembersOfFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfExtendedFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithConstructSignatureHidingMembersOfFunction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithNumericProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringNamedPropertyOfIllegalCharacters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithOptionalProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithSpecializedCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(9), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(9), ReferenceId(13), ReferenceId(30)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(11), ReferenceId(26)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(3), ReferenceId(8), ReferenceId(12), ReferenceId(28)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithSpecializedConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(9), ScopeId(13), ScopeId(14), ScopeId(15)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(6), ReferenceId(10), ReferenceId(22)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived1":
after transform: SymbolId(1): [ReferenceId(4), ReferenceId(8)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(9), ReferenceId(20)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/classWithOnlyPublicMembersEquivalentToInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4)]
rebuilt        : SymbolId(1): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/classWithOnlyPublicMembersEquivalentToInterface2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/genericInstantiationEquivalentToObjectLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/namedTypes/optionalMethods.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(10), ScopeId(11), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7), ScopeId(9)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(2): [ScopeId(3), ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(11): [ScopeId(12), ScopeId(15)]
rebuilt        : ScopeId(7): [ScopeId(8)]
Symbol reference IDs mismatch for "Bar":
after transform: SymbolId(6): [ReferenceId(10)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/never/neverInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/never/neverUnionIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAndEmptyObject.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["foo", "fooProps"]
rebuilt        : ScopeId(0): ["fooProps"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "foo":
after transform: SymbolId(2) "foo"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["foo"]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutAnnotationsOrBody.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithoutReturnTypeAnnotationInference.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesThatDifferOnlyByReturnType3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithOptionalParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(6)]
rebuilt        : SymbolId(8): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithOptionalParameters2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(12), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(9): [ReferenceId(4)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/identicalCallSignatures3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/parametersWithNoAnnotationAreAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureIsSubtypeOfNonSpecializedSignature.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(13), ScopeId(18), ScopeId(22), ScopeId(26), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(4): [ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(2): [ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(8): [ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(4): [ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(13): [ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(6): [ScopeId(7)]
Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureWithOptional.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterAsTypeArgument.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(7), ReferenceId(11)]
rebuilt        : SymbolId(4): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/typeParameterUsedAsTypeParameterConstraint3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithIdenticalOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(23), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(7): [ReferenceId(4), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(19), ReferenceId(27), ReferenceId(30)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(12), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(5), ReferenceId(6), ReferenceId(23), ReferenceId(24)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(7): [ReferenceId(4), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(19), ReferenceId(27), ReferenceId(30)]
rebuilt        : SymbolId(3): [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloadsThatDifferOnlyByReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(6), ReferenceId(11), ReferenceId(13), ReferenceId(18)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C2":
after transform: SymbolId(2): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(15)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/numericIndexingResults.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexingResults.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/functionLiterals.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/methodSignaturesWithOverloads2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNameWithoutTypeAnnotation.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/propertyNamesOfReservedWords.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(3): ["E", "abstract", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "is", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "while", "with"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(11): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(11): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/stringNamedPropertyAccess.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8)]
rebuilt        : SymbolId(1): [ReferenceId(3), ReferenceId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/extendBooleanInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/validBooleanAssignments.ts
semantic error: Unresolved references mismatch:
after transform: ["Boolean", "Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/extendNumberInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/validNumberAssignments.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(4), ReferenceId(6), ReferenceId(12)]
rebuilt        : SymbolId(4): [ReferenceId(6), ReferenceId(8)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/extendStringInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/validStringAssignments.ts
semantic error: Unresolved references mismatch:
after transform: ["Object", "String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/primitives/stringLiteral/stringLiteralType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/invalidUndefinedValues.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/validUndefinedAssignments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(9)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["require", "undefined"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/validUndefinedValues.ts
semantic error: Unresolved reference IDs mismatch for "undefined":
after transform: [ReferenceId(0), ReferenceId(2)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/rest/genericObjectRest.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "sa":
after transform: SymbolId(16): [ReferenceId(10), ReferenceId(13), ReferenceId(51)]
rebuilt        : SymbolId(23): [ReferenceId(32), ReferenceId(37)]
Symbol reference IDs mismatch for "sb":
after transform: SymbolId(17): [ReferenceId(11), ReferenceId(14), ReferenceId(52)]
rebuilt        : SymbolId(24): [ReferenceId(33), ReferenceId(38)]

tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestParameters2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f00", "f01", "f02", "f03", "f04", "f10", "f11", "f12", "f13", "f20", "ns", "sn", "t1", "t2", "t3", "t4"]
rebuilt        : ScopeId(0): []
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f10":
after transform: SymbolId(9) "f10"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f11":
after transform: SymbolId(10) "f11"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f12":
after transform: SymbolId(11) "f12"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "f13":
after transform: SymbolId(12) "f13"
rebuilt        : <None>
Reference symbol mismatch for "t4":
after transform: SymbolId(3) "t4"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t1":
after transform: SymbolId(0) "t1"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t3":
after transform: SymbolId(2) "t3"
rebuilt        : <None>
Reference symbol mismatch for "f20":
after transform: SymbolId(15) "f20"
rebuilt        : <None>
Reference symbol mismatch for "t2":
after transform: SymbolId(1) "t2"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ConstructorParameters", "Function", "Parameters"]
rebuilt        : ["f10", "f11", "f12", "f13", "f20", "t1", "t2", "t3", "t4"]

tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRest2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestForOf.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_excluded", "_excluded2", "_objectSpread", "_objectWithoutProperties", "array", "rrestOff", "xx"]
rebuilt        : ScopeId(0): ["_excluded", "_excluded2", "_objectSpread", "_objectWithoutProperties", "_ref2", "_ref3", "array", "rrestOff", "xx"]
Bindings mismatch:
after transform: ScopeId(3): ["_ref2"]
rebuilt        : ScopeId(3): []
Bindings mismatch:
after transform: ScopeId(4): ["_ref3"]
rebuilt        : ScopeId(4): []
Symbol scope ID mismatch for "_ref2":
after transform: SymbolId(10): ScopeId(3)
rebuilt        : SymbolId(10): ScopeId(0)
Symbol scope ID mismatch for "_ref3":
after transform: SymbolId(11): ScopeId(4)
rebuilt        : SymbolId(11): ScopeId(0)

tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestParameterES5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7)]

tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRestReadonly.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Readonly", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/arrayTypeOfTypeOf.ts
semantic error: Symbol reference IDs mismatch for "x":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(4)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteral.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/functionLiteralForOverloads2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeLiterals/parenthesizedTypes.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryOnClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(10), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(7)]
Symbol reference IDs mismatch for "c":
after transform: SymbolId(12): [ReferenceId(2)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(15): [ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(11): []
Symbol reference IDs mismatch for "d":
after transform: SymbolId(18): [ReferenceId(6)]
rebuilt        : SymbolId(13): []

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeQueryWithReservedWords.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Symbol reference IDs mismatch for "Controller":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofClass2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(8): [ReferenceId(2), ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "d":
after transform: SymbolId(10): [ReferenceId(4)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofModuleWithoutExports.ts
semantic error: Missing SymbolId: "M"
Missing SymbolId: "_M"
Missing ReferenceId: "M"
Missing ReferenceId: "M"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(3), SymbolId(5)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(5)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThisWithImplicitThis.ts
semantic error: Unresolved references mismatch:
after transform: ["this"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpread.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(32): [ReferenceId(36), ReferenceId(37)]
rebuilt        : SymbolId(33): [ReferenceId(69)]

tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadRepeatedComplexity.ts
semantic error: Unresolved references mismatch:
after transform: ["Record", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadRepeatedNullCheckPerf.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Record", "require", "undefined"]
rebuilt        : ["require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadContextualTypedBindingPattern.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "age", "alice", "bob", "naam"]
rebuilt        : ScopeId(0): ["_objectSpread", "age", "naam"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "bob":
after transform: SymbolId(1) "bob"
rebuilt        : <None>
Reference symbol mismatch for "alice":
after transform: SymbolId(2) "alice"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["alice", "bob", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadExcessProperty.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadNonPrimitive.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "o", "x"]
rebuilt        : ScopeId(0): ["_objectSpread", "x"]
Reference symbol mismatch for "o":
after transform: SymbolId(0) "o"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["o", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadOverwritesProperty.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "ab", "abq", "g", "h", "unused1", "unused2", "unused3"]
rebuilt        : ScopeId(0): ["_objectSpread", "g", "h", "unused1", "unused2", "unused3"]
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "ab":
after transform: SymbolId(0) "ab"
rebuilt        : <None>
Reference symbol mismatch for "abq":
after transform: SymbolId(1) "abq"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["ab", "abq", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadUnion4.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "a", "b", "c"]
rebuilt        : ScopeId(0): ["_objectSpread", "c"]
Reference symbol mismatch for "a":
after transform: SymbolId(0) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(1) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["require"]
rebuilt        : ["a", "b", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralCheckedInIf01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralCheckedInIf02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralMatchedInSwitch01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypeAssertion01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAndParenthesizedExpressions01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAndTuples01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesAsTags03.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(14)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(8), ReferenceId(12), ReferenceId(13)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17)]
rebuilt        : SymbolId(0): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(14)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(6), ReferenceId(8), ReferenceId(12), ReferenceId(13)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes03.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "x":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(5), ReferenceId(7), ReferenceId(9), ReferenceId(13), ReferenceId(16)]
rebuilt        : SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(4), ReferenceId(6), ReferenceId(10), ReferenceId(13)]
Symbol reference IDs mismatch for "y":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(15)]
rebuilt        : SymbolId(1): [ReferenceId(5), ReferenceId(7), ReferenceId(11), ReferenceId(12)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInUnionTypes04.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability03.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability04.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloadAssignability05.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads01.ts
semantic error: Missing SymbolId: "Consts1"
Missing SymbolId: "_Consts"
Missing ReferenceId: "Consts1"
Missing ReferenceId: "Consts1"
Missing SymbolId: "Consts2"
Missing SymbolId: "_Consts2"
Missing ReferenceId: "Consts2"
Missing ReferenceId: "Consts2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(8), SymbolId(10), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(29)]
rebuilt        : ScopeId(5): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(14): [SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(30)]
rebuilt        : ScopeId(6): [SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22)]
Scope flags mismatch:
after transform: ScopeId(14): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads02.ts
semantic error: Missing SymbolId: "Consts1"
Missing SymbolId: "_Consts"
Missing ReferenceId: "Consts1"
Missing ReferenceId: "Consts1"
Missing SymbolId: "Consts2"
Missing SymbolId: "_Consts2"
Missing ReferenceId: "Consts2"
Missing ReferenceId: "Consts2"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(7), SymbolId(9), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(2), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(6)]
Binding symbols mismatch:
after transform: ScopeId(12): [SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(28)]
rebuilt        : ScopeId(5): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6)]
Scope flags mismatch:
after transform: ScopeId(12): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(13): [SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(29)]
rebuilt        : ScopeId(6): [SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22)]
Scope flags mismatch:
after transform: ScopeId(13): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads03.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads04.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesTypePredicates01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/contextualThisType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/fluentClasses.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(2)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/fluentInterfaces.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/inferThisType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeAndConstraints.ts
semantic error: Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInBasePropertyAndDerivedContainerOfBase01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInClasses.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(7)]
Unresolved references mismatch:
after transform: ["Date", "require", "undefined"]
rebuilt        : ["require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7)]
rebuilt        : ScopeId(2): []
Unresolved references mismatch:
after transform: ["callsCallback", "isCorrect", "this"]
rebuilt        : ["callsCallback", "isCorrect"]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInInterfaces.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInObjectLiterals.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInObjectLiterals2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["Vue", "obj1", "p1", "p10", "p11", "p12", "p2", "p3", "p4", "vue", "x1", "x2"]
rebuilt        : ScopeId(0): ["obj1", "p1", "p10", "p11", "p12", "p2", "p3", "p4", "vue", "x1", "x2"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(41), ScopeId(42), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(14), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Reference symbol mismatch for "Vue":
after transform: SymbolId(76) "Vue"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Record", "ThisType", "defineProp", "defineProps", "f1", "f2", "makeObject", "makeObject2"]
rebuilt        : ["Vue", "defineProp", "defineProps", "f1", "f2", "makeObject", "makeObject2"]

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTaggedTemplateCall.ts
semantic error: Unresolved references mismatch:
after transform: ["TemplateStringsArray"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTuples.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInTypePredicate.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/namedTupleMembers.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "argumentsOfG", "argumentsOfGAsFirstArgument", "b", "c", "d", "func", "q", "r", "readSegment", "useState", "val", "x", "y"]
rebuilt        : ScopeId(0): ["argumentsOfG", "argumentsOfGAsFirstArgument", "func", "readSegment", "useState", "val"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Symbol reference IDs mismatch for "readSegment":
after transform: SymbolId(14): [ReferenceId(33)]
rebuilt        : SymbolId(3): []
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(2) "a"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(3) "b"
rebuilt        : <None>
Reference symbol mismatch for "d":
after transform: SymbolId(5) "d"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(4) "c"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(20) "q"
rebuilt        : <None>
Reference symbol mismatch for "r":
after transform: SymbolId(21) "r"
rebuilt        : <None>
Reference symbol mismatch for "r":
after transform: SymbolId(21) "r"
rebuilt        : <None>
Reference symbol mismatch for "q":
after transform: SymbolId(20) "q"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(24) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(25) "y"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(25) "y"
rebuilt        : <None>
Reference symbol mismatch for "x":
after transform: SymbolId(24) "x"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Parameters", "f", "g", "getArgsForInjection"]
rebuilt        : ["a", "b", "c", "d", "f", "g", "getArgsForInjection", "q", "r", "x", "y"]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["fa1", "fa2", "fb1", "fb2", "fb3", "input", "output"]
rebuilt        : ScopeId(0): ["fa1", "fa2", "fb1", "fb2", "fb3", "output"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
Reference symbol mismatch for "input":
after transform: SymbolId(37) "input"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["test"]
rebuilt        : ["input", "test"]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Iterable"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/tuple/named/partiallyNamedTuples3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["output", "tuple"]
rebuilt        : ScopeId(0): ["output"]
Reference symbol mismatch for "tuple":
after transform: SymbolId(0) "tuple"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["tuple"]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples2.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["A", "_defineProperty", "someDec"]
rebuilt        : ScopeId(0): ["A", "_defineProperty"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array", "ReadonlyArray", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/typeInferenceWithTupleType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/tuple/wideningTuples1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/asiPreventsParsingAsTypeAlias02.ts
semantic error: Missing SymbolId: "container"
Missing SymbolId: "_container"
Missing ReferenceId: "container"
Missing ReferenceId: "container"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(4)]
rebuilt        : ScopeId(1): [SymbolId(4)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/builtinIteratorReturn.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["array", "i0", "i1", "i10", "i11", "i12", "i13", "i14", "i15", "i16", "i17", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "map", "set"]
rebuilt        : ScopeId(0): ["i0", "i1", "i10", "i11", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9"]
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "array":
after transform: SymbolId(0) "array"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "map":
after transform: SymbolId(1) "map"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Reference symbol mismatch for "set":
after transform: SymbolId(2) "set"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Iterable", "IterableIterator", "Map", "Set", "Symbol"]
rebuilt        : ["Symbol", "array", "map", "set"]

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/circularTypeAliasForUnionWithClass.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Symbol reference IDs mismatch for "I0":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "I3":
after transform: SymbolId(5): [ReferenceId(4)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "I4":
after transform: SymbolId(8): [ReferenceId(7)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/circularTypeAliasForUnionWithInterface.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/classDoesNotDependOnBaseTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Symbol reference IDs mismatch for "StringTreeCollection":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(7)]
rebuilt        : SymbolId(1): [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/genericTypeAliases.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11)]
rebuilt        : ScopeId(2): []
Scope children mismatch:
after transform: ScopeId(12): [ScopeId(13)]
rebuilt        : ScopeId(3): []

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/interfaceDoesNotDependOnBaseTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/typeAliases.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Bindings mismatch:
after transform: ScopeId(24): ["E", "x"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(24): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C7":
after transform: SymbolId(13): [ReferenceId(8), ReferenceId(9)]
rebuilt        : SymbolId(7): []
Symbol flags mismatch for "E":
after transform: SymbolId(38): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(16): SymbolFlags(FunctionScopedVariable)

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/recurringTypeParamForContainerOfBase01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithZeroTypeArguments.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny.ts
semantic error: Unresolved references mismatch:
after transform: ["String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithAny2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/constraintSatisfactionWithEmptyObject.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5)]
Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14)]
Unresolved references mismatch:
after transform: ["Date", "Function", "require"]
rebuilt        : ["Function", "require"]
Unresolved reference IDs mismatch for "Function":
after transform: [ReferenceId(0), ReferenceId(6), ReferenceId(58)]
rebuilt        : [ReferenceId(4)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(10), ScopeId(11)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/typeParameterAsTypeParameterConstraintTransitively2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/wrappedAndRecursiveConstraints2.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(4), ReferenceId(5)]
rebuilt        : SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/innerTypeParameterShadowingOuterOne.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Number"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/innerTypeParameterShadowingOuterOne2.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Number"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Unresolved reference IDs mismatch for "Date":
after transform: [ReferenceId(0), ReferenceId(6), ReferenceId(7), ReferenceId(10), ReferenceId(13), ReferenceId(16), ReferenceId(18), ReferenceId(24)]
rebuilt        : [ReferenceId(12)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(16), ReferenceId(18), ReferenceId(19), ReferenceId(23), ReferenceId(26), ReferenceId(27), ReferenceId(29), ReferenceId(30), ReferenceId(33), ReferenceId(34), ReferenceId(39), ReferenceId(40), ReferenceId(49), ReferenceId(50)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(12), ReferenceId(15), ReferenceId(17), ReferenceId(22), ReferenceId(42)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(14)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(8)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(12), ReferenceId(15), ReferenceId(18), ReferenceId(22), ReferenceId(26), ReferenceId(30), ReferenceId(39)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(23), ReferenceId(36), ReferenceId(38), ReferenceId(46)]
rebuilt        : SymbolId(1): [ReferenceId(9), ReferenceId(15), ReferenceId(17), ReferenceId(22)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithoutConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiersReverseMappedTypes.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiersWithIntersection.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterUsedAsConstraint.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignabilityInInheritance.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignableToEveryType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/anyAssignableToEveryType2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithGenericCallSignatures3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers.ts
semantic error: Missing SymbolId: "SimpleTypes"
Missing SymbolId: "_SimpleTypes"
Missing ReferenceId: "SimpleTypes"
Missing ReferenceId: "SimpleTypes"
Missing SymbolId: "ObjectTypes"
Missing SymbolId: "_ObjectTypes"
Missing ReferenceId: "ObjectTypes"
Missing ReferenceId: "ObjectTypes"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(13), SymbolId(28)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(13)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(26)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(27)]
rebuilt        : ScopeId(6): [SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(9)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "S":
after transform: SymbolId(14): [ReferenceId(42), ReferenceId(44)]
rebuilt        : SymbolId(15): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(15): [ReferenceId(43), ReferenceId(45)]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(22): [ReferenceId(50), ReferenceId(72), ReferenceId(75), ReferenceId(76), ReferenceId(78), ReferenceId(80)]
rebuilt        : SymbolId(21): [ReferenceId(65), ReferenceId(68), ReferenceId(69), ReferenceId(71), ReferenceId(73)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(23): [ReferenceId(51), ReferenceId(69), ReferenceId(73), ReferenceId(74), ReferenceId(87)]
rebuilt        : SymbolId(22): [ReferenceId(62), ReferenceId(66), ReferenceId(67), ReferenceId(80)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(2)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersNumericNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3)]
Symbol reference IDs mismatch for "S":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "T":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(40), ReferenceId(56), ReferenceId(61), ReferenceId(67), ReferenceId(75), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(99), ReferenceId(107)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(57), ReferenceId(62), ReferenceId(68), ReferenceId(76), ReferenceId(82), ReferenceId(95), ReferenceId(97)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(58), ReferenceId(66)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(59)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/callSignatureAssignabilityInInheritance5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(40), ReferenceId(56), ReferenceId(61), ReferenceId(67), ReferenceId(75), ReferenceId(85), ReferenceId(90), ReferenceId(92), ReferenceId(99), ReferenceId(107)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(57), ReferenceId(62), ReferenceId(68), ReferenceId(76), ReferenceId(82), ReferenceId(95), ReferenceId(97)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(27), ReferenceId(35), ReferenceId(41), ReferenceId(48), ReferenceId(51), ReferenceId(68), ReferenceId(76), ReferenceId(83), ReferenceId(86), ReferenceId(88), ReferenceId(92)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(30), ReferenceId(33), ReferenceId(37), ReferenceId(45), ReferenceId(69)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(54)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/constructSignatureAssignabilityInInheritance5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/everyTypeAssignableToAny.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(1): [ReferenceId(0)]
rebuilt        : SymbolId(2): []
Symbol flags mismatch for "E":
after transform: SymbolId(5): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(5): [ReferenceId(2), ReferenceId(60)]
rebuilt        : SymbolId(5): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/intersectionIncludingPropFromGlobalAugmentation.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["_objectSpread", "hasOwn", "source", "target", "toString"]
rebuilt        : ScopeId(0): ["_objectSpread", "hasOwn", "target", "toString"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "source":
after transform: SymbolId(2) "source"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["source"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/nullAssignableToEveryType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(24)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/numberAssignableToEnum.ts
semantic error: Bindings mismatch:
after transform: ScopeId(1): ["A", "E"]
rebuilt        : ScopeId(1): ["E"]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(0x0)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(0): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(0): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(8)]
rebuilt        : SymbolId(0): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/undefinedAssignableToEveryType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4)]
Bindings mismatch:
after transform: ScopeId(3): ["A", "E"]
rebuilt        : ScopeId(3): ["E"]
Scope flags mismatch:
after transform: ScopeId(3): ScopeFlags(0x0)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol flags mismatch for "E":
after transform: SymbolId(4): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(4): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(4): [ReferenceId(2), ReferenceId(46)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Function", "Number", "Object", "String", "require", "undefined"]
rebuilt        : ["require", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/arrayLiteralWithMultipleBestCommonTypes.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfConditionalExpressions.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(2): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(13)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(3): [ReferenceId(3)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(4): [ReferenceId(4)]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/bestCommonTypeOfConditionalExpressions2.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(3)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/functionWithMultipleReturnStatements2.ts
semantic error: Unresolved reference IDs mismatch for "Object":
after transform: [ReferenceId(1), ReferenceId(8), ReferenceId(9)]
rebuilt        : [ReferenceId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/bestCommonType/heterogeneousArrayLiterals.ts
semantic error: Missing SymbolId: "_Derived"
Missing ReferenceId: "Derived"
Missing ReferenceId: "Derived"
Missing SymbolId: "WithContextualType"
Missing SymbolId: "_WithContextualType"
Missing ReferenceId: "WithContextualType"
Missing ReferenceId: "WithContextualType"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(30), SymbolId(35), SymbolId(46), SymbolId(61), SymbolId(76), SymbolId(94)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(18), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(34), SymbolId(40), SymbolId(49), SymbolId(62), SymbolId(75)]
Binding symbols mismatch:
after transform: ScopeId(15): [SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(92)]
rebuilt        : ScopeId(18): [SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33)]
Scope flags mismatch:
after transform: ScopeId(15): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(18): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(29): [SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(93)]
rebuilt        : ScopeId(32): [SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39)]
Scope flags mismatch:
after transform: ScopeId(29): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(32): ScopeFlags(Function)
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(14): [ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(27), ReferenceId(32), ReferenceId(47), ReferenceId(91), ReferenceId(92), ReferenceId(113)]
rebuilt        : SymbolId(15): [ReferenceId(3), ReferenceId(6)]
Symbol flags mismatch for "Derived":
after transform: SymbolId(15): SymbolFlags(Class | NameSpaceModule | ValueModule)
rebuilt        : SymbolId(16): SymbolFlags(Class)
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(15): [ReferenceId(4), ReferenceId(30), ReferenceId(31), ReferenceId(48), ReferenceId(69), ReferenceId(70)]
rebuilt        : SymbolId(16): [ReferenceId(30), ReferenceId(31)]
Symbol redeclarations mismatch for "Derived":
after transform: SymbolId(15): [Span { start: 842, end: 849 }]
rebuilt        : SymbolId(16): []
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(16): [ReferenceId(5)]
rebuilt        : SymbolId(18): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityWithUnionTypes01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/independentPropertyVariance.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["x", "y"]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "x":
after transform: SymbolId(0) "x"
rebuilt        : <None>
Reference symbol mismatch for "y":
after transform: SymbolId(1) "y"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["x", "y"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/optionalProperties01.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/optionalProperties02.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/weakTypesAndLiterals01.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["aOrB", "f", "g", "h", "i"]
rebuilt        : ScopeId(0): ["f", "g", "h", "i"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(5), ScopeId(8), ScopeId(11), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(4), ScopeId(7), ScopeId(10)]
Reference symbol mismatch for "aOrB":
after transform: SymbolId(2) "aOrB"
rebuilt        : <None>
Reference symbol mismatch for "aOrB":
after transform: SymbolId(2) "aOrB"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["true"]
rebuilt        : ["aOrB"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/instanceOf/narrowingConstrainedTypeVariable.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(3), ReferenceId(7), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(6)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(6): [ReferenceId(8)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "E":
after transform: SymbolId(13): [ReferenceId(17), ReferenceId(20)]
rebuilt        : SymbolId(11): [ReferenceId(11)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/arrayLiteralsWithRecursiveGenerics.ts
semantic error: Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(4), ReferenceId(11), ReferenceId(12)]
rebuilt        : SymbolId(1): [ReferenceId(3)]
Symbol reference IDs mismatch for "DerivedList":
after transform: SymbolId(2): [ReferenceId(19)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "MyList":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(9), ReferenceId(13)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughInstantiation2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/infiniteExpansionThroughTypeInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(6)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/nominalSubtypeCheckOfTypeParameter2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypeInGenericConstraint.ts
semantic error: Symbol reference IDs mismatch for "G":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(3), ReferenceId(6), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(4): [ReferenceId(10)]
rebuilt        : SymbolId(3): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/recursiveTypes/recursiveTypesUsedAsFunctionParameters.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17)]
rebuilt        : ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10)]
Symbol reference IDs mismatch for "List":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(18), ReferenceId(24), ReferenceId(27), ReferenceId(31)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "MyList":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(21), ReferenceId(29), ReferenceId(32)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/nullIsSubtypeOfEverythingButUndefined.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/stringLiteralTypeIsSubtypeOfString.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39)]
Bindings mismatch:
after transform: ScopeId(62): ["A", "E"]
rebuilt        : ScopeId(36): ["E"]
Scope flags mismatch:
after transform: ScopeId(62): ScopeFlags(0x0)
rebuilt        : ScopeId(36): ScopeFlags(Function)
Symbol reference IDs mismatch for "C":
after transform: SymbolId(36): [ReferenceId(5)]
rebuilt        : SymbolId(19): []
Symbol flags mismatch for "E":
after transform: SymbolId(80): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(48): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(80): [ReferenceId(13), ReferenceId(29)]
rebuilt        : SymbolId(48): [ReferenceId(5)]
Unresolved references mismatch:
after transform: ["Date", "Object", "RegExp", "RegExpMatchArray", "String", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfAny.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypesOfTypeParameterWithConstraints2.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures.ts
semantic error: Missing SymbolId: "CallSignature"
Missing SymbolId: "_CallSignature"
Missing ReferenceId: "CallSignature"
Missing ReferenceId: "CallSignature"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(5), SymbolId(10), SymbolId(13), SymbolId(16)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(6), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(55), ScopeId(57), ScopeId(59), ScopeId(61), ScopeId(63), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(23), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(34), ReferenceId(37), ReferenceId(44), ReferenceId(55), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(117), ReferenceId(123), ReferenceId(125), ReferenceId(133), ReferenceId(141), ReferenceId(143), ReferenceId(145), ReferenceId(153), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(183), ReferenceId(187), ReferenceId(195), ReferenceId(197), ReferenceId(202), ReferenceId(216), ReferenceId(220), ReferenceId(245)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(13), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(41), ReferenceId(46), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(118), ReferenceId(124), ReferenceId(126), ReferenceId(134), ReferenceId(142), ReferenceId(144), ReferenceId(146), ReferenceId(154), ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(172), ReferenceId(175), ReferenceId(176), ReferenceId(200), ReferenceId(206), ReferenceId(214), ReferenceId(222), ReferenceId(224)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(39), ReferenceId(204)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "foo1", "foo10", "foo11", "foo12", "foo13", "foo14", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9", "require"]
rebuilt        : ["foo1", "foo10", "foo11", "foo12", "foo13", "foo14", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures3.ts
semantic error: Missing SymbolId: "Errors"
Missing SymbolId: "_Errors"
Missing ReferenceId: "Errors"
Missing ReferenceId: "Errors"
Missing SymbolId: "WithGenericSignaturesInBaseType"
Missing SymbolId: "_WithGenericSignaturesInBaseType"
Missing ReferenceId: "WithGenericSignaturesInBaseType"
Missing ReferenceId: "WithGenericSignaturesInBaseType"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(113), SymbolId(130)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(81)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(24), SymbolId(28), SymbolId(33), SymbolId(38), SymbolId(44), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(56), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(66), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(75), SymbolId(78), SymbolId(79), SymbolId(80), SymbolId(81), SymbolId(84), SymbolId(88), SymbolId(89), SymbolId(90), SymbolId(91), SymbolId(94), SymbolId(96), SymbolId(97), SymbolId(98), SymbolId(99), SymbolId(102), SymbolId(103), SymbolId(104), SymbolId(105), SymbolId(108), SymbolId(109), SymbolId(112), SymbolId(128)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(12), SymbolId(15), SymbolId(18), SymbolId(21), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(31), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(40), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(48), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(57), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(65), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(72), SymbolId(73), SymbolId(74), SymbolId(75), SymbolId(77), SymbolId(78), SymbolId(80)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(35), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(21), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33)]
Binding symbols mismatch:
after transform: ScopeId(48): [SymbolId(117), SymbolId(120), SymbolId(124), SymbolId(127), SymbolId(129)]
rebuilt        : ScopeId(34): [SymbolId(82), SymbolId(83), SymbolId(85), SymbolId(86), SymbolId(88)]
Scope flags mismatch:
after transform: ScopeId(48): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(34): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(48): [ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54)]
rebuilt        : ScopeId(34): [ScopeId(35), ScopeId(36)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(33), ReferenceId(39), ReferenceId(50), ReferenceId(57), ReferenceId(59), ReferenceId(67), ReferenceId(74), ReferenceId(76), ReferenceId(78), ReferenceId(89), ReferenceId(90), ReferenceId(101), ReferenceId(109), ReferenceId(117), ReferenceId(119), ReferenceId(136)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(26), ReferenceId(30), ReferenceId(51), ReferenceId(58), ReferenceId(68), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(86), ReferenceId(97), ReferenceId(113)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(3): [ReferenceId(7), ReferenceId(24), ReferenceId(36), ReferenceId(52), ReferenceId(60), ReferenceId(111), ReferenceId(115)]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["Array", "foo10", "foo11", "foo12", "foo15", "foo16", "foo17", "foo2", "foo3", "foo7", "foo8", "require"]
rebuilt        : ["foo10", "foo11", "foo12", "foo15", "foo16", "foo17", "foo2", "foo3", "foo7", "foo8", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithCallSignatures4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(96), ReferenceId(101), ReferenceId(114), ReferenceId(118), ReferenceId(137), ReferenceId(141)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(97), ReferenceId(103)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures.ts
semantic error: Missing SymbolId: "ConstructSignature"
Missing SymbolId: "_ConstructSignature"
Missing ReferenceId: "ConstructSignature"
Missing ReferenceId: "ConstructSignature"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0)]
rebuilt        : ScopeId(0): [SymbolId(0)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7), SymbolId(8), SymbolId(9)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(36), ScopeId(37), ScopeId(40), ScopeId(41), ScopeId(44), ScopeId(45), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(34), ReferenceId(37), ReferenceId(44), ReferenceId(55), ReferenceId(103), ReferenceId(108), ReferenceId(110), ReferenceId(117), ReferenceId(123), ReferenceId(125), ReferenceId(133), ReferenceId(141), ReferenceId(143), ReferenceId(145), ReferenceId(153), ReferenceId(160), ReferenceId(162), ReferenceId(164), ReferenceId(183), ReferenceId(187), ReferenceId(195), ReferenceId(197), ReferenceId(202), ReferenceId(216), ReferenceId(220), ReferenceId(245)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(9), ReferenceId(13), ReferenceId(15), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(32), ReferenceId(41), ReferenceId(46), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(118), ReferenceId(124), ReferenceId(126), ReferenceId(134), ReferenceId(142), ReferenceId(144), ReferenceId(146), ReferenceId(154), ReferenceId(161), ReferenceId(163), ReferenceId(165), ReferenceId(172), ReferenceId(175), ReferenceId(176), ReferenceId(200), ReferenceId(206), ReferenceId(214), ReferenceId(222), ReferenceId(224)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(39), ReferenceId(204)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Date", "Object", "foo1", "foo10", "foo11", "foo12", "foo13", "foo14", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9", "require"]
rebuilt        : ["foo1", "foo10", "foo11", "foo12", "foo13", "foo14", "foo15", "foo16", "foo17", "foo18", "foo2", "foo3", "foo4", "foo5", "foo6", "foo7", "foo8", "foo9", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures3.ts
semantic error: Missing SymbolId: "Errors"
Missing SymbolId: "_Errors"
Missing ReferenceId: "Errors"
Missing ReferenceId: "Errors"
Missing SymbolId: "WithGenericSignaturesInBaseType"
Missing SymbolId: "_WithGenericSignaturesInBaseType"
Missing ReferenceId: "WithGenericSignaturesInBaseType"
Missing ReferenceId: "WithGenericSignaturesInBaseType"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(73), SymbolId(87)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(53)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(27), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52), SymbolId(53), SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58), SymbolId(59), SymbolId(60), SymbolId(61), SymbolId(62), SymbolId(63), SymbolId(64), SymbolId(65), SymbolId(66), SymbolId(67), SymbolId(68), SymbolId(69), SymbolId(70), SymbolId(71), SymbolId(72), SymbolId(85)]
rebuilt        : ScopeId(1): [SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(6), SymbolId(8), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(32), SymbolId(33), SymbolId(34), SymbolId(35), SymbolId(36), SymbolId(37), SymbolId(38), SymbolId(39), SymbolId(40), SymbolId(41), SymbolId(42), SymbolId(43), SymbolId(44), SymbolId(45), SymbolId(46), SymbolId(47), SymbolId(48), SymbolId(49), SymbolId(50), SymbolId(51), SymbolId(52)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(27), ScopeId(28), ScopeId(35)]
rebuilt        : ScopeId(1): [ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8)]
Binding symbols mismatch:
after transform: ScopeId(36): [SymbolId(77), SymbolId(79), SymbolId(83), SymbolId(84), SymbolId(86)]
rebuilt        : ScopeId(10): [SymbolId(54), SymbolId(55), SymbolId(56), SymbolId(57), SymbolId(58)]
Scope flags mismatch:
after transform: ScopeId(36): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(10): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(36): [ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40)]
rebuilt        : ScopeId(10): []
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(2), ReferenceId(4), ReferenceId(6), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(22), ReferenceId(33), ReferenceId(39), ReferenceId(51), ReferenceId(58), ReferenceId(60), ReferenceId(68), ReferenceId(75), ReferenceId(77), ReferenceId(79), ReferenceId(90), ReferenceId(91), ReferenceId(102), ReferenceId(110), ReferenceId(118), ReferenceId(120), ReferenceId(137)]
rebuilt        : SymbolId(3): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(5), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(26), ReferenceId(30), ReferenceId(52), ReferenceId(59), ReferenceId(69), ReferenceId(76), ReferenceId(78), ReferenceId(80), ReferenceId(87), ReferenceId(98), ReferenceId(114)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(3): [ReferenceId(7), ReferenceId(24), ReferenceId(36), ReferenceId(53), ReferenceId(61), ReferenceId(112), ReferenceId(116)]
rebuilt        : SymbolId(6): []
Unresolved references mismatch:
after transform: ["Array", "foo10", "foo11", "foo12", "foo15", "foo16", "foo17", "foo2", "foo3", "foo7", "foo8", "require"]
rebuilt        : ["foo10", "foo11", "foo12", "foo15", "foo16", "foo17", "foo2", "foo3", "foo7", "foo8", "require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(26), ScopeId(27), ScopeId(34)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(12), ReferenceId(19), ReferenceId(23), ReferenceId(31), ReferenceId(38), ReferenceId(44), ReferenceId(96), ReferenceId(101), ReferenceId(114), ReferenceId(118), ReferenceId(137), ReferenceId(141)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(14), ReferenceId(27), ReferenceId(35), ReferenceId(97), ReferenceId(103)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(41)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithConstructSignatures5.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(3), ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(24), ReferenceId(26), ReferenceId(32), ReferenceId(53), ReferenceId(58), ReferenceId(64), ReferenceId(72), ReferenceId(82), ReferenceId(87), ReferenceId(89), ReferenceId(96)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(8)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(11), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(22), ReferenceId(23), ReferenceId(30), ReferenceId(34), ReferenceId(36), ReferenceId(54), ReferenceId(59), ReferenceId(65), ReferenceId(73), ReferenceId(79), ReferenceId(92), ReferenceId(94)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(28)]
rebuilt        : SymbolId(4): []
Unresolved references mismatch:
after transform: ["Array", "Object", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers4.ts
semantic error: Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(4), ReferenceId(7)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(6), ReferenceId(9)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality.ts
semantic error: Missing SymbolId: "TwoLevels"
Missing SymbolId: "_TwoLevels"
Missing ReferenceId: "TwoLevels"
Missing ReferenceId: "TwoLevels"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(9), SymbolId(10), SymbolId(11), SymbolId(12)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3)]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Binding symbols mismatch:
after transform: ScopeId(10): [SymbolId(19), SymbolId(20), SymbolId(21), SymbolId(22)]
rebuilt        : ScopeId(1): [SymbolId(4), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(10): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(10): [ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(1): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembersOptionality4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/undefinedIsSubtypeOfEverything.ts
semantic error: Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript
Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentity.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(24), ReferenceId(30)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(11), ReferenceId(12), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentity2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Bindings mismatch:
after transform: ScopeId(5): ["A", "E"]
rebuilt        : ScopeId(7): ["E"]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(0x0)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(6), ReferenceId(8), ReferenceId(10)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(5), ReferenceId(12), ReferenceId(14), ReferenceId(16), ReferenceId(18)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(15), ReferenceId(21)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(17), ReferenceId(23)]
rebuilt        : SymbolId(4): []
Symbol flags mismatch for "E":
after transform: SymbolId(6): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(5): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(19), ReferenceId(25)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(27), ReferenceId(33), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(11): [ReferenceId(14), ReferenceId(15), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(7), ReferenceId(18), ReferenceId(20), ReferenceId(22), ReferenceId(24)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(11), ReferenceId(21), ReferenceId(29), ReferenceId(35), ReferenceId(37), ReferenceId(43)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(11): [ReferenceId(16), ReferenceId(17), ReferenceId(33), ReferenceId(41)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesDifferingParamCounts.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(28), ReferenceId(34), ReferenceId(36), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(13), ReferenceId(14), ReferenceId(24), ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(13): [ReferenceId(15), ReferenceId(16), ReferenceId(32), ReferenceId(40)]
rebuilt        : SymbolId(9): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesDifferingParamCounts2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(3): [ReferenceId(4), ReferenceId(5), ReferenceId(11), ReferenceId(14)]
rebuilt        : SymbolId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithCallSignaturesWithOverloads.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(14), ScopeId(17), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Scope children mismatch:
after transform: ScopeId(5): [ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(3): [ScopeId(4)]
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(5): [ScopeId(6)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(16), ReferenceId(18), ReferenceId(20), ReferenceId(22)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(24), ReferenceId(26), ReferenceId(28), ReferenceId(30)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(8), ReferenceId(9), ReferenceId(19), ReferenceId(27), ReferenceId(33), ReferenceId(35), ReferenceId(41)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(17): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(14), ReferenceId(15), ReferenceId(31), ReferenceId(39)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithComplexConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(4), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(8), ReferenceId(16), ReferenceId(24), ReferenceId(28), ReferenceId(30), ReferenceId(34)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(11), ReferenceId(12), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(6), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(24), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(8): [ReferenceId(11), ReferenceId(12), ReferenceId(20), ReferenceId(28)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(9): [ReferenceId(13), ReferenceId(14), ReferenceId(22), ReferenceId(30)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithConstructSignaturesDifferingParamCounts.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(5), ReferenceId(14), ReferenceId(16), ReferenceId(18), ReferenceId(20)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(7), ReferenceId(17), ReferenceId(23), ReferenceId(25), ReferenceId(31)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(10), ReferenceId(11), ReferenceId(19), ReferenceId(27)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(11): [ReferenceId(12), ReferenceId(13), ReferenceId(21), ReferenceId(29)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(37), ReferenceId(43), ReferenceId(45), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(13): [ReferenceId(22), ReferenceId(23), ReferenceId(33), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(24), ReferenceId(25), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(21): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(24): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(32), ReferenceId(35), ReferenceId(38), ReferenceId(41)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(18), ReferenceId(33), ReferenceId(43), ReferenceId(47), ReferenceId(51), ReferenceId(54)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(20), ReferenceId(22), ReferenceId(36), ReferenceId(49), ReferenceId(59), ReferenceId(62), ReferenceId(71)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(13): [ReferenceId(28), ReferenceId(29), ReferenceId(42), ReferenceId(53), ReferenceId(66)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(30), ReferenceId(31), ReferenceId(56), ReferenceId(69)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Date", "Number", "RegExp", "String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(32), ReferenceId(33), ReferenceId(56), ReferenceId(60), ReferenceId(75), ReferenceId(79)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(34), ReferenceId(37), ReferenceId(57), ReferenceId(81), ReferenceId(87), ReferenceId(93), ReferenceId(97)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(40), ReferenceId(43), ReferenceId(61), ReferenceId(64), ReferenceId(70), ReferenceId(90), ReferenceId(104), ReferenceId(108), ReferenceId(120)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(15): [ReferenceId(67), ReferenceId(73)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(26): [ReferenceId(52), ReferenceId(53), ReferenceId(80), ReferenceId(96), ReferenceId(114)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(29): [ReferenceId(54), ReferenceId(55), ReferenceId(100), ReferenceId(118)]
rebuilt        : SymbolId(13): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Date", "Number", "RegExp", "String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByConstraints3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77), ScopeId(78), ScopeId(79), ScopeId(80), ScopeId(81), ScopeId(82), ScopeId(83)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34)]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(29)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(33), ReferenceId(39), ReferenceId(40), ReferenceId(42), ReferenceId(43), ReferenceId(62), ReferenceId(63), ReferenceId(87), ReferenceId(88), ReferenceId(93), ReferenceId(94), ReferenceId(99), ReferenceId(100), ReferenceId(103), ReferenceId(104)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(10): [ReferenceId(36), ReferenceId(37), ReferenceId(60), ReferenceId(64), ReferenceId(80), ReferenceId(84)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(15): [ReferenceId(38), ReferenceId(41), ReferenceId(61), ReferenceId(86), ReferenceId(92), ReferenceId(98), ReferenceId(102)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(20): [ReferenceId(44), ReferenceId(47), ReferenceId(65), ReferenceId(68), ReferenceId(74), ReferenceId(95), ReferenceId(109), ReferenceId(113), ReferenceId(125)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(25): [ReferenceId(71), ReferenceId(77)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(36): [ReferenceId(56), ReferenceId(57), ReferenceId(85), ReferenceId(101), ReferenceId(119)]
rebuilt        : SymbolId(15): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(39): [ReferenceId(58), ReferenceId(59), ReferenceId(105), ReferenceId(123)]
rebuilt        : SymbolId(16): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(30), ReferenceId(32), ReferenceId(34), ReferenceId(36)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(33), ReferenceId(39), ReferenceId(41), ReferenceId(47)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(13): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(35), ReferenceId(43)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(20), ReferenceId(21), ReferenceId(37), ReferenceId(45)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingByReturnType2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(17), ReferenceId(18), ReferenceId(35), ReferenceId(38), ReferenceId(41), ReferenceId(44)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21), ReferenceId(36), ReferenceId(46), ReferenceId(50), ReferenceId(54), ReferenceId(57)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(23), ReferenceId(25), ReferenceId(39), ReferenceId(52), ReferenceId(62), ReferenceId(65), ReferenceId(74)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(13): [ReferenceId(31), ReferenceId(32), ReferenceId(45), ReferenceId(56), ReferenceId(69)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(33), ReferenceId(34), ReferenceId(59), ReferenceId(72)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(33)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(35), ReferenceId(38), ReferenceId(40), ReferenceId(41), ReferenceId(43), ReferenceId(46), ReferenceId(49), ReferenceId(64), ReferenceId(65)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(7): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(39), ReferenceId(48), ReferenceId(52), ReferenceId(63)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(22): [ReferenceId(22), ReferenceId(23), ReferenceId(34), ReferenceId(42), ReferenceId(57)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(28): [ReferenceId(24), ReferenceId(25), ReferenceId(44), ReferenceId(61)]
rebuilt        : SymbolId(7): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(10), ReferenceId(11), ReferenceId(14), ReferenceId(18)]
rebuilt        : SymbolId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(14), ReferenceId(15), ReferenceId(26), ReferenceId(28), ReferenceId(30), ReferenceId(32)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(17), ReferenceId(27), ReferenceId(34), ReferenceId(36), ReferenceId(38), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(6): [ReferenceId(18), ReferenceId(19), ReferenceId(29), ReferenceId(37), ReferenceId(43), ReferenceId(45), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(13): [ReferenceId(22), ReferenceId(23), ReferenceId(33), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(15): [ReferenceId(24), ReferenceId(25), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(4): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(8): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(16): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(21): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(24): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericCallSignaturesOptionalParams3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(21), ReferenceId(22), ReferenceId(33), ReferenceId(35), ReferenceId(37), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(5): [ReferenceId(23), ReferenceId(24), ReferenceId(34), ReferenceId(41), ReferenceId(43), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(10): [ReferenceId(25), ReferenceId(26), ReferenceId(36), ReferenceId(44), ReferenceId(50), ReferenceId(52), ReferenceId(58)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(21): [ReferenceId(29), ReferenceId(30), ReferenceId(40), ReferenceId(46), ReferenceId(54)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(24): [ReferenceId(31), ReferenceId(32), ReferenceId(48), ReferenceId(56)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(12), ReferenceId(14), ReferenceId(28), ReferenceId(32), ReferenceId(36), ReferenceId(39)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(16), ReferenceId(18), ReferenceId(34), ReferenceId(44), ReferenceId(47)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(24), ReferenceId(25), ReferenceId(38), ReferenceId(51)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(12): [ReferenceId(26), ReferenceId(27), ReferenceId(41), ReferenceId(54)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Number", "RegExp", "String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(28), ReferenceId(31), ReferenceId(61), ReferenceId(67), ReferenceId(73), ReferenceId(77)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(34), ReferenceId(37), ReferenceId(50), ReferenceId(56), ReferenceId(70), ReferenceId(84), ReferenceId(88)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(10): [ReferenceId(53), ReferenceId(59)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(21): [ReferenceId(46), ReferenceId(47), ReferenceId(76), ReferenceId(94)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(24): [ReferenceId(48), ReferenceId(49), ReferenceId(80), ReferenceId(98)]
rebuilt        : SymbolId(10): []
Unresolved references mismatch:
after transform: ["Array", "Boolean", "Number", "RegExp", "String"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(13), ScopeId(15), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
Symbol reference IDs mismatch for "One":
after transform: SymbolId(0): [ReferenceId(25)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "Two":
after transform: SymbolId(1): [ReferenceId(5), ReferenceId(29), ReferenceId(33), ReferenceId(34), ReferenceId(36), ReferenceId(37), ReferenceId(67), ReferenceId(68), ReferenceId(73), ReferenceId(74), ReferenceId(79), ReferenceId(80), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(10): [ReferenceId(32), ReferenceId(35), ReferenceId(66), ReferenceId(72), ReferenceId(78), ReferenceId(82)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(15): [ReferenceId(38), ReferenceId(41), ReferenceId(54), ReferenceId(60), ReferenceId(75), ReferenceId(89), ReferenceId(93)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(20): [ReferenceId(57), ReferenceId(63)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(31): [ReferenceId(50), ReferenceId(51), ReferenceId(81), ReferenceId(99)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(34): [ReferenceId(52), ReferenceId(53), ReferenceId(85), ReferenceId(103)]
rebuilt        : SymbolId(13): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(26), ReferenceId(28)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(12), ReferenceId(13), ReferenceId(25), ReferenceId(31), ReferenceId(33), ReferenceId(39)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(27), ReferenceId(35)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(12): [ReferenceId(18), ReferenceId(19), ReferenceId(21), ReferenceId(29), ReferenceId(37)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(15), ReferenceId(17), ReferenceId(31), ReferenceId(35), ReferenceId(39), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(19), ReferenceId(21), ReferenceId(37), ReferenceId(47), ReferenceId(50), ReferenceId(59)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(27), ReferenceId(28), ReferenceId(41), ReferenceId(54)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(12): [ReferenceId(29), ReferenceId(30), ReferenceId(44), ReferenceId(57)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterCounts.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(18), ReferenceId(19), ReferenceId(28), ReferenceId(31), ReferenceId(33), ReferenceId(34), ReferenceId(36), ReferenceId(39), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(7), ReferenceId(12), ReferenceId(20), ReferenceId(21), ReferenceId(32), ReferenceId(41), ReferenceId(45)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(19): [ReferenceId(24), ReferenceId(25), ReferenceId(35), ReferenceId(50)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(25): [ReferenceId(26), ReferenceId(27), ReferenceId(37), ReferenceId(54)]
rebuilt        : SymbolId(5): []
Unresolved references mismatch:
after transform: ["Date", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterNames.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(3), ReferenceId(9), ReferenceId(15), ReferenceId(16), ReferenceId(25), ReferenceId(27), ReferenceId(29), ReferenceId(31)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(17), ReferenceId(18), ReferenceId(28), ReferenceId(34), ReferenceId(36)]
rebuilt        : SymbolId(2): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(10): [ReferenceId(21), ReferenceId(22), ReferenceId(30), ReferenceId(38)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(12): [ReferenceId(23), ReferenceId(24), ReferenceId(32), ReferenceId(40)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(14), ReferenceId(22), ReferenceId(23), ReferenceId(32), ReferenceId(34), ReferenceId(36), ReferenceId(38)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(10), ReferenceId(18), ReferenceId(24), ReferenceId(25), ReferenceId(35), ReferenceId(41), ReferenceId(43)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(12): [ReferenceId(28), ReferenceId(29), ReferenceId(37), ReferenceId(45)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(14): [ReferenceId(30), ReferenceId(31), ReferenceId(39), ReferenceId(47)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(16), ReferenceId(26), ReferenceId(27), ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(39), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(16): [ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(19): [ReferenceId(34), ReferenceId(35), ReferenceId(43), ReferenceId(51)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithGenericConstructSignaturesOptionalParams3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(0): [ReferenceId(6), ReferenceId(16), ReferenceId(26), ReferenceId(27), ReferenceId(36), ReferenceId(38), ReferenceId(40), ReferenceId(42)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(5): [ReferenceId(11), ReferenceId(21), ReferenceId(28), ReferenceId(29), ReferenceId(39), ReferenceId(45), ReferenceId(47)]
rebuilt        : SymbolId(3): [ReferenceId(0)]
Symbol reference IDs mismatch for "a":
after transform: SymbolId(16): [ReferenceId(32), ReferenceId(33), ReferenceId(41), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(19): [ReferenceId(34), ReferenceId(35), ReferenceId(43), ReferenceId(51)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers1.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(26), ReferenceId(50)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(38), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(7): [ReferenceId(28), ReferenceId(45), ReferenceId(56)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(8): [ReferenceId(30), ReferenceId(47), ReferenceId(58)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(9): [ReferenceId(18), ReferenceId(19), ReferenceId(34), ReferenceId(41), ReferenceId(52)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(10): [ReferenceId(20), ReferenceId(21), ReferenceId(43), ReferenceId(54)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithNumericIndexers3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithOptionality.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(5), ReferenceId(7)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(11)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(14)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(3), ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(18)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPrivates.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(1): [ReferenceId(4)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(7): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPrivates2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(7), ReferenceId(9), ReferenceId(12), ReferenceId(15), ReferenceId(16)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(4)]
Symbol reference IDs mismatch for "D":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(8), ReferenceId(10), ReferenceId(14), ReferenceId(17), ReferenceId(18)]
rebuilt        : SymbolId(2): [ReferenceId(6)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithPublics.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(2), ReferenceId(13), ReferenceId(15), ReferenceId(17), ReferenceId(19)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(3), ReferenceId(4), ReferenceId(14), ReferenceId(21), ReferenceId(23), ReferenceId(25), ReferenceId(27)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(24), ReferenceId(30)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(5): [ReferenceId(9), ReferenceId(10), ReferenceId(20), ReferenceId(26), ReferenceId(32)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(6): [ReferenceId(11), ReferenceId(12), ReferenceId(28), ReferenceId(34)]
rebuilt        : SymbolId(5): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithStringIndexers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
Symbol reference IDs mismatch for "A":
after transform: SymbolId(0): [ReferenceId(1), ReferenceId(3), ReferenceId(4), ReferenceId(15), ReferenceId(17), ReferenceId(19), ReferenceId(21), ReferenceId(23), ReferenceId(25)]
rebuilt        : SymbolId(0): [ReferenceId(0)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(6), ReferenceId(16), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33), ReferenceId(35), ReferenceId(37)]
rebuilt        : SymbolId(1): [ReferenceId(1)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(2): [ReferenceId(7), ReferenceId(8), ReferenceId(18), ReferenceId(30), ReferenceId(40)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(5): [ReferenceId(20), ReferenceId(36), ReferenceId(46)]
rebuilt        : SymbolId(3): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(6): [ReferenceId(22), ReferenceId(38), ReferenceId(48)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(7): [ReferenceId(11), ReferenceId(12), ReferenceId(26), ReferenceId(32), ReferenceId(42)]
rebuilt        : SymbolId(5): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(8): [ReferenceId(13), ReferenceId(14), ReferenceId(34), ReferenceId(44)]
rebuilt        : SymbolId(6): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/objectTypesIdentityWithStringIndexers2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(37), ScopeId(38), ScopeId(39), ScopeId(40), ScopeId(41), ScopeId(42), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(64), ScopeId(65), ScopeId(66), ScopeId(67), ScopeId(68), ScopeId(69), ScopeId(70), ScopeId(71), ScopeId(72), ScopeId(73), ScopeId(74), ScopeId(75), ScopeId(76), ScopeId(77)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(39)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(2), ReferenceId(4), ReferenceId(8), ReferenceId(9), ReferenceId(26), ReferenceId(50)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "A":
after transform: SymbolId(2): [ReferenceId(5), ReferenceId(10), ReferenceId(11), ReferenceId(22), ReferenceId(24), ReferenceId(27), ReferenceId(29), ReferenceId(31), ReferenceId(33)]
rebuilt        : SymbolId(4): [ReferenceId(5)]
Symbol reference IDs mismatch for "B":
after transform: SymbolId(3): [ReferenceId(6), ReferenceId(12), ReferenceId(13), ReferenceId(23), ReferenceId(35), ReferenceId(37), ReferenceId(40), ReferenceId(42), ReferenceId(44), ReferenceId(46)]
rebuilt        : SymbolId(5): [ReferenceId(6)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(4): [ReferenceId(14), ReferenceId(15), ReferenceId(25), ReferenceId(38), ReferenceId(49)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "PA":
after transform: SymbolId(7): [ReferenceId(28), ReferenceId(45), ReferenceId(56)]
rebuilt        : SymbolId(7): []
Symbol reference IDs mismatch for "PB":
after transform: SymbolId(8): [ReferenceId(30), ReferenceId(47), ReferenceId(58)]
rebuilt        : SymbolId(8): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(9): [ReferenceId(18), ReferenceId(19), ReferenceId(34), ReferenceId(41), ReferenceId(52)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "b":
after transform: SymbolId(10): [ReferenceId(20), ReferenceId(21), ReferenceId(43), ReferenceId(54)]
rebuilt        : SymbolId(10): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/primtiveTypesAreIdentical.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
Bindings mismatch:
after transform: ScopeId(17): ["A", "E"]
rebuilt        : ScopeId(6): ["E"]
Scope flags mismatch:
after transform: ScopeId(17): ScopeFlags(0x0)
rebuilt        : ScopeId(6): ScopeFlags(Function)
Symbol flags mismatch for "E":
after transform: SymbolId(21): SymbolFlags(RegularEnum)
rebuilt        : SymbolId(10): SymbolFlags(FunctionScopedVariable)
Symbol reference IDs mismatch for "E":
after transform: SymbolId(21): [ReferenceId(0), ReferenceId(1), ReferenceId(5)]
rebuilt        : SymbolId(10): [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeAndMemberIdentity/typeParametersAreIdenticalToThemselves.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(14), ScopeId(27), ScopeId(37), ScopeId(46)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(11)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5)]
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26)]
rebuilt        : ScopeId(6): [ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Scope children mismatch:
after transform: ScopeId(27): [ScopeId(28), ScopeId(29), ScopeId(30), ScopeId(31), ScopeId(32), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(11): [ScopeId(12), ScopeId(13), ScopeId(14)]
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/bivariantInferences.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["a", "b", "x"]
rebuilt        : ScopeId(0): ["x"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "a":
after transform: SymbolId(3) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(4) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["ReadonlyArray"]
rebuilt        : ["a", "b"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/discriminatedUnionInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallTypeArgumentInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(14)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithArrayLiteralArgs.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithConstraintsTypeArgumentInference.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(18)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(2), ReferenceId(5), ReferenceId(12), ReferenceId(17), ReferenceId(22), ReferenceId(29), ReferenceId(56), ReferenceId(61), ReferenceId(90), ReferenceId(116), ReferenceId(120), ReferenceId(124)]
rebuilt        : SymbolId(1): [ReferenceId(2)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(1), ReferenceId(3), ReferenceId(13), ReferenceId(18), ReferenceId(23), ReferenceId(30), ReferenceId(39), ReferenceId(47), ReferenceId(52), ReferenceId(57), ReferenceId(62), ReferenceId(91), ReferenceId(100), ReferenceId(108), ReferenceId(113), ReferenceId(117), ReferenceId(121), ReferenceId(125)]
rebuilt        : SymbolId(2): [ReferenceId(5)]
Symbol reference IDs mismatch for "Derived2":
after transform: SymbolId(2): [ReferenceId(4), ReferenceId(43), ReferenceId(48), ReferenceId(53), ReferenceId(104), ReferenceId(109), ReferenceId(114)]
rebuilt        : SymbolId(4): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithFunctionTypedArguments4.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(1)]
rebuilt        : SymbolId(2): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithGenericSignatureArguments.ts
semantic error: Symbol reference IDs mismatch for "a":
after transform: SymbolId(17): [ReferenceId(14), ReferenceId(15), ReferenceId(21), ReferenceId(22)]
rebuilt        : SymbolId(16): [ReferenceId(6), ReferenceId(10)]
Symbol reference IDs mismatch for "b":
after transform: SymbolId(18): [ReferenceId(16), ReferenceId(17), ReferenceId(19), ReferenceId(20)]
rebuilt        : SymbolId(17): [ReferenceId(7), ReferenceId(9)]
Unresolved references mismatch:
after transform: ["Date", "Object", "RegExp"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithNonSymmetricSubtypes.ts
semantic error: Unresolved references mismatch:
after transform: ["Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgs2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(7)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(7), ScopeId(8)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(2), ReferenceId(3), ReferenceId(12), ReferenceId(14), ReferenceId(15), ReferenceId(26)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(5), ReferenceId(14)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(9), ReferenceId(21), ReferenceId(27)]
rebuilt        : SymbolId(2): [ReferenceId(11), ReferenceId(18)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints.ts
semantic error: Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(8), ReferenceId(17)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(10)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(18), ReferenceId(20)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(7)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
Symbol reference IDs mismatch for "Base":
after transform: SymbolId(0): [ReferenceId(0), ReferenceId(1), ReferenceId(7), ReferenceId(13), ReferenceId(22), ReferenceId(28)]
rebuilt        : SymbolId(1): [ReferenceId(2), ReferenceId(7), ReferenceId(17)]
Symbol reference IDs mismatch for "Derived":
after transform: SymbolId(1): [ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(19), ReferenceId(31)]
rebuilt        : SymbolId(2): [ReferenceId(8), ReferenceId(10), ReferenceId(11), ReferenceId(20)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexers.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndIndexersErrors.ts
semantic error: Unresolved references mismatch:
after transform: ["Date", "Object"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndNumericIndexer.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndStringIndexer.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedConstructorTypedArguments.ts
semantic error: Missing SymbolId: "NonGenericParameter"
Missing SymbolId: "_NonGenericParameter"
Missing ReferenceId: "NonGenericParameter"
Missing ReferenceId: "NonGenericParameter"
Missing SymbolId: "GenericParameter"
Missing SymbolId: "_GenericParameter"
Missing ReferenceId: "GenericParameter"
Missing ReferenceId: "GenericParameter"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(8)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(8)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(7), SymbolId(36)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(7)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(1): [ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]
rebuilt        : ScopeId(1): [ScopeId(2)]
Binding symbols mismatch:
after transform: ScopeId(6): [SymbolId(9), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(17), SymbolId(18), SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(27), SymbolId(28), SymbolId(31), SymbolId(34), SymbolId(35), SymbolId(37)]
rebuilt        : ScopeId(3): [SymbolId(9), SymbolId(10), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(18), SymbolId(19), SymbolId(20), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27)]
Scope flags mismatch:
after transform: ScopeId(6): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(3): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(6): [ScopeId(7), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(17), ScopeId(20), ScopeId(21), ScopeId(22)]
rebuilt        : ScopeId(3): [ScopeId(4), ScopeId(5), ScopeId(6)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8), ScopeId(9)]
rebuilt        : ScopeId(4): []
Scope children mismatch:
after transform: ScopeId(14): [ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(5): []
Scope children mismatch:
after transform: ScopeId(17): [ScopeId(18), ScopeId(19)]
rebuilt        : ScopeId(6): []
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithOverloadedFunctionTypedArguments.ts
semantic error: Missing SymbolId: "NonGenericParameter"
Missing SymbolId: "_NonGenericParameter"
Missing ReferenceId: "NonGenericParameter"
Missing ReferenceId: "NonGenericParameter"
Missing SymbolId: "GenericParameter"
Missing SymbolId: "_GenericParameter"
Missing ReferenceId: "GenericParameter"
Missing ReferenceId: "GenericParameter"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(10)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(10)]
Binding symbols mismatch:
after transform: ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(5), SymbolId(8), SymbolId(41)]
rebuilt        : ScopeId(1): [SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(5), SymbolId(6), SymbolId(8)]
Scope flags mismatch:
after transform: ScopeId(1): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(1): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(5): [SymbolId(11), SymbolId(14), SymbolId(16), SymbolId(18), SymbolId(19), SymbolId(22), SymbolId(24), SymbolId(27), SymbolId(31), SymbolId(35), SymbolId(37), SymbolId(40), SymbolId(42)]
rebuilt        : ScopeId(5): [SymbolId(11), SymbolId(12), SymbolId(14), SymbolId(16), SymbolId(17), SymbolId(18), SymbolId(20), SymbolId(22), SymbolId(24), SymbolId(27), SymbolId(30), SymbolId(32), SymbolId(34)]
Scope flags mismatch:
after transform: ScopeId(5): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(5): ScopeFlags(Function)
Symbol reference IDs mismatch for "a":
after transform: SymbolId(1): [ReferenceId(0), ReferenceId(3)]
rebuilt        : SymbolId(2): [ReferenceId(2)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericClassWithObjectTypeArgsAndConstraints.ts
semantic error: Missing SymbolId: "Class"
Missing SymbolId: "_Class"
Missing ReferenceId: "Class"
Missing ReferenceId: "Class"
Missing SymbolId: "Interface"
Missing SymbolId: "_Interface"
Missing ReferenceId: "Interface"
Missing ReferenceId: "Interface"
Binding symbols mismatch:
after transform: ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(4), SymbolId(23), SymbolId(38)]
rebuilt        : ScopeId(0): [SymbolId(0), SymbolId(1), SymbolId(2), SymbolId(3), SymbolId(4), SymbolId(20)]
Binding symbols mismatch:
after transform: ScopeId(4): [SymbolId(5), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(16), SymbolId(22), SymbolId(36)]
rebuilt        : ScopeId(7): [SymbolId(5), SymbolId(6), SymbolId(10), SymbolId(11), SymbolId(12), SymbolId(13), SymbolId(14), SymbolId(15), SymbolId(19)]
Scope flags mismatch:
after transform: ScopeId(4): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(7): ScopeFlags(Function)
Binding symbols mismatch:
after transform: ScopeId(9): [SymbolId(27), SymbolId(28), SymbolId(29), SymbolId(30), SymbolId(31), SymbolId(35), SymbolId(37)]
rebuilt        : ScopeId(12): [SymbolId(21), SymbolId(22), SymbolId(23), SymbolId(24), SymbolId(25), SymbolId(26), SymbolId(27)]
Scope flags mismatch:
after transform: ScopeId(9): ScopeFlags(StrictMode | Function)
rebuilt        : ScopeId(12): ScopeFlags(Function)
Scope children mismatch:
after transform: ScopeId(9): [ScopeId(10), ScopeId(12)]
rebuilt        : ScopeId(12): []
Symbol reference IDs mismatch for "C":
after transform: SymbolId(0): [ReferenceId(8), ReferenceId(18), ReferenceId(19), ReferenceId(40), ReferenceId(50), ReferenceId(51)]
rebuilt        : SymbolId(1): []
Symbol reference IDs mismatch for "D":
after transform: SymbolId(1): [ReferenceId(10), ReferenceId(27), ReferenceId(42), ReferenceId(58)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "X":
after transform: SymbolId(2): [ReferenceId(1), ReferenceId(3), ReferenceId(7), ReferenceId(9), ReferenceId(20), ReferenceId(22), ReferenceId(34), ReferenceId(36), ReferenceId(39), ReferenceId(41), ReferenceId(52), ReferenceId(54)]
rebuilt        : SymbolId(3): [ReferenceId(6), ReferenceId(7), ReferenceId(23), ReferenceId(24)]
Symbol reference IDs mismatch for "G":
after transform: SymbolId(5): [ReferenceId(11)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "G2":
after transform: SymbolId(16): [ReferenceId(26)]
rebuilt        : SymbolId(15): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["arrayFilter", "arrayMap", "f00", "f01", "f02", "f03", "f10", "f11", "f12", "f13", "f20", "f21", "f22", "f23", "f30", "f31", "f40"]
rebuilt        : ScopeId(0): ["arrayFilter", "arrayMap", "f00", "f01", "f02", "f03", "f10", "f11", "f12", "f13", "f20", "f21", "f22", "f23", "f30", "f31", "f40", "fn"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
Symbol flags mismatch for "fn":
after transform: SymbolId(70): SymbolFlags(BlockScopedVariable | ConstVariable | TypeAlias)
rebuilt        : SymbolId(32): SymbolFlags(BlockScopedVariable | ConstVariable)
Symbol span mismatch for "fn":
after transform: SymbolId(70): Span { start: 1594, end: 1596 }
rebuilt        : SymbolId(32): Span { start: 1621, end: 1627 }
Symbol reference IDs mismatch for "fn":
after transform: SymbolId(70): [ReferenceId(118)]
rebuilt        : SymbolId(32): []
Symbol redeclarations mismatch for "fn":
after transform: SymbolId(70): [Span { start: 1621, end: 1627 }]
rebuilt        : SymbolId(32): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericContextualTypes3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericFunctionParameters.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["s", "x", "x1", "x2", "x3"]
rebuilt        : ScopeId(0): ["x", "x1", "x2", "x3"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
Reference symbol mismatch for "s":
after transform: SymbolId(15) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Array", "f1", "f2", "f3"]
rebuilt        : ["f1", "f2", "f3", "s"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesJsx.tsx
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13)]
Unresolved references mismatch:
after transform: ["Partial", "Record", "require"]
rebuilt        : ["require"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/keyofInferenceIntersectsResults.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/keyofInferenceLowerPriorityThanReturn.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2)]
Unresolved references mismatch:
after transform: ["Col", "ConflictTarget", "Error", "Table", "Write"]
rebuilt        : ["ConflictTarget", "Error"]
Unresolved reference IDs mismatch for "ConflictTarget":
after transform: [ReferenceId(22), ReferenceId(24), ReferenceId(33), ReferenceId(39)]
rebuilt        : [ReferenceId(3)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/noInferRedeclaration.ts
semantic error: Unresolved references mismatch:
after transform: ["NoInfer"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference1.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["assign", "baz1", "createTest", "createTestAsync", "destructure", "foo", "foo1", "func", "get", "isNonVoid", "isVoid", "mbp", "res", "result", "value", "x1", "x2", "y"]
rebuilt        : ScopeId(0): ["assign", "baz1", "createTest", "createTestAsync", "destructure", "foo", "foo1", "func", "get", "isNonVoid", "isVoid", "res", "result", "value", "x1", "x2", "y"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(10), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(9), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18)]
Reference symbol mismatch for "mbp":
after transform: SymbolId(35) "mbp"
rebuilt        : <None>
Reference symbol mismatch for "mbp":
after transform: SymbolId(35) "mbp"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["Math", "Object", "Promise", "f1", "f2", "pigify", "undefined"]
rebuilt        : ["Math", "Object", "Promise", "f1", "f2", "mbp", "pigify", "undefined"]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(54), ReferenceId(56)]
rebuilt        : [ReferenceId(27)]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/unionAndIntersectionInference3.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["MyComponent", "_asyncToGenerator", "a", "ab", "b", "f1", "f2", "g", "g1", "g2", "sa", "sx", "x1", "x2", "y1", "y2", "z"]
rebuilt        : ScopeId(0): ["_asyncToGenerator", "g", "x1", "x2", "y1", "y2", "z"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(4), ScopeId(6), ScopeId(8), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Reference symbol mismatch for "f1":
after transform: SymbolId(16) "f1"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(18) "f2"
rebuilt        : <None>
Reference symbol mismatch for "f2":
after transform: SymbolId(18) "f2"
rebuilt        : <None>
Reference symbol mismatch for "f1":
after transform: SymbolId(16) "f1"
rebuilt        : <None>
Reference symbol mismatch for "g1":
after transform: SymbolId(23) "g1"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(24) "g2"
rebuilt        : <None>
Reference symbol mismatch for "g2":
after transform: SymbolId(24) "g2"
rebuilt        : <None>
Reference symbol mismatch for "g1":
after transform: SymbolId(23) "g1"
rebuilt        : <None>
Reference symbol mismatch for "sa":
after transform: SymbolId(29) "sa"
rebuilt        : <None>
Reference symbol mismatch for "sx":
after transform: SymbolId(30) "sx"
rebuilt        : <None>
Reference symbol mismatch for "sa":
after transform: SymbolId(29) "sa"
rebuilt        : <None>
Reference symbol mismatch for "sx":
after transform: SymbolId(30) "sx"
rebuilt        : <None>
Reference symbol mismatch for "MyComponent":
after transform: SymbolId(47) "MyComponent"
rebuilt        : <None>
Reference symbol mismatch for "ab":
after transform: SymbolId(53) "ab"
rebuilt        : <None>
Reference symbol mismatch for "a":
after transform: SymbolId(55) "a"
rebuilt        : <None>
Reference symbol mismatch for "b":
after transform: SymbolId(56) "b"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterator", "Component", "Iterable", "Iterator", "Omit", "Promise", "PromiseLike", "arguments", "concatMaybe", "foo", "foo1", "foo2", "true", "withRouter"]
rebuilt        : ["MyComponent", "a", "ab", "arguments", "b", "concatMaybe", "f1", "f2", "foo", "foo1", "foo2", "g1", "g2", "sa", "sx", "withRouter"]

tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/widenedTypes/strictNullChecksNoWidening.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeCallSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5)]

tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeIndexSignatures.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8)]

tasks/coverage/typescript/tests/cases/conformance/types/union/contextualTypeWithUnionTypeMembers.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(5), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(28), ScopeId(29), ScopeId(31), ScopeId(33), ScopeId(34), ScopeId(35), ScopeId(36)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(11), ScopeId(12), ScopeId(13), ScopeId(14), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(23), ScopeId(24)]
Unresolved references mismatch:
after transform: ["Array"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/union/discriminatedUnionTypes3.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4)]
rebuilt        : ScopeId(0): [ScopeId(1)]
Unresolved references mismatch:
after transform: ["true", "undefined"]
rebuilt        : ["undefined"]

tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures2.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3)]
rebuilt        : ScopeId(0): []
Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures3.ts
semantic error: Symbol reference IDs mismatch for "f1":
after transform: SymbolId(0): [ReferenceId(0)]
rebuilt        : SymbolId(0): []
Symbol reference IDs mismatch for "f2":
after transform: SymbolId(2): [ReferenceId(1)]
rebuilt        : SymbolId(2): []
Symbol reference IDs mismatch for "f3":
after transform: SymbolId(4): [ReferenceId(2)]
rebuilt        : SymbolId(4): []
Symbol reference IDs mismatch for "f4":
after transform: SymbolId(6): [ReferenceId(3)]
rebuilt        : SymbolId(6): []
Symbol reference IDs mismatch for "f5":
after transform: SymbolId(9): [ReferenceId(4)]
rebuilt        : SymbolId(9): []
Symbol reference IDs mismatch for "f6":
after transform: SymbolId(12): [ReferenceId(5)]
rebuilt        : SymbolId(12): []
Symbol reference IDs mismatch for "f7":
after transform: SymbolId(15): [ReferenceId(6)]
rebuilt        : SymbolId(15): []

tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures7.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["f", "result"]
rebuilt        : ScopeId(0): ["result"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1)]
rebuilt        : ScopeId(0): []
Reference symbol mismatch for "f":
after transform: SymbolId(2) "f"
rebuilt        : <None>
Unresolved references mismatch:
after transform: []
rebuilt        : ["f"]

tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeIndexSignature.ts
semantic error: Unresolved references mismatch:
after transform: ["Date"]
rebuilt        : []

tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReduction.ts
semantic error: Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2)]
rebuilt        : ScopeId(0): []

tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbols.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "C0", "C1", "N", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "c", "ce0", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constType", "constTypeAndCall", "fromAny", "funcInferredReturnType", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "i", "l", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o", "o2", "o3", "o4", "promiseForConstCall", "s", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
rebuilt        : ScopeId(0): ["C", "C0", "C1", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "ce0", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constTypeAndCall", "fromAny", "funcInferredReturnType", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o2", "o3", "o4", "promiseForConstCall", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(33), ScopeId(34), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(50), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(57), ScopeId(58), ScopeId(59), ScopeId(60), ScopeId(61), ScopeId(62), ScopeId(63), ScopeId(65), ScopeId(66), ScopeId(71), ScopeId(72)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(59)]
Scope children mismatch:
after transform: ScopeId(50): [ScopeId(51)]
rebuilt        : ScopeId(59): []
Symbol reference IDs mismatch for "constCall":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(5): [ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(33), ReferenceId(54), ReferenceId(110), ReferenceId(111)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(34): [ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(61), ReferenceId(63), ReferenceId(231), ReferenceId(233), ReferenceId(235), ReferenceId(237)]
rebuilt        : SymbolId(44): [ReferenceId(76), ReferenceId(79), ReferenceId(81), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93)]
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(35) "c"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(51) "i"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(56) "l"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(68) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(65) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterableIterator", "IterableIterator", "Math", "N", "Promise", "Symbol", "arguments", "f", "g", "require"]
rebuilt        : ["Math", "N", "Promise", "Symbol", "arguments", "c", "constType", "f", "g", "i", "l", "o", "require", "s"]
Unresolved reference IDs mismatch for "N":
after transform: [ReferenceId(86), ReferenceId(90), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(99), ReferenceId(101), ReferenceId(102), ReferenceId(110), ReferenceId(111), ReferenceId(113), ReferenceId(114), ReferenceId(116), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(130), ReferenceId(132), ReferenceId(137), ReferenceId(138), ReferenceId(140), ReferenceId(141), ReferenceId(145), ReferenceId(147), ReferenceId(149), ReferenceId(150), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(160), ReferenceId(162)]
rebuilt        : [ReferenceId(115), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(122), ReferenceId(123), ReferenceId(135), ReferenceId(137), ReferenceId(141), ReferenceId(143), ReferenceId(157), ReferenceId(160), ReferenceId(166), ReferenceId(169), ReferenceId(173), ReferenceId(175), ReferenceId(179), ReferenceId(181), ReferenceId(185), ReferenceId(187), ReferenceId(189), ReferenceId(190), ReferenceId(194), ReferenceId(196), ReferenceId(198), ReferenceId(200), ReferenceId(202)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(82), ReferenceId(164)]
rebuilt        : [ReferenceId(109)]

tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarations.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["C", "C0", "C1", "N", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "c", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constType", "constTypeAndCall", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "i", "l", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o", "o2", "o4", "promiseForConstCall", "s", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
rebuilt        : ScopeId(0): ["C", "C0", "C1", "_N$s", "_N$s2", "_asyncFuncReturnConstCall", "_asyncFuncReturnLetCall", "_asyncFuncReturnVarCall", "_asyncGenFuncYieldConstCall", "_asyncGenFuncYieldLetCall", "_asyncGenFuncYieldVarCall", "_asyncToGenerator", "_defineProperty", "_wrapAsyncGenerator", "arrayOfConstCall", "asyncFuncReturnConstCall", "asyncFuncReturnLetCall", "asyncFuncReturnVarCall", "asyncGenFuncYieldConstCall", "asyncGenFuncYieldLetCall", "asyncGenFuncYieldVarCall", "constCall", "constInitToCReadonlyCall", "constInitToCReadonlyCallWithIndexedAccess", "constInitToCReadonlyCallWithTypeQuery", "constInitToCReadonlyStaticCall", "constInitToCReadonlyStaticCallWithTypeQuery", "constInitToCReadonlyStaticType", "constInitToCReadonlyStaticTypeAndCall", "constInitToCReadonlyStaticTypeAndCallWithTypeQuery", "constInitToCReadonlyStaticTypeWithTypeQuery", "constInitToCReadwriteCall", "constInitToCReadwriteCallWithIndexedAccess", "constInitToCReadwriteCallWithTypeQuery", "constInitToCReadwriteStaticCall", "constInitToCReadwriteStaticCallWithTypeQuery", "constInitToConstCall", "constInitToConstCallWithTypeQuery", "constInitToConstDeclAmbient", "constInitToConstDeclAmbientWithTypeQuery", "constInitToIReadonlyType", "constInitToIReadonlyTypeWithIndexedAccess", "constInitToIReadonlyTypeWithTypeQuery", "constInitToLReadonlyNestedType", "constInitToLReadonlyNestedTypeWithIndexedAccess", "constInitToLReadonlyNestedTypeWithTypeQuery", "constInitToLReadonlyType", "constInitToLReadonlyTypeWithIndexedAccess", "constInitToLReadonlyTypeWithTypeQuery", "constInitToLetCall", "constInitToVarCall", "constTypeAndCall", "funcReturnConstCall", "funcReturnConstCallWithTypeQuery", "funcReturnLetCall", "funcReturnVarCall", "genFuncYieldConstCall", "genFuncYieldConstCallWithTypeQuery", "genFuncYieldLetCall", "genFuncYieldVarCall", "letCall", "letInitToConstCall", "letInitToConstDeclAmbient", "letInitToLetCall", "letInitToVarCall", "o2", "o4", "promiseForConstCall", "varCall", "varInitToConstCall", "varInitToConstDeclAmbient", "varInitToLetCall", "varInitToVarCall"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(15), ScopeId(16), ScopeId(17), ScopeId(18), ScopeId(19), ScopeId(20), ScopeId(21), ScopeId(22), ScopeId(25), ScopeId(26), ScopeId(27), ScopeId(33), ScopeId(34), ScopeId(40), ScopeId(43), ScopeId(44), ScopeId(45), ScopeId(46), ScopeId(47), ScopeId(48), ScopeId(49), ScopeId(50), ScopeId(51), ScopeId(52), ScopeId(53), ScopeId(54), ScopeId(55), ScopeId(56), ScopeId(58), ScopeId(59), ScopeId(64), ScopeId(65)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(5), ScopeId(6), ScopeId(7), ScopeId(8), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(18), ScopeId(19), ScopeId(21), ScopeId(22), ScopeId(24), ScopeId(25), ScopeId(27), ScopeId(29), ScopeId(30), ScopeId(32), ScopeId(34), ScopeId(35), ScopeId(36), ScopeId(45), ScopeId(47), ScopeId(48), ScopeId(50), ScopeId(52), ScopeId(53)]
Symbol reference IDs mismatch for "constCall":
after transform: SymbolId(0): [ReferenceId(4), ReferenceId(8), ReferenceId(12), ReferenceId(16), ReferenceId(17), ReferenceId(20), ReferenceId(23), ReferenceId(24), ReferenceId(25), ReferenceId(29), ReferenceId(30), ReferenceId(31), ReferenceId(34), ReferenceId(83), ReferenceId(84)]
rebuilt        : SymbolId(5): [ReferenceId(7), ReferenceId(11), ReferenceId(15), ReferenceId(19), ReferenceId(21), ReferenceId(24), ReferenceId(25), ReferenceId(28), ReferenceId(33), ReferenceId(54), ReferenceId(110), ReferenceId(111)]
Symbol reference IDs mismatch for "C":
after transform: SymbolId(33): [ReferenceId(42), ReferenceId(43), ReferenceId(44), ReferenceId(45), ReferenceId(46), ReferenceId(47), ReferenceId(48), ReferenceId(49), ReferenceId(50), ReferenceId(51), ReferenceId(52), ReferenceId(53), ReferenceId(54), ReferenceId(61), ReferenceId(63), ReferenceId(217), ReferenceId(219), ReferenceId(221), ReferenceId(223)]
rebuilt        : SymbolId(43): [ReferenceId(76), ReferenceId(79), ReferenceId(81), ReferenceId(84), ReferenceId(86), ReferenceId(87), ReferenceId(88), ReferenceId(89), ReferenceId(90), ReferenceId(91), ReferenceId(92), ReferenceId(93)]
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "constType":
after transform: SymbolId(3) "constType"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "c":
after transform: SymbolId(34) "c"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "i":
after transform: SymbolId(50) "i"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "l":
after transform: SymbolId(55) "l"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "o":
after transform: SymbolId(67) "o"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(64) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["AsyncIterableIterator", "IterableIterator", "Math", "N", "Promise", "Symbol", "arguments", "f", "g", "require"]
rebuilt        : ["Math", "N", "Promise", "Symbol", "arguments", "c", "constType", "f", "g", "i", "l", "o", "require", "s"]
Unresolved reference IDs mismatch for "N":
after transform: [ReferenceId(86), ReferenceId(90), ReferenceId(94), ReferenceId(96), ReferenceId(98), ReferenceId(99), ReferenceId(101), ReferenceId(102), ReferenceId(110), ReferenceId(111), ReferenceId(113), ReferenceId(114), ReferenceId(116), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(130), ReferenceId(132), ReferenceId(137), ReferenceId(138), ReferenceId(140), ReferenceId(141), ReferenceId(145), ReferenceId(147), ReferenceId(149), ReferenceId(150), ReferenceId(154), ReferenceId(156), ReferenceId(158), ReferenceId(160), ReferenceId(162)]
rebuilt        : [ReferenceId(115), ReferenceId(117), ReferenceId(119), ReferenceId(120), ReferenceId(122), ReferenceId(123), ReferenceId(135), ReferenceId(137), ReferenceId(141), ReferenceId(143), ReferenceId(157), ReferenceId(160), ReferenceId(166), ReferenceId(169), ReferenceId(173), ReferenceId(175), ReferenceId(179), ReferenceId(181), ReferenceId(185), ReferenceId(187), ReferenceId(189), ReferenceId(190), ReferenceId(194), ReferenceId(196), ReferenceId(198), ReferenceId(200), ReferenceId(202)]
Unresolved reference IDs mismatch for "Promise":
after transform: [ReferenceId(82), ReferenceId(164)]
rebuilt        : [ReferenceId(109)]

tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarationsErrors.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["ClassWithPrivateNamedAccessors", "ClassWithPrivateNamedMethods", "ClassWithPrivateNamedProperties", "_defineProperty", "classExpression", "funcInferredReturnType", "obj", "s"]
rebuilt        : ScopeId(0): ["ClassWithPrivateNamedAccessors", "ClassWithPrivateNamedMethods", "ClassWithPrivateNamedProperties", "_defineProperty", "classExpression", "funcInferredReturnType", "obj"]
Scope children mismatch:
after transform: ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(4), ScopeId(7), ScopeId(9), ScopeId(10), ScopeId(12), ScopeId(13), ScopeId(15), ScopeId(16), ScopeId(19)]
rebuilt        : ScopeId(0): [ScopeId(1), ScopeId(2), ScopeId(3), ScopeId(6), ScopeId(7), ScopeId(9), ScopeId(12)]
Scope children mismatch:
after transform: ScopeId(7): [ScopeId(8)]
rebuilt        : ScopeId(6): []
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Reference symbol mismatch for "s":
after transform: SymbolId(0) "s"
rebuilt        : <None>
Unresolved references mismatch:
after transform: ["undefined"]
rebuilt        : ["s", "undefined"]

tasks/coverage/typescript/tests/cases/conformance/typings/typingsLookupAmd.ts
semantic error: Bindings mismatch:
after transform: ScopeId(0): ["B"]
rebuilt        : ScopeId(0): []

