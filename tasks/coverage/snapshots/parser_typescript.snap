commit: 261630d6

parser_typescript Summary:
AST Parsed     : 3864/3865 (99.97%)
Positive Passed: 3857/3865 (99.79%)
Negative Passed: 923/2006 (46.01%)
Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/Symbols/ES5SymbolProperty6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientDeclarationsPatterns_merging3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleInsideNonAmbient.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/ambient/ambientExternalModuleInsideNonAmbientExternalModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction10_es2017.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction3_es2017.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction_allowJs.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/asyncAwaitIsolatedModules_es2017.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_incorrectThisType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration13_es2017.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration3_es2017.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncAliasReturnType_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction10_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction3_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunctionCapturesArguments_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/asyncDeclare_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration13_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration15_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration16_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration3_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclarationCapturesArguments_es5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction10_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction3_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncAwaitIsolatedModules_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncDeclare_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncImportedPromise_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncQualifiedReturnType_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration13_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration15_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration3_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractGeneric.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInheritance2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMixedWithModifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classAndInterfaceMergeConflictingMembers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classExtendingClassLikeType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classDeclarations/classImplementsMergedClassInterface.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterBindingPattern.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classExpressions/classWithStaticFieldInParameterInitializer.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock23.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlockUseBeforeDef2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlockUseBeforeDef5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/classWithoutExplicitConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/automaticConstructors/derivedClassWithoutExplicitConstructor3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorAccessibility5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/classConstructorOverloadsAccessibility.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorDefaultValuesReferencingThis.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorOverloadsWithDefaultValues.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorParameterProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/constructorParameterProperties2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyInConstructorParameters.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassParameterProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsWithThisArg.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperStatementPosition.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superPropertyInConstructorBeforeSuperCall.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedClassPropertyAccessibleWithinNestedSubclass.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/accessibility/protectedInstanceMemberAccessibility.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/classTypes/staticPropertyNotInClassType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/classWithBaseClassButNoConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/constructorFunctionTypes/classWithConstructors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/inheritanceAndOverriding/derivedClassWithPrivateInstanceShadowingPublicInstance.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/superInStaticMembers1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInInstanceMember.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndObjectRestSpread.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadSuper.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadSuperUseDefineForClassFields.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameCircularReference.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameDeclarationMerging.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameEmitHelpers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethod.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassAccessorsShadowing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassFieldShadowing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedClassMethodShadowing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameReadonly.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameSetterNoGetter.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticEmitHelpers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldAccess.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethod.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodAsync.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndDecorators.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndStaticFields.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesConstructorChain-1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesConstructorChain-2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInNestedClasses-1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInNestedClasses-2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUnique-4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateNamesUseBeforeDef.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/members/privateNames/privateWriteOnlyAccessorRead.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAbstractClasses.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessModifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/mixinAccessors3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/assignParameterPropertyToPropertyDeclarationES2022.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/assignParameterPropertyToPropertyDeclarationESNext.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorExperimentalDecorators.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/defineProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializerReferencingConstructorLocals.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/initializerReferencingConstructorParameters.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionsWithPublicPrivateOverloads.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyOverridesAccessors6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/redeclaredProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/redefinedPararameterProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/strictPropertyInitialization.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnum4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumNoObjectPrototypePropertyAccess.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/constEnumPropertyAccess2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/constEnums/importElisionConstEnumMerge1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/assertionTypePredicates1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowAliasing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowDeleteOperator.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowForStatement.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowGenericTypes.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIterationErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowIterationErrorsAsync.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/controlFlowOptionalChain.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/controlFlow/exhaustiveSwitchStatements1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructableDecoratorOnClass01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/constructor/decoratorOnClassConstructor1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/decoratorOnClass8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/decorators/decoratorCallGeneric.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/multiline.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/ts-expect-error-js.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/directives/ts-expect-error.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionErrorInES2015.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNestedES2015.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNestedES20152.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionNoModuleKindSpecified.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumConstantMembers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/enums/enumMergingErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useObjectValuesAndEntries3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2017/useSharedArrayBuffer6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisAmbientModules.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisBlockscopedProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisCollision.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisGlobalExportAsGlobal.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisPropertyAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisReadonlyProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisUnknown.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisUnknownNoImplicitAny.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2019/globalThisVarDeclaration.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/es2020IntlAPIs.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2020/modules/exportAsNamespace_nonExistent.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2021/logicalAssignment/logicalAssignment5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es2022/es2024SharedMemory.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es5/es5DateAPIs.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolDeclarationEmit12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty36.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty39.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty42.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty44.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty52.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty53.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty54.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty59.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolProperty7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/Symbols/symbolType4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionThisCapturing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionThisCapturingES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments02.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments03.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments04.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments05.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments06.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments07.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments09.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments15.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments16.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments17.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments18.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments19.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classDeclaration/superCallBeforeThisAccessing7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/classExpressions/typeArgumentInferenceWithClassExpression2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames12_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames12_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames15_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames15_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames17_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames17_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames19_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames19_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames21_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames21_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames23_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames23_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames2_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames2_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames30_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames30_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames35_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames35_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames46_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames46_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames48_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames48_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames51_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames51_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames5_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames5_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames6_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames6_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames8_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames8_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames9_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames9_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit3_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit3_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit4_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit4_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit6_ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNamesDeclarationEmit6_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/declarationsAndAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringArrayBindingPatternAndAssignment4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringControlFlow.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringInFunctionType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES5iterable.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringParameterProperties5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/destructuringSpread.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern25.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern28.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/iterableArrayPattern7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/missingAndExcessProperties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/nonIterableRestElement3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/optionalBindingParameters3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithAssignmentPattern2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithAssignmentPattern4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/destructuring/restElementWithBindingPattern2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of30.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/for-ofStatements/for-of39.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration3_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge02.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge03.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/defaultExportsCannotMerge04.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportSpellingSuggestion.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportStar-amd.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/exportStar.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports02.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports04.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/modules/multipleDefaultExports05.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/restParameters/readonlyRestParameters.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorFromNoneExistingIdentifier.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/arraySpreadImportHelpers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/arraySpreadInCall.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInArray6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/spread/iteratorSpreadInCall4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution1_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/taggedTemplateStringsWithOverloadResolution3_ES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInDeleteExpression.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInDeleteExpressionES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInSwitchAndCase.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/templates/templateStringInSwitchAndCaseES6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression11_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext3.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorInAmbientContext4.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorOverloads3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck18.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck20.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSCanBeAssigned1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSCannotBeAssigned.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithInvalidSimpleUnaryExpressionOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNullValueAndInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithNullValueAndValidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithOnlyNullValueOrUndefinedValue.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithUndefinedValueAndInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorWithUndefinedValueAndValidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-parameterDecorators.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAbstract.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAbstractAccessor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-nonStaticAmbient.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/classDeclaration/fields/esDecorators-classDeclaration-fields-staticAmbient.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/esDecorators/esDecorators-arguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/asOperator/asOperatorAmbiguity.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentLHSCanBeAssigned.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/assignmentOperator/compoundArithmeticAssignmentWithInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithNullValueAndInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithNullValueAndValidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithOnlyNullValueOrUndefinedValue.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithUndefinedValueAndInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/arithmeticOperator/arithmeticOperatorWithUndefinedValueAndValidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithIdenticalPrimitiveType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/comparisonOperator/comparisonOperatorWithOneOperandIsNull.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/inOperator/inOperatorWithInvalidOperands.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/instanceofOperator/instanceofOperatorWithInvalidOperands.es2015.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalAndOperator/logicalAndOperatorStrictMode.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalAndOperator/logicalAndOperatorWithEveryType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/logicalOrExpressionIsContextuallyTyped.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/binaryOperators/logicalOrOperator/logicalOrOperatorWithEveryType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditionIsObjectType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsAnyType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/conditonalOperator/conditionalOperatorConditoinIsStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/generatedContextualTyping.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/contextualTyping/parenthesizedContexualTyping2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callOverload.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithMissingVoid.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/callWithSpread5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/grammarAmbiguities.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolution.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolutionClassConstructors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/functionCalls/overloadResolutionConstructors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/identifiers/scopeResolutionIdentifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/literals/literals.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterBindingPattern.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperatorInParameterInitializer.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/delete/deleteChain.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterBindingPattern.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/optionalChainingInParameterInitializer.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/optionalChaining/privateIdentifierChain/privateIdentifierChain.1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccess.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessStringIndexSignature.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessStringIndexSignatureNoImplicitAny.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessWidening.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/superPropertyAccess/superSymbolIndexedAccess4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInInvalidContexts.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInInvalidContextsExternalModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/thisKeyword/thisInObjectLiterals.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/constAssertions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/duplicatePropertiesInTypeAssertions01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeAssertions/duplicatePropertiesInTypeAssertions02.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionOfFormThisErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMember.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardOfFormThisMemberErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsInIfStatement.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithAny.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOf.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOfByConstructorSignature.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typeGuardsWithInstanceOfBySymbolHasInstance.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeGuards/typePredicateOnVariableDeclaration01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfactionWithDefaultExport.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_errorLocations1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_optionalMemberConformance.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propNameConstraining.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_propertyNameFulfillment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithBooleanType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorWithStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithBooleanType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorWithStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithBooleanType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorWithStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithBooleanType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorWithStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithAnyOtherType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithBooleanType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithEnumType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithNumberType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorWithStringType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/valuesAndReferences/assignmentToParenthesizedIdentifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/expressions/valuesAndReferences/assignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/circularReference.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/duplicateExportAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/es6/es6modulekindWithES5Target9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/esnext/esnextmodulekindWithES5Target9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportAssignmentAndDeclaration.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectAMD.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectCommonJS.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectSystem.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportClassNameWithObjectUMD.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportDefaultClassNameWithObject.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/exportNonLocalDeclarations.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/importTsBeforeDTs.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/importsImplicitlyReadonly.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/initializersInDeclarations.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/moduleResolutionWithoutExtension8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/multipleExportDefault6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/cjsErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/rewriteRelativeImportExtensions/packageJsonImportsErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelModuleDeclarationAndFile.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/allowsImportingTsExtension.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/chained.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/chained2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/computedPropertyName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/enums.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_moduleSpecifier.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportDefault.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/extendsClause.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/filterNamespace_import.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/generic.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_default.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_namedImports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importClause_namespaceImport.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEquals3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/importEqualsDeclaration.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/namespaceMemberAccess.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/renamed.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnly/typeOnlyESMImportFromCJS.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typeOnlyMerge3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/typesOnlyExternalModuleStillHasInstance.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/umd8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/valuesMergingAcrossModules.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxAmbientConstEnum.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxInternalImportEquals.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxNoElisionCJS.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxNoElisionESM.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/externalModules/verbatimModuleSyntaxRestrictionsCJS.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/fixSignatureCaching.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionImplementationErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionImplementations.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadCompatibilityWithVoid01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/functionOverloadErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/parameterInitializersForwardReferencing1_es6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/functions/strictBindCallApply1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/generators/generatorAssignability.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAssertion/importAssertion2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAssertion/importAssertion3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importAttributes/importAttributes3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/dynamicImportDefer.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/importDefer/importDeferNamespace.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/genericAndNonGenericInterfaceWithTheSameName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/mergedInterfacesWithConflictingPropertyNames.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesDifferingByTypeParameterName2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesWithDifferentConstraints.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoGenericInterfacesWithTheSameNameButDifferentArity.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoInterfacesDifferentRootModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/declarationMerging/twoInterfacesDifferentRootModule2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/implementingAnInterfaceExtendingClassWithPrivates2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModulesExportedGenericFunctionAndGenericClassStaticFunctionOfTheSameName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithModulesExportedGenericFunctionAndNonGenericClassStaticFunctionOfTheSameName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticFunctionAndExportedFunctionThatShareAName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ClassAndModuleThatMergeWithStaticVariableAndExportedVarThatShareAName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndClassWithSameNameAndCommonRoot.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/ModuleAndFunctionWithSameNameAndCommonRoot.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/DeclarationMerging/TwoInternalModulesThatMergeEachWithExportedClassesOfTheSameName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/codeGeneration/importStatementsInterfaces.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedClasses.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedEnums.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedFunctions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedImportAlias.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/exportDeclarations/ModuleWithExportedAndNonExportedVariables.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/invalidImportAliasIdentifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/importDeclarations/shadowedInternalModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/InvalidNonInstantiatedModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/internalModules/moduleDeclarations/invalidNestedModules.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocOptionalParamOrder.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocReturnTag1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocReturnTag2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag15.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocSatisfiesTag7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypeTag2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkJsdocTypedefOnlySourceFile.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/checkOtherObjectAssignProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/constructorTagOnObjectLiteralMethod.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassLikeHeuristic.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsDefaultsErr.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/enumTag.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/errorOnFunctionReturnType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importDeferJsdoc.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag15.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/importTag4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugmentsMissingType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocAugments_noExtends.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_class.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_missingType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocImplements_properties.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocOuterTypeParameters3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParamTag2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocParseBackquotedParamName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrefixPostfixParsing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocPrivateName2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTag8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTemplateTagDefault.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocThisType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeFromChainedAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTagCast.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/jsdocTypeTagRequiredParameters.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/overloadTag1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/overloadTag2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/paramTagWrapping.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/syntaxErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/thisTag3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefCrossModule5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefInnerNamepaths.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsdoc/typedefTagWrapping.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenCanBeTupleType.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty13.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty14.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty4.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty5.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/checkJsxChildrenProperty7.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/correctlyMarkAliasAsReferences3.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxAndJsxFragPragma.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryDeclarationsLocalTypes.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryLocalTypeGlobalFallback.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/inline/inlineJsxFactoryWithFragmentIsError.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxSpreadOverwritesAttributeStrict.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformCustomImport.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformCustomImportPragma.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformKeyPropCustomImport.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/jsxs/jsxJsxsCjsTransformKeyPropCustomImportPragma.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution1.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution3.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution4.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution5.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxAttributeResolution6.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName3.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxDynamicTagName7.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution1.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution10.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution12.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution15.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution6.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution7.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution8.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxElementResolution9.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxEmit3.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxIntrinsicAttributeErrors.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxNamespacedTagName2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactComponentWithDefaultTypeParameter3.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxReactEmit7.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSfcReturnUndefinedStrictNullChecks.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution16.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution17.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadAttributesResolution5.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxSpreadInvalidType.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload1.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload4.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload5.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponents2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments4.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionElementType6.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/jsx/tsxUnionTypeComponent2.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerConditionsExcludesNode.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerNodeModules1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/bundler/bundlerSyntaxRestrictions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/node10Alternateresult_noTypes.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/nodeModulesAtTypesPriority.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeCache.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/moduleResolution/resolutionModeTripleSlash5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeAllowJsPackageSelfName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsConditionalPackageExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsGeneratedNameCollisions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportMeta.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackageExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackageImports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackagePatternExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsPackagePatternExportsTrailers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsTopLevelAwait.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/esmModuleExports1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/esmModuleExports3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModules1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSEmit1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM1_emptyPackageJson.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM2_cjsPackageJson.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM3_modulePackageJson.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesCJSResolvingToESM4_noPackageJson.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesConditionalPackageExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesDeclarationEmitWithPackageExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsBlocksSpecifierResolution.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsBlocksTypesVersions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesExportsSourceTs.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesForbidenSyntax.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesGeneratedNameCollisions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAssertions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributes.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmit1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmit2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportAttributesModeDeclarationEmitErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportMeta.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmit1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmit2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesImportModeDeclarationEmitErrors1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesJson.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackageExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackageImports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExportsExclude.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesPackagePatternExportsTrailers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesResolveJsonModule.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesSynchronousCallErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTopLevelAwait.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodeModulesTripleSlashReferenceModeOverrideModeError.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodePackageSelfName.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/node/nodePackageSelfNameScoped.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override11.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/overrideKeywordOrder.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/override/override_js3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript3/Accessors/parserES3Accessors1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript3/Accessors/parserES3Accessors3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserGetAccessorWithTypeParameters1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserSetAccessorWithTypeAnnotation1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserSetAccessorWithTypeParameters1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/CatchClauses/parserCatchClauseWithTypeAnnotation1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClass2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration18.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration3.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserCommaInTypeMemberList2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnStatementInBlock4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration2.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserAmbiguityWithBinaryOperator4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserCastVersusArrowFunction1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserConstructorAmbiguity3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserMemberAccessExpression1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserMemberAccessOffOfGenericType1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessor1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration17.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration2.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration4.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ModuleDeclarations/parserModuleDeclaration5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList15.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList16.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList17.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RealWorld/parserindenter.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509534.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509618.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509693.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parserTernaryAndCommaOperators1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpression3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserBlockStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserDebuggerStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserDoStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement20.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserEmptyStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserExpressionStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserIfStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserLabeledStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserSwitchStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserThrowStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserTryStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserVariableStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserVariableStatement2.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWhileStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode16.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode3-negative.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode6-negative.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/Symbols/parserES5SymbolProperty9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parser15.4.4.14-9-2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserNoASIOnCallAfterFunctionExpression1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.2_A1.5_T2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.3_A1.1_T2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserS7.6_A4.2_T1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/parserUnicode1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName41.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement1.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement20.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/assignmentToVoidZero2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/classCanExtendConstructorFunction.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/conflictingCommonJSES2015Exports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/constructorFunctions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/expandoOnAlias.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/exportNestedNamespaces2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/importAliasModuleExports.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/jsContainerMergeTsDeclaration3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportAliasUnknown.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportAssignment7.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportDuplicateAlias.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportWithExportPropertyAssignment4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportsAliasLoop1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/moduleExportsAliasLoop2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/plainJSTypeErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/prototypePropertyAssignmentMergeAcrossFiles2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/prototypePropertyAssignmentMergeWithInterfaceMethod.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/requireOfESWithPropertyAccess.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/thisPropertyAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment21.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment26.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment28.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment29.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPropertyAssignment36.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPrototypeAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeFromPrototypeAssignment2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/salsa/typeLookupInIIFE.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerClass2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral8.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral9.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.2_A1.5_T2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.3_A1.1_T2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.6_A4.2_T1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/scanner/ecmascript5/scannertest1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/everyTypeWithAnnotationAndInvalidInitializer.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.12.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsWithAsyncIteratorObject.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsWithIteratorObject.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsWithIteratorObject.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/breakStatements/invalidSwitchBreakStatement.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/breakStatements/switchBreakStatements.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatements.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsArrayErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsDestructuring4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of27.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of29.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of31.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of35.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of36.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck10.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck13.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-ofTypeCheck14.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/ifDoWhileStatements/ifDoWhileStatements.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/statements/returnStatements/invalidReturnStatements.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/assignAnyToEveryType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowExceptionVariableInCatchClause.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowFromAnyWithInstanceof.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/any/narrowFromAnyWithTypePredicate.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/asyncGenerators/types.asyncGenerators.es2018.2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/conditionalTypes1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypes1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/conditional/inferTypesWithExtends2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes02.tsx

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/contextualTypes/logicalAnd/contextuallyTypeLogicalAnd03.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeGeneric.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeLocalMissing.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNested.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNestedNoRef.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/import/importTypeNonString.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionAsWeakTypeSource.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionReduction.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionReductionStrict.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionTypeAssignment.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/intersection/intersectionWithIndexSignatures.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/circularIndexedAccessErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndIndexedAccess2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/keyof/keyofAndIndexedAccessErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/enumLiteralTypes3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/numericLiteralTypes3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringEnumLiteralTypes3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements03.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/stringLiteralsWithSwitchStatements04.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/literal/templateLiteralTypes1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeRelationships.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypeWithAny.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/mappedTypes6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/mapped/recursiveMappedTypes.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/duplicateNumericIndexers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/duplicateStringIndexers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/indexSignatures1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeHidingMembersOfObjectAssignmentCompat2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringAndNumberIndexSignatureToAny.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/objectTypeWithStringNamedNumericProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithPrivateConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithProtectedConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/members/typesWithPublicConstructor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAccessProperty.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveAssignError.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveNarrow.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/nonPrimitive/nonPrimitiveStrictNull.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignatureWithOptionalParameterAndInitializer.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithParameterInitializers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/specializedSignatureIsNotSubtypeOfNonSpecializedSignature.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/stringLiteralTypesInImplementationSignatures2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/constructSignatures/constructSignaturesWithOverloads2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/multipleNumericIndexers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/multipleStringIndexers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/indexSignatures/stringIndexerConstrainsPropertyDeclarations2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/methodSignaturesWithOverloads.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/objectTypeLiteral/objectTypeLiteralSyntax2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/boolean/invalidBooleanAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/null/validNullAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/number/invalidNumberAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/string/invalidStringAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/undefined/invalidUndefinedAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/primitives/void/invalidVoidAssignments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestArity.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestArityStrict.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/genericRestParameters3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/rest/objectRest.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/circularTypeofWithVarOrFunc.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofANonExportedType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofAnExportedType.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofThis.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/typeofTypeParameter.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.d.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/specifyingTypes/typeReferences/genericTypeReferenceWithoutTypeArgument3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadNegative.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/objectSpreadSetonlyAccessor.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadDuplicate.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadDuplicateExact.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadMethods.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadNonObject1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadObjectOrFalsy.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadOverwritesPropertyStrict.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadTypeVariable.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/spread/spreadUnion3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesOverloads05.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesWithVariousOperators02.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/declarationFiles.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeErrors2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInAccessors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInAccessorsNegative.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/thisTypeInFunctions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/typeRelationships.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/thisType/unionThisTypeInFunctions.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/arityAndOrderCompatibility01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/contextualTypeTupleEnd.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/contextualTypeWithTuple.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/optionalTupleElements1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/restTupleElements1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/unionsOfTupleTypes1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/variadicTuples1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/tuple/variadicTuples2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/intrinsicKeyword.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeAliases/intrinsicTypes.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callGenericFunctionWithIncorrectNumberOfTypeArguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/callNonGenericFunctionWithTypeArguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/functionConstraintSatisfaction2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiateGenericClassWithWrongNumberOfTypeArguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiateNonGenericTypeWithTypeArguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/propertyAccessOnTypeParameterWithConstraints5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typeParameterConstModifiers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/typesWithDuplicateTypeParameters.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithEnumIndexer.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembers5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersOptionality2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/assignmentCompatWithObjectMembersStringNumericNames.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/nullAssignedToUndefined.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/assignmentCompatibility/unionTypesAssignability.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/equalityStrictNulls.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/comparable/switchCaseWithUnionTypes01.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/subtypesAndSuperTypes/subtypingWithObjectMembers5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/genericCallWithObjectTypeArgsAndConstraints3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferences.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/typeInference/noInfer.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/typeRelationships/widenedTypes/initializersWidened.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/discriminatedUnionTypes2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures4.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures5.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeCallSignatures6.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeConstructSignatures.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeMembers.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypePropertyAccessibility.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReadonly.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeReduction2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/union/unionTypeWithIndexSignature.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsDeclarationsInJsErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsErrors.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/uniqueSymbol/uniqueSymbolsPropertyNames.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/unknown/unknownType1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/types/witness/witness.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsLookup3.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestion1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestion2.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestionBun1.ts

Expect Syntax Error: tasks/coverage/typescript/tests/cases/conformance/typings/typingsSuggestionBun2.ts

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts

  × Identifier `x` has already been declared
     ╭─[typescript/tests/cases/conformance/async/es6/asyncWithVarShadowing_es6.ts:130:14]
 129 │     }
 130 │     catch ({ x }) {
     ·              ┬
     ·              ╰── `x` has already been declared here
 131 │         var x;
     ·             ┬
     ·             ╰── It can not be redeclared here
 132 │     }
     ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts

  × Classes may not have a static property named prototype
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:53:12]
 52 │ class StaticPrototype {
 53 │     static prototype: number; // always an error
    ·            ─────────
 54 │     prototype: string; // ok
    ╰────

  × Classes may not have a static property named prototype
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:63:12]
 62 │ class StaticPrototypeFn {
 63 │     static prototype() {} // always an error
    ·            ─────────
 64 │     prototype() {} // ok
    ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:161:12]
 160 │ var StaticPrototype_Anonymous = class {
 161 │     static prototype: number; // always an error
     ·            ─────────
 162 │     prototype: string; // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:171:12]
 170 │ var StaticPrototypeFn_Anonymous = class {
 171 │     static prototype() {} // always an error
     ·            ─────────
 172 │     prototype() {} // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:278:16]
 277 │     export default class StaticPrototype {
 278 │         static prototype: number; // always an error
     ·                ─────────
 279 │         prototype: string; // ok
     ╰────

  × Classes may not have a static property named prototype
     ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/staticPropertyNameConflicts.ts:290:16]
 289 │     export default class StaticPrototypeFn {
 290 │         static prototype() {} // always an error
     ·                ─────────
 291 │         prototype() {} // ok
     ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext1.ts:2:10]
 1 │ var p1 = import("./0");
 2 │ function arguments() { } // this is allow as the file doesn't have implicit "use strict"
   ·          ─────────
   ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts

  × The only valid meta property for import is import.meta
   ╭─[typescript/tests/cases/conformance/es2019/importMeta/importMeta.ts:2:16]
 1 │ export let x = import.meta;
 2 │ export let y = import.metal;
   ·                ────────────
 3 │ export let z = import.import.import.malkovich;
   ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/es6/moduleExportsSystem/topLevelVarHoistingCommonJS.ts:64:1]
 63 │ // @ts-ignore
 64 │ with (_) {
    · ────
 65 │     var y = _;
    ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/externalModules/topLevelAwait.3.ts

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwait.3.ts:3:15]
 2 │ export {};
 3 │ declare const await: any;
   ·               ──────────
 4 │ declare class C extends await {}
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwait.3.ts:4:25]
 3 │ declare const await: any;
 4 │ declare class C extends await {}
   ·                         ─────
   ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName11.ts

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName11.ts:2:5]
 1 │ class C {
 2 │    [e]();
   ·     ─
 3 │ }
   ╰────

Expect to Parse: tasks/coverage/typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName11.ts

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName11.ts:2:5]
 1 │ class C {
 2 │    [e]();
   ·     ─
 3 │ }
   ╰────


  × TS(1183): An implementation cannot be declared in ambient contexts.
    ╭─[typescript/tests/cases/conformance/ambient/ambientErrors.ts:20:24]
 19 │ // Ambient function with function body
 20 │ declare function fn4() { };
    ·                        ▲
 21 │ 
    ╰────

  × Identifier expected. 'debugger' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/ambient/ambientModuleDeclarationWithReservedIdentifierInDottedPath.ts:3:23]
 2 │ 
 3 │ declare module chrome.debugger {
   ·                       ────────
 4 │     declare var tabId: number;
   ╰────

  × Identifier expected. 'debugger' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/ambient/ambientModuleDeclarationWithReservedIdentifierInDottedPath2.ts:1:26]
 1 │ declare namespace chrome.debugger {
   ·                          ────────
 2 │     declare var tabId: number;
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction5_es2017.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction6_es2017.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction7_es2017.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction8_es2017.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es2017/asyncArrowFunction/asyncArrowFunction9_es2017.ts:1:37]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                                     ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/async/es2017/await_unaryExpression_es2017_3.ts:2:7]
 1 │ async function bar1() {
 2 │     ++await 42; // Error
   ·       ────────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration10_es2017.ts:1:30]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                              ──
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration12_es2017.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration5_es2017.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration6_es2017.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration7_es2017.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es2017/functionDeclarations/asyncFunctionDeclaration9_es2017.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction5_es5.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction6_es5.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction7_es5.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction8_es5.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es5/asyncArrowFunction/asyncArrowFunction9_es5.ts:1:37]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                                     ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncClass_es5.ts:1:1]
 1 │ async class C {
   · ─────
 2 │ }
   ╰────

  × Constructor can't be an async method
   ╭─[typescript/tests/cases/conformance/async/es5/asyncConstructor_es5.ts:2:9]
 1 │ class C {
 2 │   async constructor() {
   ·         ───────────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncEnum_es5.ts:1:1]
 1 │ async enum E {
   · ─────
 2 │   Value
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncGetter_es5.ts:2:3]
 1 │ class C {
 2 │   async get foo() {
   ·   ─────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncInterface_es5.ts:1:1]
 1 │ async interface I {
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncModule_es5.ts:1:1]
 1 │ async module M {
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es5/asyncSetter_es5.ts:2:3]
 1 │ class C {
 2 │   async set foo(value) {
   ·   ─────
 3 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration10_es5.ts:1:30]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                              ──
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration12_es5.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration5_es5.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration6_es5.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration7_es5.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es5/functionDeclarations/asyncFunctionDeclaration9_es5.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction5_es6.ts:1:18]
 1 │ var foo = async (await): Promise<void> => {
   ·                  ─────
 2 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction6_es6.ts:1:28]
 1 │ var foo = async (a = await): Promise<void> => {
   ·                            ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction7_es6.ts:3:29]
 2 │   // 'await' here is an identifier, and not an await expression.
 3 │   var foo = async (a = await): Promise<void> => {
   ·                             ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction8_es6.ts:2:19]
 1 │ var foo = async (): Promise<void> => {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/async/es6/asyncArrowFunction/asyncArrowFunction9_es6.ts:1:37]
 1 │ var foo = async (a = await => await): Promise<void> => {
   ·                                     ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncClass_es6.ts:1:1]
 1 │ async class C {  
   · ─────
 2 │ }
   ╰────

  × Constructor can't be an async method
   ╭─[typescript/tests/cases/conformance/async/es6/asyncConstructor_es6.ts:2:9]
 1 │ class C {  
 2 │   async constructor() {    
   ·         ───────────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncEnum_es6.ts:1:1]
 1 │ async enum E {  
   · ─────
 2 │   Value
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncGetter_es6.ts:2:3]
 1 │ class C {
 2 │   async get foo() {
   ·   ─────
 3 │   }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncInterface_es6.ts:1:1]
 1 │ async interface I {  
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncModule_es6.ts:1:1]
 1 │ async module M {   
   · ─────
 2 │ }
   ╰────

  × 'async' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/async/es6/asyncSetter_es6.ts:2:3]
 1 │ class C {
 2 │   async set foo(value) {
   ·   ─────
 3 │   }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/async/es6/await_unaryExpression_es6_3.ts:2:7]
 1 │ async function bar1() {
 2 │     ++await 42; // Error
   ·       ────────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration10_es6.ts:1:30]
 1 │ async function foo(a = await => await): Promise<void> {
   ·                              ──
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration12_es6.ts:1:24]
 1 │ var v = async function await(): Promise<void> { }
   ·                        ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration5_es6.ts:1:20]
 1 │ async function foo(await): Promise<void> {
   ·                    ─────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration6_es6.ts:1:29]
 1 │ async function foo(a = await): Promise<void> {
   ·                             ─
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration7_es6.ts:3:31]
 2 │   // 'await' here is an identifier, and not a yield expression.
 3 │   async function foo(a = await): Promise<void> {
   ·                               ─
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncFunctionDeclaration9_es6.ts:2:19]
 1 │ async function foo(): Promise<void> {
 2 │   var v = { [await]: foo }
   ·                   ─
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:14:9]
 13 │ async function f2_let () {
 14 │     let await = 1
    ·         ─────
 15 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:18:9]
 17 │ async function f2_var () {
 18 │     var await = 1
    ·         ─────
 19 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:22:11]
 21 │ async function f2_const () {
 22 │     const await = 1
    ·           ─────
 23 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:38:9]
 37 │ function * f4_let () {
 38 │     let yield = 2;
    ·         ─────
 39 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:42:9]
 41 │ function * f4_var () {
 42 │     var yield = 2;
    ·         ─────
 43 │ }
    ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/async/es6/functionDeclarations/asyncOrYieldAsBindingIdentifier1.ts:46:11]
 45 │ function * f4_const () {
 46 │     const yield = 2;
    ·           ─────
 47 │ }
    ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:3:21]
 2 │     class C {
 3 │         [await x] = await x;
   ·                     ─────
 4 │         static [await x] = await x;
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:4:28]
 3 │         [await x] = await x;
 4 │         static [await x] = await x;
   ·                            ─────
 5 │ 
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:6:21]
 5 │ 
 6 │         [yield 1] = yield 2;
   ·                     ─────
 7 │         static [yield 3] = yield 4;
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:7:28]
 6 │         [yield 1] = yield 2;
 7 │         static [yield 3] = yield 4;
   ·                            ─────
 8 │     }
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:11:21]
 10 │     return class {
 11 │         [await x] = await x;
    ·                     ─────
 12 │         static [await x] = await x;
    ╰────

  × `await` is only allowed within async functions and at the top levels of modules
    ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:12:28]
 11 │         [await x] = await x;
 12 │         static [await x] = await x;
    ·                            ─────
 13 │ 
    ╰────

  × A 'yield' expression is only allowed in a generator body.
    ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:14:21]
 13 │ 
 14 │         [yield 1] = yield 2;
    ·                     ─────
 15 │         static [yield 3] = yield 4;
    ╰────

  × A 'yield' expression is only allowed in a generator body.
    ╭─[typescript/tests/cases/conformance/classes/awaitAndYieldInProperty.ts:15:28]
 14 │         [yield 1] = yield 2;
 15 │         static [yield 3] = yield 4;
    ·                            ─────
 16 │     }
    ╰────

  × TS(1318): Accessor 'aa' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:3:17]
 2 │    abstract get a();
 3 │    abstract get aa() { return 1; } // error
   ·                 ──
 4 │    abstract set b(x: string);
   ╰────

  × TS(1318): Accessor 'bb' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractAccessor.ts:5:17]
 4 │    abstract set b(x: string);
 5 │    abstract set bb(x: string) {} // error
   ·                 ──
 6 │ }
   ╰────

  × TS(1242): 'abstract' modifier can only appear on a class, method, or property declaration.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractConstructor.ts:2:14]
 1 │ abstract class A {
 2 │     abstract constructor() {}
   ·              ───────────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractCrashedOnce.ts:8:5]
 7 │         this.
 8 │     }
   ·     ─
 9 │ }
   ╰────

  × TS(1242): 'abstract' modifier can only appear on a class, method, or property declaration.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractDeclarations.d.ts:2:14]
 1 │ declare abstract class A {
 2 │     abstract constructor() {}
   ·              ───────────
 3 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations2.ts:46:5]
 45 │     abstract nom(): boolean;
 46 │     nom(x : number): boolean; // error -- use of modifier abstract must match on all overloads.
    ·     ───
 47 │ }
    ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractInstantiations2.ts:50:14]
 49 │ class H { // error -- not declared abstract
 50 │     abstract baz() : number;
    ·              ───
 51 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractManyKeywords.ts:3:1]
 2 │ export abstract class B {}
 3 │ default abstract class C {}
   · ───────
 4 │ import abstract class D {}
   ╰────

  × Identifier `CC1` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:13:16]
 12 │ 
 13 │ abstract class CC1 {}
    ·                ─┬─
    ·                 ╰── `CC1` has already been declared here
 14 │ class CC1 {}
    ·       ─┬─
    ·        ╰── It can not be redeclared here
 15 │ 
    ╰────

  × Identifier `CC2` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:16:7]
 15 │ 
 16 │ class CC2 {}
    ·       ─┬─
    ·        ╰── `CC2` has already been declared here
 17 │ abstract class CC2 {}
    ·                ─┬─
    ·                 ╰── It can not be redeclared here
 18 │ 
    ╰────

  × Identifier `DCC1` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:25:24]
 24 │ 
 25 │ declare abstract class DCC1 {}
    ·                        ──┬─
    ·                          ╰── `DCC1` has already been declared here
 26 │ declare class DCC1 {}
    ·               ──┬─
    ·                 ╰── It can not be redeclared here
 27 │ 
    ╰────

  × Identifier `DCC2` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMergedDeclaration.ts:28:15]
 27 │ 
 28 │ declare class DCC2 {}
    ·               ──┬─
    ·                 ╰── `DCC2` has already been declared here
 29 │ declare abstract class DCC2 {}
    ·                        ──┬─
    ·                          ╰── It can not be redeclared here
 30 │ 
    ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:6:14]
 5 │ class B {
 6 │     abstract foo() {}
   ·              ───
 7 │ }
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:2:14]
 1 │ class A {
 2 │     abstract foo();
   ·              ───
 3 │ }
   ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodInNonAbstractClass.ts:6:14]
 5 │ class B {
 6 │     abstract foo() {}
   ·              ───
 7 │ }
   ╰────

  × TS(1245): Method 'foo' cannot have an implementation because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractMethodWithImplementation.ts:2:14]
 1 │ abstract class A {
 2 │     abstract foo() {}
   ·              ───
 3 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractOverloads.ts:15:5]
 14 │     
 15 │     qux();
    ·     ───
 16 │ }
    ╰────

  × TS(1244): Abstract methods can only appear within an abstract class.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractUsingAbstractMethods2.ts:2:14]
 1 │ class A {
 2 │     abstract foo();
   ·              ───
 3 │ }
   ╰────

  × 'abstract' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAbstractKeyword/classAbstractWithInterface.ts:1:1]
 1 │ abstract interface I {}
   · ────────
   ╰────

  × Identifier `C` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAndVariableWithSameName.ts:1:7]
 1 │ class C { foo: string; } // error
   ·       ┬
   ·       ╰── `C` has already been declared here
 2 │ var C = ''; // error
   ·     ┬
   ·     ╰── It can not be redeclared here
 3 │ 
   ╰────

  × Identifier `D` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classAndVariableWithSameName.ts:5:11]
  4 │ module M {
  5 │     class D { // error
    ·           ┬
    ·           ╰── `D` has already been declared here
  6 │         bar: string;
  7 │     }
  8 │ 
  9 │     var D = 1; // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 10 │ }
    ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classBody/classBodyWithStatements.ts:2:9]
 1 │ class C {
 2 │     var x = 1;
   ·         ┬
   ·         ╰── `;` expected
 3 │ }
   ╰────

  × Expected `{` but found `?.`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingOptionalChain.ts:9:22]
 8 │ // error
 9 │ class C2 implements A?.B {}
   ·                      ─┬
   ·                       ╰── `{` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingPrimitive.ts:7:19]
 6 │ class C4 extends Void  { }
 7 │ class C4a extends void {}
   ·                   ────
 8 │ class C5 extends Null { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendingPrimitive2.ts:3:19]
 2 │ 
 3 │ class C4a extends void {}
   ·                   ────
 4 │ class C5a extends null { }
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsEveryObjectType.ts:6:31]
 5 │ 
 6 │ class C2 extends { foo: string; } { } // error
   ·                               ┬
   ·                               ╰── `,` expected
 7 │ var x: { foo: string; }
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classHeritageSpecification/classExtendsEveryObjectType2.ts:1:31]
 1 │ class C2 extends { foo: string; } { } // error
   ·                               ┬
   ·                               ╰── `,` expected
 2 │ 
   ╰────

  × TS(2414): Class name cannot be 'any'
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames.ts:3:7]
 2 │ 
 3 │ class any { }
   ·       ───
 4 │ class number { }
   ╰────

  × TS(2414): Class name cannot be 'number'
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames.ts:4:7]
 3 │ class any { }
 4 │ class number { }
   ·       ──────
 5 │ class boolean { }
   ╰────

  × TS(2414): Class name cannot be 'boolean'
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames.ts:5:7]
 4 │ class number { }
 5 │ class boolean { }
   ·       ───────
 6 │ class string { }
   ╰────

  × TS(2414): Class name cannot be 'string'
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames.ts:6:7]
 5 │ class boolean { }
 6 │ class string { }
   ·       ──────
   ╰────

  × Expected `{` but found `void`
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/classWithPredefinedTypesAsNames2.ts:3:7]
 2 │ 
 3 │ class void {}
   ·       ──┬─
   ·         ╰── `{` expected
   ╰────

  × Identifier `C1` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/declaredClassMergedwithSelf.ts:1:15]
 1 │ declare class C1 {}
   ·               ─┬
   ·                ╰── `C1` has already been declared here
 2 │ 
 3 │ declare class C1 {}
   ·               ─┬
   ·                ╰── It can not be redeclared here
 4 │ 
   ╰────

  × Identifier `C2` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/classDeclarations/declaredClassMergedwithSelf.ts:5:15]
 4 │ 
 5 │ declare class C2 {}
   ·               ─┬
   ·                ╰── `C2` has already been declared here
 6 │ 
 7 │ interface C2 {}
 8 │ 
 9 │ declare class C2 {}
   ·               ─┬
   ·                ╰── It can not be redeclared here
   ╰────

  × Private field 'y' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock16.ts:11:28]
 10 │     getX = (obj: C) => obj.#x;
 11 │     getY = (obj: D) => obj.#y;
    ·                            ──
 12 │   }
    ╰────

  × Private field 'x' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock16.ts:21:28]
 20 │     // getY has privileged access to y
 21 │     getX = (obj: C) => obj.#x;
    ·                            ──
 22 │     getY = (obj: D) => obj.#y;
    ╰────

  × Decorators are not valid here.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock19.ts:2:5]
 1 │ class C {
 2 │     @decorator
   ·     ──────────
 3 │     static {
   ╰────

  × TS(1184): Modifiers cannot appear here.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock20.ts:2:5]
 1 │ class C {
 2 │     async static {
   ·     ─────
 3 │         // something
   ╰────

  × TS(1184): Modifiers cannot appear here.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock20.ts:6:5]
 5 │ 
 6 │     public static {
   ·     ──────
 7 │         // something
   ╰────

  × TS(1184): Modifiers cannot appear here.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock20.ts:10:5]
  9 │ 
 10 │     readonly private static {
    ·     ────────
 11 │         // something
    ╰────

  × TS(1184): Modifiers cannot appear here.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock20.ts:10:14]
  9 │ 
 10 │     readonly private static {
    ·              ───────
 11 │         // something
    ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:4:9]
 3 │   static {
 4 │     let await: any; // illegal, cannot declare a new binding for await
   ·         ─────
 5 │   }
   ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:13:9]
 12 │   static {
 13 │     let await; // illegal, cannot declare a new binding for await
    ·         ─────
 14 │   }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:16:14]
 15 │   static {
 16 │     function await() { }; // illegal
    ·              ─────
 17 │   }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:19:11]
 18 │   static {
 19 │     class await { }; // illegal
    ·           ─────
 20 │   }
    ╰────

  × Cannot use `await` as an identifier in an async context
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:32:12]
 31 │   static {
 32 │     (class await { }); // legal, 'await' in class expression name not bound inside of static block
    ·            ─────
 33 │   }
    ╰────

  × Cannot use await in class static initialization block
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:4:9]
 3 │   static {
 4 │     let await: any; // illegal, cannot declare a new binding for await
   ·         ──────────
 5 │   }
   ╰────

  × Cannot use await in class static initialization block
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:7:11]
 6 │   static {
 7 │     let { await } = {} as any; // illegal, cannot declare a new binding for await
   ·           ─────
 8 │   }
   ╰────

  × Cannot use await in class static initialization block
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock22.ts:13:9]
 12 │   static {
 13 │     let await; // illegal, cannot declare a new binding for await
    ·         ─────
 14 │   }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock26.ts:3:14]
 2 │     static {
 3 │         await; // illegal
   ·              ─
 4 │     }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock6.ts:7:13]
 6 │     static {
 7 │         let await = 1;
   ·             ─────
 8 │         let arguments = 1;
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock6.ts:13:14]
 12 │     static {
 13 │         await: if (true) {
    ·              ─
 14 │ 
    ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:4:9]
 3 │         await 1;
 4 │         yield 1;
   ·         ─────
 5 │         return 1;
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:5:9]
 4 │         yield 1;
 5 │         return 1;
   ·         ──────
 6 │     }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:24:13]
 23 │         static {
 24 │             yield 1;
    ·             ─────
 25 │ 
    ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:36:13]
 35 │         static {
 36 │             return 1;
    ·             ──────
 37 │ 
    ╰────

  × Cannot use await in class static initialization block
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:3:9]
 2 │     static {
 3 │         await 1;
   ·         ─────
 4 │         yield 1;
   ╰────

  × Cannot use await in class static initialization block
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock7.ts:12:13]
 11 │         static {
 12 │             await 1;
    ·             ─────
 13 │ 
    ╰────

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:6:27]
 5 │                 if (v === 1) {
 6 │                     break label;
   ·                           ─────
 7 │                 }
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:9:30]
  8 │                 if (v === 2) {
  9 │                     continue label;
    ·                              ─────
 10 │                 }
    ╰────

  × Illegal break statement
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:12:21]
 11 │                 if (v === 3) {
 12 │                     break
    ·                     ─────
 13 │                 }
    ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal continue statement: no surrounding iteration statement
    ╭─[typescript/tests/cases/conformance/classes/classStaticBlock/classStaticBlock8.ts:15:21]
 14 │                 if (v === 4) {
 15 │                     continue
    ·                     ────────
 16 │                 }
    ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/classWithTwoConstructorDefinitions.ts:2:5]
 1 │ class C {
 2 │     constructor() { } // error
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 3 │     constructor(x) { } // error
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 4 │ }
   ╰────

  × Multiple constructor implementations are not allowed.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/classWithTwoConstructorDefinitions.ts:7:5]
 6 │ class D<T> {
 7 │     constructor(x: T) { } // error
   ·     ─────┬─────
   ·          ╰── constructor has already been declared here
 8 │     constructor(x: T, y: T) { } // error
   ·     ─────┬─────
   ·          ╰── it cannot be redeclared here
 9 │ }
   ╰────

  × TS(1090): 'readonly' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyInAmbientClass.ts:3:9]
 2 │     constructor(readonly x: number);
 3 │     method(readonly x: number);
   ·            ────────
 4 │ }
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyInAmbientClass.ts:2:14]
 1 │ declare class C{
 2 │     constructor(readonly x: number);
   ·                 ──────────────────
 3 │     method(readonly x: number);
   ╰────

  × TS(1030): 'readonly' modifier already seen.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyReadonly.ts:2:14]
 1 │ class C {
 2 │     readonly readonly x: number;
   ·              ────────
 3 │     constructor(readonly readonly y: number) {}
   ╰────
  help: Remove the duplicate modifier.

  × TS(1030): 'readonly' modifier already seen.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/constructorParameters/readonlyReadonly.ts:3:26]
 2 │     readonly readonly x: number;
 3 │     constructor(readonly readonly y: number) {}
   ·                          ────────
 4 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassConstructorWithoutSuperCall.ts:24:31]
 23 │     constructor() { // error
 24 │         var r = function () { super() } // error
    ·                               ───────
 25 │     }
    ╰────

  × Expected `;` but found `(`
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/derivedClassSuperCallsInNonConstructorMembers.ts:8:13]
 7 │ class Derived extends Base {
 8 │     a: super();
   ·             ┬
   ·             ╰── `;` expected
 9 │     b() {
   ╰────

  × 'super' can only be referenced in a derived class.
   ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superCallInConstructorWithNoBaseType.ts:1:1]
 1 │ ╭─▶ class C {
 2 │ │       constructor() {
 3 │ │           super(); // error
   · │           ─────
 4 │ │       }
 5 │ ├─▶ }
   · ╰──── class does not have `extends`
 6 │     
   ╰────
  help: either remove this super, or extend the class

  × 'super' can only be referenced in a derived class.
    ╭─[typescript/tests/cases/conformance/classes/constructorDeclarations/superCalls/superCallInConstructorWithNoBaseType.ts:7:1]
  6 │     
  7 │ ╭─▶ class D<T> {
  8 │ │       public constructor(public x: T) {
  9 │ │           super(); // error
    · │           ─────
 10 │ │       }
 11 │ ├─▶ }
    · ╰──── class does not have `extends`
    ╰────
  help: either remove this super, or extend the class

  × TS(1071): 'private' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer.ts:4:5]
 3 │ class C {
 4 │     private [x: string]: string;
   ·     ───────
 5 │ }
   ╰────

  × TS(1071): 'private' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer.ts:8:5]
 7 │ class D {
 8 │     private [x: number]: string;
   ·     ───────
 9 │ }
   ╰────

  × TS(1071): 'private' modifier cannot appear on an index signature.
    ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer.ts:12:5]
 11 │ class E<T> {
 12 │     private [x: string]: T;
    ·     ───────
 13 │ }
    ╰────

  × Expected `]` but found `:`
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/privateIndexer2.ts:4:15]
 3 │ var x = {
 4 │     private [x: string]: string;
   ·               ┬
   ·               ╰── `]` expected
 5 │ }
   ╰────

  × TS(1071): 'public' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/publicIndexer.ts:4:5]
 3 │ class C {
 4 │     public [x: string]: string;
   ·     ──────
 5 │ }
   ╰────

  × TS(1071): 'public' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/publicIndexer.ts:8:5]
 7 │ class D {
 8 │     public [x: number]: string;
   ·     ──────
 9 │ }
   ╰────

  × TS(1071): 'public' modifier cannot appear on an index signature.
    ╭─[typescript/tests/cases/conformance/classes/indexMemberDeclarations/publicIndexer.ts:12:5]
 11 │ class E<T> {
 12 │     public [x: string]: T;
    ·     ──────
 13 │ }
    ╰────

  × Expected `;` but found `.`
    ╭─[typescript/tests/cases/conformance/classes/members/accessibility/privateInstanceMemberAccessibility.ts:12:12]
 11 │ 
 12 │     a: this.foo; // error
    ·            ┬
    ·            ╰── `;` expected
 13 │ }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers6.ts:6:16]
 5 │ class D extends C {
 6 │     static c = super();
   ·                ───────
 7 │ }
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers9.ts:7:56]
 6 │     static arrowFunctionBoundary = () => super.f + 1;
 7 │     static functionExprBoundary = function () { return super.f + 2 };
   ·                                                        ─────
 8 │     static classExprBoundary = class { a = super.f + 3 };
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
    ╭─[typescript/tests/cases/conformance/classes/members/instanceAndStaticMembers/typeOfThisInStaticMembers9.ts:11:20]
 10 │         function foo () {
 11 │             return super.f + 4
    ·                    ─────
 12 │         }
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:14:10]
 13 │ }
 14 │ new A2().#prop; // Error
    ·          ─────
 15 │ 
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:17:14]
 16 │ function  foo (){
 17 │     new A2().#prop; // Error
    ·              ─────
 18 │ }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorsAccess.ts:22:18]
 21 │     m() {
 22 │         new A2().#prop;
    ·                  ─────
 23 │     }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAccessorssDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:9:15]
  8 │         thing.#baz;
  9 │         thing.#bar; // Error
    ·               ────
 10 │         thing.#foo();
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:16:15]
 15 │         thing.#baz;
 16 │         thing.#bar;
    ·               ────
 17 │         thing.#foo();
    ╰────

  × Private field 'bar' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndAny.ts:23:15]
 22 │         thing.#baz;
 23 │         thing.#bar;
    ·               ────
 24 │         thing.#foo();
    ╰────

  × Private field 'f' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndIndexSignature.ts:6:14]
 5 │     constructor(message: string) {
 6 │         this.#f = 3           // Error (index signatures do not implicitly declare private names)
   ·              ──
 7 │         this["#foo"] = 3;     // Okay (type has index signature and "#foo" does not collide with private identifier #foo)
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameAndPropertySignature.ts:2:5]
 1 │ type A = {
 2 │     #foo: string;
   ·     ────
 3 │     #bar(): string;
   ╰────

  × Private identifier '#nope' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:1:9]
 1 │ exports.#nope = 1;           // Error (outside class body)
   ·         ─────
 2 │ function A() { }
   ╰────

  × Private identifier '#no' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:3:13]
 2 │ function A() { }
 3 │ A.prototype.#no = 2;         // Error (outside class body)
   ·             ───
 4 │ 
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:6:3]
 5 │ class B {}
 6 │ B.#foo = 3;                  // Error (outside class body)
   ·   ────
 7 │ 
   ╰────

  × Private field 'foo' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadAssignment.ts:12:14]
 11 │         exports.#bar = 6;    // Error
 12 │         this.#foo = 3;       // Error (undeclared)
    ·              ────
 13 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameBadDeclaration.ts:3:3]
 2 │ A.prototype = {
 3 │   #x: 1,         // Error
   ·   ──
 4 │   #m() {},       // Error
   ╰────

  × Classes can't have an element named '#constructor'
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameConstructorReserved.ts:2:5]
 1 │ class A {
 2 │     #constructor() {}      // Error: `#constructor` is a reserved word.
   ·     ────────────
 3 │ }
   ╰────

  × Identifier `foo` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:5:9]
 4 │     class A_Field_Field {
 5 │         #foo = "foo";
   ·         ──┬─
   ·           ╰── `foo` has already been declared here
 6 │         #foo = "foo";
   ·         ──┬─
   ·           ╰── It can not be redeclared here
 7 │     }
   ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:11:9]
 10 │     class A_Field_Method {
 11 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 12 │         #foo() { }
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 13 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:17:9]
 16 │     class A_Field_Getter {
 17 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 18 │         get #foo() { return ""}
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 19 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:23:9]
 22 │     class A_Field_Setter {
 23 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 24 │         set #foo(value: string) { }
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 25 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:55:9]
 54 │     class A_Method_Field {
 55 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 56 │         #foo = "foo";
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 57 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:61:9]
 60 │     class A_Method_Method {
 61 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 62 │         #foo() { }
    ·         ──┬─
    ·           ╰── It can not be redeclared here
 63 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:67:9]
 66 │     class A_Method_Getter {
 67 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 68 │         get #foo() { return ""}
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 69 │     }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:73:9]
 72 │     class A_Method_Setter {
 73 │         #foo() { }
    ·         ──┬─
    ·           ╰── `foo` has already been declared here
 74 │         set #foo(value: string) { }
    ·             ──┬─
    ·               ╰── It can not be redeclared here
 75 │     }
    ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:106:13]
 105 │     class A_Getter_Field {
 106 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 107 │         #foo = "foo";
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 108 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:112:13]
 111 │     class A_Getter_Method {
 112 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 113 │         #foo() { }
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 114 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:118:13]
 117 │     class A_Getter_Getter {
 118 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 119 │         get #foo() { return ""}
     ·             ──┬─
     ·               ╰── It can not be redeclared here
 120 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:156:13]
 155 │     class A_Setter_Field {
 156 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 157 │         #foo = "foo";
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 158 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:162:13]
 161 │     class A_Setter_Method {
 162 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 163 │         #foo() { }
     ·         ──┬─
     ·           ╰── It can not be redeclared here
 164 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:174:13]
 173 │     class A_Setter_Setter {
 174 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── `foo` has already been declared here
 175 │         set #foo(value: string) { }
     ·             ──┬─
     ·               ╰── It can not be redeclared here
 176 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:230:16]
 229 │     class A_StaticField_StaticField {
 230 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 231 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 232 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:236:16]
 235 │     class A_StaticField_StaticMethod {
 236 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 237 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 238 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:242:16]
 241 │     class A_StaticField_StaticGetter {
 242 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 243 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 244 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:248:16]
 247 │     class A_StaticField_StaticSetter {
 248 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 249 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 250 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:280:16]
 279 │     class A_StaticMethod_StaticField {
 280 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 281 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 282 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:286:16]
 285 │     class A_StaticMethod_StaticMethod {
 286 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 287 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 288 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:292:16]
 291 │     class A_StaticMethod_StaticGetter {
 292 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 293 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 294 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:298:16]
 297 │     class A_StaticMethod_StaticSetter {
 298 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── `foo` has already been declared here
 299 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 300 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:331:20]
 330 │     class A_StaticGetter_StaticField {
 331 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 332 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 333 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:337:20]
 336 │     class A_StaticGetter_StaticMethod {
 337 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 338 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 339 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:343:20]
 342 │     class A_StaticGetter_StaticGetter {
 343 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 344 │         static get #foo() { return ""}
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 345 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:381:20]
 380 │     class A_StaticSetter_StaticField {
 381 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 382 │         static #foo = "foo";
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 383 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:387:20]
 386 │     class A_StaticSetter_StaticMethod {
 387 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 388 │         static #foo() { }
     ·                ──┬─
     ·                  ╰── It can not be redeclared here
 389 │     }
     ╰────

  × Identifier `foo` has already been declared
     ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameDuplicateField.ts:399:20]
 398 │     class A_StaticSetter_StaticSetter {
 399 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── `foo` has already been declared here
 400 │         static set #foo(value: string) { }
     ·                    ──┬─
     ·                      ╰── It can not be redeclared here
 401 │     }
     ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameEnum.ts:2:5]
 1 │ enum E {
 2 │     #x
   ·     ──
 3 │ }
   ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameFieldDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameHashCharName.ts:1:2]
 1 │ #
   ·  ─
 2 │ 
 3 │ class C {
   ╰────

  × Private field 'x' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameImplicitDeclaration.ts:4:14]
 3 │         /** @type {string} */
 4 │         this.#x;
   ·              ──
 5 │     }
   ╰────

  × Expected `in` but found `)`
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInInExpression.ts:25:26]
 24 │ 
 25 │         const c = (#field) in v; // Bad - privateID is not an expression on its own
    ·                          ┬
    ·                          ╰── `in` expected
 26 │ 
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInInExpressionTransform.ts:29:9]
 28 │     invalidLHS(v: any) {
 29 │         'prop' in v = 10;
    ·         ───────────
 30 │         #field in v = 10;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-1.ts:2:5]
 1 │ const obj = {
 2 │     #foo: 1
   ·     ────
 3 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-2.ts:2:5]
 1 │ const obj = {
 2 │     #foo() {
   ·     ────
 3 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameInObjectLiteral-3.ts:2:9]
 1 │ const obj = {
 2 │     get #foo() {
   ·         ────
 3 │         return ""
   ╰────

  × Private identifier '#nope' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:1:9]
 1 │ exports.#nope = 1;           // Error (outside class body)
   ·         ─────
 2 │ function A() { }
   ╰────

  × Private identifier '#no' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:3:13]
 2 │ function A() { }
 3 │ A.prototype.#no = 2;         // Error (outside class body)
   ·             ───
 4 │ 
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:6:3]
 5 │ class B {}
 6 │ B.#foo = 3;                  // Error (outside class body)
   ·   ────
 7 │ 
   ╰────

  × Private field 'foo' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadAssignment.ts:11:14]
 10 │     constructor () {
 11 │         this.#foo = 3;       // Error (undeclared)
    ·              ────
 12 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameJsBadDeclaration.ts:3:3]
 2 │ A.prototype = {
 3 │   #x: 1,         // Error
   ·   ──
 4 │   #m() {},       // Error
   ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:12:10]
 11 │ }
 12 │ new A2().#method(); // Error
    ·          ───────
 13 │ 
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:15:14]
 14 │ function  foo (){
 15 │     new A2().#method(); // Error
    ·              ───────
 16 │ }
    ╰────

  × Private field 'method' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodAccess.ts:20:18]
 19 │     m() {
 20 │         new A2().#method();
    ·                  ───────
 21 │     }
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodClassExpression.ts:9:17]
  8 │ console.log(C.getInstance().getField());
  9 │ C.getInstance().#method; // Error
    ·                 ───────
 10 │ C.getInstance().#field; // Error
    ╰────

  × Private identifier '#field' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodClassExpression.ts:10:17]
  9 │ C.getInstance().#method; // Error
 10 │ C.getInstance().#field; // Error
    ·                 ──────
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameMethodsDerivedClasses.ts:9:23]
  8 │     static method(x: Derived) {
  9 │         console.log(x.#prop());
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'unknown' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNestedMethodAccess.ts:19:19]
 18 │                 x.#bar;
 19 │                 x.#unknown; // Error
    ·                   ────────
 20 │             }
    ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNotAccessibleOutsideDefiningClass.ts:5:9]
 4 │ 
 5 │ new A().#foo = 4;               // Error
   ·         ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameNotAllowedOutsideClass.ts:1:7]
 1 │ const #foo = 3;
   ·       ────
   ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:16:4]
 15 │ 
 16 │ A2.#prop; // Error
    ·    ─────
 17 │ 
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:19:8]
 18 │ function  foo (){
 19 │     A2.#prop; // Error
    ·        ─────
 20 │ }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorsAccess.ts:24:12]
 23 │     m() {
 24 │         A2.#prop;
    ·            ─────
 25 │     }
    ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticAccessorssDerivedClasses.ts:9:23]
  8 │     static method(x: typeof Derived) {
  9 │         console.log(x.#prop);
    ·                       ─────
 10 │     }
    ╰────

  × Private field 'derivedProp' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDerivedClasses.ts:4:17]
 3 │     static method(x: Derived) {
 4 │         Derived.#derivedProp // error
   ·                 ────────────
 5 │         Base.#prop  = 10;
   ╰────

  × Private field 'prop' must be declared in an enclosing class
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticFieldDerivedClasses.ts:12:14]
 11 │         Derived.#derivedProp
 12 │         Base.#prop  = 10; // error
    ·              ─────
 13 │     }
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodClassExpression.ts:9:14]
  8 │ console.log(C.getClass().getField());
  9 │ C.getClass().#method; // Error
    ·              ───────
 10 │ C.getClass().#field; // Error
    ╰────

  × Private identifier '#field' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameStaticMethodClassExpression.ts:10:14]
  9 │ C.getClass().#method; // Error
 10 │ C.getClass().#field; // Error
    ·              ──────
    ╰────

  × Private field 'foo' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNameUncheckedJsOptionalChain.ts:4:15]
 3 │     constructor () {
 4 │         this?.#foo;
   ·               ────
 5 │         this?.#bar;
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndGenericClasses-2.ts:24:3]
 23 │ const x: number = a.baz                   // OK
 24 │ a.#foo;                                   // Error
    ·   ────
 25 │ a = b;                                    // Error
    ╰────

  × Expected `]` but found `#identifier`
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesAndIndexedAccess.ts:7:28]
 6 │         // not supported yet, could support in future:
 7 │         const badForNow: C[#bar] = 3;   // Error
   ·                            ──┬─
   ·                              ╰── `]` expected
 8 │         // will never use this syntax, already taken:
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:22:3]
 21 │ declare let b: C<string>;
 22 │ a.#foo;                                   // Error
    ·   ────
 23 │ a.#method;                                // Error
    ╰────

  × Private identifier '#method' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:23:3]
 22 │ a.#foo;                                   // Error
 23 │ a.#method;                                // Error
    ·   ───────
 24 │ a.#prop;                                  // Error
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInGenericClasses.ts:24:3]
 23 │ a.#method;                                // Error
 24 │ a.#prop;                                  // Error
    ·   ─────
 25 │ a = b;                                    // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:2:5]
 1 │ class A {
 2 │     public #foo = 3;         // Error
   ·     ──────
 3 │     private #bar = 3;        // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:3:5]
 2 │     public #foo = 3;         // Error
 3 │     private #bar = 3;        // Error
   ·     ───────
 4 │     protected #baz = 3;      // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:4:5]
 3 │     private #bar = 3;        // Error
 4 │     protected #baz = 3;      // Error
   ·     ─────────
 5 │     readonly #qux = 3;       // OK
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:8:5]
 7 │ 
 8 │     public #fooMethod() { return  3; }         // Error
   ·     ──────
 9 │     private #barMethod() { return  3; }        // Error
   ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:9:5]
  8 │     public #fooMethod() { return  3; }         // Error
  9 │     private #barMethod() { return  3; }        // Error
    ·     ───────
 10 │     protected #bazMethod() { return  3; }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:10:5]
  9 │     private #barMethod() { return  3; }        // Error
 10 │     protected #bazMethod() { return  3; }      // Error
    ·     ─────────
 11 │     readonly #quxMethod() { return  3; }       // Error
    ╰────

  × TS(1024): 'readonly' modifier can only appear on a property declaration or index signature.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:11:5]
 10 │     protected #bazMethod() { return  3; }      // Error
 11 │     readonly #quxMethod() { return  3; }       // Error
    ·     ────────
 12 │     declare #whatMethod()                      // Error
    ╰────

  × TS(1031): 'declare' modifier cannot appear on class elements of this kind.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:12:5]
 11 │     readonly #quxMethod() { return  3; }       // Error
 12 │     declare #whatMethod()                      // Error
    ·     ───────
 13 │     async #asyncMethod() { return 1; }         //OK
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:17:5]
 16 │ 
 17 │     public get #fooProp() { return  3; }         // Error
    ·     ──────
 18 │     public set #fooProp(value: number) {  }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:18:5]
 17 │     public get #fooProp() { return  3; }         // Error
 18 │     public set #fooProp(value: number) {  }      // Error
    ·     ──────
 19 │     private get #barProp() { return  3; }        // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:19:5]
 18 │     public set #fooProp(value: number) {  }      // Error
 19 │     private get #barProp() { return  3; }        // Error
    ·     ───────
 20 │     private set #barProp(value: number) {  }     // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:20:5]
 19 │     private get #barProp() { return  3; }        // Error
 20 │     private set #barProp(value: number) {  }     // Error
    ·     ───────
 21 │     protected get #bazProp() { return  3; }      // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:21:5]
 20 │     private set #barProp(value: number) {  }     // Error
 21 │     protected get #bazProp() { return  3; }      // Error
    ·     ─────────
 22 │     protected set #bazProp(value: number) {  }   // Error
    ╰────

  × TS(18010): An accessibility modifier cannot be used with a private identifier.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:22:5]
 21 │     protected get #bazProp() { return  3; }      // Error
 22 │     protected set #bazProp(value: number) {  }   // Error
    ·     ─────────
 23 │     readonly get #quxProp() { return  3; }       // Error
    ╰────

  × 'declare' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:25:5]
 24 │     readonly set #quxProp(value: number) {  }    // Error
 25 │     declare get #whatProp()                      // Error
    ·     ───────
 26 │     declare set #whatProp(value: number)         // Error
    ╰────

  × 'declare' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:26:5]
 25 │     declare get #whatProp()                      // Error
 26 │     declare set #whatProp(value: number)         // Error
    ·     ───────
 27 │     async get #asyncProp() { return 1; }         // Error
    ╰────

  × 'async' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:27:5]
 26 │     declare set #whatProp(value: number)         // Error
 27 │     async get #asyncProp() { return 1; }         // Error
    ·     ─────
 28 │     async set #asyncProp(value: number) { }      // Error
    ╰────

  × 'async' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:28:5]
 27 │     async get #asyncProp() { return 1; }         // Error
 28 │     async set #asyncProp(value: number) { }      // Error
    ·     ─────
 29 │ }
    ╰────

  × TS(1267): Property '#quux' cannot have an initializer because it is marked abstract.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:32:14]
 31 │ abstract class B {
 32 │     abstract #quux = 3;      // Error
    ·              ─────
 33 │ }
    ╰────

  × Getters and setters must have an implementation.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:25:17]
 24 │     readonly set #quxProp(value: number) {  }    // Error
 25 │     declare get #whatProp()                      // Error
    ·                 ─────────
 26 │     declare set #whatProp(value: number)         // Error
    ╰────

  × Getters and setters must have an implementation.
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesIncompatibleModifiers.ts:26:17]
 25 │     declare get #whatProp()                      // Error
 26 │     declare set #whatProp(value: number)         // Error
    ·                 ─────────
 27 │     async get #asyncProp() { return 1; }         // Error
    ╰────

  × Private identifier '#prop' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesInterfaceExtendingClass.ts:10:7]
  9 │ function func(x: I) {
 10 │     x.#prop = 123;
    ·       ─────
 11 │ }
    ╰────

  × The operand of a 'delete' operator cannot be a private identifier.
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNoDelete.ts:4:16]
 3 │     constructor() {
 4 │         delete this.#v; // Error: The operand of a delete operator cannot be a private name.
   ·                ───────
 5 │     }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNotAllowedAsParameters.ts:2:12]
 1 │ class A {
 2 │     setFoo(#foo: string) {}
   ·            ────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/classes/members/privateNames/privateNamesNotAllowedInVariableDeclarations.ts:1:7]
 1 │ const #foo = 3;
   ·       ────
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/classes/nestedClassDeclaration.ts:5:11]
 4 │     x: string;
 5 │     class C2 {
   ·           ─┬
   ·            ╰── `;` expected
 6 │     }
   ╰────

  × TS(1267): Property 'prop' cannot have an initializer because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/abstractPropertyInitializer.ts:2:14]
 1 │ abstract class C {
 2 │     abstract prop = 1
   ·              ────
 3 │ }
   ╰────

  × TS(1028): Accessibility modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:39:13]
 38 │ class E {
 39 │     private public protected property;
    ·             ──────
 40 │     public protected method() { }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:39:20]
 38 │ class E {
 39 │     private public protected property;
    ·                    ─────────
 40 │     public protected method() { }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:40:12]
 39 │     private public protected property;
 40 │     public protected method() { }
    ·            ─────────
 41 │     private protected get getter() { return 0; }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:41:13]
 40 │     public protected method() { }
 41 │     private protected get getter() { return 0; }
    ·             ─────────
 42 │     public public set setter(a: number) { }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessibilityModifiers.ts:42:12]
 41 │     private protected get getter() { return 0; }
 42 │     public public set setter(a: number) { }
    ·            ──────
 43 │ }
    ╰────
  help: Remove the duplicate modifier.

  × TS(1267): Property 'p' cannot have an initializer because it is marked abstract.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/accessorsOverrideProperty7.ts:2:14]
 1 │ abstract class A {
 2 │     abstract p = 'yep'
   ·              ─
 3 │ }
   ╰────

  × Identifier `accessor` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessor11.ts:5:12]
  4 │ 
  5 │     static accessor
    ·            ────┬───
    ·                ╰── `accessor` has already been declared here
  6 │     b
  7 │ 
  8 │     static
  9 │     accessor
    ·     ────┬───
    ·         ╰── It can not be redeclared here
 10 │     c
    ╰────

  × TS(1030): 'accessor' modifier already seen.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:2:14]
 1 │ abstract class C1 {
 2 │     accessor accessor a: any;
   ·              ────────
 3 │     readonly accessor b: any;
   ╰────
  help: Remove the duplicate modifier.

  × TS(1243): 'accessor' modifier cannot be used with 'readonly' modifier.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:3:5]
 2 │     accessor accessor a: any;
 3 │     readonly accessor b: any;
   ·     ────────
 4 │     declare accessor c: any;
   ╰────

  × TS(1243): 'accessor' modifier cannot be used with 'declare' modifier.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:4:5]
 3 │     readonly accessor b: any;
 4 │     declare accessor c: any;
   ·     ───────
 5 │     accessor public d: any;
   ╰────

  × TS(1276): An 'accessor' property cannot be declared optional.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:14:15]
 13 │     accessor constructor() {}
 14 │     accessor l?: any;
    ·               ─
 15 │     accessor readonly m: any;
    ╰────

  × TS(1243): 'accessor' modifier cannot be used with 'readonly' modifier.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:15:14]
 14 │     accessor l?: any;
 15 │     accessor readonly m: any;
    ·              ────────
 16 │     accessor declare n: any;
    ╰────

  × TS(1243): 'accessor' modifier cannot be used with 'declare' modifier.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:16:14]
 15 │     accessor readonly m: any;
 16 │     accessor declare n: any;
    ·              ───────
 17 │ }
    ╰────

  × TS(1070): 'accessor' modifier cannot appear on a type member.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:24:5]
 23 │ interface I1 {
 24 │     accessor a: number;
    ·     ────────
 25 │ }
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:27:1]
 26 │ 
 27 │ accessor class C3 {}
    · ────────
 28 │ accessor interface I2 {}
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:28:1]
 27 │ accessor class C3 {}
 28 │ accessor interface I2 {}
    · ────────
 29 │ accessor namespace N1 {}
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:29:1]
 28 │ accessor interface I2 {}
 29 │ accessor namespace N1 {}
    · ────────
 30 │ accessor enum E1 {}
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:30:1]
 29 │ accessor namespace N1 {}
 30 │ accessor enum E1 {}
    · ────────
 31 │ accessor var V1: any;
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:31:1]
 30 │ accessor enum E1 {}
 31 │ accessor var V1: any;
    · ────────
 32 │ accessor type T1 = never;
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:32:1]
 31 │ accessor var V1: any;
 32 │ accessor type T1 = never;
    · ────────
 33 │ accessor function F1() {}
    ╰────

  × 'accessor' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:33:1]
 32 │ accessor type T1 = never;
 33 │ accessor function F1() {}
    · ────────
 34 │ accessor import "x";
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/autoAccessorDisallowedModifiers.ts:34:17]
 33 │ accessor function F1() {}
 34 │ accessor import "x";
    ·                 ───
 35 │ accessor import {} from "x";
    ╰────

  × Expected `,` but found `*`
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/canFollowGetSetKeyword.ts:11:5]
 10 │     get
 11 │     *x() {}
    ·     ┬
    ·     ╰── `,` expected
 12 │ };
    ╰────

  × TS(1031): 'declare' modifier cannot appear on class elements of this kind.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/derivedUninitializedPropertyDeclaration.ts:15:5]
 14 │ class BOther extends A {
 15 │     declare m() { return 2 } // not allowed on methods
    ·     ───────
 16 │     declare nonce: any; // ok, even though it's not in the base
    ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionOverloadMixingStaticAndInstance.ts:3:12]
 2 │     foo();
 3 │     static foo(); // error
   ·            ───
 4 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionOverloadMixingStaticAndInstance.ts:8:5]
 7 │     static foo();
 8 │     foo(); // error    
   ·     ───
 9 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionOverloadMixingStaticAndInstance.ts:13:12]
 12 │     foo(x: T);
 13 │     static foo(x: number); // error
    ·            ───
 14 │ }
    ╰────

  × Function implementation is missing or not immediately following the declaration.
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/memberFunctionDeclarations/memberFunctionOverloadMixingStaticAndInstance.ts:18:5]
 17 │     static foo(x: number);
 18 │     foo(x: T); // error    
    ·     ───
 19 │ }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:2:5]
 1 │ class C {
 2 │     x: number;
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │     get x() { // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 4 │         return 1;
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:9:5]
  8 │ class D {
  9 │     x: number;
    ·     ┬
    ·     ╰── `x` has already been declared here
 10 │     set x(v) { } // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 11 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndAccessorWithSameName.ts:14:13]
 13 │ class E {
 14 │     private x: number;
    ·             ┬
    ·             ╰── `x` has already been declared here
 15 │     get x() { // error
    ·         ┬
    ·         ╰── It can not be redeclared here
 16 │         return 1;
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndFunctionWithSameName.ts:2:5]
 1 │ class C {
 2 │     x: number;
   ·     ┬
   ·     ╰── `x` has already been declared here
 3 │     x() { // error
   ·     ┬
   ·     ╰── It can not be redeclared here
 4 │         return 1;
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyAndFunctionWithSameName.ts:9:5]
  8 │ class D {
  9 │     x: number;
    ·     ┬
    ·     ╰── `x` has already been declared here
 10 │     x(v) { } // error
    ·     ┬
    ·     ╰── It can not be redeclared here
 11 │ }
    ╰────

  × Classes can't have a field named 'constructor'
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyNamedConstructor.ts:2:3]
 1 │ class X1 {
 2 │   "constructor" = 3; // Error
   ·   ─────────────
 3 │ }
   ╰────

  × Classes may not have a static property named prototype
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/propertyNamedPrototype.ts:3:12]
 2 │     prototype: number; // ok
 3 │     static prototype: C; // error
   ·            ─────────
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName.ts:2:9]
 1 │ class C {
 2 │     get x() { return 1; }
   ·         ┬
   ·         ╰── `x` has already been declared here
 3 │     get x() { return 1; } // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName.ts:7:9]
 6 │ class D {
 7 │     set x(v) {  }
   ·         ┬
   ·         ╰── `x` has already been declared here
 8 │     set x(v) {  } // error
   ·         ┬
   ·         ╰── It can not be redeclared here
 9 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName2.ts:2:16]
 1 │ class C {
 2 │     static get x() { return 1; }
   ·                ┬
   ·                ╰── `x` has already been declared here
 3 │     static get x() { return 1; } // error
   ·                ┬
   ·                ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/classes/propertyMemberDeclarations/twoAccessorsWithSameName2.ts:7:16]
 6 │ class D {
 7 │     static set x(v) {  }
   ·                ┬
   ·                ╰── `x` has already been declared here
 8 │     static set x(v) {  } // error
   ·                ┬
   ·                ╰── It can not be redeclared here
 9 │ }
   ╰────

  × TS(1071): 'static' modifier cannot appear on an index signature.
    ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature4.ts:12:5]
 11 │ interface IB {
 12 │     static [s: string]: number;
    ·     ──────
 13 │     static [s: number]: 42 | 233;
    ╰────

  × TS(1071): 'static' modifier cannot appear on an index signature.
    ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature4.ts:13:5]
 12 │     static [s: string]: number;
 13 │     static [s: number]: 42 | 233;
    ·     ──────
 14 │ }
    ╰────

  × TS(1071): 'static' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature5.ts:7:5]
 6 │ interface I {
 7 │     static readonly [s: string]: number;
   ·     ──────
 8 │     static readonly [s: number]: 42 | 233
   ╰────

  × TS(1071): 'static' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/classes/staticIndexSignature/staticIndexSignature5.ts:8:5]
 7 │     static readonly [s: string]: number;
 8 │     static readonly [s: number]: 42 | 233
   ·     ──────
 9 │ }
   ╰────

  × TS(1264): Declarations with definite assignment assertions must also have type annotations.
    ╭─[typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertions.ts:69:10]
 68 │ function f4() {
 69 │     let a!;
    ·          ─
 70 │     let b! = 1;
    ╰────

  × TS(1263): Declarations with initializers cannot also have definite assignment assertions.
    ╭─[typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertions.ts:70:10]
 69 │     let a!;
 70 │     let b! = 1;
    ·          ─
 71 │     let c!: number = 1;
    ╰────

  × TS(1263): Declarations with initializers cannot also have definite assignment assertions.
    ╭─[typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertions.ts:71:10]
 70 │     let b! = 1;
 71 │     let c!: number = 1;
    ·          ─
 72 │ }
    ╰────

  × Expected `,` but found `!`
   ╭─[typescript/tests/cases/conformance/controlFlow/definiteAssignmentAssertionsWithObjectShortHand.ts:2:16]
 1 │ const a: string | undefined = 'ff';
 2 │ const foo = { a! }
   ·                ┬
   ·                ╰── `,` expected
 3 │ 
   ╰────

  × Expected `;` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor3.ts:4:12]
 3 │ class C {
 4 │     public @dec get accessor() { return 1; }
   ·            ┬
   ·            ╰── `;` expected
 5 │ }
   ╰────

  × Expected `;` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/accessor/decoratorOnClassAccessor6.ts:4:12]
 3 │ class C {
 4 │     public @dec set accessor(value: number) { }
   ·            ┬
   ·            ╰── `;` expected
 5 │ }
   ╰────

  × Expected `,` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/constructor/parameter/decoratorOnClassConstructorParameter4.ts:4:24]
 3 │ class C {
 4 │     constructor(public @dec p: number) {}
   ·                        ┬
   ·                        ╰── `,` expected
 5 │ }
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod12.ts:6:11]
 5 │     class C extends S {
 6 │         @(super.decorator)
   ·           ─────
 7 │         method() { }
   ╰────

  × Expected `;` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod17.ts:4:18]
 3 │ class Foo {
 4 │     private prop @decorator
   ·                  ┬
   ·                  ╰── `;` expected
 5 │     foo() {
   ╰────

  × Expected `;` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethod3.ts:4:12]
 3 │ class C {
 4 │     public @dec method() {}
   ·            ┬
   ·            ╰── `;` expected
 5 │ }
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/decorators/class/method/decoratorOnClassMethodOverload1.ts:4:5]
 3 │ class C {
 4 │     @dec
   ·     ────
 5 │     method()
   ╰────

  × await expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodParameter3.ts:5:23]
 4 │   class Class {
 5 │     async method(@dec(await value) arg: number) {}
   ·                       ─────┬─────
   ·                            ╰── await expression not allowed in formal parameter
 6 │   }
   ╰────

  × Identifier expected. 'this' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/decorators/class/method/parameter/decoratorOnClassMethodThisParameter.ts:4:17]
 3 │ class C {
 4 │     method(@dec this: C) {}
   ·                 ────
 5 │ }
   ╰────

  × Expected `;` but found `@`
   ╭─[typescript/tests/cases/conformance/decorators/class/property/decoratorOnClassProperty3.ts:4:12]
 3 │ class C {
 4 │     public @dec prop;
   ·            ┬
   ·            ╰── `;` expected
 5 │ }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/decorators/decoratorMetadata-jsdoc.ts:9:9]
  8 │     @decorator()
  9 │     c?: *;
    ·         ─
 10 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnArrowFunction.ts:3:17]
 2 │ 
 3 │ var F = @dec () => {
   ·                 ──
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnEnum.ts:4:1]
 3 │ @dec
 4 │ enum E {
   · ────
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnEnum2.ts:4:5]
 3 │ enum E {
 4 │     @dec A
   ·     ─
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionDeclaration.ts:4:1]
 3 │ @dec
 4 │ function F() {
   · ────────
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionExpression.ts:3:14]
 2 │ 
 3 │ var F = @dec function () {
   ·              ────────
 4 │ }
   ╰────

  × Identifier expected. 'this' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnFunctionParameter.ts:5:22]
 4 │ 
 5 │ function direct(@dec this: C) { return this.n; }
   ·                      ────
 6 │ function called(@dec() this: C) { return this.n; }
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnImportEquals1.ts:9:5]
  8 │     @dec
  9 │     import X = M1.X;
    ·     ──────
 10 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnImportEquals2.ts:2:1]
 1 │ @dec
 2 │ import lib = require('./decoratorOnImportEquals2_0');
   · ──────
 3 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnInterface.ts:4:1]
 3 │ @dec
 4 │ interface I {
   · ─────────
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnInternalModule.ts:4:1]
 3 │ @dec
 4 │ module M {
   · ──────
 5 │     
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnTypeAlias.ts:4:1]
 3 │ @dec
 4 │ type T = number;
   · ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/decorators/invalid/decoratorOnVar.ts:4:1]
 3 │ @dec
 4 │ var x: number;
   · ───
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionGrammarError.ts:5:8]
 4 │ var a = ["./0"];
 5 │ import(...["PathModule"]);
   ·        ───
 6 │ 
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionInScriptContext2.ts:3:10]
 2 │ var p1 = import("./0");
 3 │ function arguments() { }
   ·          ─────────
   ╰────

  × Expected `from` but found `import`
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionIncorrect1.ts:2:1]
 1 │ import
 2 │ import { foo } from './0';
   · ───┬──
   ·    ╰── `from` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionIncorrect2.ts:1:16]
 1 │ var x = import { foo } from './0';
   ·                ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/dynamicImport/importCallExpressionWithTypeArgument.ts:2:16]
 1 │ "use strict"
 2 │ var p1 = import<Promise<any>>("./0");  // error
   ·                ─
 3 │ var p2 = import<>("./0");  // error
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/enums/awaitAndYield.ts:3:15]
 2 │     enum E {
 3 │         foo = await x,
   ·               ─────
 4 │         baz = yield 1,
   ╰────

  × Expected `,` but found `;`
    ╭─[typescript/tests/cases/conformance/enums/enumErrors.ts:48:18]
 47 │ 
 48 │     postSemicolon;
    ·                  ┬
    ·                  ╰── `,` expected
 49 │     postColonValueComma: 2,
    ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:12]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·            ──────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:30]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·                              ───────────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es2018/invalidTaggedTemplateEscapeSequences.ts:8:72]
 7 │ const x = tag`\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`;
 8 │ const y = `\u{hello} ${ 100 } \xtraordinary ${ 200 } wonderful ${ 300 } \uworld`; // should error with NoSubstitutionTemplate
   ·                                                                        ────────
 9 │ const z = tag`\u{hello} \xtraordinary wonderful \uworld` // should work with Tagged NoSubstitutionTemplate
   ╰────

  × Identifier expected.
   ╭─[typescript/tests/cases/conformance/es2022/arbitraryModuleNamespaceIdentifiers/arbitraryModuleNamespaceIdentifiers_syntax.ts:1:17]
 1 │ import { foo as "invalid 2" } from "./values-valid";
   ·                 ───────────
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/es6/Symbols/symbolProperty43.ts:3:6]
 2 │     [Symbol.iterator](x: string): string;
 3 │     [Symbol.iterator](x: number): number;
   ·      ───────────────
 4 │ }
   ╰────

  × TS(2414): Interface name cannot be 'symbol'
   ╭─[typescript/tests/cases/conformance/es6/Symbols/symbolType20.ts:1:11]
 1 │ interface symbol { }
   ·           ──────
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:2:5]
 1 │ var f1 = ()
 2 │     => { }
   ·     ──
 3 │ var f2 = (x: string, y: string) /*
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:4:7]
 3 │ var f2 = (x: string, y: string) /*
 4 │   */  => { }
   ·       ──
 5 │ var f3 = (x: string, y: number, ...rest)
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:6:5]
 5 │ var f3 = (x: string, y: number, ...rest)
 6 │     => { }
   ·     ──
 7 │ var f4 = (x: string, y: number, ...rest) /*
   ╰────

  × Line terminator not permitted before arrow
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:8:7]
 7 │ var f4 = (x: string, y: number, ...rest) /*
 8 │   */  => { }
   ·       ──
 9 │ var f5 = (...rest)
   ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:10:5]
  9 │ var f5 = (...rest)
 10 │     => { }
    ·     ──
 11 │ var f6 = (...rest) /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:12:7]
 11 │ var f6 = (...rest) /*
 12 │   */  => { }
    ·       ──
 13 │ var f7 = (x: string, y: number, z = 10)
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:14:5]
 13 │ var f7 = (x: string, y: number, z = 10)
 14 │     => { }
    ·     ──
 15 │ var f8 = (x: string, y: number, z = 10) /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:16:7]
 15 │ var f8 = (x: string, y: number, z = 10) /*
 16 │   */  => { }
    ·       ──
 17 │ var f9 = (a: number): number
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:18:5]
 17 │ var f9 = (a: number): number
 18 │     => a;
    ·     ──
 19 │ var f10 = (a: number) :
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:21:5]
 20 │   number
 21 │     => a
    ·     ──
 22 │ var f11 = (a: number): number /*
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:23:8]
 22 │ var f11 = (a: number): number /*
 23 │     */ => a;
    ·        ──
 24 │ var f12 = (a: number) :
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:26:8]
 25 │   number /*
 26 │     */ => a
    ·        ──
 27 │ 
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:52:5]
 51 │ foo(()
 52 │     => true);
    ·     ──
 53 │ foo(()
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:54:5]
 53 │ foo(()
 54 │     => { return false; });
    ·     ──
 55 │ 
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:59:13]
 58 │         constructor(x: number, thing = ()
 59 │             => 100) {
    ·             ──
 60 │         }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:63:13]
 62 │         public m = ()
 63 │             => 2 * 2 * 2
    ·             ──
 64 │     }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:68:13]
 67 │         claw = (()
 68 │             => 10)()
    ·             ──
 69 │     }
    ╰────

  × Line terminator not permitted before arrow
    ╭─[typescript/tests/cases/conformance/es6/arrowFunction/disallowLineTerminatorBeforeArrow.ts:72:9]
 71 │     export var v = x
 72 │         => new City(Enum.claw);
    ·         ──
 73 │ }
    ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments12.ts:2:7]
 1 │ class C {
 2 │     f(arguments) {
   ·       ─────────
 3 │         var a = () => arguments;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/arrowFunction/emitArrowFunctionWhenUsingArguments12_ES6.ts:2:7]
 1 │ class C {
 2 │     f(arguments) {
   ·       ─────────
 3 │         var a = () => arguments;
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/binaryIntegerLiteralError.ts:2:17]
 1 │ // error
 2 │ var bin1 = 0B1102110;
   ·                 ─
 3 │ var bin1 = 0b11023410;
   ╰────

  × Invalid Character `2`
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/invalidBinaryIntegerLiteralAndOctalIntegerLiteral.ts:2:16]
 1 │ // Error
 2 │ var binary = 0b21010;
   ·                ▲
 3 │ var binary1 = 0B21010;
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/es6/binaryAndOctalIntegerLiteral/octalIntegerLiteralError.ts:2:19]
 1 │ // error
 2 │ var oct1 = 0O13334823;
   ·                   ─
 3 │ var oct2 = 0o34318592;
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:4:16]
 3 │     public implements() { }
 4 │     public foo(arguments: any) { }
   ·                ──────────────
 5 │     private bar(eval:any) {
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:5:17]
 4 │     public foo(arguments: any) { }
 5 │     private bar(eval:any) {
   ·                 ────────
 6 │         arguments = "hello";
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/parseClassDeclarationInStrictModeByDefaultInES6.ts:6:9]
 5 │     private bar(eval:any) {
 6 │         arguments = "hello";
   ·         ─────────
 7 │     }
   ╰────

  × 'super' can only be referenced in a derived class.
   ╭─[typescript/tests/cases/conformance/es6/classDeclaration/superCallFromClassThatHasNoBaseTypeButWithSameSymbolInterface.ts:3:1]
 2 │     
 3 │ ╭─▶ class Foo {
 4 │ │       constructor() {
 5 │ │           super(); // error
   · │           ─────
 6 │ │       }
 7 │ ├─▶ }
   · ╰──── class does not have `extends`
   ╰────
  help: either remove this super, or extend the class

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames14_ES5.ts:5:6]
 4 │     static [true]() { }
 5 │     [[]]() { }
   ·      ─
 6 │     static [{}]() { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames14_ES6.ts:5:6]
 4 │     static [true]() { }
 5 │     [[]]() { }
   ·      ─
 6 │     static [{}]() { }
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames24_ES5.ts:7:6]
 6 │ class C extends Base {
 7 │     [super.bar()]() { }
   ·      ─────
 8 │ }
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames24_ES6.ts:9:6]
  8 │     // use of super in static properties initializers.
  9 │     [super.bar()]() { }
    ·      ─────
 10 │ }
    ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames26_ES5.ts:8:12]
 7 │     [
 8 │         { [super.bar()]: 1 }[0]
   ·            ─────
 9 │     ]() { }
   ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames26_ES6.ts:10:12]
  9 │     [
 10 │         { [super.bar()]: 1 }[0]
    ·            ─────
 11 │     ]() { }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames27_ES5.ts:4:7]
 3 │ class C extends Base {
 4 │     [(super(), "prop")]() { }
   ·       ───────
 5 │ }
   ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames27_ES6.ts:4:7]
 3 │ class C extends Base {
 4 │     [(super(), "prop")]() { }
   ·       ───────
 5 │ }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames3_ES5.ts:5:17]
 4 │     static [() => { }]() { }
 5 │     get [delete id]() { }
   ·                 ──
 6 │     set [[0, 1]](v) { }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames3_ES6.ts:5:17]
 4 │     static [() => { }]() { }
 5 │     get [delete id]() { }
   ·                 ──
 6 │     set [[0, 1]](v) { }
   ╰────

  × Identifier `` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames40_ES5.ts:8:6]
  7 │     // Computed properties
  8 │     [""]() { return new Foo }
    ·      ─┬
    ·       ╰── `` has already been declared here
  9 │     [""]() { return new Foo2 }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 10 │ }
    ╰────

  × Identifier `` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames40_ES6.ts:8:6]
  7 │     // Computed properties
  8 │     [""]() { return new Foo }
    ·      ─┬
    ·       ╰── `` has already been declared here
  9 │     [""]() { return new Foo2 }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 10 │ }
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames49_ES5.ts:9:16]
  8 │     },
  9 │     set [1 + 1]() {
    ·                ──
 10 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames49_ES6.ts:9:16]
  8 │     },
  9 │     set [1 + 1]() {
    ·                ──
 10 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames50_ES5.ts:11:16]
 10 │     },
 11 │     set [1 + 1]() {
    ·                ──
 12 │         // just throw
    ╰────

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/es6/computedProperties/computedPropertyNames50_ES6.ts:11:16]
 10 │     },
 11 │     set [1 + 1]() {
    ·                ──
 12 │         // just throw
    ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/declarationWithNoInitializer.ts:1:5]
 1 │ var [a, b];          // Error, no initializer
   ·     ──────
 2 │ var {c, d};          // Error, no initializer
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/declarationWithNoInitializer.ts:2:5]
 1 │ var [a, b];          // Error, no initializer
 2 │ var {c, d};          // Error, no initializer
   ·     ──────
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringObjectBindingPatternAndAssignment3.ts:2:7]
 1 │ // Error
 2 │ var {h?} = { h?: 1 };
   ·       ┬
   ·       ╰── `,` expected
 3 │ var {i}: string | number = { i: 2 };
   ╰────

  × Identifier `number` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES6.ts:96:18]
 95 │ 
 96 │ function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
    ·                  ───┬──  ───┬──
    ·                     │       ╰── It can not be redeclared here
    ·                     ╰── `number` has already been declared here
 97 │ 
    ╰────

  × Identifier `number` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration1ES6.ts:96:18]
 95 │ 
 96 │ function e6({x: [number, number, number]}) { }  // error, duplicate identifier;
    ·                  ───┬──          ───┬──
    ·                     │               ╰── It can not be redeclared here
    ·                     ╰── `number` has already been declared here
 97 │ 
    ╰────

  × Expected `,` but found `)`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration2.ts:7:29]
 6 │ function a0([a, b, [[c]]]: [number, number, string[][]]) { }
 7 │ a0([1, "string", [["world"]]);      // Error
   ·                             ┬
   ·                             ╰── `,` expected
 8 │ a0([1, 2, [["world"]], "string"]);  // Error
   ╰────

  × A rest parameter cannot be optional
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts:14:17]
 13 │ function a2(...a: someArray) { }  // Error, rest parameter must be array type
 14 │ function a3(...b?) { }            // Error, can't be optional
    ·                 ─
 15 │ function a4(...b = [1,2,3]) { }   // Error, can't have initializer
    ╰────

  × A rest element cannot have an initializer.
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts:15:16]
 14 │ function a3(...b?) { }            // Error, can't be optional
 15 │ function a4(...b = [1,2,3]) { }   // Error, can't have initializer
    ·                ───────────
 16 │ function a5([a, b, [[c]]]) { }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration4.ts:29:24]
 28 │ class C {
 29 │     constructor(public ...temp) { }  // Error, rest parameter can't have properties
    ·                        ───
 30 │ }
    ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringParameterDeclaration6.ts:7:18]
 6 │ // Error
 7 │ function a({while}) { }
   ·                  ┬
   ·                  ╰── `:` expected
 8 │ function a1({public}) { }
   ╰────

  × Identifier `foo1` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:21:7]
 20 │ 
 21 │ let { foo1, foo1 } = { foo1: 10 };
    ·       ──┬─  ──┬─
    ·         │     ╰── It can not be redeclared here
    ·         ╰── `foo1` has already been declared here
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
    ╰────

  × Identifier `foo2` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:22:7]
 21 │ let { foo1, foo1 } = { foo1: 10 };
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
    ·       ──┬─        ──┬─
    ·         │           ╰── It can not be redeclared here
    ·         ╰── `foo2` has already been declared here
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
    ╰────

  × Identifier `foo3` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:23:13]
 22 │ let { foo2, bar2: foo2 } = { foo2: 20, bar2: 220 };
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `foo3` has already been declared here
 24 │ const { foo4, foo4 } = { foo4: 40 };
    ╰────

  × Identifier `foo4` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:24:9]
 23 │ let { bar3: foo3, foo3 } = { foo3: 30, bar3: 330 };
 24 │ const { foo4, foo4 } = { foo4: 40 };
    ·         ──┬─  ──┬─
    ·           │     ╰── It can not be redeclared here
    ·           ╰── `foo4` has already been declared here
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
    ╰────

  × Identifier `foo5` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:25:9]
 24 │ const { foo4, foo4 } = { foo4: 40 };
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
    ·         ──┬─        ──┬─
    ·           │           ╰── It can not be redeclared here
    ·           ╰── `foo5` has already been declared here
 26 │ const { bar6: foo6, foo6 } = { foo6: 60, bar6: 660 };
    ╰────

  × Identifier `foo6` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:26:15]
 25 │ const { foo5, bar5: foo5 } = { foo5: 50, bar5: 550 };
 26 │ const { bar6: foo6, foo6 } = { foo6: 60, bar6: 660 };
    ·               ──┬─  ──┬─
    ·                 │     ╰── It can not be redeclared here
    ·                 ╰── `foo6` has already been declared here
 27 │ 
    ╰────

  × Identifier `blah1` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:28:6]
 27 │ 
 28 │ let [blah1, blah1] = [111, 222];
    ·      ──┬──  ──┬──
    ·        │      ╰── It can not be redeclared here
    ·        ╰── `blah1` has already been declared here
 29 │ const [blah2, blah2] = [333, 444];
    ╰────

  × Identifier `blah2` has already been declared
    ╭─[typescript/tests/cases/conformance/es6/destructuring/destructuringSameNames.ts:29:8]
 28 │ let [blah1, blah1] = [111, 222];
 29 │ const [blah2, blah2] = [333, 444];
    ·        ──┬──  ──┬──
    ·          │      ╰── It can not be redeclared here
    ·          ╰── `blah2` has already been declared here
    ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES5iterable.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:2:9]
 1 │ (function () {
 2 │     var {};
   ·         ──
 3 │     let {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:3:9]
 2 │     var {};
 3 │     let {};
   ·         ──
 4 │     const {};
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:4:11]
 3 │     let {};
 4 │     const {};
   ·           ──
 5 │ 
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:6:9]
 5 │ 
 6 │     var [];
   ·         ──
 7 │     let [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:7:9]
 6 │     var [];
 7 │     let [];
   ·         ──
 8 │     const [];
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/es6/destructuring/emptyVariableDeclarationBindingPatterns02_ES6.ts:8:11]
 7 │     let [];
 8 │     const [];
   ·           ──
 9 │ })();
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers01.ts:1:13]
 1 │ var { while } = { while: 1 }
   ·             ┬
   ·             ╰── `:` expected
   ╰────

  × Identifier expected. 'while' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers02.ts:1:14]
 1 │ var { while: while } = { while: 1 }
   ·              ─────
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers03.ts:1:15]
 1 │ var { "while" } = { while: 1 }
   ·               ┬
   ·               ╰── `:` expected
   ╰────

  × Identifier expected. 'while' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/objectBindingPatternKeywordIdentifiers04.ts:1:16]
 1 │ var { "while": while } = { while: 1 }
   ·                ─────
   ╰────

  × A rest element cannot have an initializer.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restElementWithInitializer1.ts:2:9]
 1 │ var a: number[];
 2 │ var [...x = a] = a;  // Error, rest element cannot have initializer
   ·         ─────
   ╰────

  × Invalid rest operator's argument.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restElementWithInitializer2.ts:3:5]
 2 │ var x: number[];
 3 │ [...x = a] = a;  // Error, rest element cannot have initializer
   ·     ─────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restElementWithInitializer2.ts:3:5]
 2 │ var x: number[];
 3 │ [...x = a] = a;  // Error, rest element cannot have initializer
   ·     ─────
   ╰────

  × Invalid rest operator's argument.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts:1:6]
 1 │ ({...{}} = {});
   ·      ──
 2 │ ({...({})} = {});
   ╰────

  × Invalid rest operator's argument.
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts:2:6]
 1 │ ({...{}} = {});
 2 │ ({...({})} = {});
   ·      ────
 3 │ ({...[]} = {});
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es6/destructuring/restPropertyWithBindingPattern.ts:2:6]
 1 │ ({...{}} = {});
 2 │ ({...({})} = {});
   ·      ────
 3 │ ({...[]} = {});
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of-excess-declarations.ts:1:6]
 1 │ for (const a, { [b]: c} of [1]) {
   ·      ──────────────────
 2 │ 
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of2.ts:1:7]
 1 │ const v;
   ·       ─
 2 │ for (v of []) { }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of3.ts:2:6]
 1 │ var v: any;
 2 │ for (v++ of []) { }
   ·      ───
   ╰────

  × `let` cannot be declared as a variable name inside of a `let` declaration
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of51.ts:1:10]
 1 │ for (let let of []) {}
   ·          ───
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of52.ts:1:11]
 1 │ for (let [v, v] of [[]]) {}
   ·           ┬  ┬
   ·           │  ╰── It can not be redeclared here
   ·           ╰── `v` has already been declared here
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of53.ts:1:10]
 1 │ for (let v of []) {
   ·          ┬
   ·          ╰── `v` has already been declared here
 2 │     var v;
   ·         ┬
   ·         ╰── It can not be redeclared here
 3 │ }
   ╰────

  × Identifier `v` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/for-ofStatements/for-of54.ts:1:10]
 1 │ for (let v of []) {
   ·          ┬
   ·          ╰── `v` has already been declared here
 2 │     var v = 0;
   ·         ┬
   ·         ╰── It can not be redeclared here
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration10_es6.ts:1:26]
 1 │ function * foo(a = yield => yield) {
   ·                          ──
 2 │ }
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration12_es6.ts:1:20]
 1 │ var v = function * yield() { }
   ·                    ─────
   ╰────

  × Cannot use `yield` as an identifier in a generator context
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration5_es6.ts:1:14]
 1 │ function*foo(yield) {
   ·              ─────
 2 │ }
   ╰────

  × yield expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration6_es6.ts:1:18]
 1 │ function*foo(a = yield) {
   ·                  ──┬──
   ·                    ╰── yield expression not allowed in formal parameter
 2 │ }
   ╰────

  × yield expression not allowed in formal parameter
   ╭─[typescript/tests/cases/conformance/es6/functionDeclarations/FunctionDeclaration7_es6.ts:3:20]
 2 │   // 'yield' here is an identifier, and not a yield expression.
 3 │   function*foo(a = yield) {
   ·                    ──┬──
   ·                      ╰── yield expression not allowed in formal parameter
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments2_es6.ts:1:12]
 1 │ var v = { *() { } }
   ·            ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments3_es6.ts:1:12]
 1 │ var v = { *{ } }
   ·            ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments4_es6.ts:1:13]
 1 │ var v = { * }
   ·             ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/functionPropertyAssignments/FunctionPropertyAssignments6_es6.ts:1:12]
 1 │ var v = { *<T>() { } }
   ·            ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration4_es6.ts:2:5]
 1 │ class C {
 2 │    *() { }
   ·     ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration5_es6.ts:3:1]
 2 │    *
 3 │ }
   · ─
   ╰────

  × Expected `(` but found `}`
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration6_es6.ts:3:1]
 2 │    *foo
 3 │ }
   · ┬
   · ╰── `(` expected
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/es6/memberFunctionDeclarations/MemberFunctionDeclaration8_es6.ts:4:12]
 3 │     // Make sure we don't think of *bar as the start of a generator method.
 4 │     if (a) ¬ * bar;
   ·            ─
 5 │     return bar;
   ╰────

  × Identifier expected. 'yield' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithContextualKeywordNames01.ts:1:17]
 1 │ import { set as yield } from "./t1";
   ·                 ─────
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithContextualKeywordNames01.ts:1:17]
 1 │ import { set as yield } from "./t1";
   ·                 ─────
   ╰────

  × Expected `,` but found `string`
   ╭─[typescript/tests/cases/conformance/es6/modules/exportsAndImportsWithUnderscores1.ts:5:5]
 4 │     "_": 10
 5 │     "___": 30
   ·     ──┬──
   ·       ╰── `,` expected
 6 │ }
   ╰────

  × Identifier `C` has already been declared
   ╭─[typescript/tests/cases/conformance/es6/modules/multipleDefaultExports03.ts:1:22]
 1 │ export default class C {
   ·                      ┬
   ·                      ╰── `C` has already been declared here
 2 │ }
 3 │ 
 4 │ export default class C {
   ·                      ┬
   ·                      ╰── It can not be redeclared here
 5 │ }
   ╰────

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:1:11]
 1 │ const a = new.target;
   ·           ──────────
 2 │ const b = () => new.target;
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:2:17]
 1 │ const a = new.target;
 2 │ const b = () => new.target;
   ·                 ──────────
 3 │ 
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:5:6]
 4 │ class C {
 5 │     [new.target]() { }
   ·      ──────────
 6 │     c() { return new.target; }
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:9:15]
  8 │     set e(_) { _ = new.target; }
  9 │     f = () => new.target;
    ·               ──────────
 10 │ 
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:11:13]
 10 │ 
 11 │     static [new.target]() { }
    ·             ──────────
 12 │     static g() { return new.target; }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:15:22]
 14 │     static set i(_) { _ = new.target; }
 15 │     static j = () => new.target;
    ·                      ──────────
 16 │ }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:19:6]
 18 │ const O = {
 19 │     [new.target]: undefined,
    ·      ──────────
 20 │     k() { return new.target; },
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es5.ts:23:8]
 22 │     set m(_) { _ = new.target; },
 23 │     n: new.target,
    ·        ──────────
 24 │ };
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:1:11]
 1 │ const a = new.target;
   ·           ──────────
 2 │ const b = () => new.target;
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:2:17]
 1 │ const a = new.target;
 2 │ const b = () => new.target;
   ·                 ──────────
 3 │ 
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
   ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:5:6]
 4 │ class C {
 5 │     [new.target]() { }
   ·      ──────────
 6 │     c() { return new.target; }
   ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:9:15]
  8 │     set e(_) { _ = new.target; }
  9 │     f = () => new.target;
    ·               ──────────
 10 │ 
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:11:13]
 10 │ 
 11 │     static [new.target]() { }
    ·             ──────────
 12 │     static g() { return new.target; }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:15:22]
 14 │     static set i(_) { _ = new.target; }
 15 │     static j = () => new.target;
    ·                      ──────────
 16 │ }
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:19:6]
 18 │ const O = {
 19 │     [new.target]: undefined,
    ·      ──────────
 20 │     k() { return new.target; },
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Unexpected new.target expression
    ╭─[typescript/tests/cases/conformance/es6/newTarget/invalidNewTarget.es6.ts:23:8]
 22 │     set m(_) { _ = new.target; },
 23 │     n: new.target,
    ·        ──────────
 24 │ };
    ╰────
  help: new.target is only allowed in constructors and functions invoked using thew `new` operator

  × Expected `:` but found `,`
   ╭─[typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorFromNotUsingIdentifier.ts:3:20]
 2 │ var y = {
 3 │     "stringLiteral",
   ·                    ┬
   ·                    ╰── `:` expected
 4 │     42,
   ╰────

  × Expected `,` but found `.`
    ╭─[typescript/tests/cases/conformance/es6/shorthandPropertyAssignment/objectLiteralShorthandPropertiesErrorWithModule.ts:10:10]
  9 │     export var y = {
 10 │         m.x  // error
    ·          ┬
    ·          ╰── `,` expected
 11 │     };
    ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/es6/templates/TemplateExpression1.ts:1:19]
 1 │ var v = `foo ${ a 
   ╰────

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/conformance/es6/templates/taggedTemplatesWithTypeArguments2.ts:36:9]
 35 │     constructor() {
 36 │         super<number, string, T> `hello world`;
    ·         ─────
 37 │     }
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInFunctionParameterType.ts:1:12]
 1 │ function f(`hello`);
   ·            ───────
 2 │ function f(x: string);
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInFunctionParameterTypeES6.ts:1:12]
 1 │ function f(`hello`);
   ·            ───────
 2 │ function f(x: string);
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInModuleName.ts:1:8]
 1 │ declare module `M1` {
   ·        ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInModuleNameES6.ts:1:8]
 1 │ declare module `M1` {
   ·        ▲
 2 │ }
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInObjectLiteral.ts:3:5]
 2 │     a: `abc${ 123 }def`,
 3 │     `b`: 321
   ·     ───
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInObjectLiteralES6.ts:3:5]
 2 │     a: `abc${ 123 }def`,
 3 │     `b`: 321
   ·     ───
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyName1.ts:2:5]
 1 │ var x = {
 2 │     `a`: 321
   ·     ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyName2.ts:2:5]
 1 │ var x = {
 2 │     `abc${ 123 }def${ 456 }ghi`: 321
   ·     ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyNameES6_1.ts:2:5]
 1 │ var x = {
 2 │     `a`: 321
   ·     ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringInPropertyNameES6_2.ts:2:5]
 1 │ var x = {
 2 │     `abc${ 123 }def${ 456 }ghi`: 321
   ·     ──────
 3 │ }
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated1.ts:1:1]
 1 │ `
   · ─
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated1_ES6.ts:1:1]
 1 │ `
   · ─
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated2.ts:1:1]
 1 │ `\`
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated2_ES6.ts:1:1]
 1 │ `\`
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated3.ts:1:1]
 1 │ `\\
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated3_ES6.ts:1:1]
 1 │ `\\
   · ───
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated4.ts:1:1]
 1 │ `\\\`
   · ─────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated4_ES6.ts:1:1]
 1 │ `\\\`
   · ─────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated5.ts:1:1]
 1 │ `\\\\\`
   · ───────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringUnterminated5_ES6.ts:1:1]
 1 │ `\\\\\`
   · ───────
   ╰────

  × Expected `(` but found `{`
   ╭─[typescript/tests/cases/conformance/es6/templates/templateStringWithEmbeddedYieldKeyword.ts:1:15]
 1 │ function* gen {
   ·               ┬
   ·               ╰── `(` expected
 2 │     // Once this is supported, yield *must* be parenthesized.
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions07.ts:3:11]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = /\u{110000}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions12.ts:1:11]
 1 │ var x = /\u{FFFFFFFF}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions14.ts:2:11]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = /\u{-DDDD}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions17.ts:1:11]
 1 │ var x = /\u{r}\u{n}\u{t}/gu;
   ·           ─
   ╰────

  × Invalid regular expression: Invalid unicode escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInRegularExpressions19.ts:1:11]
 1 │ var x = /\u{}/gu;
   ·           ─
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings07.ts:3:10]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = "\u{110000}";
   ·          ─────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings12.ts:1:10]
 1 │ var x = "\u{FFFFFFFF}";
   ·          ─────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings14.ts:2:10]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = "\u{-DDDD}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:10]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:15]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·               ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings17.ts:1:20]
 1 │ var x = "\u{r}\u{n}\u{t}";
   ·                    ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings19.ts:1:10]
 1 │ var x = "\u{}";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings20.ts:1:10]
 1 │ var x = "\u{";
   ·          ───
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings21.ts:1:10]
 1 │ var x = "\u{67";
   ·          ─────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings22.ts:1:10]
 1 │ var x = "\u{00000000000067";
   ·          ─────────────────
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings24.ts:1:10]
 1 │ var x = "\u{00000000000067
   ·          ─────────────────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings24.ts:1:9]
 1 │ var x = "\u{00000000000067
   ·         ──────────────────
   ╰────

  × Unterminated string
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInStrings25.ts:1:9]
 1 │ var x = "\u{00000000000067}
   ·         ───────────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates07.ts:3:10]
 2 │ //  1. Assert: 0 ≤ cp ≤ 0x10FFFF.
 3 │ var x = `\u{110000}`;
   ·          ──────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates12.ts:1:10]
 1 │ var x = `\u{FFFFFFFF}`;
   ·          ────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates14.ts:2:10]
 1 │ // Shouldn't work, negatives are not allowed.
 2 │ var x = `\u{-DDDD}`;
   ·          ─────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates17.ts:1:10]
 1 │ var x = `\u{r}\u{n}\u{t}`;
   ·          ───────────────
   ╰────

  × Bad escape sequence in untagged template literal
   ╭─[typescript/tests/cases/conformance/es6/unicodeExtendedEscapes/unicodeExtendedEscapesInTemplates19.ts:1:10]
 1 │ var x = `\u{}`;
   ·          ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration11_es6.ts:2:4]
 1 │ "use strict";
 2 │ let
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration13_es6.ts:4:5]
 3 │ var let: any;
 4 │ let[0] = 100;
   ·     ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration1_es6.ts:1:6]
 1 │ const
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration2_es6.ts:1:7]
 1 │ const a
   ·       ─
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/es6/variableDeclarations/VariableDeclaration4_es6.ts:1:7]
 1 │ const a: number
   ·       ─────────
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression12_es6.ts:3:6]
 2 │   constructor() {
 3 │      yield foo
   ·      ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression14_es6.ts:3:6]
 2 │   foo() {
 3 │      yield foo
   ·      ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression15_es6.ts:2:6]
 1 │ var v = () => {
 2 │      yield foo
   ·      ─────
 3 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression16_es6.ts:3:5]
 2 │   function bar() {
 3 │     yield foo;
   ·     ─────
 4 │   }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression17_es6.ts:1:23]
 1 │ var v = { get foo() { yield foo; } }
   ·                       ─────
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression18_es6.ts:2:1]
 1 │ "use strict";
 2 │ yield(foo);
   · ─────
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression20_es6.ts:3:8]
 2 │   return () => ({
 3 │     b: yield 2, // error
   ·        ─────
 4 │   });
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression2_es6.ts:1:1]
 1 │ yield foo;
   · ─────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldExpression5_es6.ts:3:1]
 2 │   yield*
 3 │ }
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldStarExpression2_es6.ts:1:8]
 1 │ yield *;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/YieldStarExpression3_es6.ts:2:12]
 1 │ function *g() {
 2 │     yield *;
   ·            ─
 3 │ }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck32.ts:2:29]
 1 │ var s: string;
 2 │ var f: () => number = () => yield s;
   ·                             ─────
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck39.ts:7:13]
 6 │     class C {
 7 │         x = yield 0;
   ·             ─────
 8 │     }
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck57.ts:3:13]
 2 │     class C {
 3 │         x = yield 0;
   ·             ─────
 4 │     };
   ╰────

  × A 'yield' expression is only allowed in a generator body.
   ╭─[typescript/tests/cases/conformance/es6/yieldExpressions/generatorTypeCheck58.ts:3:20]
 2 │     class C {
 3 │         static x = yield 0;
   ·                    ─────
 4 │     };
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/compoundExponentiationAssignmentLHSIsValue.ts:7:9]
 6 │     constructor() {
 7 │         this **= value;
   ·         ────
 8 │     }
   ╰────

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:7:8]
 6 │ // TempateHead & TemplateTail are empty
 7 │ `${1 + typeof t1 ** t2 ** t1}`;
   ·        ─────────
 8 │ `${-t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:8:4]
 7 │ `${1 + typeof t1 ** t2 ** t1}`;
 8 │ `${-t1 ** t2 - t1}`;
   ·    ───
 9 │ `${-++t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:9:4]
  8 │ `${-t1 ** t2 - t1}`;
  9 │ `${-++t1 ** t2 - t1}`;
    ·    ─────
 10 │ `${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:10:4]
  9 │ `${-++t1 ** t2 - t1}`;
 10 │ `${-t1++ ** t2 - t1}`;
    ·    ─────
 11 │ `${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:11:4]
 10 │ `${-t1++ ** t2 - t1}`;
 11 │ `${!t1 ** t2 ** --t1 }`;
    ·    ───
 12 │ `${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:12:4]
 11 │ `${!t1 ** t2 ** --t1 }`;
 12 │ `${typeof t1 ** t2 ** t1}`;
    ·    ─────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:14:4]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·    ───
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:14:21]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·                     ───
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:15:4]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·    ─────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:15:23]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·                       ─────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:16:4]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·    ─────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:16:23]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·                       ─────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:17:4]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·    ───
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:17:25]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·                         ───
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:18:4]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·    ─────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:18:28]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·                            ─────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:19:8]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·        ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:19:36]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·                                    ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:21:4]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·    ───
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:21:34]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·                                  ───
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:22:4]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·    ─────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:22:36]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·                                    ─────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:23:4]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·    ─────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:23:36]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·                                    ─────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:24:4]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·    ───
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:24:38]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·                                      ───
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:25:4]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·    ─────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:25:41]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·                                         ─────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:26:8]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·        ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError1.ts:26:49]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·                                                 ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:7:10]
 6 │ // With templateHead
 7 │ `hello ${-t1 ** t2 - t1}`;
   ·          ───
 8 │ `hello ${-++t1 ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:8:10]
 7 │ `hello ${-t1 ** t2 - t1}`;
 8 │ `hello ${-++t1 ** t2 - t1}`;
   ·          ─────
 9 │ `hello ${-t1++ ** t2 - t1}`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:9:10]
  8 │ `hello ${-++t1 ** t2 - t1}`;
  9 │ `hello ${-t1++ ** t2 - t1}`;
    ·          ─────
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:10:10]
  9 │ `hello ${-t1++ ** t2 - t1}`;
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
    ·          ───
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:11:10]
 10 │ `hello ${!t1 ** t2 ** --t1 }`;
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
    ·          ─────────
 12 │ `hello ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:12:14]
 11 │ `hello ${typeof t1 ** t2 ** t1}`;
 12 │ `hello ${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:14:10]
 13 │ 
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·          ───
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:14:27]
 13 │ 
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
    ·                           ───
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:15:10]
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·          ─────
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:15:29]
 14 │ `hello ${-t1 ** t2 - t1}${-t1 ** t2 - t1}`;
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
    ·                             ─────
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:16:10]
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·          ─────
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:16:29]
 15 │ `hello ${-++t1 ** t2 - t1}${-++t1 ** t2 - t1}`;
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
    ·                             ─────
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:17:10]
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·          ───
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:17:31]
 16 │ `hello ${-t1++ ** t2 - t1}${-t1++ ** t2 - t1}`;
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
    ·                               ───
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:18:10]
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·          ─────────
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:18:34]
 17 │ `hello ${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 }`;
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
    ·                                  ─────────
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:19:14]
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:19:42]
 18 │ `hello ${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1}`;
 19 │ `hello ${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1}`;
    ·                                          ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:21:10]
 20 │ 
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·          ───
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:21:40]
 20 │ 
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
    ·                                        ───
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:22:10]
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·          ─────
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:22:42]
 21 │ `hello ${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1}`;
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
    ·                                          ─────
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:23:10]
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·          ─────
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:23:42]
 22 │ `hello ${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1}`;
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
    ·                                          ─────
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:24:10]
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·          ───
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:24:44]
 23 │ `hello ${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1}`;
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
    ·                                            ───
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:25:10]
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·          ─────────
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:25:47]
 24 │ `hello ${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 }`;
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
    ·                                               ─────────
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:26:14]
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·              ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError2.ts:26:55]
 25 │ `hello ${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1}`;
 26 │ `hello ${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1}`;
    ·                                                       ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:7:4]
 6 │ // With TemplateTail
 7 │ `${-t1 ** t2 - t1} world`;
   ·    ───
 8 │ `${-++t1 ** t2 - t1} world`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:8:4]
 7 │ `${-t1 ** t2 - t1} world`;
 8 │ `${-++t1 ** t2 - t1} world`;
   ·    ─────
 9 │ `${-t1++ ** t2 - t1} world`;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:9:4]
  8 │ `${-++t1 ** t2 - t1} world`;
  9 │ `${-t1++ ** t2 - t1} world`;
    ·    ─────
 10 │ `${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:10:4]
  9 │ `${-t1++ ** t2 - t1} world`;
 10 │ `${!t1 ** t2 ** --t1 } world`;
    ·    ───
 11 │ `${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:11:4]
 10 │ `${!t1 ** t2 ** --t1 } world`;
 11 │ `${typeof t1 ** t2 ** t1} world`;
    ·    ─────────
 12 │ `${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:12:8]
 11 │ `${typeof t1 ** t2 ** t1} world`;
 12 │ `${1 + typeof t1 ** t2 ** t1} world`;
    ·        ─────────
 13 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:14:4]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
    ·    ───
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:14:21]
 13 │ 
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
    ·                     ───
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:15:4]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ·    ─────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:15:23]
 14 │ `${-t1 ** t2 - t1}${-t1 ** t2 - t1} world`;
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
    ·                       ─────
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:16:4]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ·    ─────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:16:23]
 15 │ `${-++t1 ** t2 - t1}${-++t1 ** t2 - t1} world`;
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
    ·                       ─────
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:17:4]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ·    ───
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:17:25]
 16 │ `${-t1++ ** t2 - t1}${-t1++ ** t2 - t1} world`;
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
    ·                         ───
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:18:4]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ·    ─────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:18:28]
 17 │ `${!t1 ** t2 ** --t1 }${!t1 ** t2 ** --t1 } world`;
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
    ·                            ─────────
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:19:8]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ·        ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:19:36]
 18 │ `${typeof t1 ** t2 ** t1}${typeof t1 ** t2 ** t1} world`;
 19 │ `${1 + typeof t1 ** t2 ** t1}${1 + typeof t1 ** t2 ** t1} world`;
    ·                                    ─────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:21:4]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
    ·    ───
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:21:34]
 20 │ 
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
    ·                                  ───
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:22:4]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ·    ─────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:22:36]
 21 │ `${-t1 ** t2 - t1} hello world ${-t1 ** t2 - t1} !!`;
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
    ·                                    ─────
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:23:4]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ·    ─────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:23:36]
 22 │ `${-++t1 ** t2 - t1} hello world ${-++t1 ** t2 - t1} !!`;
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
    ·                                    ─────
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:24:4]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ·    ───
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:24:38]
 23 │ `${-t1++ ** t2 - t1} hello world ${-t1++ ** t2 - t1} !!`;
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
    ·                                      ───
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:25:4]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ·    ─────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:25:41]
 24 │ `${!t1 ** t2 ** --t1 } hello world ${!t1 ** t2 ** --t1 } !!`;
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
    ·                                         ─────────
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:26:8]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ·        ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorInTemplateStringWithSyntaxError3.ts:26:49]
 25 │ `${typeof t1 ** t2 ** t1} hello world ${typeof t1 ** t2 ** t1} !!`;
 26 │ `${1 + typeof t1 ** t2 ** t1} hello world ${1 + typeof t1 ** t2 ** t1} !!`;
    ·                                                 ─────────
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:2:1]
 1 │ // Error: early syntax error using ES7 SimpleUnaryExpression on left-hand side without ()
 2 │ -1 ** 2;
   · ──
 3 │ +1 ** 2
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:3:1]
 2 │ -1 ** 2;
 3 │ +1 ** 2
   · ──
 4 │ 1 ** -2 ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:4:6]
 3 │ +1 ** 2
 4 │ 1 ** -2 ** 3;
   ·      ──
 5 │ 1 ** -2 ** -3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:5:6]
 4 │ 1 ** -2 ** 3;
 5 │ 1 ** -2 ** -3;
   ·      ──
 6 │ -1 ** -2 ** -3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:6:7]
 5 │ 1 ** -2 ** -3;
 6 │ -1 ** -2 ** -3;
   ·       ──
 7 │ -(1 ** 2) ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:6:1]
 5 │ 1 ** -2 ** -3;
 6 │ -1 ** -2 ** -3;
   · ──
 7 │ -(1 ** 2) ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:7:1]
 6 │ -1 ** -2 ** -3;
 7 │ -(1 ** 2) ** 3;
   · ─────────
 8 │ 
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:11:1]
 10 │ 
 11 │ -++temp ** 3;
    · ───────
 12 │ +--temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:12:1]
 11 │ -++temp ** 3;
 12 │ +--temp ** 3;
    · ───────
 13 │ -temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:13:1]
 12 │ +--temp ** 3;
 13 │ -temp++ ** 3;
    · ───────
 14 │ +temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:14:1]
 13 │ -temp++ ** 3;
 14 │ +temp-- ** 3;
    · ───────
 15 │ 1 ** -++temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:15:6]
 14 │ +temp-- ** 3;
 15 │ 1 ** -++temp ** 3;
    ·      ───────
 16 │ 1 ** +--temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:16:6]
 15 │ 1 ** -++temp ** 3;
 16 │ 1 ** +--temp ** 3;
    ·      ───────
 17 │ 1 ** -temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:17:6]
 16 │ 1 ** +--temp ** 3;
 17 │ 1 ** -temp++ ** 3;
    ·      ───────
 18 │ 1 ** +temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:18:6]
 17 │ 1 ** -temp++ ** 3;
 18 │ 1 ** +temp-- ** 3;
    ·      ───────
 19 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:20:1]
 19 │ 
 20 │ -3 ** temp++;
    · ──
 21 │ -3 ** temp--;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:21:1]
 20 │ -3 ** temp++;
 21 │ -3 ** temp--;
    · ──
 22 │ -3 ** ++temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:22:1]
 21 │ -3 ** temp--;
 22 │ -3 ** ++temp;
    · ──
 23 │ -3 ** --temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:23:1]
 22 │ -3 ** ++temp;
 23 │ -3 ** --temp;
    · ──
 24 │ +3 ** temp++;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:24:1]
 23 │ -3 ** --temp;
 24 │ +3 ** temp++;
    · ──
 25 │ +3 ** temp--;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:25:1]
 24 │ +3 ** temp++;
 25 │ +3 ** temp--;
    · ──
 26 │ +3 ** ++temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:26:1]
 25 │ +3 ** temp--;
 26 │ +3 ** ++temp;
    · ──
 27 │ +3 ** --temp;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:27:1]
 26 │ +3 ** ++temp;
 27 │ +3 ** --temp;
    · ──
 28 │ -3 ** temp++ ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:28:1]
 27 │ +3 ** --temp;
 28 │ -3 ** temp++ ** 2;
    · ──
 29 │ -3 ** temp-- ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:29:1]
 28 │ -3 ** temp++ ** 2;
 29 │ -3 ** temp-- ** 2;
    · ──
 30 │ -3 ** ++temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:30:1]
 29 │ -3 ** temp-- ** 2;
 30 │ -3 ** ++temp ** 2;
    · ──
 31 │ -3 ** --temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:31:1]
 30 │ -3 ** ++temp ** 2;
 31 │ -3 ** --temp ** 2;
    · ──
 32 │ +3 ** temp++ ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:32:1]
 31 │ -3 ** --temp ** 2;
 32 │ +3 ** temp++ ** 2;
    · ──
 33 │ +3 ** temp-- ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:33:1]
 32 │ +3 ** temp++ ** 2;
 33 │ +3 ** temp-- ** 2;
    · ──
 34 │ +3 ** ++temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:34:1]
 33 │ +3 ** temp-- ** 2;
 34 │ +3 ** ++temp ** 2;
    · ──
 35 │ +3 ** --temp ** 2;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError1.ts:35:1]
 34 │ +3 ** ++temp ** 2;
 35 │ +3 ** --temp ** 2;
    · ──
 36 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:4:1]
 3 │ 
 4 │ delete --temp ** 3;
   · ─────────────
 5 │ delete ++temp ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:5:1]
 4 │ delete --temp ** 3;
 5 │ delete ++temp ** 3;
   · ─────────────
 6 │ delete temp-- ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:6:1]
 5 │ delete ++temp ** 3;
 6 │ delete temp-- ** 3;
   · ─────────────
 7 │ delete temp++ ** 3;
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
   ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:7:1]
 6 │ delete temp-- ** 3;
 7 │ delete temp++ ** 3;
   · ─────────────
 8 │ 
   ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:10:6]
  9 │ 
 10 │ 1 ** delete --temp ** 3;
    ·      ─────────────
 11 │ 1 ** delete ++temp ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:11:6]
 10 │ 1 ** delete --temp ** 3;
 11 │ 1 ** delete ++temp ** 3;
    ·      ─────────────
 12 │ 1 ** delete temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:12:6]
 11 │ 1 ** delete ++temp ** 3;
 12 │ 1 ** delete temp-- ** 3;
    ·      ─────────────
 13 │ 1 ** delete temp++ ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:13:6]
 12 │ 1 ** delete temp-- ** 3;
 13 │ 1 ** delete temp++ ** 3;
    ·      ─────────────
 14 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:15:1]
 14 │ 
 15 │ typeof --temp ** 3;
    · ─────────────
 16 │ typeof temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:16:1]
 15 │ typeof --temp ** 3;
 16 │ typeof temp-- ** 3;
    · ─────────────
 17 │ typeof 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:17:1]
 16 │ typeof temp-- ** 3;
 17 │ typeof 3 ** 4;
    · ────────
 18 │ typeof temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:18:1]
 17 │ typeof 3 ** 4;
 18 │ typeof temp++ ** 4;
    · ─────────────
 19 │ typeof temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:19:1]
 18 │ typeof temp++ ** 4;
 19 │ typeof temp-- ** 4;
    · ─────────────
 20 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:21:6]
 20 │ 
 21 │ 1 ** typeof --temp ** 3;
    ·      ─────────────
 22 │ 1 ** typeof temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:22:6]
 21 │ 1 ** typeof --temp ** 3;
 22 │ 1 ** typeof temp-- ** 3;
    ·      ─────────────
 23 │ 1 ** typeof 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:23:6]
 22 │ 1 ** typeof temp-- ** 3;
 23 │ 1 ** typeof 3 ** 4;
    ·      ────────
 24 │ 1 ** typeof temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:24:6]
 23 │ 1 ** typeof 3 ** 4;
 24 │ 1 ** typeof temp++ ** 4;
    ·      ─────────────
 25 │ 1 ** typeof temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:25:6]
 24 │ 1 ** typeof temp++ ** 4;
 25 │ 1 ** typeof temp-- ** 4;
    ·      ─────────────
 26 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:27:1]
 26 │ 
 27 │ void --temp ** 3;
    · ───────────
 28 │ void temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:28:1]
 27 │ void --temp ** 3;
 28 │ void temp-- ** 3;
    · ───────────
 29 │ void 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:29:1]
 28 │ void temp-- ** 3;
 29 │ void 3 ** 4;
    · ──────
 30 │ void temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:30:1]
 29 │ void 3 ** 4;
 30 │ void temp++ ** 4;
    · ───────────
 31 │ void temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:31:1]
 30 │ void temp++ ** 4;
 31 │ void temp-- ** 4;
    · ───────────
 32 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:33:6]
 32 │ 
 33 │ 1 ** void --temp ** 3;
    ·      ───────────
 34 │ 1 ** void temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:34:6]
 33 │ 1 ** void --temp ** 3;
 34 │ 1 ** void temp-- ** 3;
    ·      ───────────
 35 │ 1 ** void 3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:35:6]
 34 │ 1 ** void temp-- ** 3;
 35 │ 1 ** void 3 ** 4;
    ·      ──────
 36 │ 1 ** void temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:36:6]
 35 │ 1 ** void 3 ** 4;
 36 │ 1 ** void temp++ ** 4;
    ·      ───────────
 37 │ 1 ** void temp-- ** 4 ;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:37:6]
 36 │ 1 ** void temp++ ** 4;
 37 │ 1 ** void temp-- ** 4 ;
    ·      ───────────
 38 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:39:1]
 38 │ 
 39 │ ~ --temp ** 3;
    · ────────
 40 │ ~temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:40:1]
 39 │ ~ --temp ** 3;
 40 │ ~temp-- ** 3;
    · ───────
 41 │ ~3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:41:1]
 40 │ ~temp-- ** 3;
 41 │ ~3 ** 4;
    · ──
 42 │ ~temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:42:1]
 41 │ ~3 ** 4;
 42 │ ~temp++ ** 4;
    · ───────
 43 │ ~temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:43:1]
 42 │ ~temp++ ** 4;
 43 │ ~temp-- ** 4;
    · ───────
 44 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:45:6]
 44 │ 
 45 │ 1 ** ~ --temp ** 3;
    ·      ────────
 46 │ 1 ** ~temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:46:6]
 45 │ 1 ** ~ --temp ** 3;
 46 │ 1 ** ~temp-- ** 3;
    ·      ───────
 47 │ 1 ** ~3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:47:6]
 46 │ 1 ** ~temp-- ** 3;
 47 │ 1 ** ~3 ** 4;
    ·      ──
 48 │ 1 ** ~temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:48:6]
 47 │ 1 ** ~3 ** 4;
 48 │ 1 ** ~temp++ ** 4;
    ·      ───────
 49 │ 1 ** ~temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:49:6]
 48 │ 1 ** ~temp++ ** 4;
 49 │ 1 ** ~temp-- ** 4;
    ·      ───────
 50 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:51:1]
 50 │ 
 51 │ ! --temp ** 3;
    · ────────
 52 │ !temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:52:1]
 51 │ ! --temp ** 3;
 52 │ !temp-- ** 3;
    · ───────
 53 │ !3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:53:1]
 52 │ !temp-- ** 3;
 53 │ !3 ** 4;
    · ──
 54 │ !temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:54:1]
 53 │ !3 ** 4;
 54 │ !temp++ ** 4;
    · ───────
 55 │ !temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:55:1]
 54 │ !temp++ ** 4;
 55 │ !temp-- ** 4;
    · ───────
 56 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:57:6]
 56 │ 
 57 │ 1 ** ! --temp ** 3;
    ·      ────────
 58 │ 1 ** !temp-- ** 3;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:58:6]
 57 │ 1 ** ! --temp ** 3;
 58 │ 1 ** !temp-- ** 3;
    ·      ───────
 59 │ 1 ** !3 ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:59:6]
 58 │ 1 ** !temp-- ** 3;
 59 │ 1 ** !3 ** 4;
    ·      ──
 60 │ 1 ** !temp++ ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:60:6]
 59 │ 1 ** !3 ** 4;
 60 │ 1 ** !temp++ ** 4;
    ·      ───────
 61 │ 1 ** !temp-- ** 4;
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × Unexpected exponentiation expression
    ╭─[typescript/tests/cases/conformance/es7/exponentiationOperator/exponentiationOperatorSyntaxError2.ts:61:6]
 60 │ 1 ** !temp++ ** 4;
 61 │ 1 ** !temp-- ** 4;
    ·      ───────
 62 │ 
    ╰────
  help: Wrap unary expression in parentheses to enforce operator precedence

  × A rest parameter or binding pattern may not have a trailing comma.
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:1:12]
 1 │ const [...a,] = [];
   ·            ─
 2 │ const {...b,} = {};
   ╰────

  × A rest parameter or binding pattern may not have a trailing comma.
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:2:12]
 1 │ const [...a,] = [];
 2 │ const {...b,} = {};
   ·            ─
 3 │ let c, d;
   ╰────

  × A rest parameter or binding pattern may not have a trailing comma.
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInBindingPatterns.ts:4:7]
 3 │ let c, d;
 4 │ ([...c,] = []);
   ·       ─
 5 │ ({...d,} = {});
   ╰────

  × A rest parameter or binding pattern may not have a trailing comma.
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInFunctionParametersAndArguments.ts:5:20]
 4 │ 
 5 │ function f2(...args,) {}
   ·                    ─
 6 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/es7/trailingCommasInGetter.ts:2:11]
 1 │ class X {
 2 │     get x(,) { return 0; }
   ·           ─
 3 │ }
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:6:5]
 5 │ abstract class C {
 6 │     @dec(11) abstract get method1(): number;
   ·     ────────
 7 │     @dec(12) abstract set method1(value);
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:7:5]
 6 │     @dec(11) abstract get method1(): number;
 7 │     @dec(12) abstract set method1(value);
   ·     ────────
 8 │     @dec(21) abstract get ["method2"](): number;
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:8:5]
 7 │     @dec(12) abstract set method1(value);
 8 │     @dec(21) abstract get ["method2"](): number;
   ·     ────────
 9 │     @dec(22) abstract set ["method2"](value);
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
    ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:9:5]
  8 │     @dec(21) abstract get ["method2"](): number;
  9 │     @dec(22) abstract set ["method2"](value);
    ·     ────────
 10 │     @dec(31) abstract get [method3](): number;
    ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
    ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:10:5]
  9 │     @dec(22) abstract set ["method2"](value);
 10 │     @dec(31) abstract get [method3](): number;
    ·     ────────
 11 │     @dec(32) abstract set [method3](value);
    ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
    ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/accessors/esDecorators-classDeclaration-accessors-nonStaticAbstract.ts:11:5]
 10 │     @dec(31) abstract get [method3](): number;
 11 │     @dec(32) abstract set [method3](value);
    ·     ────────
 12 │ }
    ╰────

  × 'default' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-exportModifier.2.ts:2:13]
 1 │ // error
 2 │ export @dec default class C3 {}
   ·             ───────
   ╰────

  × 'default' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/esDecorators-classDeclaration-exportModifier.ts:2:13]
 1 │ // error
 2 │ export @dec default class C3 {}
   ·             ───────
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticAbstract.ts:6:5]
 5 │ abstract class C {
 6 │     @dec(1) abstract method1(): void;
   ·     ───────
 7 │     @dec(2) abstract ["method2"](): void;
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticAbstract.ts:7:5]
 6 │     @dec(1) abstract method1(): void;
 7 │     @dec(2) abstract ["method2"](): void;
   ·     ───────
 8 │     @dec(3) abstract [method3](): void;
   ╰────

  × TS(1249): A decorator can only decorate a method implementation, not an overload.
   ╭─[typescript/tests/cases/conformance/esDecorators/classDeclaration/methods/esDecorators-classDeclaration-methods-nonStaticAbstract.ts:8:5]
 7 │     @dec(2) abstract ["method2"](): void;
 8 │     @dec(3) abstract [method3](): void;
   ·     ───────
 9 │ }
   ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:9:4]
  8 │ 
  9 │ { @x?.y class C {} }
    ·    ────
 10 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:11:4]
 10 │ 
 11 │ { @x?.y() class C {} }
    ·    ──────
 12 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:13:4]
 12 │ 
 13 │ { @x?.["y"] class C {} }
    ·    ────────
 14 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:15:4]
 14 │ 
 15 │ { @x?.() class C {} }
    ·    ─────
 16 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:31:14]
 30 │ 
 31 │ { class C { @x?.y m() {} } }
    ·              ────
 32 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:33:14]
 32 │ 
 33 │ { class C { @x?.y() m() {} } }
    ·              ──────
 34 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:35:14]
 34 │ 
 35 │ { class C { @x?.["y"] m() {} } }
    ·              ────────
 36 │ 
    ╰────

  × Expression must be enclosed in parentheses to be used as a decorator.
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.1.ts:37:14]
 36 │ 
 37 │ { class C { @x?.() m() {} } }
    ·              ─────
 38 │ 
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-decoratorExpression.3.ts:5:5]
 4 │ 
 5 │ { @g<number> class C {} }
   ·     ─
 6 │ 
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
   ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-privateFieldAccess.ts:3:13]
 2 │ 
 3 │ @dec(x => x.#foo) // error
   ·             ────
 4 │ class A {
   ╰────

  × Private identifier '#foo' is not allowed outside class bodies
    ╭─[typescript/tests/cases/conformance/esDecorators/esDecorators-privateFieldAccess.ts:11:18]
 10 │ 
 11 │ @dec((x: B) => x.#foo) // error
    ·                  ────
 12 │ class B {
    ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/assignmentOperator/assignmentLHSIsValue.ts:6:21]
 5 │ class C {
 6 │     constructor() { this = value; }
   ·                     ────
 7 │     foo() { this = value; }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/assignmentOperator/compoundAssignmentLHSIsValue.ts:7:9]
 6 │     constructor() {
 7 │         this *= value;
   ·         ────
 8 │         this += value;
   ╰────

  × Expected `)` but found `,`
    ╭─[typescript/tests/cases/conformance/expressions/commaOperator/commaOperatorWithoutOperand.ts:9:5]
  8 │ // Missing the second operand
  9 │ (ANY, );
    ·     ┬
    ·     ╰── `)` expected
 10 │ (BOOLEAN, );
    ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/expressions/functions/arrowFunctionContexts.ts:2:1]
 1 │ // Arrow function used in with statement
 2 │ with (window) {
   · ────
 3 │     var p = () => this;
   ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/expressions/functions/arrowFunctionContexts.ts:43:5]
 42 │     // Arrow function used in with statement
 43 │     with (window) {
    ·     ────
 44 │         var p = () => this;
    ╰────

  × '0'-prefixed octal literals and octal escape sequences are deprecated
   ╭─[typescript/tests/cases/conformance/expressions/literals/strictModeOctalLiterals.ts:2:14]
 1 │ export enum E {
 2 │     A = 12 + 01
   ·              ──
 3 │ }
   ╰────
  help: for octal literals use the '0o' prefix instead

  × '0'-prefixed octal literals and octal escape sequences are deprecated
   ╭─[typescript/tests/cases/conformance/expressions/literals/strictModeOctalLiterals.ts:4:16]
 3 │ }
 4 │ const orbitol: 01 = 01
   ·                ──
   ╰────
  help: for octal literals use the '0o' prefix instead

  × '0'-prefixed octal literals and octal escape sequences are deprecated
   ╭─[typescript/tests/cases/conformance/expressions/literals/strictModeOctalLiterals.ts:4:21]
 3 │ }
 4 │ const orbitol: 01 = 01
   ·                     ──
   ╰────
  help: for octal literals use the '0o' prefix instead

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/expressions/newOperator/newOperatorErrorCases.ts:26:15]
 25 │ // Construct expression with no parentheses for construct signature with > 0 parameters
 26 │ var b = new C0 32, ''; // Parse error
    ·               ▲
 27 │ 
    ╰────
  help: Try insert a semicolon here

  × Logical expressions and coalesce expressions cannot be mixed
   ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:6:1]
 5 │ // should be a syntax error
 6 │ a ?? b || c;
   · ───────────
 7 │ 
   ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:9:1]
  8 │ // should be a syntax error
  9 │ a || b ?? c;
    · ───────────
 10 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:12:1]
 11 │ // should be a syntax error
 12 │ a ?? b && c;
    · ───────────
 13 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Logical expressions and coalesce expressions cannot be mixed
    ╭─[typescript/tests/cases/conformance/expressions/nullishCoalescingOperator/nullishCoalescingOperator5.ts:15:1]
 14 │ // should be a syntax error
 15 │ a && b ?? c;
    · ───────────
 16 │ 
    ╰────
  help: Wrap either expression by parentheses

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralErrors.ts:50:5]
 49 │     y = 2,
 50 │     #z: 3
    ·     ──
 51 │ }
    ╰────

  × Invalid assignment in object literal
    ╭─[typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralErrors.ts:49:5]
 48 │     x = 1,
 49 │     y = 2,
    ·     ─────
 50 │     #z: 3
    ╰────
  help: Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.

  × Invalid assignment in object literal
    ╭─[typescript/tests/cases/conformance/expressions/objectLiterals/objectLiteralErrors.ts:48:5]
 47 │ var h1 = {
 48 │     x = 1,
    ·     ─────
 49 │     y = 2,
    ╰────
  help: Did you mean to use a ':'? An '=' can only follow a property name when the containing object literal is part of a destructuring pattern.

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/operators/incrementAndDecrement.ts:8:1]
 7 │ // Assign to expression++
 8 │ x++ = 4; // Error
   · ───
 9 │ 
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/elementAccessChain/elementAccessChain.3.ts:3:1]
 2 │ 
 3 │ obj?.["a"]++;
   · ──────────
 4 │ obj?.a["b"]++;
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/propertyAccessChain/propertyAccessChain.3.ts:3:1]
 2 │ 
 3 │ obj?.a++;
   · ──────
 4 │ obj?.a.b++;
   ╰────

  × Tagged template expressions are not permitted in an optional chain
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/taggedTemplateChain/taggedTemplateChain.ts:2:4]
 1 │ declare let a: any;
 2 │ a?.`b`;
   ·    ───
 3 │ 
   ╰────

  × Tagged template expressions are not permitted in an optional chain
   ╭─[typescript/tests/cases/conformance/expressions/optionalChaining/taggedTemplateChain/taggedTemplateChain.ts:4:4]
 3 │ 
 4 │ a?.`b${1}c`;
   ·    ────────
   ╰────

  × Invalid characters after number
   ╭─[typescript/tests/cases/conformance/expressions/propertyAccess/propertyAccessNumericLiterals.ts:8:2]
 7 │ 08.8e5.toString();
 8 │ 0_8.8e5.toString();
   ·  ─
 9 │ 8.8e5.toString();
   ╰────

  × 'super' can only be used with function calls or in property accesses
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:46:9]
 45 │     constructor() {
 46 │         super<string>();
    ·         ─────
 47 │         super();
    ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × 'super' can only be referenced in a derived class.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:2:1]
  1 │     //super call in class constructor with no base type
  2 │ ╭─▶ class NoBase {
  3 │ │       constructor() {
  4 │ │           super();
    · │           ─────
  5 │ │       }
  6 │ │   
  7 │ │       //super call in class member function with no base type
  8 │ │       fn() {
  9 │ │           super();
 10 │ │       }
 11 │ │   
 12 │ │       //super call in class accessor (get and set) with no base type
 13 │ │       get foo() {
 14 │ │           super();
 15 │ │           return null;
 16 │ │       }
 17 │ │       set foo(v) {
 18 │ │           super();
 19 │ │       }
 20 │ │   
 21 │ │       //super call in class member initializer with no base type
 22 │ │       p = super();
 23 │ │   
 24 │ │       //super call in static class member function with no base type
 25 │ │       static fn() {
 26 │ │           super();
 27 │ │       }
 28 │ │   
 29 │ │       //super call in static class member initializer with no base type
 30 │ │       static k = super();
 31 │ │   
 32 │ │       //super call in static class accessor (get and set) with no base type
 33 │ │       static get q() {
 34 │ │           super();
 35 │ │           return null;
 36 │ │       }
 37 │ │       static set q(n) {
 38 │ │           super();
 39 │ │       }
 40 │ ├─▶ }
    · ╰──── class does not have `extends`
 41 │     
    ╰────
  help: either remove this super, or extend the class

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:9:9]
  8 │     fn() {
  9 │         super();
    ·         ───────
 10 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:14:9]
 13 │     get foo() {
 14 │         super();
    ·         ───────
 15 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:18:9]
 17 │     set foo(v) {
 18 │         super();
    ·         ───────
 19 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:22:9]
 21 │     //super call in class member initializer with no base type
 22 │     p = super();
    ·         ───────
 23 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:26:9]
 25 │     static fn() {
 26 │         super();
    ·         ───────
 27 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:30:16]
 29 │     //super call in static class member initializer with no base type
 30 │     static k = super();
    ·                ───────
 31 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:34:9]
 33 │     static get q() {
 34 │         super();
    ·         ───────
 35 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:38:9]
 37 │     static set q(n) {
 38 │         super();
    ·         ───────
 39 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:58:9]
 57 │     //super call in class member initializer of derived type
 58 │     t = super();
    ·         ───────
 59 │ 
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:62:9]
 61 │         //super call in class member function of derived type
 62 │         super();
    ·         ───────
 63 │     }
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:67:9]
 66 │     get foo() {
 67 │         super();
    ·         ───────
 68 │         return null;
    ╰────

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
    ╭─[typescript/tests/cases/conformance/expressions/superCalls/errorSuperCalls.ts:71:9]
 70 │     set foo(n) {
 71 │         super();
    ·         ───────
 72 │     }
    ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
    ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:73:13]
 72 │         function inner() {
 73 │             super.publicFunc();
    ·             ─────
 74 │         }
    ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
    ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:76:40]
 75 │         var x = {
 76 │             test: function () { return super.publicFunc(); }
    ·                                        ─────
 77 │         }
    ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
     ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:127:16]
 126 │ // In object literal
 127 │ var obj = { n: super.wat, p: super.foo() };
     ·                ─────
     ╰────

  × 'super' can only be referenced in members of derived classes or object literal expressions.
     ╭─[typescript/tests/cases/conformance/expressions/superPropertyAccess/errorSuperPropertyAccess.ts:127:30]
 126 │ // In object literal
 127 │ var obj = { n: super.wat, p: super.foo() };
     ·                              ─────
     ╰────

  × Expected `>` but found `is`
    ╭─[typescript/tests/cases/conformance/expressions/typeAssertions/typeAssertions.ts:44:14]
 43 │ var str: string;
 44 │ if(<numOrStr is string>(numOrStr === undefined)) { // Error
    ·              ─┬
    ·               ╰── `>` expected
 45 │     str = numOrStr; // Error, no narrowing occurred
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typeGuardFunctionErrors.ts:17:56]
 16 │ 
 17 │ function hasTypeGuardTypeInsideTypeGuardType(x): x is x is A {
    ·                                                        ▲
 18 │     return true;
    ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/typeGuards/typePredicateOnVariableDeclaration02.ts:1:9]
 1 │ var y: z is number;
   ·         ▲
   ╰────
  help: Try insert a semicolon here

  × TS(8016): Type satisfaction expressions can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/expressions/typeSatisfaction/typeSatisfaction_js.ts:1:9]
 1 │ var v = undefined satisfies 1;
   ·         ─────────────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/bitwiseNotOperator/bitwiseNotOperatorInvalidOperations.ts:5:10]
 4 │ // operand before ~
 5 │ var a = q~;  //expect error
   ·          ▲
 6 │ 
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithAnyOtherTypeInvalidOperations.ts:37:26]
 36 │ // any type literal
 37 │ var ResultIsNumber11 = --{};
    ·                          ──
 38 │ var ResultIsNumber12 = --null;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithEnumTypeInvalidOperations.ts:14:26]
 13 │ // enum type expressions
 14 │ var ResultIsNumber5 = --(ENUM["A"] + ENUM.B);
    ·                          ──────────────────
 15 │ var ResultIsNumber6 = (ENUM.A + ENUM["B"])--;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithNumberTypeInvalidOperations.ts:22:25]
 21 │ // number type literal
 22 │ var ResultIsNumber3 = --1;
    ·                         ─
 23 │ var ResultIsNumber4 = --{ x: 1, y: 2};
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithUnsupportedBooleanType.ts:22:25]
 21 │ // boolean type literal
 22 │ var ResultIsNumber3 = --true;
    ·                         ────
 23 │ var ResultIsNumber4 = --{ x: true, y: false };
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/decrementOperator/decrementOperatorWithUnsupportedStringType.ts:25:25]
 24 │ // string type literal
 25 │ var ResultIsNumber5 = --"";
    ·                         ──
 26 │ var ResultIsNumber6 = --{ x: "", y: "" };
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/deleteOperator/deleteOperatorInvalidOperations.ts:5:19]
 4 │ // operand before delete operator
 5 │ var BOOLEAN1 = ANY delete ;     //expect error
   ·                   ▲
 6 │ 
   ╰────
  help: Try insert a semicolon here

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithAnyOtherTypeInvalidOperations.ts:37:26]
 36 │ // any type literal
 37 │ var ResultIsNumber11 = ++{};
    ·                          ──
 38 │ var ResultIsNumber12 = ++null;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithEnumTypeInvalidOperations.ts:14:26]
 13 │ // enum type expressions
 14 │ var ResultIsNumber5 = ++(ENUM[1] + ENUM[2]);
    ·                          ─────────────────
 15 │ var ResultIsNumber6 = (ENUM[1] + ENUM[2])++;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithNumberTypeInvalidOperations.ts:22:25]
 21 │ // number type literal
 22 │ var ResultIsNumber3 = ++1;
    ·                         ─
 23 │ var ResultIsNumber4 = ++{ x: 1, y: 2};
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedBooleanType.ts:22:25]
 21 │ // boolean type literal
 22 │ var ResultIsNumber3 = ++true;
    ·                         ────
 23 │ var ResultIsNumber4 = ++{ x: true, y: false };
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/incrementOperator/incrementOperatorWithUnsupportedStringType.ts:25:25]
 24 │ // string type literal
 25 │ var ResultIsNumber5 = ++"";
    ·                         ──
 26 │ var ResultIsNumber6 = ++{ x: "", y: "" };
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/logicalNotOperator/logicalNotOperatorInvalidOperations.ts:11:16]
 10 │ // miss an operand
 11 │ var BOOLEAN3 =!;
    ·                ─
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/negateOperator/negateOperatorInvalidOperations.ts:4:15]
 3 │ // operand before -
 4 │ var NUMBER1 = var NUMBER-;  //expect error
   ·               ───
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/plusOperator/plusOperatorInvalidOperations.ts:5:17]
 4 │ // operand before +
 5 │ var result1 = b+;   //expect error
   ·                 ─
 6 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/typeofOperator/typeofOperatorInvalidOperations.ts:4:14]
 3 │ // opreand before typeof
 4 │ var ANY = ANY typeof ;    //expect error
   ·              ▲
 5 │ 
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/expressions/unaryOperators/voidOperator/voidOperatorInvalidOperations.ts:4:14]
 3 │ // operand before void
 4 │ var ANY = ANY void ;    //expect error
   ·              ▲
 5 │ 
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportAssignNonIdentifier.ts:1:14]
 1 │ export = void; // Error, void operator requires an argument
   ·              ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesAMD.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesCommonJS.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesES6.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesInIfThenStatementNoCrash1.ts:4:14]
 3 │ if (true)
 4 │ export const cssExports: CssExports;
   ·              ──────────────────────
 5 │ export default cssExports;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesSystem.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/exportNonInitializedVariablesUMD.ts:1:4]
 1 │ var;
   ·    ─
 2 │ let;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/importNonStringLiteral.ts:2:22]
 1 │ var x = "filename";
 2 │ import foo = require(x); // invalid
   ·                      ─
   ╰────

  × Expected `as` but found `from`
   ╭─[typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithAMD.ts:1:10]
 1 │ import * from Zero from "./0"
   ·          ──┬─
   ·            ╰── `as` expected
   ╰────

  × Expected `as` but found `from`
   ╭─[typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithCommonjs.ts:1:10]
 1 │ import * from Zero from "./0"
   ·          ──┬─
   ·            ╰── `as` expected
   ╰────

  × Expected `as` but found `from`
   ╭─[typescript/tests/cases/conformance/externalModules/invalidSyntaxNamespaceImportWithSystem.ts:1:10]
 1 │ import * from Zero from "./0"
   ·          ──┬─
   ·            ╰── `as` expected
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:4:1]
 3 │ // reparse call as invalid await should error
 4 │ await (1,);
   · ─────
 5 │ await <number, string>(1);
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:5:1]
 4 │ await (1,);
 5 │ await <number, string>(1);
   · ─────
 6 │ 
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:8:1]
 7 │ // reparse tagged template as invalid await should error
 8 │ await <number, string> ``;
   · ─────
 9 │ 
   ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:11:17]
 10 │ // reparse class extends clause should fail
 11 │ class C extends await<string> {
    ·                 ─────
 12 │ }
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:15:3]
 14 │ // await in class decorators should fail
 15 │ @(await)
    ·   ─────
 16 │ class C1 {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:18:2]
 17 │ 
 18 │ @await(x)
    ·  ─────
 19 │ class C2 {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:21:2]
 20 │ 
 21 │ @await
    ·  ─────
 22 │ class C3 {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:26:6]
 25 │ class C4 {
 26 │     @await
    ·      ─────
 27 │     ["foo"]() {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:30:6]
 29 │ class C5 {
 30 │     @await(1)
    ·      ─────
 31 │     ["foo"]() {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:34:7]
 33 │ class C6 {
 34 │     @(await)
    ·       ─────
 35 │     ["foo"]() {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:40:14]
 39 │ class C7 {
 40 │     method1(@await [x]) {}
    ·              ─────
 41 │     method2(@await(1) [x]) {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:41:14]
 40 │     method1(@await [x]) {}
 41 │     method2(@await(1) [x]) {}
    ·              ─────
 42 │     method3(@(await) [x]) {}
    ╰────

  × The keyword 'await' is reserved
    ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.1.ts:42:15]
 41 │     method2(@await(1) [x]) {}
 42 │     method3(@(await) [x]) {}
    ·               ─────
 43 │ }
    ╰────

  × Identifier expected. 'await' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.10.ts:2:19]
 1 │ // await disallowed in alias of named import
 2 │ import { await as await } from "./other";
   ·                   ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.10.ts:2:19]
 1 │ // await disallowed in alias of named import
 2 │ import { await as await } from "./other";
   ·                   ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.11.ts:3:8]
 2 │ declare var require: any;
 3 │ import await = require("./other");
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.11.ts:3:8]
 2 │ declare var require: any;
 3 │ import await = require("./other");
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.12.ts:5:8]
 4 │ // await disallowed in import=namespace when in a module
 5 │ import await = foo.await;
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.2.ts:4:5]
 3 │ // reparse variable name as await should fail
 4 │ var await = 1;
   ·     ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.3.ts:4:6]
 3 │ // reparse binding pattern as await should fail
 4 │ var {await} = {await:1};
   ·      ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.4.ts:4:6]
 3 │ // reparse binding pattern as await should fail
 4 │ var [await] = [1];
   ·      ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.5.ts:2:14]
 1 │ // await in exported class name should fail
 2 │ export class await {
   ·              ─────
 3 │ }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.6.ts:2:17]
 1 │ // await in exported function name should fail
 2 │ export function await() {
   ·                 ─────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.7.ts:2:13]
 1 │ // await disallowed in namespace import
 2 │ import * as await from "./other";
   ·             ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.7.ts:2:13]
 1 │ // await disallowed in namespace import
 2 │ import * as await from "./other";
   ·             ─────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.8.ts:2:8]
 1 │ // await disallowed in default import
 2 │ import await from "./other";
   ·        ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.8.ts:2:8]
 1 │ // await disallowed in default import
 2 │ import await from "./other";
   ·        ─────
   ╰────

  × Identifier expected. 'await' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.9.ts:2:10]
 1 │ // await disallowed in un-alised named import
 2 │ import { await } from "./other";
   ·          ─────
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitErrors.9.ts:2:10]
 1 │ // await disallowed in un-alised named import
 2 │ import { await } from "./other";
   ·          ─────
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitNonModule.ts:1:1]
 1 │ await x;
   · ─────
 2 │ 
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/externalModules/topLevelAwaitNonModule.ts:5:5]
 4 │ 
 5 │ for await (const item of arr) {
   ·     ─────
 6 │   item;
   ╰────

  × Expected `=` but found `;`
    ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportDeclaration_missingBraces.ts:11:16]
 10 │ namespace ns {
 11 │   export type T; // Normal parse error because there is no other 'T'
    ·                ┬
    ·                ╰── `=` expected
 12 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportNamespace_js.ts:1:8]
 1 │ export type * from './a';
   ·        ────
   ╰────

  × TS(2207): The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportSpecifiers.ts:9:15]
 8 │ export { type as as bar };
 9 │ export type { type something as whatever }; // Error
   ·               ────
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/exportSpecifiers_js.ts:2:15]
 1 │ const foo = 0;
 2 │ export { type foo };
   ·               ─┬─
   ·                ╰── `,` expected
   ╰────

  × Expected `from` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/grammarErrors.ts:1:13]
 1 │ import type A from './a';
   ·             ┬
   ·             ╰── `from` expected
 2 │ export type { A };
   ╰────

  × Expected `,` but found `as`
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/importSpecifiers1.ts:1:24]
 1 │ import { type as as as as } from "./mod.js"; // Error
   ·                        ─┬
   ·                         ╰── `,` expected
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/externalModules/typeOnly/importSpecifiers_js.ts:1:15]
 1 │ import { type A } from "./a";
   ·               ┬
   ·               ╰── `,` expected
   ╰────

  × TS(1029): 'export' modifier must precede 'declare' modifier.
   ╭─[typescript/tests/cases/conformance/externalModules/umd-errors.ts:3:8]
 2 │ export var p;
 3 │ static export as namespace oo1;
   ·        ──────
 4 │ declare export as namespace oo2;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/externalModules/umd-errors.ts:3:15]
 2 │ export var p;
 3 │ static export as namespace oo1;
   ·               ──
 4 │ declare export as namespace oo2;
   ╰────

  × Identifier `fn2` has already been declared
    ╭─[typescript/tests/cases/conformance/functions/functionNameConflicts.ts:8:9]
  7 │ 
  8 │     var fn2;
    ·         ─┬─
    ·          ╰── `fn2` has already been declared here
  9 │     function fn2() { }
    ·              ─┬─
    ·               ╰── It can not be redeclared here
 10 │ }
    ╰────

  × Identifier `fn4` has already been declared
    ╭─[typescript/tests/cases/conformance/functions/functionNameConflicts.ts:16:9]
 15 │ function func() {
 16 │     var fn4;
    ·         ─┬─
    ·          ╰── `fn4` has already been declared here
 17 │     function fn4() { }
    ·              ─┬─
    ·               ╰── It can not be redeclared here
 18 │ 
    ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionOverloadErrorsSyntax.ts:9:25]
  8 │ //Function overload signature with rest param followed by non-optional parameter
  9 │ function fn5(x: string, ...y: any[], z: string);
    ·                         ───────────
 10 │ function fn5() { }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
   ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:2:5]
 1 │ function a(a = 10) {
 2 │     "use strict";
   ·     ─────────────
 3 │ }
   ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:16:5]
 15 │ function rest(...args: any[]) {
 16 │     'use strict';
    ·     ─────────────
 17 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:20:5]
 19 │ function rest1(a = 1, ...args) {
 20 │     'use strict';
    ·     ─────────────
 21 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:24:5]
 23 │ function paramDefault(param = 1) {
 24 │     'use strict';
    ·     ─────────────
 25 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:28:5]
 27 │ function objectBindingPattern({foo}: any) {
 28 │     'use strict';
    ·     ─────────────
 29 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:32:5]
 31 │ function arrayBindingPattern([foo]: any[]) {
 32 │     'use strict';
    ·     ─────────────
 33 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:36:5]
 35 │ function manyParameter(a = 10, b = 20) {
 36 │     "use strict";
    ·     ─────────────
 37 │ }
    ╰────

  × Illegal 'use strict' directive in function with non-simple parameter list
    ╭─[typescript/tests/cases/conformance/functions/functionWithUseStrictAndSimpleParameterList_es2016.ts:41:5]
 40 │     "foo";
 41 │     "use strict";
    ·     ─────────────
 42 │ }
    ╰────

  × import() requires a specifier.
   ╭─[typescript/tests/cases/conformance/importAssertion/importAssertion1.ts:8:11]
 7 │ const e = import('./0', foo())
 8 │ const f = import()
   ·           ────────
 9 │ const g = import('./0', {}, {})
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAssertion/importAssertion4.ts:1:36]
 1 │ import * as f from "./first" assert
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAssertion/importAssertion5.ts:1:38]
 1 │ import * as f from "./first" assert {
   ╰────

  × import() requires a specifier.
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes1.ts:8:11]
 7 │ const e = import('./0', foo())
 8 │ const f = import()
   ·           ────────
 9 │ const g = import('./0', {}, {})
   ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes10.ts:22:5]
 21 │     type: "json"
 22 │   },,
    ·     ─
 23 │ });
    ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes4.ts:1:34]
 1 │ import * as f from "./first" with
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes5.ts:1:36]
 1 │ import * as f from "./first" with {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/importAttributes/importAttributes6.ts:1:51]
 1 │ import * as thing1 from "./mod.mjs" with { field: 0 };
   ·                                                   ─
 2 │ import * as thing2 from "./mod.mjs" with { field: `a` };
   ╰────

  × Expected `(` but found `;`
   ╭─[typescript/tests/cases/conformance/importDefer/dynamicImportDeferInvalidStandalone.ts:1:13]
 1 │ import.defer;
   ·             ┬
   ·             ╰── `(` expected
 2 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/importDefer/exportDeferInvalid.ts:1:8]
 1 │ export defer * as ns from "a";
   ·        ─────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/importDefer/importDeferFromInvalid.ts:1:19]
 1 │ import defer from from "./a.js";
   ·                   ────
   ╰────

  × Expected `from` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/importDefer/importDeferInvalidDefault.ts:1:14]
 1 │ import defer foo from "a";
   ·              ─┬─
   ·               ╰── `from` expected
 2 │ 
   ╰────

  × Expected `from` but found `{`
   ╭─[typescript/tests/cases/conformance/importDefer/importDeferInvalidNamed.ts:1:14]
 1 │ import defer { foo } from "a";
   ·              ┬
   ·              ╰── `from` expected
 2 │ 
   ╰────

  × Expected `from` but found `*`
   ╭─[typescript/tests/cases/conformance/importDefer/importDeferTypeConflict1.ts:1:19]
 1 │ import type defer * as ns1 from "a";
   ·                   ┬
   ·                   ╰── `from` expected
   ╰────

  × Expected `from` but found `type`
   ╭─[typescript/tests/cases/conformance/importDefer/importDeferTypeConflict2.ts:1:14]
 1 │ import defer type * as ns1 from "a";
   ·              ──┬─
   ·                ╰── `from` expected
   ╰────

  × The only valid meta property for import is import.meta
   ╭─[typescript/tests/cases/conformance/importDefer/importMetaPropertyInvalidInCall.ts:1:1]
 1 │ import.foo();
   · ──────────
 2 │ import.foo;
   ╰────

  × Expected `(` but found `.`
   ╭─[typescript/tests/cases/conformance/importDefer/typeofImportDefer.ts:1:30]
 1 │ export type X = typeof import.defer("./a").Foo;
   ·                              ┬
   ·                              ╰── `(` expected
   ╰────

  × The keyword 'interface' is reserved
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface05.ts:3:5]
 2 │ 
 3 │ var interface: number;
   ·     ─────────────────
 4 │ 
   ╰────

  × The keyword 'interface' is reserved
    ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/asiPreventsParsingAsInterface05.ts:10:1]
  9 │ 
 10 │ interface   // This should be the identifier 'interface'
    · ─────────
 11 │ I           // This should be the identifier 'I'
    ╰────

  × TS(2499): An interface can only extend an identifier/qualified-name with optional type arguments.
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceExtendingOptionalChain.ts:5:22]
 4 │ 
 5 │ interface C1 extends Foo?.Bar {}
   ·                      ────────
   ╰────

  × TS(1176): Interface declaration cannot have 'implements' clause.
    ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceThatInheritsFromItself.ts:10:15]
  9 │ 
 10 │ interface Bar implements Bar { // error
    ·               ──────────
 11 │ }
    ╰────

  × TS(1070): 'public' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithAccessibilityModifiers.ts:3:5]
 2 │ interface Foo {
 3 │     public a: any;
   ·     ──────
 4 │     private b: any;
   ╰────

  × TS(1070): 'private' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithAccessibilityModifiers.ts:4:5]
 3 │     public a: any;
 4 │     private b: any;
   ·     ───────
 5 │     protected c: any;
   ╰────

  × TS(1070): 'protected' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfaceWithAccessibilityModifiers.ts:5:5]
 4 │     private b: any;
 5 │     protected c: any;
   ·     ─────────
 6 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/interfaces/interfaceDeclarations/interfacesWithPredefinedTypesAsNames.ts:5:10]
 4 │ interface boolean { }
 5 │ interface void {}
   ·          ▲
 6 │ interface unknown {}
   ╰────
  help: Try insert a semicolon here

  × Expected `}` but found `EOF`
    ╭─[typescript/tests/cases/conformance/interfaces/interfacesExtendingClasses/interfaceExtendingClass2.ts:15:6]
 14 │         };
 15 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/internalModules/exportDeclarations/NonInitializedExportInInternalModule.ts:2:8]
 1 │ module Inner {
 2 │     var;
   ·        ─
 3 │     let;
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:4:5]
 3 │ module Y {
 4 │     public class A { s: string }
   ·     ──────
 5 │ 
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:6:5]
 5 │ 
 6 │     public class BB<T> extends A {
   ·     ──────
 7 │         id: number;
   ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:12:5]
 11 │ module Y2 {
 12 │     public class AA<T> { s: T }
    ·     ──────
 13 │     public interface I { id: number }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:13:5]
 12 │     public class AA<T> { s: T }
 13 │     public interface I { id: number }
    ·     ──────
 14 │ 
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:15:5]
 14 │ 
 15 │     public class B extends AA<string> implements I { id: number }
    ·     ──────
 16 │ }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:19:5]
 18 │ module Y3 {
 19 │     public module Module {
    ·     ──────
 20 │         class A { s: string }
    ╰────

  × 'public' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:25:5]
 24 │ module Y4 {
 25 │     public enum Color { Blue, Red }
    ·     ──────
 26 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:29:5]
 28 │ module YY {
 29 │     private class A { s: string }
    ·     ───────
 30 │ 
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:31:5]
 30 │ 
 31 │     private class BB<T> extends A {
    ·     ───────
 32 │         id: number;
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:37:5]
 36 │ module YY2 {
 37 │     private class AA<T> { s: T }
    ·     ───────
 38 │     private interface I { id: number }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:38:5]
 37 │     private class AA<T> { s: T }
 38 │     private interface I { id: number }
    ·     ───────
 39 │ 
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:40:5]
 39 │ 
 40 │     private class B extends AA<string> implements I { id: number }
    ·     ───────
 41 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:44:5]
 43 │ module YY3 {
 44 │     private module Module {
    ·     ───────
 45 │         class A { s: string }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:50:5]
 49 │ module YY4 {
 50 │     private enum Color { Blue, Red }
    ·     ───────
 51 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:55:5]
 54 │ module YYY {
 55 │     static class A { s: string }
    ·     ──────
 56 │ 
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:57:5]
 56 │ 
 57 │     static class BB<T> extends A {
    ·     ──────
 58 │         id: number;
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:63:5]
 62 │ module YYY2 {
 63 │     static class AA<T> { s: T }
    ·     ──────
 64 │     static interface I { id: number }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:64:5]
 63 │     static class AA<T> { s: T }
 64 │     static interface I { id: number }
    ·     ──────
 65 │ 
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:66:5]
 65 │ 
 66 │     static class B extends AA<string> implements I { id: number }
    ·     ──────
 67 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:70:5]
 69 │ module YYY3 {
 70 │     static module Module {
    ·     ──────
 71 │         class A { s: string }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithStatementsOfEveryKind.ts:76:5]
 75 │ module YYY4 {
 76 │     static enum Color { Blue, Red }
    ·     ──────
 77 │ }
    ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:4:5]
 3 │ module Y {
 4 │     public var x: number = 0;
   ·     ──────
 5 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:8:5]
 7 │ module Y2 {
 8 │     public function fn(x: string) { }
   ·     ──────
 9 │ }
   ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:12:5]
 11 │ module Y4 {
 12 │     static var x: number = 0;
    ·     ──────
 13 │ }
    ╰────

  × 'static' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:16:5]
 15 │ module YY {
 16 │     static function fn(x: string) { }
    ·     ──────
 17 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:20:5]
 19 │ module YY2 {
 20 │     private var x: number = 0;
    ·     ───────
 21 │ }
    ╰────

  × 'private' modifier cannot be used here.
    ╭─[typescript/tests/cases/conformance/internalModules/moduleBody/invalidModuleWithVarStatements.ts:25:5]
 24 │ module YY3 {
 25 │     private function fn(x: string) { }
    ·     ───────
 26 │ }
    ╰────

  × Identifier `Point` has already been declared
   ╭─[typescript/tests/cases/conformance/internalModules/moduleDeclarations/invalidInstantiatedModule.ts:2:18]
 1 │ module M {
 2 │     export class Point { x: number; y: number }
   ·                  ──┬──
   ·                    ╰── `Point` has already been declared here
 3 │     export var Point = 1;  // Error
   ·                ──┬──
   ·                  ╰── It can not be redeclared here
 4 │ }
   ╰────

  × Expected `{` but found `<`
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsClassesErr.ts:4:15]
 3 │ 
 4 │ export class M<T> {
   ·               ┬
   ·               ╰── `{` expected
 5 │     field: T;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsEnums.ts:4:8]
 3 │ 
 4 │ export enum A {}
   ·        ────
 5 │ 
   ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsExportFormsErr.ts:1:1]
 1 │ import ns = require("./cls");
   · ─────────────────────────────
 2 │ export = ns; // TS Only
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsExportFormsErr.ts:2:8]
 1 │ import ns = require("./cls");
 2 │ export = ns; // TS Only
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsInterfaces.ts:4:8]
 3 │ 
 4 │ export interface A {}
   ·        ─────────
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/declarations/jsDeclarationsTypeReferences4.ts:4:8]
 3 │ // @ts-ignore
 4 │ export namespace A {
   ·        ─────────
 5 │     // @ts-ignore
   ╰────

  × Identifier `err` has already been declared
    ╭─[typescript/tests/cases/conformance/jsdoc/jsdocCatchClauseWithTypeAnnotation.ts:33:9]
 32 │     try { }
 33 │     catch (err) {
    ·            ─┬─
    ·             ╰── `err` has already been declared here
 34 │         /** @type {string} */
 35 │         let err;
    ·             ─┬─
    ·              ╰── It can not be redeclared here
 36 │     }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/jsdocDisallowedInTypescript.ts:2:16]
 1 │ // grammar error from checker
 2 │ var ara: Array.<number> = [1,2,3];
   ·                ─
 3 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsdoc/jsdocParseErrorsInTypescript.ts:2:27]
 1 │ // parse error (blocks grammar errors from checker)
 2 │ function parse1(n: number=) { }
   ·                           ─
   ╰────

  × Illegal break statement
    ╭─[typescript/tests/cases/conformance/jsdoc/typedefOnStatements.ts:26:1]
 25 │ /** @typedef {{ j: string }} J */
 26 │ break;
    · ──────
 27 │ /** @typedef {{ k: string }} K */
    ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal continue statement: no surrounding iteration statement
    ╭─[typescript/tests/cases/conformance/jsdoc/typedefOnStatements.ts:31:1]
 30 │ /** @typedef {{ l: string }} L */
 31 │ continue;
    · ─────────
 32 │ /** @typedef {{ m: string }} M */
    ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/checkJsxNamespaceNamesQuestionableForms.tsx:12:5]
 11 │ <a:b></a:b>;
 12 │ <b:c.x></b:c.x>;
    ·     ─
 13 │ <this:b></this:b>;
    ╰────

  × Expected `}` but found `:`
   ╭─[typescript/tests/cases/conformance/jsx/jsxAndTypeAssertion.tsx:6:17]
 5 │ var x: any;
 6 │ x = <any> { test: <any></any> };
   ·                 ┬
   ·                 ╰── `}` expected
 7 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/jsxAttributeInitializer.ts:7:16]
 6 │     <div attr=<><div>foo</div></> />
 7 │     <div attr= />
   ·                ─
 8 │ </div>
   ╰────

  × Expected `>` but found `<`
   ╭─[typescript/tests/cases/conformance/jsx/jsxCheckJsxNoTypeArgumentsAllowed.tsx:4:16]
 3 │ 
 4 │ let x = <MyComp<Prop> a={10} b="hi" />; // error, no type arguments in js
   ·                ┬
   ·                ╰── `>` expected
   ╰────

  × Unexpected token. Did you mean `{'>'}` or `&gt;`?
    ╭─[typescript/tests/cases/conformance/jsx/jsxEsprimaFbTestSuite.tsx:40:41]
 39 │ 
 40 │ <LeftRight left=<a /> right=<b>monkeys /> gorillas</b> />;
    ·                                         ▲
 41 │ 
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/jsxInvalidEsprimaTestSuite.tsx:3:2]
 2 │ 
 3 │ </>;
   ·  ─
   ╰────

  × TS(18007): JSX expressions may not use the comma operator
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingError1.tsx:11:30]
 10 │ const class2 = "bar";
 11 │ const elem = <div className={class1, class2}/>;
    ·                              ──────────────
    ╰────
  help: Did you mean to write an array?

  × Expected corresponding JSX closing tag for 'span'.
   ╭─[typescript/tests/cases/conformance/jsx/jsxParsingError2.tsx:2:16]
 1 │ // Issue error about missing span closing tag, not missing div closing tag
 2 │ let x1 = <div><span></div>;
   ·                ────   ───
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/jsxParsingError2.tsx:2:27]
 1 │ // Issue error about missing span closing tag, not missing div closing tag
 2 │ let x1 = <div><span></div>;
   ·                           ──
   ╰────

  × Unexpected token. Did you mean `{'}'}` or `&rbrace;`?
   ╭─[typescript/tests/cases/conformance/jsx/jsxParsingError3.tsx:1:15]
 1 │ let x1 = <div>}</div>;
   ·               ▲
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:8:7]
 7 │ 
 8 │ const X: any
   ·       ──────
 9 │ const a: any
   ╰────

  × Missing initializer in const declaration
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:9:7]
  8 │ const X: any
  9 │ const a: any
    ·       ──────
 10 │ 
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/jsxParsingErrorImmediateSpreadInAttributeValue.tsx:11:7]
 10 │ 
 11 │ <X a={...a} />
    ·       ───
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/jsx/jsxUnclosedParserRecovery.ts:12:1]
 11 │     <
 12 │ </div>;
    · ─
 13 │ function noName() { }
    ╰────

  × Invalid characters after number
    ╭─[typescript/tests/cases/conformance/jsx/tsxAttributeInvalidNames.tsx:10:10]
  9 │ // Invalid names
 10 │ <test1 32data={32} />;
    ·          ────
 11 │ <test2 -data={32} />;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery1.tsx:4:20]
 3 │ function foo() {
 4 │     var x = <div>  { </div>
   ·                       ─
 5 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery2.tsx:4:7]
 3 │ <div></div>
 4 │ <div></div>
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/jsx/tsxErrorRecovery3.tsx:4:7]
 3 │ <div></div>
 4 │ <div></div>
   ·       ─
   ╰────

  × Expected `>` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/jsx/tsxFragmentErrors.tsx:9:7]
  8 │ 
  9 │ <>hi</div> // Error
    ·       ─┬─
    ·        ╰── `>` expected
 10 │ 
    ╰────

  × Unexpected token. Did you mean `{'>'}` or `&gt;`?
   ╭─[typescript/tests/cases/conformance/jsx/tsxGenericArrowFunctionParsing.tsx:8:17]
 7 │ // This is an element
 8 │ var x1 = <T>() => {}</T>;
   ·                 ▲
 9 │ x1.isElement;
   ╰────

  × Expected `,` but found `;`
    ╭─[typescript/tests/cases/conformance/jsx/tsxStatelessFunctionComponents1.tsx:41:16]
 40 │ let o = {
 41 │     prop1: true;
    ·                ┬
    ·                ╰── `,` expected
 42 │ }
    ╰────

  × TS(1099): Type argument list cannot be empty.
    ╭─[typescript/tests/cases/conformance/jsx/tsxTypeArgumentResolution.tsx:24:12]
 23 │ 
 24 │ x = <MyComp<> a={10} b="hi" />; // error
    ·            ──
 25 │ 
    ╰────

  × TS(1099): Type argument list cannot be empty.
    ╭─[typescript/tests/cases/conformance/jsx/tsxTypeArgumentResolution.tsx:26:12]
 25 │ 
 26 │ x = <MyComp<> a={10} b="hi"></MyComp>; // error
    ·            ──
 27 │ 
    ╰────

  × Expected corresponding JSX closing tag for '\u0061'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:15:4]
 14 │ // tag name:
 15 │ ; <\u0061></a>
    ·    ──────   ─
 16 │ ; <\u0061-b></a-b>
    ╰────

  × Expected corresponding JSX closing tag for '\u0061-b'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:16:4]
 15 │ ; <\u0061></a>
 16 │ ; <\u0061-b></a-b>
    ·    ────────   ───
 17 │ ; <a-\u0063></a-c>
    ╰────

  × Expected corresponding JSX closing tag for 'a-'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:17:4]
 16 │ ; <\u0061-b></a-b>
 17 │ ; <a-\u0063></a-c>
    ·    ──         ───
 18 │ ; <Comp\u0061 x={12} />
    ╰────

  × Expected corresponding JSX closing tag for '\u{0061}'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:20:4]
 19 │ ; <x.\u0076ideo />
 20 │ ; <\u{0061}></a>
    ·    ────────   ─
 21 │ ; <\u{0061}-b></a-b>
    ╰────

  × Expected corresponding JSX closing tag for '\u{0061}-b'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:21:4]
 20 │ ; <\u{0061}></a>
 21 │ ; <\u{0061}-b></a-b>
    ·    ──────────   ───
 22 │ ; <a-\u{0063}></a-c>
    ╰────

  × Expected corresponding JSX closing tag for 'a-'.
    ╭─[typescript/tests/cases/conformance/jsx/unicodeEscapesInJsxtags.tsx:22:4]
 21 │ ; <\u{0061}-b></a-b>
 22 │ ; <a-\u{0063}></a-c>
    ·    ──           ───
 23 │ ; <Comp\u{0061} x={12} />
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:50:1]
 49 │ // These should _mostly_ work - `import = require` always desugars to require calls, which do have extension and index resolution (but can't load anything that resolves to esm!)
 50 │ import m24 = require("./");
    · ───────────────────────────
 51 │ import m25 = require("./index");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:51:1]
 50 │ import m24 = require("./");
 51 │ import m25 = require("./index");
    · ────────────────────────────────
 52 │ import m26 = require("./subfolder");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:52:1]
 51 │ import m25 = require("./index");
 52 │ import m26 = require("./subfolder");
    · ────────────────────────────────────
 53 │ import m27 = require("./subfolder/");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:53:1]
 52 │ import m26 = require("./subfolder");
 53 │ import m27 = require("./subfolder/");
    · ─────────────────────────────────────
 54 │ import m28 = require("./subfolder/index");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:54:1]
 53 │ import m27 = require("./subfolder/");
 54 │ import m28 = require("./subfolder/index");
    · ──────────────────────────────────────────
 55 │ import m29 = require("./subfolder2");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:55:1]
 54 │ import m28 = require("./subfolder/index");
 55 │ import m29 = require("./subfolder2");
    · ─────────────────────────────────────
 56 │ import m30 = require("./subfolder2/");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:56:1]
 55 │ import m29 = require("./subfolder2");
 56 │ import m30 = require("./subfolder2/");
    · ──────────────────────────────────────
 57 │ import m31 = require("./subfolder2/index");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:57:1]
 56 │ import m30 = require("./subfolder2/");
 57 │ import m31 = require("./subfolder2/index");
    · ───────────────────────────────────────────
 58 │ import m32 = require("./subfolder2/another");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:58:1]
 57 │ import m31 = require("./subfolder2/index");
 58 │ import m32 = require("./subfolder2/another");
    · ─────────────────────────────────────────────
 59 │ import m33 = require("./subfolder2/another/");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:59:1]
 58 │ import m32 = require("./subfolder2/another");
 59 │ import m33 = require("./subfolder2/another/");
    · ──────────────────────────────────────────────
 60 │ import m34 = require("./subfolder2/another/index");
    ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
    ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJs1.ts:60:1]
 59 │ import m33 = require("./subfolder2/another/");
 60 │ import m34 = require("./subfolder2/another/index");
    · ───────────────────────────────────────────────────
 61 │ void m24;
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsExportAssignment.ts:3:8]
 2 │ const a = {};
 3 │ export = a;
   ·        ─
   ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportAssignment.ts:2:1]
 1 │ // cjs format file
 2 │ import fs = require("fs");
   · ──────────────────────────
 3 │ fs.readFile;
   ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsImportAssignment.ts:4:8]
 3 │ fs.readFile;
 4 │ export import fs2 = require("fs");
   ·        ───────────────────────────
   ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsSynchronousCallErrors.ts:3:1]
 2 │ import {h} from "../index.js";
 3 │ import mod = require("../index.js");
   · ────────────────────────────────────
 4 │ import {f as _f} from "./index.js";
   ╰────

  × TS(8002): 'import ... =' can only be used in TypeScript files.
   ╭─[typescript/tests/cases/conformance/node/allowJs/nodeModulesAllowJsSynchronousCallErrors.ts:5:1]
 4 │ import {f as _f} from "./index.js";
 5 │ import mod2 = require("./index.js");
   · ────────────────────────────────────
 6 │ export async function f() {
   ╰────

  × Expected `{` but found `[`
   ╭─[typescript/tests/cases/conformance/node/nodeModulesImportAttributesTypeModeDeclarationEmitErrors.ts:3:21]
 2 │ export type LocalInterface =
 3 │     & import("pkg", [ {"resolution-mode": "require"} ]).RequireInterface
   ·                     ┬
   ·                     ╰── `{` expected
 4 │     & import("pkg", [ {"resolution-mode": "import"} ]).ImportInterface;
   ╰────

  × Expected `{` but found `[`
   ╭─[typescript/tests/cases/conformance/node/nodeModulesImportTypeModeDeclarationEmitErrors1.ts:3:21]
 2 │ export type LocalInterface =
 3 │     & import("pkg", [ {"resolution-mode": "require"} ]).RequireInterface
   ·                     ┬
   ·                     ╰── `{` expected
 4 │     & import("pkg", [ {"resolution-mode": "import"} ]).ImportInterface;
   ╰────

  × TS(1030): 'override' modifier already seen.
    ╭─[typescript/tests/cases/conformance/override/override5.ts:22:14]
 21 │ 
 22 │     override override oop: number;
    ·              ────────
 23 │ 
    ╰────
  help: Remove the duplicate modifier.

  × TS(1030): 'override' modifier already seen.
    ╭─[typescript/tests/cases/conformance/override/override7.ts:19:14]
 18 │ 
 19 │     override override oop: number;
    ·              ────────
 20 │ 
    ╰────
  help: Remove the duplicate modifier.

  × TS(1070): 'override' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/override/override9.ts:8:5]
 7 │     foo (): void;
 8 │     override bar(): void;
   ·     ────────
 9 │     baz(): void;
   ╰────

  × TS(1070): 'override' modifier cannot appear on a type member.
    ╭─[typescript/tests/cases/conformance/override/override9.ts:10:5]
  9 │     baz(): void;
 10 │     override bazz(): void;
    ·     ────────
 11 │ }
    ╰────

  × TS(1090): 'override' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/override/overrideParameterProperty.ts:25:5]
 24 │ 
 25 │   m(override p1: "hello") {}
    ·     ────────
 26 │ }
    ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.classMethods.es2018.ts:2:15]
 1 │ class C4 {
 2 │     async * f(await) {
   ·               ─────
 3 │     }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.classMethods.es2018.ts:2:15]
 1 │ class C4 {
 2 │     async * f(await) {
   ·               ─────
 3 │     }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionDeclarations.es2018.ts:1:18]
 1 │ async function * await() {
   ·                  ─────
 2 │ }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionDeclarations.es2018.ts:1:18]
 1 │ async function * await() {
   ·                  ─────
 2 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionExpressions.es2018.ts:1:29]
 1 │ const f2 = async function * await() {
   ·                             ─────
 2 │ };
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.functionExpressions.es2018.ts:1:29]
 1 │ const f2 = async function * await() {
   ·                             ─────
 2 │ };
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.objectLiteralMethods.es2018.ts:2:15]
 1 │ const o4 = {
 2 │     async * f(await) {
   ·               ─────
 3 │     }
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/asyncGenerators/parser.asyncGenerators.objectLiteralMethods.es2018.ts:2:15]
 1 │ const o4 = {
 2 │     async * f(await) {
   ·               ─────
 3 │     }
   ╰────

  × await can only be used in conjunction with `for...of` statements
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2018/forAwait/parser.forAwait.es2018.ts:1:1]
 1 │ for await (const x in y) {
   · ────────────────────────
 2 │ }
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.binaryNegative.ts:1:6]
 1 │ 0b00_
   ·      ▲
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.decmialNegative.ts:1:4]
 1 │ 10_
   ·    ▲
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.hexNegative.ts:1:6]
 1 │ 0x00_
   ·      ▲
   ╰────

  × Invalid Character `
  │ `
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.octalNegative.ts:1:6]
 1 │ 0o00_
   ·      ▲
   ╰────

  × Invalid escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript2021/numericSeparators/parser.numericSeparators.unicodeEscape.ts:1:2]
 1 │ "\u{10_ffff}"
   ·  ─────
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors10.ts:2:3]
 1 │ var v = {
 2 │   public get foo() { }
   ·   ──────
 3 │ };
   ╰────

  × A 'get' accessor must not have any formal parameters.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors7.ts:1:18]
 1 │ var v = { get foo(v: number) { } };
   ·                  ───────────
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors8.ts:1:18]
 1 │ var v = { set foo() { } }
   ·                  ──
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Accessors/parserAccessors9.ts:1:18]
 1 │ var v = { set foo(a, b) { } }
   ·                  ──────
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression1.ts:1:10]
 1 │ var v = (public x: string) => { };
   ·          ──────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression10.ts:1:19]
 1 │ a ? (b) : c => (d) : e => f // Not legal JS; "Unexpected token ':'" at last colon
   ·                   ▲
   ╰────
  help: Try insert a semicolon here

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression13.ts:1:17]
 1 │ a ? () => a() : (): any => null; // Not legal JS; "Unexpected token ')'" at last paren
   ·                 ──
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression14.ts:1:9]
 1 │ a() ? (b: number, c?: string): void => d() : e; // Not legal JS; "Unexpected token ':'" at first colon
   ·         ┬
   ·         ╰── `,` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression15.ts:1:33]
 1 │ false ? (param): string => param : null // Not legal JS; "Unexpected token ':'" at last colon
   ·                                 ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression16.ts:1:47]
 1 │ true ? false ? (param): string => param : null : null // Not legal JS; "Unexpected token ':'" at last colon
   ·                                               ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression17.ts:1:12]
 1 │ a ? b : (c) : d => e // Not legal JS; "Unexpected token ':'" at last colon
   ·            ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression2.ts:1:14]
 1 │ a = () => { } || a
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `,` but found `||`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ArrowFunctionExpressions/parserArrowFunctionExpression3.ts:1:16]
 1 │ a = (() => { } || a)
   ·                ─┬
   ·                 ╰── `,` expected
   ╰────

  × TS(1172): 'extends' clause already seen
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration1.ts:1:19]
 1 │ class C extends A extends B {
   ·                   ───────
 2 │ }
   ╰────

  × Constructor implementation is missing.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration10.ts:2:4]
 1 │ class C {
 2 │    constructor();
   ·    ───────────
 3 │    foo();
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration10.ts:3:4]
 2 │    constructor();
 3 │    foo();
   ·    ───
 4 │ }
   ╰────

  × Constructor implementation is missing.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration11.ts:2:4]
 1 │ class C {
 2 │    constructor();
   ·    ───────────
 3 │    foo() { }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration13.ts:2:4]
 1 │ class C {
 2 │    foo();
   ·    ───
 3 │    bar() { }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration14.ts:2:4]
 1 │ class C {
 2 │    foo();
   ·    ───
 3 │    constructor();
   ╰────

  × Constructor implementation is missing.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration14.ts:3:4]
 2 │    foo();
 3 │    constructor();
   ·    ───────────
 4 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration15.ts:2:4]
 1 │ class C {
 2 │    foo();
   ·    ───
 3 │    constructor() { }
   ╰────

  × TS(1175): 'implements' clause already seen
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration2.ts:1:22]
 1 │ class C implements A implements B {
   ·                      ──────────
 2 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration21.ts:2:5]
 1 │ class C {
 2 │     0();
   ·     ─
 3 │     1() { }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration22.ts:2:5]
 1 │ class C {
 2 │     "foo"();
   ·     ─────
 3 │     "bar"() { }
   ╰────

  × TS(2414): Class name cannot be 'any'
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration24.ts:1:7]
 1 │ class any {
   ·       ───
 2 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration25.ts:6:5]
 5 │ class List<U> implements IList<U> {
 6 │     data(): U;
   ·     ────
 7 │     next(): string;
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration25.ts:7:5]
 6 │     data(): U;
 7 │     next(): string;
   ·     ────
 8 │ }
   ╰────

  × TS(1173): 'extends' clause must precede 'implements' clause
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration3.ts:1:22]
 1 │ class C implements A extends B {
   ·                      ───────
 2 │ }
   ╰────

  × TS(1172): 'extends' clause already seen
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration4.ts:1:32]
 1 │ class C extends A implements B extends C {
   ·                                ───────
 2 │ }
   ╰────

  × TS(1175): 'implements' clause already seen
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration5.ts:1:32]
 1 │ class C extends A implements B implements C {
   ·                                ──────────
 2 │ }
   ╰────

  × Constructor implementation is missing.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration8.ts:2:3]
 1 │ class C {
 2 │   constructor();
   ·   ───────────
 3 │ }
   ╰────

  × Function implementation is missing or not immediately following the declaration.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ClassDeclarations/parserClassDeclaration9.ts:2:4]
 1 │ class C {
 2 │    foo();
   ·    ───
 3 │ }
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ComputedPropertyNames/parserES5ComputedPropertyName6.ts:2:4]
 1 │ enum E {
 2 │   [e] = 1
   ·    ─
 3 │ }
   ╰────

  × TS(1098): Type parameter list cannot be empty.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration11.ts:2:14]
 1 │ class C {
 2 │   constructor<>() { }
   ·              ──
 3 │ }
   ╰────

  × TS(1092): Type parameters cannot appear on a constructor declaration
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration11.ts:2:14]
 1 │ class C {
 2 │   constructor<>() { }
   ·              ──
 3 │ }
   ╰────

  × TS(1031): 'export' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration3.ts:2:3]
 1 │ class C {
 2 │   export constructor() { }
   ·   ──────
 3 │ }
   ╰────

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration6.ts:2:10]
 1 │ class C {
 2 │   public public constructor() { }
   ·          ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration7.ts:2:10]
 1 │ class C {
 2 │   public private constructor() { }
   ·          ───────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected `(` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration8.ts:3:21]
 2 │   // Not a constructor
 3 │   public constructor;
   ·                     ┬
   ·                     ╰── `(` expected
 4 │ }
   ╰────

  × TS(1092): Type parameters cannot appear on a constructor declaration
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ConstructorDeclarations/parserConstructorDeclaration9.ts:2:14]
 1 │ class C {
 2 │   constructor<T>() { }
   ·              ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum4.ts:2:9]
 1 │     export enum SignatureFlags {
 2 │         ,
   ·         ─
 3 │     }
   ╰────

  × Expected `,` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum5.ts:2:12]
 1 │ enum E2 { a, }
 2 │ enum E3 { a: 1, }
   ·            ┬
   ·            ╰── `,` expected
 3 │ enum E1 { a, b: 1, c, d: 2 = 3 }
   ╰────

  × TS(2452): An enum member cannot have a numeric name.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnum7.ts:2:3]
 1 │ enum E {
 2 │   1, 2, 3
   ·   ─
 3 │ }
   ╰────

  × Identifier expected. 'void' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/EnumDeclarations/parserEnumDeclaration4.ts:1:6]
 1 │ enum void {
   ·      ────
 2 │ }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/AccessibilityAfterStatic/parserAccessibilityAfterStatic6.ts:3:14]
 2 │ {
 3 │ static public
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList1.ts:3:4]
 2 │    bar(
 3 │    return x;
   ·    ──────
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList2.ts:2:8]
 1 │ function foo() {
 2 │    bar(;
   ·        ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList3.ts:3:4]
 2 │    bar(a,
 3 │    return;
   ·    ──────
 4 │ }
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList4.ts:3:4]
 2 │    bar(a,b
 3 │    return;
   ·    ───┬──
   ·       ╰── `,` expected
 4 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList6.ts:1:5]
 1 │ Foo(,
   ·     ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArgumentLists/parserErrorRecovery_ArgumentList7.ts:1:7]
 1 │ Foo(a,,
   ·       ─
   ╰────

  × Expected `,` but found `decimal`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression1.ts:2:1]
 1 │ var v = [1, 2, 3
 2 │ 4, 5, 6, 7];
   · ┬
   · ╰── `,` expected
   ╰────

  × Expected `,` but found `float`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression2.ts:3:2]
 2 │  
 3 │  .7042760848999023, 1.1955541372299194, 0.19600726664066315, -0.7120069861412048];
   ·  ────────┬────────
   ·          ╰── `,` expected
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrayLiteralExpressions/parserErrorRecoveryArrayLiteralExpression3.ts:1:54]
 1 │ var texCoords = [2, 2, 0.5000001192092895, 0.8749999 ; 403953552, 0.5000001192092895, 0.8749999403953552];
   ·                                                      ┬
   ·                                                      ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/ArrowFunction1.ts:1:13]
 1 │ var v = (a: ) => {
   ·             ─
 2 │    
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/ArrowFunction3.ts:1:12]
 1 │ var v = (a): => {
   ·            ▲
 2 │    
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/parserX_ArrowFunction1.ts:1:13]
 1 │ var v = (a: ) => {
   ·             ─
 2 │    
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ArrowFunctions/parserX_ArrowFunction3.ts:1:12]
 1 │ var v = (a): => {
   ·            ▲
 2 │    
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block1.ts:3:5]
 2 │     1 + 
 3 │     return;
   ·     ──────
 4 │ }
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block2.ts:2:5]
 1 │ function f() {
 2 │     ¬
   ·     ─
 3 │     return;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Blocks/parserErrorRecovery_Block3.ts:4:12]
 3 │ 
 4 │     private b(): boolean {
   ·            ▲
 5 │     }
   ╰────
  help: Try insert a semicolon here

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement1.ts:5:7]
 4 │ // this as a source unit element.
 5 │ class D {
   ·       ┬
   ·       ╰── `;` expected
 6 │ }
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement2.ts:4:8]
 3 │ 
 4 │   enum E {
   ·        ┬
   ·        ╰── `;` expected
 5 │   }
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ClassElements/parserErrorRecovery_ClassElement3.ts:2:4]
 1 │ module M {
 2 │    ¬
   ·    ─
 3 │    class C {
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/Expressions/parserErrorRecovery_Expression1.ts:1:9]
 1 │ var v = ()({});
   ·         ──
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause1.ts:2:2]
 1 │ class C extends {
 2 │ }
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause2.ts:2:2]
 1 │ class C extends A, {
 2 │ }
   ╰────

  × Expected `{` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause3.ts:1:28]
 1 │ class C extends implements A {
   ·                            ┬
   ·                            ╰── `{` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause4.ts:1:30]
 1 │ class C extends A implements {
   ·                              ─
 2 │ }
   ╰────

  × Expected `{` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause5.ts:1:31]
 1 │ class C extends A, implements B, {
   ·                               ┬
   ·                               ╰── `{` expected
 2 │ }
   ╰────

  × Expected `{` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ExtendsOrImplementsClauses/parserErrorRecovery_ExtendsOrImplementsClause6.ts:1:24]
 1 │ interface I extends { }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement1.ts:4:3]
 3 │     if (
 4 │   }
   ·   ─
 5 │   f2() {
   ╰────

  × Expected `)` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement2.ts:4:3]
 3 │     if (a
 4 │   }
   ·   ┬
   ·   ╰── `)` expected
 5 │   f2() {
   ╰────

  × Expected `)` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement3.ts:4:3]
 3 │     if (a.b
 4 │   }
   ·   ┬
   ·   ╰── `)` expected
 5 │   f2() {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement4.ts:4:3]
 3 │     if (a.b)
 4 │   }
   ·   ─
 5 │   f2() {
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement5.ts:5:7]
 4 │   }
 5 │   f2() {
   ·       ▲
 6 │   }
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IfStatements/parserErrorRecoveryIfStatement6.ts:5:9]
 4 │   }
 5 │   public f2() {
   ·         ▲
 6 │   }
   ╰────
  help: Try insert a semicolon here

  × Expected `;` but found `string`
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/IncompleteMemberVariables/parserErrorRecovery_IncompleteMemberVariable2.ts:12:22]
 11 │ 
 12 │         public con:C "hello";
    ·                      ───┬───
    ·                         ╰── `;` expected
 13 │         // Constructor
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/LeftShifts/parserErrorRecovery_LeftShift1.ts:1:29]
 1 │ retValue = bfs.VARIABLES >> );
   ·                             ─
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement1.ts:1:1]
 1 │ return foo;
   · ──────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement1.ts:2:1]
 1 │ return foo;
 2 │ }
   · ─
 3 │ return bar;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ModuleElements/parserErrorRecovery_ModuleElement2.ts:7:1]
 6 │ 
 7 │ )
   · ─
 8 │ )
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral1.ts:1:16]
 1 │ var v = { a: 1 b: 2 }
   ·                ┬
   ·                ╰── `,` expected
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral2.ts:2:1]
 1 │ var v = { a
 2 │ return;
   · ───┬──
   ·    ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral3.ts:2:1]
 1 │ var v = { a: 
 2 │ return;
   · ──────
   ╰────

  × Expected `,` but found `return`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral4.ts:2:1]
 1 │ var v = { a: 1
 2 │ return;
   · ───┬──
   ·    ╰── `,` expected
   ╰────

  × Expected `:` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ObjectLiterals/parserErrorRecovery_ObjectLiteral5.ts:2:7]
 1 │ var v = { a: 1,
 2 │ return;
   ·       ┬
   ·       ╰── `:` expected
   ╰────

  × Expected `,` but found `{`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList1.ts:1:14]
 1 │ function f(a {
   ·              ┬
   ·              ╰── `,` expected
 2 │ }
   ╰────

  × Expected `)` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList2.ts:2:2]
 1 │ function f(a, {
 2 │ }
   ╰────

  × Invalid Character `¬`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList4.ts:1:14]
 1 │ function f(a,¬) {
   ·              ─
 2 │ }
   ╰────

  × Expected `,` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/ParameterLists/parserErrorRecovery_ParameterList5.ts:1:11]
 1 │ (a:number => { }
   ·           ─┬
   ·            ╰── `,` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SourceUnits/parserErrorRecovery_SourceUnit1.ts:3:1]
 2 │ }
 3 │ }
   · ─
 4 │ class D {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SwitchStatements/parserErrorRecovery_SwitchStatement1.ts:4:5]
 3 │        1 + 
 4 │     case 2:
   ·     ────
 5 │        1 + 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/SwitchStatements/parserErrorRecovery_SwitchStatement2.ts:5:1]
 4 │ 
 5 │ class D {
   · ─────
 6 │ }
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/TypeArgumentLists/TypeArgumentList1.ts:1:10]
 1 │ Foo<A,B,\ C>(4, 5, 6);
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/TypeArgumentLists/parserX_TypeArgumentList1.ts:1:10]
 1 │ Foo<A,B,\ C>(4, 5, 6);
   ·          ─
   ╰────

  × Identifier expected. 'return' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/VariableLists/parserErrorRecovery_VariableList1.ts:2:1]
 1 │ var a,
 2 │ return;
   · ──────
   ╰────

  × Identifier expected. 'export' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/VariableLists/parserInvalidIdentifiersInVariableStatements1.ts:1:5]
 1 │ var export;
   ·     ──────
 2 │ var foo;
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEmptyParenthesizedExpression1.ts:2:4]
 1 │ function getObj() {
 2 │    ().toString();
   ·    ──
 3 │ }
   ╰────

  × Expected `(` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction1.ts:1:10]
 1 │ function =>
   ·          ─┬
   ·           ╰── `(` expected
   ╰────

  × Expected function name
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction2.ts:1:10]
 1 │ function (a => b;
   ·          ─
   ╰────
  help: Function name is required in function declaration or named export

  × Expected `,` but found `=>`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserEqualsGreaterThanAfterFunction2.ts:1:13]
 1 │ function (a => b;
   ·             ─┬
   ·              ╰── `,` expected
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantAccessibilityModifierInModule1.ts:3:12]
 2 │     var x=10;  // variable local to this module body
 3 │     private y=x;  // property visible only in module
   ·            ▲
 4 │     export var z=y;  // property visible to any code
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantEqualsGreaterThanAfterFunction1.ts:1:13]
 1 │ function f() => 4;
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantEqualsGreaterThanAfterFunction2.ts:1:17]
 1 │ function f(p: A) => p;
   ·                 ▲
   ╰────
  help: Try insert a semicolon here

  × A 'set' accessor must have exactly one parameter.
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserErrantSemicolonInClass1.ts:15:17]
 14 │     }
 15 │     public set d() {
    ·                 ──
 16 │     }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserFuzz1.ts:1:8]
 1 │ cla <ss {
   ·        ▲
 2 │   _ static try
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserMissingLambdaOpenBrace1.ts:4:13]
 3 │         return fromDoWhile(test =>
 4 │             var index = 0;
   ·             ───
 5 │             return this.doWhile((item, i) => filter(item, i) ? test(item, index++) : true);
   ╰────

  × TS(1070): 'public' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserModifierOnPropertySignature1.ts:2:5]
 1 │ interface Foo{
 2 │     public biz;
   ·     ──────
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserPublicBreak1.ts:1:7]
 1 │ public break;
   ·       ▲
   ╰────
  help: Try insert a semicolon here

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserStatementIsNotAMemberVariableDeclaration1.ts:1:1]
 1 │ return {
   · ──────
 2 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnfinishedTypeNameBeforeKeyword1.ts:2:7]
 1 │ var x: TypeModule1.
 2 │ module TypeModule2 {
   ·       ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Expected `>` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnterminatedGeneric1.ts:2:54]
 1 │  interface IQService {
 2 │         all(promises: IPromise < any > []): IPromise<
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ErrorRecovery/parserUnterminatedGeneric2.ts:2:33]
 1 │ declare module ng {
 2 │     interfaceICompiledExpression {
   ·                                 ▲
 3 │         (context: any, locals?: any): any;
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment3.ts:1:9]
 1 │ export =
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ExportAssignments/parserExportAssignment4.ts:1:10]
 1 │ export = ;
   ·          ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parseIncompleteBinaryExpression1.ts:1:9]
 1 │ var v = || b;
   ·         ──
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserAssignmentExpression1.ts:1:2]
 1 │ (foo()) = bar;
   ·  ─────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserMemberAccessAfterPostfixExpression1.ts:1:4]
 1 │ a--.toString()
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserPostfixPostfixExpression1.ts:1:4]
 1 │ a++ ++;
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserPostfixUnaryExpression1.ts:1:7]
 1 │ foo ++ ++;
   ·       ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserTypeAssertionInObjectCreationExpression1.ts:1:5]
 1 │ new <T>Foo()
   ·     ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression1.ts:1:3]
 1 │ ++this;
   ·   ────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression2.ts:1:3]
 1 │ ++function(e) { }
   ·   ───────────────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression3.ts:1:3]
 1 │ ++[0];
   ·   ───
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression4.ts:1:3]
 1 │ ++{};
   ·   ──
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression5.ts:1:4]
 1 │ ++ delete foo.bar
   ·    ──────────────
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Expressions/parserUnaryExpression7.ts:1:4]
 1 │ ++ new Foo();
   ·    ─────────
   ╰────

  × TS(1183): An implementation cannot be declared in ambient contexts.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/FunctionDeclarations/parserFunctionDeclaration2.ts:1:24]
 1 │ declare function Foo() {
   ·                        ▲
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Fuzz/parser0_004152.ts:2:45]
 1 │ export class Game {
 2 │     private position = new DisplayPosition([), 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 0], NoMove, 0);
   ·                                             ─
 3 │     private prevConfig: SeedCoords[][];
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity11.ts:1:1]
 1 │ 1 >>= 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity12.ts:1:6]
 1 │ 1 >> = 2;
   ·      ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity13.ts:1:9]
 1 │ 1 >>/**/= 2;
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity14.ts:2:1]
 1 │ 1 >>
 2 │ = 2;
   · ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity15.ts:1:1]
 1 │ 1 
   · ─
 2 │ // before
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity16.ts:1:1]
 1 │ 1 >>>= 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity17.ts:1:7]
 1 │ 1 >>> = 2;
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity18.ts:1:10]
 1 │ 1 >>>/**/= 2;
   ·          ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity19.ts:2:1]
 1 │ 1 >>>
 2 │ = 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity2.ts:1:5]
 1 │ 1 > > 2;
   ·     ─
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity20.ts:1:1]
 1 │ 1
   · ─
 2 │ // Before
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity3.ts:1:8]
 1 │ 1 >/**/> 2;
   ·        ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity4.ts:2:1]
 1 │ 1 >
 2 │ > 2;
   · ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity7.ts:1:6]
 1 │ 1 >> > 2;
   ·      ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity8.ts:1:9]
 1 │ 1 >>/**/> 2;
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Generics/parserGreaterThanTokenAmbiguity9.ts:2:1]
 1 │ 1 >>
 2 │ > 2;
   · ─
   ╰────

  × Expected `;` but found `[`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration10.ts:2:18]
 1 │ class C {
 2 │    static static [x: string]: string;
   ·                  ┬
   ·                  ╰── `;` expected
 3 │ }
   ╰────

  × TS(1071): 'public' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration7.ts:2:4]
 1 │ class C {
 2 │    public [x: string]: string;
   ·    ──────
 3 │ }
   ╰────

  × TS(1071): 'private' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration8.ts:2:4]
 1 │ class C {
 2 │    private [x: string]: string;
   ·    ───────
 3 │ }
   ╰────

  × TS(1031): 'export' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration9.ts:2:4]
 1 │ class C {
 2 │    export [x: string]: string;
   ·    ──────
 3 │ }
   ╰────

  × TS(1071): 'export' modifier cannot appear on an index signature.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexMemberDeclarations/parserIndexMemberDeclaration9.ts:2:4]
 1 │ class C {
 2 │    export [x: string]: string;
   ·    ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature1.ts:2:4]
 1 │ interface I {
 2 │   [...a]
   ·    ───
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature10.ts:2:6]
 1 │ interface I {
 2 │    [a, b]: number
   ·      ─
 3 │ }
   ╰────

  × TS(1021): An index signature must have a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature11.ts:3:9]
 2 │         [p]; // Used to be indexer, now it is a computed property
 3 │         [p1: string];
   ·         ────────────
 4 │         [p2: string, p3: number];
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature2.ts:2:11]
 1 │ interface I {
 2 │   [public a]
   ·           ─
 3 │ }
   ╰────

  × TS(1019): An index signature parameter cannot have a question mark.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature3.ts:2:5]
 1 │ interface I {
 2 │   [a?]
   ·     ─
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature3.ts:2:6]
 1 │ interface I {
 2 │   [a?]
   ·      ─
 3 │ }
   ╰────

  × TS(1021): An index signature must have a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature6.ts:2:3]
 1 │ interface I {
 2 │   [a:boolean]
   ·   ───────────
 3 │ }
   ╰────

  × TS(1021): An index signature must have a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature7.ts:2:3]
 1 │ interface I {
 2 │   [a:string]
   ·   ──────────
 3 │ }
   ╰────

  × TS(1021): An index signature must have a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature8.ts:1:12]
 1 │ var foo: { [index: any]; }; // expect an error here
   ·            ────────────
 2 │ var foo2: { [index: RegExp]; }; // expect an error here
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/IndexSignatures/parserIndexSignature9.ts:2:5]
 1 │ interface I {
 2 │    []: number
   ·     ─
 3 │ }
   ╰────

  × TS(1172): 'extends' clause already seen
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration1.ts:1:23]
 1 │ interface I extends A extends B {
   ·                       ───────
 2 │ }
   ╰────

  × TS(1176): Interface declaration cannot have 'implements' clause.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration2.ts:1:13]
 1 │ interface I implements A {
   ·             ──────────
 2 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration3.ts:1:1]
 1 │ public interface I {
   · ──────
 2 │ }
   ╰────

  × 'static' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration4.ts:1:1]
 1 │ static interface I {
   · ──────
 2 │ }
   ╰────

  × TS(1029): 'export' modifier must precede 'declare' modifier.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration6.ts:1:8]
 1 │ export export interface I {
   ·        ──────
 2 │ }
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration6.ts:1:8]
 1 │ export export interface I {
   ·        ──────
 2 │ }
   ╰────

  × TS(2414): Interface name cannot be 'string'
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/InterfaceDeclarations/parserInterfaceDeclaration8.ts:1:11]
 1 │ interface string {
   ·           ──────
 2 │ }
   ╰────

  × TS(1031): 'export' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration10.ts:2:5]
 1 │ class C {
 2 │     export get Foo() { }
   ·     ──────
 3 │ }
   ╰────

  × 'declare' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration11.ts:2:5]
 1 │ class C {
 2 │     declare get Foo() { }
   ·     ───────
 3 │ }
   ╰────

  × A 'get' accessor must not have any formal parameters.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration12.ts:2:11]
 1 │ class C {
 2 │    get Foo(a: number) { }
   ·           ───────────
 3 │ }
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration13.ts:2:11]
 1 │ class C {
 2 │    set Foo() { }
   ·           ──
 3 │ }
   ╰────

  × A 'set' accessor must have exactly one parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration14.ts:2:11]
 1 │ class C {
 2 │    set Foo(a: number, b: number) { }
   ·           ──────────────────────
 3 │ }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration15.ts:2:12]
 1 │ class C {
 2 │    set Foo(public a: number) { }
   ·            ──────
 3 │ }
   ╰────

  × A 'set' accessor cannot have an initializer.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration16.ts:2:11]
 1 │ class C {
 2 │    set Foo(a = 1) { }
   ·           ───────
 3 │ }
   ╰────

  × A 'set' accessor cannot have rest parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration18.ts:2:12]
 1 │ class C {
 2 │    set Foo(...a) { }
   ·            ────
 3 │ }
   ╰────

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration7.ts:2:12]
 1 │ class C {
 2 │     public public get Foo() { }
   ·            ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected `;` but found `get`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberAccessorDeclarations/parserMemberAccessorDeclaration8.ts:2:19]
 1 │ class C {
 2 │     static static get Foo() { }
   ·                   ─┬─
   ·                    ╰── `;` expected
 3 │ }
   ╰────

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration1.ts:2:12]
 1 │ class C {
 2 │     public public Foo() { }
   ·            ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration2.ts:2:19]
 1 │ class C {
 2 │     static static Foo() { }
   ·                   ─┬─
   ·                    ╰── `;` expected
 3 │ }
   ╰────

  × TS(1031): 'export' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration4.ts:2:5]
 1 │ class C {
 2 │     export Foo() { }
   ·     ──────
 3 │ }
   ╰────

  × TS(1031): 'declare' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclaration5.ts:2:5]
 1 │ class C {
 2 │     declare Foo() { }
   ·     ───────
 3 │ }
   ╰────

  × Identifier `public` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:2:3]
 1 │ class C {
 2 │   public() {}
   ·   ───┬──
   ·      ╰── `public` has already been declared here
 3 │   static() {}
 4 │ 
 5 │   public public() {}
   ·          ───┬──
   ·             ╰── It can not be redeclared here
 6 │   public static() {}
   ╰────

  × Identifier `static` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:3:3]
 2 │   public() {}
 3 │   static() {}
   ·   ───┬──
   ·      ╰── `static` has already been declared here
 4 │ 
 5 │   public public() {}
 6 │   public static() {}
   ·          ───┬──
   ·             ╰── It can not be redeclared here
 7 │ 
   ╰────

  × Identifier `public` has already been declared
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:8:17]
  7 │ 
  8 │   public static public() {}
    ·                 ───┬──
    ·                    ╰── `public` has already been declared here
  9 │   public static static() {}
 10 │   
 11 │   static public() {}
    ·          ───┬──
    ·             ╰── It can not be redeclared here
 12 │   static static() {}
    ╰────

  × Identifier `static` has already been declared
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberFunctionDeclarations/parserMemberFunctionDeclarationAmbiguities1.ts:9:17]
  8 │   public static public() {}
  9 │   public static static() {}
    ·                 ───┬──
    ·                    ╰── `static` has already been declared here
 10 │   
 11 │   static public() {}
 12 │   static static() {}
    ·          ───┬──
    ·             ╰── It can not be redeclared here
 13 │ }
    ╰────

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration1.ts:2:10]
 1 │ class C {
 2 │   public public Foo;
   ·          ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration2.ts:2:17]
 1 │ class C {
 2 │   static static Foo;
   ·                 ─┬─
   ·                  ╰── `;` expected
 3 │ }
   ╰────

  × TS(1031): 'export' modifier cannot appear on class elements of this kind.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MemberVariableDeclarations/parserMemberVariableDeclaration4.ts:2:3]
 1 │ class C {
 2 │   export Foo;
   ·   ──────
 3 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MissingTokens/parserMissingToken1.ts:1:5]
 1 │ a / finally
   ·     ───────
   ╰────

  × Unterminated regular expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MissingTokens/parserMissingToken2.ts:1:1]
 1 │ / b;
   · ────
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/MissingTokens/parserMissingToken2.ts:1:1]
 1 │ / b;
   · ────
   ╰────

  × Expected `(` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ObjectTypes/parserObjectType5.ts:3:7]
 2 │    A: B
 3 │    <T>;
   ·       ┬
   ·       ╰── `(` expected
 4 │ };
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ObjectTypes/parserObjectType6.ts:3:5]
 2 │    a: B
 3 │    [];
   ·     ─
 4 │ };
   ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList1.ts:2:6]
 1 │ class C {
 2 │    F(...A, B) { }
   ·      ────
 3 │ }
   ╰────

  × A rest element cannot have an initializer.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList10.ts:2:11]
 1 │ class C {
 2 │    foo(...bar = 0) { }
   ·           ───────
 3 │ }
   ╰────

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList11.ts:1:8]
 1 │ (...arg?) => 102;
   ·        ─
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList13.ts:2:10]
 1 │ interface I {
 2 │     new (public x);
   ·          ──────
 3 │ }
   ╰────

  × A required parameter cannot follow an optional parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList3.ts:2:9]
 1 │ class C {
 2 │   F(A?, B) { }
   ·         ─
 3 │ }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList4.ts:1:12]
 1 │ function F(public A) {
   ·            ──────
 2 │ }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList5.ts:1:16]
 1 │ function A(): (public B) => C {
   ·                ──────
 2 │ }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList6.ts:2:19]
 1 │ class C {
 2 │   constructor(C: (public A) => any) {
   ·                   ──────
 3 │   }
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList7.ts:2:14]
 1 │ class C1 {
 2 │  constructor(public p1:string); // ERROR
   ·              ────────────────
 3 │  constructor(private p2:number); // ERROR
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList7.ts:3:14]
 2 │  constructor(public p1:string); // ERROR
 3 │  constructor(private p2:number); // ERROR
   ·              ─────────────────
 4 │  constructor(public p3:any) {} // OK
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList8.ts:2:14]
 1 │ declare class C2 {
 2 │  constructor(public p1:string); // ERROR
   ·              ────────────────
 3 │  constructor(private p2:number); // ERROR
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList8.ts:3:14]
 2 │  constructor(public p1:string); // ERROR
 3 │  constructor(private p2:number); // ERROR
   ·              ─────────────────
 4 │  constructor(public p3:any); // ERROR
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList8.ts:4:14]
 3 │  constructor(private p2:number); // ERROR
 4 │  constructor(public p3:any); // ERROR
   ·              ─────────────
 5 │ }
   ╰────

  × A rest parameter cannot be optional
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/ParameterLists/parserParameterList9.ts:2:14]
 1 │ class C {
 2 │    foo(...bar?) { }
   ·              ─
 3 │ }
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected1.ts:1:1]
 1 │ protected class C {
   · ─────────
 2 │ }
   ╰────

  × 'protected' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected2.ts:1:1]
 1 │ protected module M {
   · ─────────
 2 │ }
   ╰────

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected4.ts:2:13]
 1 │ class C {
 2 │   protected public m() { }
   ·             ──────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × TS(1028): Accessibility modifier already seen.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Protected/Protected7.ts:2:13]
 1 │ class C {
 2 │   protected private m() { }
   ·             ───────
 3 │ }
   ╰────
  help: Remove the duplicate modifier.

  × Expected a semicolon or an implicit semicolon after a statement, but found none
      ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RealWorld/parserharness.ts:1430:16]
 1429 │         // Regex for parsing options in the format "@Alpha: Value of any sort"
 1430 │         private optionRegex = /^[\/]{2}\s*@(\w+):\s*(\S*)/gm;  // multiple matches on multiple lines
      ·                ▲
 1431 │ 
      ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509630.ts:3:1]
 2 │     public examples = [ // typing here
 3 │ }
   · ─
 4 │ class Any extends Type {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509667.ts:4:4]
 3 │       if (this.
 4 │    }
   ·    ─
 5 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509668.ts:3:23]
 2 │   // Doesn't work, but should
 3 │   constructor (public ...args: string[]) { }
   ·                       ───
 4 │ }
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser509669.ts:2:9]
 1 │ function foo():any {
 2 │  return ():void {};
   ·         ──
 3 │ }
   ╰────

  × Expected `}` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512084.ts:1:12]
 1 │ class foo {
   ╰────

  × Expected `,` but found `;`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512097.ts:1:14]
 1 │ var tt = { aa; }
   ·              ┬
   ·              ╰── `,` expected
 2 │ 
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser512325.ts:1:21]
 1 │ var tt = (a, (b, c)) => a+b+c;
   ·                     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser519458.ts:1:21]
 1 │ import rect = module("rect"); var bar = new rect.Rect();
   ·                     ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser521128.ts:1:14]
 1 │ module.module { }
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser553699.ts:3:21]
 2 │   constructor() { }
 3 │   public banana (x: public) { }
   ·                     ──────
 4 │ }
   ╰────

  × Empty parenthesized expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser566700.ts:1:9]
 1 │ var v = ()({});
   ·         ──
   ╰────

  × Invalid regular expression: Unterminated capturing group
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser579071.ts:1:12]
 1 │ var x = /fo(o/;
   ·            ──
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser585151.ts:2:7]
 1 │ class Foo2 {
 2 │   var icecream = "chocolate";
   ·       ────┬───
   ·           ╰── `;` expected
 3 │ }
   ╰────

  × TS(1029): 'export' modifier must precede 'declare' modifier.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser618973.ts:1:8]
 1 │ export export class Foo {
   ·        ──────
 2 │   public Bar() {
   ╰────

  × 'export' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser618973.ts:1:8]
 1 │ export export class Foo {
   ·        ──────
 2 │   public Bar() {
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser642331.ts:2:18]
 1 │ class test {
 2 │     constructor (static) { }
   ·                  ──────
 3 │ }
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser642331_1.ts:4:18]
 3 │ class test {
 4 │     constructor (static) { }
   ·                  ──────
 5 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645086_1.ts:1:13]
 1 │ var v = /[]/]/
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegressionTests/parser645086_2.ts:1:14]
 1 │ var v = /[^]/]/
   ·              ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected flag a in regular expression literal
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity3.ts:1:16]
 1 │ if (1) /regexp/a.foo();
   ·                ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity3.ts:1:8]
 1 │ if (1) /regexp/a.foo();
   ·        ─────────
   ╰────

  × Unterminated regular expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity4.ts:1:5]
 1 │ foo(/notregexp);
   ·     ────────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/RegularExpressions/parserRegularExpressionDivideAmbiguity7.ts:2:3]
 1 │ (a/8
 2 │  ){}
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens1.ts:1:2]
 1 │ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens10.ts:1:2]
 1 │ \
   ·  ─
 2 │ \
 3 │ /*existing trivia*/ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens10.ts:2:2]
 1 │ \
 2 │ \
   ·  ─
 3 │ /*existing trivia*/ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:4]
 1 │ ; \ \ \ 
   ·    ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:6]
 1 │ ; \ \ \ 
   ·      ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens11.ts:1:8]
 1 │ ; \ \ \ 
   ·        ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:2]
 1 │ \ \ \
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:4]
 1 │ \ \ \
   ·    ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens12.ts:1:6]
 1 │ \ \ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens13.ts:1:11]
 1 │ /regexp/ \ ;
   ·           ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens13.ts:1:9]
 1 │ /regexp/ \ ;
   ·         ▲
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens14.ts:1:2]
 1 │ \
   ·  ─
 2 │ /*existing trivia*/ 
 3 │ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens14.ts:3:2]
 2 │ /*existing trivia*/ 
 3 │ \
   ·  ─
 4 │ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens15.ts:2:2]
 1 │ /*existing trivia*/
 2 │ \
   ·  ─
 3 │ \
 4 │ ;
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens15.ts:3:2]
 2 │ \
 3 │ \
   ·  ─
 4 │ ;
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens16.ts:1:6]
 1 │ foo(): Bar { }
   ·      ▲
 2 │ function Foo      () ¬   { }
   ╰────
  help: Try insert a semicolon here

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens17.ts:1:9]
 1 │ foo(a, \
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens18.ts:1:7]
 1 │ foo(a \
   ·       ┬
   ·       ╰── `,` expected
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens19.ts:1:2]
 1 │ \ declare var v;
   ·  ─
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens19.ts:1:1]
 1 │ \ declare var v;
   · ─────────
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens2.ts:1:2]
 1 │ \\
   ·  ─
   ╰────

  × Expected `,` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens20.ts:1:12]
 1 │ var v: X<T \
   ·            ┬
   ·            ╰── `,` expected
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens3.ts:1:2]
 1 │ \ ; \
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens3.ts:1:6]
 1 │ \ ; \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens4.ts:1:2]
 1 │ \  /regexp/;
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens5.ts:1:2]
 1 │ \ /*foo*/ ;
   ·  ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens6.ts:1:10]
 1 │ /*foo*/ \
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens7.ts:1:10]
 1 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens8.ts:2:10]
 1 │ ;
 2 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Invalid Unicode escape sequence
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SkippedTokens/parserSkippedTokens9.ts:2:10]
 1 │ ; // existing trivia
 2 │ /*foo*/ \ /*bar*/
   ·          ─
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakNotInIterationOrSwitchStatement1.ts:1:1]
 1 │ break;
   · ──────
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakNotInIterationOrSwitchStatement2.ts:3:5]
 2 │   function f() {
 3 │     break;
   ·     ──────
 4 │   }
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakTarget5.ts:5:13]
 4 │     while (true) {
 5 │       break target;
   ·             ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/BreakStatements/parser_breakTarget6.ts:2:9]
 1 │ while (true) {
 2 │   break target;
   ·         ──────
 3 │ }
   ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement1.ts:1:1]
 1 │ continue;
   · ─────────
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement2.ts:3:5]
 2 │   function f() {
 3 │     continue;
   ·     ─────────
 4 │   }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueNotInIterationStatement3.ts:3:5]
 2 │   default:
 3 │     continue;
   ·     ─────────
 4 │ }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × A `continue` statement can only jump to a label of an enclosing `for`, `while` or `do while` statement.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── This is an non-iteration statement
 2 │   continue target;
   ·            ───┬──
   ·               ╰── for this label
   ╰────

  × Jump target cannot cross function boundary.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget5.ts:5:16]
 4 │     while (true) {
 5 │       continue target;
   ·                ──────
 6 │     }
   ╰────

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ContinueStatements/parser_continueTarget6.ts:2:12]
 1 │ while (true) {
 2 │   continue target;
   ·            ──────
 3 │ }
   ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/LabeledStatements/parser_duplicateLabel1.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ target:
   · ───┬──
   ·    ╰── It can not be redeclared here
 3 │ while (true) {
   ╰────

  × Label `target` has already been declared
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/LabeledStatements/parser_duplicateLabel2.ts:1:1]
 1 │ target:
   · ───┬──
   ·    ╰── `target` has already been declared here
 2 │ while (true) {
 3 │   target:
   ·   ───┬──
   ·      ╰── It can not be redeclared here
 4 │   while (true) {
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ReturnStatements/parserReturnStatement1.ts:1:1]
 1 │ return;
   · ──────
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/ReturnStatements/parserReturnStatement2.ts:2:4]
 1 │ {
 2 │    return;
   ·    ──────
 3 │ }
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserBreakStatement1.d.ts:1:1]
 1 │ break;
   · ──────
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserContinueStatement1.d.ts:1:1]
 1 │ continue;
   · ─────────
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement2.ts:1:13]
 1 │ for (var of X) {
   ·             ┬
   ·             ╰── `;` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement21.ts:1:15]
 1 │ for (var of of) { }
   ·               ─
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement3.ts:1:6]
 1 │ for (var a, b of X) {
   ·      ────────
 2 │ }
   ╰────

  × for-of loop variable declaration may not have an initializer
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement4.ts:1:6]
 1 │ for (var a = 1 of X) {
   ·      ─────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement5.ts:1:10]
 1 │ for (var a: number of X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 of X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement7.ts:1:10]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserES5ForOfStatement7.ts:1:25]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·                         ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Identifier expected. 'in' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement2.ts:1:10]
 1 │ for (var in X) {
   ·          ──
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement3.ts:1:6]
 1 │ for (var a, b in X) {
   ·      ────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...in' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement5.ts:1:10]
 1 │ for (var a: number in X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 in X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...in` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" in X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...in' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement7.ts:1:10]
 1 │ for (var a: number = 1, b: string = "" in X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × TS(2483): The left-hand side of a 'for...in' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForInStatement7.ts:1:25]
 1 │ for (var a: number = 1, b: string = "" in X) {
   ·                         ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement4.ts:1:6]
 1 │ for (a = 1 in b) {
   ·      ─────
 2 │ }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement6.ts:1:6]
 1 │ for (foo() in b) {
   ·      ─────
 2 │ }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement7.ts:1:6]
 1 │ for (new foo() in b) {
   ·      ─────────
 2 │ }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserForStatement8.ts:1:6]
 1 │ for (this in b) {
   ·      ────
 2 │ }
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserReturnStatement1.d.ts:1:1]
 1 │ return;
   · ──────
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement1.d.ts:1:1]
 1 │ with (foo) {
   · ────
 2 │ }
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement2.ts:2:3]
 1 │ with (1)
 2 │   return;
   ·   ──────
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Statements/parserWithStatement2.ts:1:1]
 1 │ with (1)
   · ────
 2 │   return;
   ╰────

  × '0'-prefixed octal literals and octal escape sequences are deprecated
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/octalLiteralInStrictModeES3.ts:2:1]
 1 │ "use strict";
 2 │ 03;
   · ──
   ╰────
  help: for octal literals use the '0o' prefix instead

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode10.ts:2:12]
 1 │ "use strict";
 2 │ function f(eval) {
   ·            ────
 3 │ }
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode11.ts:2:20]
 1 │ "use strict";
 2 │ var v = function f(eval) {
   ·                    ────
 3 │ };
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode12.ts:2:19]
 1 │ "use strict";
 2 │ var v = { set foo(eval) { } }
   ·                   ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode13.ts:4:7]
 3 │ }
 4 │ catch(eval) {
   ·       ────
 5 │ }
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode14.ts:2:1]
 1 │ "use strict";
 2 │ with (a) {
   · ────
 3 │ }
   ╰────

  × Delete of an unqualified identifier in strict mode.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode15.ts:2:8]
 1 │ "use strict";
 2 │ delete a;
   ·        ─
   ╰────

  × The keyword 'static' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode2.ts:5:1]
 4 │ foo1();
 5 │ static();
   · ──────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode3.ts:2:1]
 1 │ "use strict";
 2 │ eval = 1;
   · ────
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode4.ts:2:1]
 1 │ "use strict";
 2 │ arguments = 1;
   · ─────────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode5.ts:2:1]
 1 │ "use strict";
 2 │ eval += 1;
   · ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode6.ts:2:1]
 1 │ "use strict";
 2 │ eval++;
   · ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode7.ts:2:3]
 1 │ "use strict";
 2 │ ++eval;
   ·   ────
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode8.ts:2:10]
 1 │ "use strict";
 2 │ function eval() {
   ·          ────
 3 │ }
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/StrictMode/parserStrictMode9.ts:2:18]
 1 │ "use strict";
 2 │ var v = function eval() {
   ·                  ────
 3 │ };
   ╰────

  × 'super' can only be used with function calls or in property accesses
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression2.ts:3:5]
 2 │   M() {
 3 │     super<T>(0);
   ·     ─────
 4 │   }
   ╰────
  help: replace with `super()` or `super.prop` or `super[prop]`

  × Super calls are not permitted outside constructors or in nested functions inside constructors.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/SuperExpressions/parserSuperExpression2.ts:3:5]
 2 │   M() {
 3 │     super<T>(0);
   ·     ───────────
 4 │   }
   ╰────

  × Expected `]` but found `EOF`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/TupleTypes/TupleType4.ts:1:9]
 1 │ var v: [
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/TupleTypes/TupleType6.ts:1:16]
 1 │ var v: [number,,]
   ·                ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery3.ts:1:17]
 1 │ var v: typeof A.
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/Types/parserTypeQuery4.ts:1:17]
 1 │ var v: typeof A.;
   ·                 ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration10.ts:1:7]
 1 │ var a,;
   ·       ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration5.ts:1:7]
 1 │ var a,
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration6.ts:1:4]
 1 │ var
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/VariableDeclarations/parserVariableDeclaration8.ts:1:5]
 1 │ var ;
   ·     ─
   ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parser10.1.1-8gs.ts:17:5]
 16 │ throw NotEarlyError;
 17 │ var public = 1;
    ·     ──────
    ╰────

  × Unterminated multiline comment
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserKeywordsAsIdentifierName2.ts:2:10]
 1 │ // 'public' should be marked unusable, should complain on trailing /*
 2 │ a.public /*
   ·          ──
   ╰────

  × TS(1108): A 'return' statement can only be used within a function body.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserNotRegex1.ts:3:5]
 2 │   {
 3 │     return true;
   ·     ──────
 4 │   }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral1.ts:1:9]
 1 │ new Foo[];
   ·         ─
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserObjectCreationArrayLiteral3.ts:1:9]
 1 │ new Foo[]();
   ·         ─
   ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource10.ts:127:43]
 126 │ 
 127 │     export var tokenTable = new TokenInfo[];
     ·                                           ─
 128 │     export var nodeTypeTable = new string[];
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource11.ts:193:41]
 192 │         public enclosingScope: SymbolScope = null;
 193 │         public members: AST[] = new AST[];
     ·                                         ─
 194 │ 
     ╰────

  × Unexpected token
     ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource4.ts:195:38]
 194 │         public itemCount: number = 0;
 195 │         public table = new HashEntry[];
     ·                                      ─
 196 │ 
     ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource7.ts:16:46]
 15 │             if (baseTypeLinks == null) {
 16 │                 baseTypeLinks = new TypeLink[];
    ·                                              ─
 17 │             }
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserRealSource9.ts:12:40]
 11 │             if (typeLinks) {
 12 │                 extendsList = new Type[];
    ·                                        ─
 13 │                 for (var i = 0, len = typeLinks.length; i < len; i++) {
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserS12.11_A3_T4.ts:16:9]
 15 │   switch(value) {
 16 │     case:
    ·         ─
 17 │       result += 2;
    ╰────

  × Cannot assign to this expression
    ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parserS7.9_A5.7_T1.ts:16:1]
 15 │     x
 16 │ ╭─▶ ++
 17 │ │   ++
 18 │ ╰─▶ y
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/parser/ecmascript5/parservoidInQualifiedName1.ts:1:13]
 1 │ var v : void.x;
   ·             ▲
   ╰────
  help: Try insert a semicolon here

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName1.ts:1:15]
 1 │ var v = { [e] };
   ·               ┬
   ·               ╰── `:` expected
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName16.ts:2:4]
 1 │ enum E {
 2 │   [e] = 1
   ·    ─
 3 │ }
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName26.ts:3:6]
 2 │     // No ASI
 3 │     [e] = 0
   ·      ─
 4 │     [e2] = 1
   ╰────

  × Expected `;` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName27.ts:4:9]
 3 │     [e]: number = 0
 4 │     [e2]: number
   ·         ┬
   ·         ╰── `;` expected
 5 │ }
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName30.ts:3:6]
 2 │     // no ASI, comma expected
 3 │     [e] = id++
   ·      ─
 4 │     [e2] = 1
   ╰────

  × Expected `;` but found `{`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName33.ts:4:12]
 3 │     [e] = 0
 4 │     [e2]() { }
   ·            ┬
   ·            ╰── `;` expected
 5 │ }
   ╰────

  × TS(1164): Computed property names are not allowed in enums.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName34.ts:3:6]
 2 │     // no ASI, comma expected
 3 │     [e] = id++,
   ·      ─
 4 │     [e2] = 1
   ╰────

  × Expected `]` but found `,`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName35.ts:2:7]
 1 │ var x = {
 2 │     [0, 1]: { }
   ·       ┬
   ·       ╰── `]` expected
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName36.ts:2:6]
 1 │ class C {
 2 │     [public ]: string;
   ·      ──────
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName38.ts:2:6]
 1 │ class C {
 2 │     [public]() { }
   ·      ──────
 3 │ }
   ╰────

  × The keyword 'public' is reserved
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName39.ts:3:6]
 2 │ class C {
 3 │     [public]() { }
   ·      ──────
 4 │ }
   ╰────

  × 'public' modifier cannot be used here.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ComputedPropertyNames/parserComputedPropertyName5.ts:1:11]
 1 │ var v = { public get [e]() { } };
   ·           ──────
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement2.ts:1:13]
 1 │ for (var of X) {
   ·             ┬
   ·             ╰── `;` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement21.ts:1:15]
 1 │ for (var of of) { }
   ·               ─
   ╰────

  × The left-hand side of a `for...of` statement may not be `async`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement22.ts:2:6]
 1 │ var async;
 2 │ for (async of [1, 2]) {}
   ·      ─────
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement3.ts:1:6]
 1 │ for (var a, b of X) {
   ·      ────────
 2 │ }
   ╰────

  × for-of loop variable declaration may not have an initializer
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement4.ts:1:6]
 1 │ for (var a = 1 of X) {
   ·      ─────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement5.ts:1:10]
 1 │ for (var a: number of X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement6.ts:1:6]
 1 │ for (var a = 1, b = 2 of X) {
   ·      ────────────────
 2 │ }
   ╰────

  × Only a single declaration is allowed in a `for...of` statement
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement7.ts:1:6]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·      ─────────────────────────────────
 2 │ }
   ╰────

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement7.ts:1:10]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·          ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × TS(2483): The left-hand side of a 'for...of' statement cannot use a type annotation.
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Iterators/parserForOfStatement7.ts:1:25]
 1 │ for (var a: number = 1, b: string = "" of X) {
   ·                         ─────────
 2 │ }
   ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment1.ts:3:11]
 2 │ var name:any, id: any;
 3 │ foo({ name?, id? });
   ·           ┬
   ·           ╰── `,` expected
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment2.ts:1:17]
 1 │ var v = { class };
   ·                 ┬
   ·                 ╰── `:` expected
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment3.ts:1:14]
 1 │ var v = { "" };
   ·              ┬
   ·              ╰── `:` expected
   ╰────

  × Expected `:` but found `}`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment4.ts:1:13]
 1 │ var v = { 0 };
   ·             ┬
   ·             ╰── `:` expected
   ╰────

  × Expected `,` but found `?`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/ShorthandPropertyAssignment/parserShorthandPropertyAssignment5.ts:2:18]
 1 │ var greet = "hello";
 2 │ var obj = { greet? }; 
   ·                  ┬
   ·                  ╰── `,` expected
   ╰────

  × Expected `]` but found `:`
   ╭─[typescript/tests/cases/conformance/parser/ecmascript6/Symbols/parserSymbolIndexer5.ts:2:7]
 1 │ var x = {
 2 │     [s: symbol]: ""
   ·       ┬
   ·       ╰── `]` expected
 3 │ }
   ╰────

  × Constructor can't have get/set modifier
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInAccessor.ts:2:9]
 1 │ class C1 {
 2 │     get constructor() { return }
   ·         ───────────
 3 │     set constructor(value) {}
   ╰────

  × Constructor can't have get/set modifier
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInAccessor.ts:3:9]
 2 │     get constructor() { return }
 3 │     set constructor(value) {}
   ·         ───────────
 4 │ }
   ╰────

  × Constructor can't be a generator
   ╭─[typescript/tests/cases/conformance/salsa/constructorNameInGenerator.ts:2:6]
 1 │ class C2 {
 2 │     *constructor() {}
   ·      ───────────
 3 │ }
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:6:11]
 5 │ async function f() {
 6 │     const await = 3
   ·           ─────
 7 │ }
   ╰────

  × Cannot use `yield` as an identifier in a generator context
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:9:11]
  8 │ function* g() {
  9 │     const yield = 4
    ·           ─────
 10 │ }
    ╰────

  × Classes can't have an element named '#constructor'
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:12:5]
 11 │ class C {
 12 │     #constructor = 5
    ·     ────────────
 13 │     deleted() {
    ╰────

  × Duplicated default export
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:1:8]
 1 │ export default 12
   ·        ───────
 2 │ export default 13
   ·        ───────
 3 │ const await = 1
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:3:7]
 2 │ export default 13
 3 │ const await = 1
   ·       ─────
 4 │ const yield = 2
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:4:7]
 3 │ const await = 1
 4 │ const yield = 2
   ·       ─────
 5 │ async function f() {
   ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:6:11]
 5 │ async function f() {
 6 │     const await = 3
   ·           ─────
 7 │ }
   ╰────

  × The keyword 'yield' is reserved
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:9:11]
  8 │ function* g() {
  9 │     const yield = 4
    ·           ─────
 10 │ }
    ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:15:20]
 14 │         function container(f) {
 15 │             delete f
    ·                    ─
 16 │         }
    ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:18:16]
 17 │         var g = 6
 18 │         delete g
    ·                ─
 19 │         delete container
    ╰────

  × Delete of an unqualified identifier in strict mode.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:19:16]
 18 │         delete g
 19 │         delete container
    ·                ─────────
 20 │     }
    ╰────

  × Cannot assign to 'eval' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:22:15]
 21 │     evalArguments() {
 22 │         const eval = 7
    ·               ────
 23 │         const arguments = 8
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:23:15]
 22 │         const eval = 7
 23 │         const arguments = 8
    ·               ─────────
 24 │     }
    ╰────

  × 'with' statements are not allowed
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:27:9]
 26 │         const redundant = 0o10
 27 │         with (redundant) {
    ·         ────
 28 │             return toFixed()
    ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:34:19]
 33 │             label: var x = 1
 34 │             break label
    ·                   ─────
 35 │         }
    ╰────

  × Cannot assign to 'eval' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:39:7]
 38 │ }
 39 │ const eval = 9
    ·       ────
 40 │ const arguments = 10
    ╰────

  × Cannot assign to 'arguments' in strict mode
    ╭─[typescript/tests/cases/conformance/salsa/plainJSBinderErrors.ts:40:7]
 39 │ const eval = 9
 40 │ const arguments = 10
    ·       ─────────
    ╰────

  × Expected `in` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/salsa/plainJSGrammarErrors.ts:4:5]
 3 │     q = #unbound
 4 │     m() {
   ·     ┬
   ·     ╰── `in` expected
 5 │         #p
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/salsa/plainJSGrammarErrors3.ts:2:5]
 1 │ function foo() {
 2 │     await new Promise(undefined);
   ·     ─────
 3 │ }
   ╰────

  × Private field 'b' must be declared in an enclosing class
   ╭─[typescript/tests/cases/conformance/salsa/plainJSGrammarErrors4.ts:5:14]
 4 │         this.#a; // ok
 5 │         this.#b; // error
   ·              ──
 6 │     }
   ╰────

  × Identifier `orbitol` has already been declared
   ╭─[typescript/tests/cases/conformance/salsa/plainJSRedeclare.ts:1:7]
 1 │ const orbitol = 1
   ·       ───┬───
   ·          ╰── `orbitol` has already been declared here
 2 │ var orbitol = 1 + false
   ·     ───┬───
   ·        ╰── It can not be redeclared here
 3 │ orbitol.toExponential()
   ╰────

  × Identifier `orbitol` has already been declared
   ╭─[typescript/tests/cases/conformance/salsa/plainJSRedeclare2.ts:1:7]
 1 │ const orbitol = 1
   ·       ───┬───
   ·          ╰── `orbitol` has already been declared here
 2 │ var orbitol = 1 + false
   ·     ───┬───
   ·        ╰── It can not be redeclared here
 3 │ orbitol.toExponential()
   ╰────

  × Cannot assign to 'eval' in strict mode
   ╭─[typescript/tests/cases/conformance/salsa/plainJSReservedStrict.ts:2:7]
 1 │ "use strict"
 2 │ const eval = 1
   ·       ────
 3 │ const arguments = 2
   ╰────

  × Cannot assign to 'arguments' in strict mode
   ╭─[typescript/tests/cases/conformance/salsa/plainJSReservedStrict.ts:3:7]
 2 │ const eval = 1
 3 │ const arguments = 2
   ·       ─────────
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral3.ts:1:3]
 1 │ 01.0
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral4.ts:1:3]
 1 │ 1e
   ╰────

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript3/scannerES3NumericLiteral6.ts:1:4]
 1 │ 1e+
   ╰────

  × The keyword 'public' is reserved
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scanner10.1.1-8gs.ts:17:5]
 16 │ throw NotEarlyError;
 17 │ var public = 1;
    ·     ──────
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral3.ts:1:3]
 1 │ 01.0
   ·   ▲
   ╰────
  help: Try insert a semicolon here

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral4.ts:1:3]
 1 │ 1e
   ╰────

  × Unexpected end of file
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerNumericLiteral6.ts:1:4]
 1 │ 1e+
   ╰────

  × Unterminated multiline comment
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.4_A2_T2.ts:12:1]
 11 │ 
 12 │ /*CHECK#1/
    · ───────────
    ╰────

  × Invalid Character `
  │ `
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.8.3_A6.1_T1.ts:13:3]
 12 │ //CHECK#1
 13 │ 0x
    ·   ▲
    ╰────

  × Invalid escape sequence
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerS7.8.4_A7.1_T4.ts:13:2]
 12 │ //CHECK#
 13 │ "\u000G"
    ·  ─────
    ╰────

  × Unterminated string
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerStringLiterals.ts:10:1]
  9 │ "
 10 │ "Should error because of newline.
    · ──────────────────────────────────
 11 │ "Should error because of end of file.
    ╰────

  × Invalid Character ` `
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnexpectedNullCharacter1.ts:1:4]
 1 │ foo + bar;
   ·    ─
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnexpectedNullCharacter1.ts:1:4]
 1 │ foo + bar;
   ·    ▲
   ╰────
  help: Try insert a semicolon here

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword1.ts:1:1]
 1 │ \u0076ar x = "hello";
   · ────────
   ╰────

  × Cannot use `await` as an identifier in an async context
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:1:5]
 1 │ var \u0061wait = 12; // ok
   ·     ──────────
 2 │ async function main() {
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:3:5]
 2 │ async function main() {
 3 │     \u0061wait 12; // not ok
   ·     ──────────
 4 │ }
   ╰────

  × Keywords cannot contain escape characters
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:8:5]
 7 │ function *gen() {
 8 │     \u0079ield 12; //not ok
   ·     ──────────
 9 │ }
   ╰────

  × Keywords cannot contain escape characters
    ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:13:1]
 12 │ 
 13 │ typ\u0065 notok = 0; // not ok
    · ─────────
 14 │ 
    ╰────

  × The keyword 'await' is reserved
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:1:5]
 1 │ var \u0061wait = 12; // ok
   ·     ──────────
 2 │ async function main() {
   ╰────

  × The keyword 'yield' is reserved
   ╭─[typescript/tests/cases/conformance/scanner/ecmascript5/scannerUnicodeEscapeInKeyword2.ts:6:5]
 5 │ 
 6 │ var \u0079ield = 12; // ok
   ·     ──────────
 7 │ function *gen() {
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.11.ts:1:8]
 1 │ export await using x = null;
   ·        ─────
 2 │ declare await using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.16.ts:2:17]
 1 │ declare namespace N {
 2 │     await using x: { [Symbol.asyncDispose](): Promise<void> };
   ·                 ─────────────────────────────────────────────
 3 │     await using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.16.ts:3:17]
 2 │     await using x: { [Symbol.asyncDispose](): Promise<void> };
 3 │     await using y: null;
   ·                 ───────
 4 │ }
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.16.ts:6:17]
 5 │ declare module 'M' {
 6 │     await using x: { [Symbol.asyncDispose](): Promise<void> };
   ·                 ─────────────────────────────────────────────
 7 │     await using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.16.ts:7:17]
 6 │     await using x: { [Symbol.asyncDispose](): Promise<void> };
 7 │     await using y: null;
   ·                 ───────
 8 │ }
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.4.ts:2:5]
 1 │ {
 2 │     await using [a] = null;
   ·     ─────
 3 │ }
   ╰────

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.4.ts:2:5]
 1 │ {
 2 │     await using [a] = null;
   ·     ───────────────
 3 │ }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.5.ts:3:17]
 2 │     await using a = null,
 3 │                 [b] = null,
   ·                 ───
 4 │                 c = null;
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.6.ts:2:5]
 1 │ {
 2 │     await using {a} = null;
   ·     ─────
 3 │ }
   ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.6.ts:2:16]
 1 │ {
 2 │     await using {a} = null;
   ·                ▲
 3 │ }
   ╰────
  help: Try insert a semicolon here

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.7.ts:3:17]
 2 │     await using a = null,
 3 │                 {b} = null,
   ·                 ───
 4 │                 c = null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarations.8.ts:2:17]
 1 │ {
 2 │     await using a;
   ·                 ─
 3 │ }
   ╰────

  × `await` is only allowed within async functions and at the top levels of modules
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.3.ts:5:5]
 4 │ 
 5 │ for await (await using of x);
   ·     ─────
 6 │ 
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForAwaitOf.3.ts:5:27]
 4 │ 
 5 │ for await (await using of x);
   ·                           ┬
   ·                           ╰── `;` expected
 6 │ 
   ╰────

  × The left-hand side of a for...in statement cannot be an await using declaration.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForIn.ts:2:10]
 1 │ async function main() {
 2 │     for (await using x in {}) {
   ·          ─────────────
 3 │     }
   ╰────

  × Missing initializer in destructuring declaration
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.3.ts:2:22]
 1 │ async function main() {
 2 │     for (await using {} of []) {
   ·                      ──
 3 │     }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.3.ts:2:22]
 1 │ async function main() {
 2 │     for (await using {} of []) {
   ·                      ──
 3 │     }
   ╰────

  × Expected `;` but found `Identifier`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/awaitUsingDeclarationsInForOf.5.ts:5:21]
 4 │ 
 5 │ for (await using of x);
   ·                     ┬
   ·                     ╰── `;` expected
 6 │ 
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.13.ts:1:8]
 1 │ export using x = null;
   ·        ─────
 2 │ declare using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.16.ts:2:11]
 1 │ declare namespace N {
 2 │     using x: { [Symbol.dispose](): void };
   ·           ───────────────────────────────
 3 │     using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.16.ts:3:11]
 2 │     using x: { [Symbol.dispose](): void };
 3 │     using y: null;
   ·           ───────
 4 │ }
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.16.ts:6:11]
 5 │ declare module 'M' {
 6 │     using x: { [Symbol.dispose](): void };
   ·           ───────────────────────────────
 7 │     using y: null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.16.ts:7:11]
 6 │     using x: { [Symbol.dispose](): void };
 7 │     using y: null;
   ·           ───────
 8 │ }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.5.ts:3:11]
 2 │     using a = null,
 3 │           [b] = null,
   ·           ───
 4 │           c = null;
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.6.ts:2:11]
 1 │ {
 2 │     using {a} = null;
   ·           ───
 3 │ }
   ╰────

  × Using declarations may not have binding patterns.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.7.ts:3:11]
 2 │     using a = null,
 3 │           {b} = null,
   ·           ───
 4 │           c = null;
   ╰────

  × Using declarations must have an initializer.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarations.8.ts:2:11]
 1 │ {
 2 │     using a;
   ·           ─
 3 │ }
   ╰────

  × The left-hand side of a for...in statement cannot be an using declaration.
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForIn.ts:1:6]
 1 │ for (using x in {}) {
   ·      ───────
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForOf.2.ts:1:19]
 1 │ for (using of of []) {
   ·                   ─
 2 │ }
   ╰────

  × Expected `;` but found `{`
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForOf.3.ts:1:12]
 1 │ for (using {} of []) {
   ·            ┬
   ·            ╰── `;` expected
 2 │ }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/VariableStatements/usingDeclarations/usingDeclarationsInForOf.4.ts:1:15]
 1 │ for (using of = null;;) break;
   ·               ─
 2 │ for (using of: null = null;;) break;
   ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:8:10]
 7 │ ONE:
 8 │ do break TWO; while (true)
   ·          ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:27:11]
 26 │ do {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidDoWhileBreakStatements.ts:37:11]
 36 │ do {
 37 │     break NINE;
    ·           ────
 38 │ }while (true)
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:8:15]
 7 │ ONE:
 8 │ for(;;) break TWO;
   ·               ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:27:11]
 26 │ for(;;) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForBreakStatements.ts:36:11]
 35 │ for(;;) {
 36 │     break NINE;
    ·           ────
 37 │ }
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:8:25]
 7 │ ONE:
 8 │ for (var x in {}) break TWO;
   ·                         ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:27:11]
 26 │ for (var x in {}) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidForInBreakStatements.ts:37:11]
 36 │ for (var x in {}) {
 37 │     break NINE;
    ·           ────
 38 │ }
    ╰────

  × Illegal break statement
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:4:1]
 3 │ // naked break not allowed
 4 │ break;
   · ──────
 5 │ 
   ╰────
  help: A `break` statement can only be used within an enclosing iteration or switch statement.

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:8:20]
 7 │ ONE:
 8 │ while (true) break TWO;
   ·                    ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:21:15]
 20 │     var fn = function () {
 21 │         break THREE;
    ·               ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:27:11]
 26 │ while (true) {
 27 │     break FIVE;
    ·           ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/breakStatements/invalidWhileBreakStatements.ts:37:11]
 36 │ while (true) {
 37 │     break NINE;
    ·           ────
 38 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:8:13]
 7 │ ONE:
 8 │ do continue TWO; while (true)
   ·             ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:27:14]
 26 │ do {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidDoWhileContinueStatements.ts:37:14]
 36 │ do {
 37 │     continue NINE;
    ·              ────
 38 │ }while (true)
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:8:18]
 7 │ ONE:
 8 │ for(;;) continue TWO;
   ·                  ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:27:14]
 26 │ for(;;) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForContinueStatements.ts:36:14]
 35 │ for(;;) {
 36 │     continue NINE;
    ·              ────
 37 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:8:28]
 7 │ ONE:
 8 │ for (var x in {}) continue TWO;
   ·                            ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:27:14]
 26 │ for (var x in {}) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidForInContinueStatements.ts:37:14]
 36 │ for (var x in {}) {
 37 │     continue NINE;
    ·              ────
 38 │ }
    ╰────

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidSwitchContinueStatement.ts:5:9]
 4 │     case 5:
 5 │         continue;
   ·         ─────────
 6 │ }
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Illegal continue statement: no surrounding iteration statement
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:4:1]
 3 │ // naked continue not allowed
 4 │ continue;
   · ─────────
 5 │ 
   ╰────
  help: A `continue` statement can only be used within an enclosing `for`, `while` or `do while`

  × Use of undefined label
   ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:8:23]
 7 │ ONE:
 8 │ while (true) continue TWO;
   ·                       ───
 9 │ 
   ╰────

  × Jump target cannot cross function boundary.
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:21:18]
 20 │     var fn = function () {
 21 │         continue THREE;
    ·                  ─────
 22 │     }
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:27:14]
 26 │ while (true) {
 27 │     continue FIVE;
    ·              ────
 28 │     FIVE:
    ╰────

  × Use of undefined label
    ╭─[typescript/tests/cases/conformance/statements/continueStatements/invalidWhileContinueStatements.ts:37:14]
 36 │ while (true) {
 37 │     continue NINE;
    ·              ────
 38 │ }
    ╰────

  × TS(2483): The left-hand side of a 'for...in' statement cannot use a type annotation.
    ╭─[typescript/tests/cases/conformance/statements/for-inStatements/for-inStatementsInvalid.ts:10:10]
  9 │ 
 10 │ for (var idx : number in {}) { }
    ·          ────────────
 11 │ 
    ╰────
  help: This iterator's type will be inferred from the iterable. You can safely remove the type annotation.

  × Cannot assign to this expression
   ╭─[typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of12.ts:1:7]
 1 │ for ([""] of [[""]]) { }
   ·       ──
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/statements/for-ofStatements/ES5For-of20.ts:4:15]
 3 │     for (let v of [v]) {
 4 │         const v;
   ·               ─
 5 │     }
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash1.ts:3:11]
 2 │   var v0 = x;
 3 │   foo: var;
   ·           ─
 4 │   (function() { return x + v0});
   ╰────

  × Expected `,` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash3.ts:15:12]
 14 │         [
 15 │           `font-size: var(--button-size-${fontType}-fontSize)`,
    ·            ──┬─
    ·              ╰── `,` expected
 16 │           `height: var(--button-size-${fontType}-height)`,
    ╰────

  × Expected `,` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementDeclarationListInLoopNoCrash4.ts:13:12]
 12 │         [
 13 │           `font-size: var(--button-size-${fontType}-fontSize)`,
    ·            ──┬─
    ·              ╰── `,` expected
 14 │           `height: var foo`,
    ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementExportDeclarationNoCrash1.ts:3:14]
 2 │ 
 3 │ export const box: string
   ·              ───────────
 4 │ subTitle:
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementExportDeclarationNoCrash1.ts:5:14]
 4 │ subTitle:
 5 │ export const title: string
   ·              ─────────────
   ╰────

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:2:8]
 1 │ label: function fn() { }
 2 │ label: function* gen() { }
   ·        ───────────────
 3 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:3:8]
 2 │ label: function* gen() { }
 3 │ label: async function gen1() { }
   ·        ─────────────────────
 4 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:6:8]
 5 │ label: interface I {}
 6 │ label: class C { }
   ·        ────────
 7 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel.ts:8:11]
 7 │ label: var a = 1;
 8 │ label: let b = 1;
   ·           ▲
 9 │ label: const c = 1;
   ╰────
  help: Try insert a semicolon here

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:2:8]
 1 │ label: function fn() { }
 2 │ label: function* gen() { }
   ·        ───────────────
 3 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:3:8]
 2 │ label: function* gen() { }
 3 │ label: async function gen1() { }
   ·        ─────────────────────
 4 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:6:8]
 5 │ label: interface I {}
 6 │ label: class C { }
   ·        ────────
 7 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_es2015.ts:8:11]
 7 │ label: var a = 1;
 8 │ label: let b = 1;
   ·           ▲
 9 │ label: const c = 1;
   ╰────
  help: Try insert a semicolon here

  × Generators can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:3:8]
 2 │ label: function fn() { }
 3 │ label: function* gen() { }
   ·        ───────────────
 4 │ label: async function gen1() { }
   ╰────

  × Async functions can only be declared at the top level or inside a block
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:4:8]
 3 │ label: function* gen() { }
 4 │ label: async function gen1() { }
   ·        ─────────────────────
 5 │ label: enum E {}
   ╰────

  × Invalid class declaration
   ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:7:8]
 6 │ label: interface I {}
 7 │ label: class C { }
   ·        ────────
 8 │ label: var a = 1;
   ╰────
  help: Classes can only be declared at top level or inside a block

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/statements/labeledStatements/labeledStatementWithLabel_strict.ts:9:11]
  8 │ label: var a = 1;
  9 │ label: let b = 1;
    ·           ▲
 10 │ label: const c = 1;
    ╰────
  help: Try insert a semicolon here

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/throwStatements/invalidThrowStatement.ts:1:6]
 1 │ throw; 
   ·      ─
 2 │ 
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/statements/tryStatements/catchClauseWithTypeAnnotation.ts:29:20]
 28 │     // minor bug: shows that the `catch` argument is skipped when checking scope
 29 │     try { } catch (x) { let x: string; }
    ·                    ┬        ────┬────
    ·                    │            ╰── It can not be redeclared here
    ·                    ╰── `x` has already been declared here
 30 │     try { } catch (x) { var x: string; }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/statements/tryStatements/invalidTryStatements.ts:2:5]
 1 │ function fn() {
 2 │     catch(x) { } // error missing try
   ·     ─────
 3 │ 
   ╰────

  × 'with' statements are not allowed
   ╭─[typescript/tests/cases/conformance/statements/withStatements/withStatements.ts:2:1]
 1 │ var x = 12;
 2 │ with (x) {
   · ────
 3 │     name = 'twelve'
   ╰────

  × Expected `from` but found `<`
   ╭─[typescript/tests/cases/conformance/types/import/importWithTypeArguments.ts:1:7]
 1 │ import<T>
   ·       ┬
   ·       ╰── `from` expected
 2 │ const a = import<string, number>
   ╰────

  × Identifier `T` has already been declared
    ╭─[typescript/tests/cases/conformance/types/localTypes/localTypes4.ts:18:16]
 17 │     // Type parameters and top-level local types are in same declaration space
 18 │     function f<T>() {
    ·                ┬
    ·                ╰── `T` has already been declared here
 19 │         interface T { }
    ·                   ┬
    ·                   ╰── It can not be redeclared here
 20 │         return undefined;
    ╰────

  × Expected `}` but found `Identifier`
    ╭─[typescript/tests/cases/conformance/types/mapped/mappedTypeProperties.ts:9:5]
  8 │     [placeType in PlaceType]: void;
  9 │     model: 'hour' | 'day'
    ·     ──┬──
    ·       ╰── `}` expected
 10 │ }
    ╰────

  × Identifier `foo` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:19:5]
 18 │ class C {
 19 │     foo: string;
    ·     ─┬─
    ·      ╰── `foo` has already been declared here
 20 │     foo: string;
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 21 │ 
    ╰────

  × Identifier `bar` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:22:5]
 21 │ 
 22 │     bar(x) { }
    ·     ─┬─
    ·      ╰── `bar` has already been declared here
 23 │     bar(x) { }
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 24 │ 
    ╰────

  × Identifier `baz` has already been declared
    ╭─[typescript/tests/cases/conformance/types/members/duplicatePropertyNames.ts:25:5]
 24 │ 
 25 │     baz = () => { }
    ·     ─┬─
    ·      ╰── `baz` has already been declared here
 26 │     baz = () => { }
    ·     ─┬─
    ·      ╰── It can not be redeclared here
 27 │ }
    ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:5:5]
 4 │ class C {
 5 │     1;
   ·     ┬
   ·     ╰── `1` has already been declared here
 6 │     1.0;
   ·     ─┬─
   ·      ╰── It can not be redeclared here
 7 │     1.;
   ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:6:5]
 5 │     1;
 6 │     1.0;
   ·     ─┬─
   ·      ╰── `1` has already been declared here
 7 │     1.;
   ·     ─┬
   ·      ╰── It can not be redeclared here
 8 │     1.00;
   ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/members/objectTypeWithDuplicateNumericProperty.ts:7:5]
 6 │     1.0;
 7 │     1.;
   ·     ─┬
   ·      ╰── `1` has already been declared here
 8 │     1.00;
   ·     ──┬─
   ·       ╰── It can not be redeclared here
 9 │ }
   ╰────

  × TS(1070): 'private' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/types/namedTypes/interfaceWithPrivateMember.ts:4:5]
 3 │ interface I {
 4 │     private x: string;
   ·     ───────
 5 │ }
   ╰────

  × TS(1070): 'private' modifier cannot appear on a type member.
   ╭─[typescript/tests/cases/conformance/types/namedTypes/interfaceWithPrivateMember.ts:8:5]
 7 │ interface I2<T> {
 8 │     private y: T;
   ·     ───────
 9 │ }
   ╰────

  × TS(1070): 'private' modifier cannot appear on a type member.
    ╭─[typescript/tests/cases/conformance/types/namedTypes/interfaceWithPrivateMember.ts:12:5]
 11 │ var x: {
 12 │     private y: string;
    ·     ───────
 13 │ }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:3:14]
 2 │ 
 3 │ function foo(public x, private y) { }
   ·              ──────
 4 │ var f = function foo(public x, private y) { }
   ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:3:24]
 2 │ 
 3 │ function foo(public x, private y) { }
   ·                        ───────
 4 │ var f = function foo(public x, private y) { }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:4:22]
 3 │ function foo(public x, private y) { }
 4 │ var f = function foo(public x, private y) { }
   ·                      ──────
 5 │ var f2 = function (public x, private y) { }
   ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:4:32]
 3 │ function foo(public x, private y) { }
 4 │ var f = function foo(public x, private y) { }
   ·                                ───────
 5 │ var f2 = function (public x, private y) { }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:5:20]
 4 │ var f = function foo(public x, private y) { }
 5 │ var f2 = function (public x, private y) { }
   ·                    ──────
 6 │ var f3 = (x, private y) => { }
   ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:5:30]
 4 │ var f = function foo(public x, private y) { }
 5 │ var f2 = function (public x, private y) { }
   ·                              ───────
 6 │ var f3 = (x, private y) => { }
   ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:6:14]
 5 │ var f2 = function (public x, private y) { }
 6 │ var f3 = (x, private y) => { }
   ·              ───────
 7 │ var f4 = <T>(public x: T, y: T) => { }
   ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:7:14]
 6 │ var f3 = (x, private y) => { }
 7 │ var f4 = <T>(public x: T, y: T) => { }
   ·              ──────
 8 │ 
   ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:9:15]
  8 │ 
  9 │ function foo2(private x: string, public y: number) { }
    ·               ───────
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:9:34]
  8 │ 
  9 │ function foo2(private x: string, public y: number) { }
    ·                                  ──────
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:10:23]
  9 │ function foo2(private x: string, public y: number) { }
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ·                       ───────
 11 │ var f6 = function (private x: string, public y: number) { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:10:42]
  9 │ function foo2(private x: string, public y: number) { }
 10 │ var f5 = function foo(private x: string, public y: number) { }
    ·                                          ──────
 11 │ var f6 = function (private x: string, public y: number) { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:11:20]
 10 │ var f5 = function foo(private x: string, public y: number) { }
 11 │ var f6 = function (private x: string, public y: number) { }
    ·                    ───────
 12 │ var f7 = (private x: string, public y: number) => { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:11:39]
 10 │ var f5 = function foo(private x: string, public y: number) { }
 11 │ var f6 = function (private x: string, public y: number) { }
    ·                                       ──────
 12 │ var f7 = (private x: string, public y: number) => { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:12:11]
 11 │ var f6 = function (private x: string, public y: number) { }
 12 │ var f7 = (private x: string, public y: number) => { }
    ·           ───────
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:12:30]
 11 │ var f6 = function (private x: string, public y: number) { }
 12 │ var f7 = (private x: string, public y: number) => { }
    ·                              ──────
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:13:14]
 12 │ var f7 = (private x: string, public y: number) => { }
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ·              ───────
 14 │ 
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:13:28]
 12 │ var f7 = (private x: string, public y: number) => { }
 13 │ var f8 = <T>(private x: T, public y: T) => { }
    ·                            ──────
 14 │ 
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:16:9]
 15 │ class C {
 16 │     foo(public x, private y) { }
    ·         ──────
 17 │     foo2(public x: number, private y: string) { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:16:19]
 15 │ class C {
 16 │     foo(public x, private y) { }
    ·                   ───────
 17 │     foo2(public x: number, private y: string) { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:17:10]
 16 │     foo(public x, private y) { }
 17 │     foo2(public x: number, private y: string) { }
    ·          ──────
 18 │     foo3<T>(public x: T, private y: T) { }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:17:28]
 16 │     foo(public x, private y) { }
 17 │     foo2(public x: number, private y: string) { }
    ·                            ───────
 18 │     foo3<T>(public x: T, private y: T) { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:18:13]
 17 │     foo2(public x: number, private y: string) { }
 18 │     foo3<T>(public x: T, private y: T) { }
    ·             ──────
 19 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:18:26]
 17 │     foo2(public x: number, private y: string) { }
 18 │     foo3<T>(public x: T, private y: T) { }
    ·                          ───────
 19 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:22:6]
 21 │ interface I {
 22 │     (private x, public y);
    ·      ───────
 23 │     (private x: string, public y: number);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:22:17]
 21 │ interface I {
 22 │     (private x, public y);
    ·                 ──────
 23 │     (private x: string, public y: number);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:23:6]
 22 │     (private x, public y);
 23 │     (private x: string, public y: number);
    ·      ───────
 24 │     foo(private x, public y);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:23:25]
 22 │     (private x, public y);
 23 │     (private x: string, public y: number);
    ·                         ──────
 24 │     foo(private x, public y);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:24:9]
 23 │     (private x: string, public y: number);
 24 │     foo(private x, public y);
    ·         ───────
 25 │     foo(public x: number, y: string);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:24:20]
 23 │     (private x: string, public y: number);
 24 │     foo(private x, public y);
    ·                    ──────
 25 │     foo(public x: number, y: string);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:25:9]
 24 │     foo(private x, public y);
 25 │     foo(public x: number, y: string);
    ·         ──────
 26 │     foo3<T>(x: T, private y: T);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:26:19]
 25 │     foo(public x: number, y: string);
 26 │     foo3<T>(x: T, private y: T);
    ·                   ───────
 27 │ }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:30:9]
 29 │ var a: {
 30 │     foo(public x, private y);
    ·         ──────
 31 │     foo2(private x: number, public y: string);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:30:19]
 29 │ var a: {
 30 │     foo(public x, private y);
    ·                   ───────
 31 │     foo2(private x: number, public y: string);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:31:10]
 30 │     foo(public x, private y);
 31 │     foo2(private x: number, public y: string);
    ·          ───────
 32 │ };
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:31:29]
 30 │     foo(public x, private y);
 31 │     foo2(private x: number, public y: string);
    ·                             ──────
 32 │ };
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:35:9]
 34 │ var b = {
 35 │     foo(public x, y) { },
    ·         ──────
 36 │     a: function foo(x: number, private y: string) { },
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:36:32]
 35 │     foo(public x, y) { },
 36 │     a: function foo(x: number, private y: string) { },
    ·                                ───────
 37 │     b: <T>(public x: T, private y: T) => { }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:37:12]
 36 │     a: function foo(x: number, private y: string) { },
 37 │     b: <T>(public x: T, private y: T) => { }
    ·            ──────
 38 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithAccessibilityModifiersOnParameters.ts:37:25]
 36 │     a: function foo(x: number, private y: string) { },
 37 │     b: <T>(public x: T, private y: T) => { }
    ·                         ───────
 38 │ }
    ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:6:11]
 5 │ var f2 = function (x, x) { }
 6 │ var f3 = (x, x) => { }
   ·           ┬  ┬
   ·           │  ╰── It can not be redeclared here
   ·           ╰── `x` has already been declared here
 7 │ var f4 = <T>(x: T, x: T) => { }
   ╰────

  × Identifier `x` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:7:14]
 6 │ var f3 = (x, x) => { }
 7 │ var f4 = <T>(x: T, x: T) => { }
   ·              ──┬─  ──┬─
   ·                │     ╰── It can not be redeclared here
   ·                ╰── `x` has already been declared here
 8 │ 
   ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:12:11]
 11 │ var f6 = function (x: string, x: number) { }
 12 │ var f7 = (x: string, x: number) => { }
    ·           ────┬────  ────┬────
    ·               │          ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 13 │ var f8 = <T>(x: T, y: T) => { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:16:9]
 15 │ class C {
 16 │     foo(x, x) { }
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 17 │     foo2(x: number, x: string) { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:17:10]
 16 │     foo(x, x) { }
 17 │     foo2(x: number, x: string) { }
    ·          ────┬────  ────┬────
    ·              │          ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 18 │     foo3<T>(x: T, x: T) { }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:18:13]
 17 │     foo2(x: number, x: string) { }
 18 │     foo3<T>(x: T, x: T) { }
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 19 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:22:6]
 21 │ interface I {
 22 │     (x, x);
    ·      ┬  ┬
    ·      │  ╰── It can not be redeclared here
    ·      ╰── `x` has already been declared here
 23 │     (x: string, x: number);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:23:6]
 22 │     (x, x);
 23 │     (x: string, x: number);
    ·      ────┬────  ────┬────
    ·          │          ╰── It can not be redeclared here
    ·          ╰── `x` has already been declared here
 24 │     foo(x, x);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:24:9]
 23 │     (x: string, x: number);
 24 │     foo(x, x);
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 25 │     foo(x: number, x: string);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:25:9]
 24 │     foo(x, x);
 25 │     foo(x: number, x: string);
    ·         ────┬────  ────┬────
    ·             │          ╰── It can not be redeclared here
    ·             ╰── `x` has already been declared here
 26 │     foo3<T>(x: T, x: T);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:26:13]
 25 │     foo(x: number, x: string);
 26 │     foo3<T>(x: T, x: T);
    ·             ──┬─  ──┬─
    ·               │     ╰── It can not be redeclared here
    ·               ╰── `x` has already been declared here
 27 │ }
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:30:9]
 29 │ var a: {
 30 │     foo(x, x);
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 31 │     foo2(x: number, x: string);
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:31:10]
 30 │     foo(x, x);
 31 │     foo2(x: number, x: string);
    ·          ────┬────  ────┬────
    ·              │          ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 32 │ };
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:35:9]
 34 │ var b = {
 35 │     foo(x, x) { },
    ·         ┬  ┬
    ·         │  ╰── It can not be redeclared here
    ·         ╰── `x` has already been declared here
 36 │     a: function foo(x: number, x: string) { },
    ╰────

  × Identifier `x` has already been declared
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithDuplicateParameters.ts:37:12]
 36 │     a: function foo(x: number, x: string) { },
 37 │     b: <T>(x: T, x: T) => { }
    ·            ──┬─  ──┬─
    ·              │     ╰── It can not be redeclared here
    ·              ╰── `x` has already been declared here
 38 │ }
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/callSignaturesWithParameterInitializers2.ts:20:15]
 19 │ var b = {
 20 │     foo(x = 1), // error
    ·               ▲
 21 │     foo(x = 1) { }, // error
    ╰────
  help: Try insert a semicolon here

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:16:10]
 15 │ interface I {
 16 │     new (public x);
    ·          ──────
 17 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:20:10]
 19 │ interface I2 {
 20 │     new (private x);
    ·          ───────
 21 │ }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:24:10]
 23 │ var a: {
 24 │     new (public x);
    ·          ──────
 25 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters.ts:28:10]
 27 │ var b: {
 28 │     new (private x);
    ·          ───────
 29 │ }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:19:10]
 18 │ interface I {
 19 │     new (public x);
    ·          ──────
 20 │     new (public x);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:20:10]
 19 │     new (public x);
 20 │     new (public x);
    ·          ──────
 21 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:24:10]
 23 │ interface I2 {
 24 │     new (private x);
    ·          ───────
 25 │     new (private x);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:25:10]
 24 │     new (private x);
 25 │     new (private x);
    ·          ───────
 26 │ }
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:29:10]
 28 │ var a: {
 29 │     new (public x);
    ·          ──────
 30 │     new (public y);
    ╰────

  × TS(1090): 'public' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:30:10]
 29 │     new (public x);
 30 │     new (public y);
    ·          ──────
 31 │ }
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:34:10]
 33 │ var b: {
 34 │     new (private x);
    ·          ───────
 35 │     new (private y);
    ╰────

  × TS(1090): 'private' modifier cannot appear on a parameter.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:35:10]
 34 │     new (private x);
 35 │     new (private y);
    ·          ───────
 36 │ }
    ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:4:17]
 3 │ class C {
 4 │     constructor(public x, private y);
   ·                 ────────
 5 │     constructor(public x, private y) { }
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:4:27]
 3 │ class C {
 4 │     constructor(public x, private y);
   ·                           ─────────
 5 │     constructor(public x, private y) { }
   ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:9:17]
  8 │ class C2 {
  9 │     constructor(private x);
    ·                 ─────────
 10 │     constructor(public x) { }
    ╰────

  × TS(2369): A parameter property is only allowed in a constructor implementation.
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/constructSignatureWithAccessibilityModifiersOnParameters2.ts:14:17]
 13 │ class C3 {
 14 │     constructor(private x);
    ·                 ─────────
 15 │     constructor(private y) { }
    ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParameterWithoutAnnotationIsAnyArray.ts:5:11]
 4 │ var f = function foo(...x) { }
 5 │ var f2 = (...x, ...y) => { }
   ·           ────
 6 │ 
   ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes.ts:5:11]
 4 │ var f = function foo(...x: number) { }
 5 │ var f2 = (...x: Date, ...y: boolean) => { }
   ·           ──────────
 6 │ 
   ╰────

  × A rest parameter must be last in a parameter list
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersOfNonArrayTypes2.ts:9:11]
  8 │ var f = function foo(...x: MyThing) { }
  9 │ var f2 = (...x: MyThing, ...y: MyThing) => { }
    ·           ─────────────
 10 │ 
    ╰────

  × A rest parameter must be last in a parameter list
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/callSignatures/restParametersWithArrayTypeAnnotations.ts:5:11]
 4 │ var f = function foo(...x: number[]) { }
 5 │ var f2 = (...x: number[], ...y: number[]) => { }
   ·           ──────────────
 6 │ 
   ╰────

  × Expected `,` but found `?`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/objectTypesWithOptionalProperties.ts:24:6]
 23 │ var b = {
 24 │     x?: 1 // error
    ·      ┬
    ·      ╰── `,` expected
 25 │ }
    ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/methodSignatures/objectTypesWithOptionalProperties2.ts:4:8]
 3 │ var a: {
 4 │     x()?: number; // error
   ·        ─
 5 │ }
   ╰────

  × Expected `,` but found `decimal`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/numericNamedPropertyDuplicates.ts:20:5]
 19 │     2: 1
 20 │     2: 1
    ·     ┬
    ·     ╰── `,` expected
 21 │ }
    ╰────

  × Identifier `1` has already been declared
   ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/numericStringNamedPropertyEquivalence.ts:4:5]
 3 │ class C {
 4 │     "1": number;
   ·     ─┬─
   ·      ╰── `1` has already been declared here
 5 │     "1.0": number; // not a duplicate
 6 │     1.0: number;
   ·     ─┬─
   ·      ╰── It can not be redeclared here
 7 │ }
   ╰────

  × Expected `,` but found `string`
    ╭─[typescript/tests/cases/conformance/types/objectTypeLiteral/propertySignatures/stringNamedPropertyDuplicates.ts:20:5]
 19 │     "a b": 1
 20 │     "a b": 1
    ·     ──┬──
    ·       ╰── `,` expected
 21 │ }
    ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/objectRestNegative.ts:2:7]
 1 │ let o = { a: 1, b: 'no' };
 2 │ var { ...mustBeLast, a } = o;
   ·       ─────────────
 3 │ 
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/objectRestPropertyMustBeLast.ts:1:6]
 1 │ var {...a, x } = { x: 1 };    // Error, rest must be last property
   ·      ────
 2 │ ({...a, x } = { x: 1 });      // Error, rest must be last property
   ╰────

  × A rest element must be last in a destructuring pattern
   ╭─[typescript/tests/cases/conformance/types/rest/restElementMustBeLast.ts:1:6]
 1 │ var [...a, x] = [1, 2, 3];  // Error, rest must be last element
   ·      ────
 2 │ [...a, x] = [1, 2, 3];      // Error, rest must be last element
   ╰────

  × TS(2414): Class name cannot be 'any'
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName.ts:3:7]
 2 │ 
 3 │ class any { }
   ·       ───
 4 │ 
   ╰────

  × TS(2414): Class name cannot be 'number'
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName.ts:5:7]
 4 │ 
 5 │ class number { }
   ·       ──────
 6 │ 
   ╰────

  × TS(2414): Class name cannot be 'boolean'
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName.ts:7:7]
 6 │ 
 7 │ class boolean { }
   ·       ───────
 8 │ class bool { } // not a predefined type anymore
   ╰────

  × TS(2414): Class name cannot be 'string'
    ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName.ts:10:7]
  9 │ 
 10 │ class string { }
    ·       ──────
 11 │ 
    ╰────

  × Expected `{` but found `void`
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/predefinedTypes/objectTypesWithPredefinedTypesAsName2.ts:3:7]
 2 │ 
 3 │ class void {} // parse error unlike the others
   ·       ──┬─
   ·         ╰── `{` expected
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/specifyingTypes/typeQueries/invalidTypeOfTarget.ts:1:16]
 1 │ var x1: typeof {};
   ·                ─
 2 │ var x2: typeof (): void;
   ╰────

  × Unexpected token
   ╭─[typescript/tests/cases/conformance/types/spread/objectSpreadNegativeParse.ts:1:18]
 1 │ let o7 = { ...o? };
   ·                  ─
 2 │ let o8 = { ...*o };
   ╰────

  × Missing initializer in const declaration
   ╭─[typescript/tests/cases/conformance/types/stringLiteral/stringLiteralTypesInVariableDeclarations01.ts:4:7]
 3 │ let c: "bar";
 4 │ const d: "baz";
   ·       ────────
 5 │ 
   ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:158:17]
 157 │ class ThisConstructor {
 158 │     constructor(this: ThisConstructor, private n: number) {
     ·                 ─────────────────────
 159 │     }
     ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:162:9]
 161 │ interface ThisConstructorInterface {
 162 │     new(this: ThisConstructor, n: number);
     ·         ─────────────────────
 163 │ }
     ╰────

  × TS(2681): A constructor cannot have a `this` parameter.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:164:31]
 163 │ }
 164 │ var thisConstructorType: new (this: number) => number;
     ·                               ────────────
 165 │ function notFirst(a: number, this: C): number { return this.n; }
     ╰────

  × Identifier expected. 'this' is a reserved word that cannot be used here.
     ╭─[typescript/tests/cases/conformance/types/thisType/thisTypeInFunctionsNegative.ts:165:30]
 164 │ var thisConstructorType: new (this: number) => number;
 165 │ function notFirst(a: number, this: C): number { return this.n; }
     ·                              ────
 166 │ 
     ╰────

  × TS(5086): A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type.
    ╭─[typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts:10:29]
  9 │ 
 10 │ export type Opt = [element: string?]; // question mark on element disallowed
    ·                             ───────
 11 │ 
    ╰────

  × TS(5087): A labeled tuple element is declared as rest with a '...' before the name, rather than before the type.
    ╭─[typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts:12:46]
 11 │ 
 12 │ export type Trailing = [first: string, rest: ...string[]]; // dots on element disallowed
    ·                                              ───────────
 13 │ 
    ╰────

  × TS(5087): A labeled tuple element is declared as rest with a '...' before the name, rather than before the type.
    ╭─[typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts:14:49]
 13 │ 
 14 │ export type OptTrailing = [first: string, rest: ...string[]?]; // dots+question on element disallowed
    ·                                                 ────────────
 15 │ 
    ╰────

  × TS(5086): A labeled tuple element is declared as optional with a question mark after the name and before the colon, rather than after the type.
    ╭─[typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts:14:49]
 13 │ 
 14 │ export type OptTrailing = [first: string, rest: ...string[]?]; // dots+question on element disallowed
    ·                                                 ────────────
 15 │ 
    ╰────

  × TS(5085): A tuple member cannot be both optional and rest.
    ╭─[typescript/tests/cases/conformance/types/tuple/named/namedTupleMembersErrors.ts:16:39]
 15 │ 
 16 │ export type OptRest = [first: string, ...rest?: string[]]; // rest+optional disallowed
    ·                                       ──────────────────
 17 │ 
    ╰────

  × TS(1354): 'readonly' type modifier is only permitted on array and tuple literal types.
    ╭─[typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts:9:12]
  8 │ 
  9 │ type T30 = readonly string;  // Error
    ·            ────────
 10 │ type T31<T> = readonly T;  // Error
    ╰────

  × TS(1354): 'readonly' type modifier is only permitted on array and tuple literal types.
    ╭─[typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts:10:15]
  9 │ type T30 = readonly string;  // Error
 10 │ type T31<T> = readonly T;  // Error
    ·               ────────
 11 │ type T32 = readonly readonly string[];  // Error
    ╰────

  × TS(1354): 'readonly' type modifier is only permitted on array and tuple literal types.
    ╭─[typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts:11:12]
 10 │ type T31<T> = readonly T;  // Error
 11 │ type T32 = readonly readonly string[];  // Error
    ·            ────────
 12 │ type T33 = readonly Array<string>;  // Error
    ╰────

  × TS(1354): 'readonly' type modifier is only permitted on array and tuple literal types.
    ╭─[typescript/tests/cases/conformance/types/tuple/readonlyArraysAndTuples.ts:12:12]
 11 │ type T32 = readonly readonly string[];  // Error
 12 │ type T33 = readonly Array<string>;  // Error
    ·            ────────
 13 │ 
    ╰────

  × Expected a semicolon or an implicit semicolon after a statement, but found none
   ╭─[typescript/tests/cases/conformance/types/typeAliases/reservedNamesInAliases.ts:6:5]
 5 │ type string = I;
 6 │ type void = I;
   ·     ▲
 7 │ type object = I;
   ╰────
  help: Try insert a semicolon here

  × Identifier `A` has already been declared
   ╭─[typescript/tests/cases/conformance/types/typeAliases/typeAliasesDoNotMerge.ts:1:13]
 1 │ export type A = {}
   ·             ┬
   ·             ╰── `A` has already been declared here
 2 │ type A = {}
   ·      ┬
   ·      ╰── It can not be redeclared here
   ╰────

  × Identifier `T2` has already been declared
    ╭─[typescript/tests/cases/conformance/types/typeAliases/typeAliasesForObjectTypes.ts:10:6]
  9 │ // An interface can have multiple merged declarations, but a type alias for an object type literal cannot.
 10 │ type T2 = { x: string }
    ·      ─┬
    ·       ╰── `T2` has already been declared here
 11 │ type T2 = { y: number }
    ·      ─┬
    ·       ╰── It can not be redeclared here
 12 │ 
    ╰────

  × Unexpected token
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressionErrors.ts:18:29]
 17 │ 
 18 │ const a8 = f<number><number>;  // Relational operator error
    ·                             ─
 19 │ const a9 = (f<number>)<number>;  // Error, no applicable signatures
    ╰────

  × TS(1099): Type argument list cannot be empty.
   ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressions.ts:6:16]
 5 │ function f1() {
 6 │     let f0 = fx<>;  // Error
   ·                ──
 7 │     let f1 = fx<string>;  // { (x: string): string; (x: string, n: number): string; }
   ╰────

  × TS(1099): Type argument list cannot be empty.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressions.ts:12:21]
 11 │ 
 12 │ type T10 = typeof fx<>;  // Error
    ·                     ──
 13 │ type T11 = typeof fx<string>;  // { (x: string): string; (x: string, n: number): string; }
    ╰────

  × TS(1099): Type argument list cannot be empty.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressions.ts:18:21]
 17 │ function f2() {
 18 │     const A0 = Array<>;  // Error
    ·                     ──
 19 │     const A1 = Array<string>;  // new (...) => string[]
    ╰────

  × TS(1099): Type argument list cannot be empty.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeArgumentLists/instantiationExpressions.ts:23:24]
 22 │ 
 23 │ type T20 = typeof Array<>;  // Error
    ·                        ──
 24 │ type T21 = typeof Array<string>;  // new (...) => string[]
    ╰────

  × TS(1273): 'public' modifier cannot be used on a type parameter.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:95:10]
 94 │ 
 95 │ type T20<public T> = T;  // Error
    ·          ──────
 96 │ type T21<in out in T> = T;  // Error
    ╰────

  × TS(1030): 'in' modifier already seen.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:96:17]
 95 │ type T20<public T> = T;  // Error
 96 │ type T21<in out in T> = T;  // Error
    ·                 ──
 97 │ type T22<in out out T> = T;  // Error
    ╰────
  help: Remove the duplicate modifier.

  × TS(1030): 'out' modifier already seen.
    ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotations.ts:97:17]
 96 │ type T21<in out in T> = T;  // Error
 97 │ type T22<in out out T> = T;  // Error
    ·                 ───
 98 │ type T23<out in T> = T;  // Error
    ╰────
  help: Remove the duplicate modifier.

  × Identifier expected. 'in' is a reserved word that cannot be used here.
   ╭─[typescript/tests/cases/conformance/types/typeParameters/typeParameterLists/varianceAnnotationsWithCircularlyReferencesError.ts:1:12]
 1 │ type T1<in in> = T1 // Error: circularly references 
   ·            ──
 2 │ type T2<out out> = T2 // Error: circularly references 
   ╰────
