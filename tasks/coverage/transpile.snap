commit: d8086f14

transpile Summary:
AST Parsed     : 20/20 (100.00%)
Positive Passed: 17/20 (85.00%)
Mismatch: "declarationBasicSyntax.ts"
Mismatch: "declarationEmitPartialNodeReuse.ts"
Mismatch: "declarationRestParameters.ts"

#### "declarationComputedPropertyNames.ts" ####
//// [declarationComputedPropertyNames.ts] ////
export namespace presentNs {
	export const a = Symbol();
}
const aliasing = Symbol;
export type A = {
	[missing]: number;
	[ns.missing]: number;
	[presentNs.a]: number;
	[Symbol.iterator]: number;
	[globalThis.Symbol.toStringTag]: number;
	[globalThis.Symbol.unscopables]: number;
	[aliasing.isConcatSpreadable]: number;
	[1]: number;
	["2"]: number;
	[missing2]: number;
	[Math.random() > 0.5 ? "f1" : "f2"]: number;
};
export interface B {
	[missing]: number;
	[ns.missing]: number;
	[presentNs.a]: number;
	[Symbol.iterator]: number;
	[globalThis.Symbol.toStringTag]: number;
	[globalThis.Symbol.unscopables]: number;
	[aliasing.isConcatSpreadable]: number;
	[1]: number;
	["2"]: number;
	[missing2]: number;
	[Math.random() > 0.5 ? "f1" : "f2"]: number;
}
export class C {
	[missing]: number = 1;
	[ns.missing]: number = 1;
	[presentNs.a]: number = 1;
	[Symbol.iterator]: number = 1;
	[globalThis.Symbol.toStringTag]: number = 1;
	[globalThis.Symbol.unscopables]: number = 1;
	[aliasing.isConcatSpreadable]: number = 1;
	[1]: number = 1;
	["2"]: number = 1;
	[missing2]: number = 1;
	[Math.random() > 0.5 ? "f1" : "f2"]: number = 1;
}
export const D = {
	[missing]: 1,
	[ns.missing]: 1,
	[presentNs.a]: 1,
	[Symbol.iterator]: 1,
	[globalThis.Symbol.toStringTag]: 1,
	[globalThis.Symbol.unscopables]: 1,
	[aliasing.isConcatSpreadable]: 1,
	[1]: 1,
	["2"]: 1,
	[missing2]: 1,
	[Math.random() > 0.5 ? "f1" : "f2"]: 1
};

//// [declarationComputedPropertyNames.d.ts] ////
export declare namespace presentNs {
	export const a: unknown;
}
declare const aliasing: unknown;
export type A = {
	[missing]: number;
	[ns.missing]: number;
	[presentNs.a]: number;
	[Symbol.iterator]: number;
	[globalThis.Symbol.toStringTag]: number;
	[globalThis.Symbol.unscopables]: number;
	[aliasing.isConcatSpreadable]: number;
	[1]: number;
	["2"]: number;
	[missing2]: number;
	[Math.random() > 0.5 ? "f1" : "f2"]: number;
};
export interface B {
	[missing]: number;
	[ns.missing]: number;
	[presentNs.a]: number;
	[Symbol.iterator]: number;
	[globalThis.Symbol.toStringTag]: number;
	[globalThis.Symbol.unscopables]: number;
	[aliasing.isConcatSpreadable]: number;
	[1]: number;
	["2"]: number;
	[missing2]: number;
	[Math.random() > 0.5 ? "f1" : "f2"]: number;
}
export declare class C {
	[1]: number;
	["2"]: number;
}
export declare const D: {
	1: number;
	"2": number;
};
export {};
  x TS9010: Variable must have an explicit type annotation with
  | --isolatedDeclarations.
   ,-[declarationComputedPropertyNames.d.ts:2:18]
 1 | export namespace presentNs {
 2 |     export const a = Symbol();
   :                  ^
 3 | }
   `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:12:6]
 11 |     [Symbol.iterator]: number,
 12 |     [globalThis.Symbol.toStringTag]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 13 |     [(globalThis.Symbol).unscopables]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:13:6]
 12 |     [globalThis.Symbol.toStringTag]: number,
 13 |     [(globalThis.Symbol).unscopables]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 14 |     [aliasing.isConcatSpreadable]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:17:6]
 16 |     ["2"]: number,
 17 |     [(missing2)]: number,
    :      ^^^^^^^^^^
 18 |     [Math.random() > 0.5 ? "f1" : "f2"]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:18:6]
 17 |     [(missing2)]: number,
 18 |     [Math.random() > 0.5 ? "f1" : "f2"]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 19 | };
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:26:6]
 25 |     [Symbol.iterator]: number,
 26 |     [globalThis.Symbol.toStringTag]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 27 |     [(globalThis.Symbol).unscopables]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:27:6]
 26 |     [globalThis.Symbol.toStringTag]: number,
 27 |     [(globalThis.Symbol).unscopables]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 28 |     [aliasing.isConcatSpreadable]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:31:6]
 30 |     ["2"]: number,
 31 |     [(missing2)]: number,
    :      ^^^^^^^^^^
 32 |     [Math.random() > 0.5 ? "f1" : "f2"]: number,
    `----

  x TS9014: Computed properties must be number or string literals, variables
  | or dotted expressions with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:32:6]
 31 |     [(missing2)]: number,
 32 |     [Math.random() > 0.5 ? "f1" : "f2"]: number,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 33 | }
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:36:6]
 35 | export class C {
 36 |     [missing]: number = 1;
    :      ^^^^^^^
 37 |     [ns.missing]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:37:6]
 36 |     [missing]: number = 1;
 37 |     [ns.missing]: number = 1;
    :      ^^^^^^^^^^
 38 |     [presentNs.a]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:38:6]
 37 |     [ns.missing]: number = 1;
 38 |     [presentNs.a]: number = 1;
    :      ^^^^^^^^^^^
 39 |     [Symbol.iterator]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:39:6]
 38 |     [presentNs.a]: number = 1;
 39 |     [Symbol.iterator]: number = 1;
    :      ^^^^^^^^^^^^^^^
 40 |     [globalThis.Symbol.toStringTag]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:40:6]
 39 |     [Symbol.iterator]: number = 1;
 40 |     [globalThis.Symbol.toStringTag]: number = 1;
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 41 |     [(globalThis.Symbol).unscopables]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:41:6]
 40 |     [globalThis.Symbol.toStringTag]: number = 1;
 41 |     [(globalThis.Symbol).unscopables]: number = 1;
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 42 |     [aliasing.isConcatSpreadable]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:42:6]
 41 |     [(globalThis.Symbol).unscopables]: number = 1;
 42 |     [aliasing.isConcatSpreadable]: number = 1;
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 43 |     [1]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:45:6]
 44 |     ["2"]: number = 1;
 45 |     [(missing2)]: number = 1;
    :      ^^^^^^^^^^
 46 |     [Math.random() > 0.5 ? "f1" : "f2"]: number = 1;
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:46:6]
 45 |     [(missing2)]: number = 1;
 46 |     [Math.random() > 0.5 ? "f1" : "f2"]: number = 1;
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 47 | }
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:50:6]
 49 | export const D = {
 50 |     [missing]: 1,
    :      ^^^^^^^
 51 |     [ns.missing]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:51:6]
 50 |     [missing]: 1,
 51 |     [ns.missing]: 1,
    :      ^^^^^^^^^^
 52 |     [presentNs.a]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:52:6]
 51 |     [ns.missing]: 1,
 52 |     [presentNs.a]: 1,
    :      ^^^^^^^^^^^
 53 |     [Symbol.iterator]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:53:6]
 52 |     [presentNs.a]: 1,
 53 |     [Symbol.iterator]: 1,
    :      ^^^^^^^^^^^^^^^
 54 |     [globalThis.Symbol.toStringTag]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:54:6]
 53 |     [Symbol.iterator]: 1,
 54 |     [globalThis.Symbol.toStringTag]: 1,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 55 |     [(globalThis.Symbol).unscopables]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:55:6]
 54 |     [globalThis.Symbol.toStringTag]: 1,
 55 |     [(globalThis.Symbol).unscopables]: 1,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 56 |     [aliasing.isConcatSpreadable]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:56:6]
 55 |     [(globalThis.Symbol).unscopables]: 1,
 56 |     [aliasing.isConcatSpreadable]: 1,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 57 |     [1]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:59:6]
 58 |     ["2"]: 1,
 59 |     [(missing2)]: 1,
    :      ^^^^^^^^^^
 60 |     [Math.random() > 0.5 ? "f1" : "f2"]: 1,
    `----

  x TS9038: Computed property names on class or object literals cannot be
  | inferred with --isolatedDeclarations.
    ,-[declarationComputedPropertyNames.d.ts:60:6]
 59 |     [(missing2)]: 1,
 60 |     [Math.random() > 0.5 ? "f1" : "f2"]: 1,
    :      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 61 | };
    `----

  x TS9010: Variable must have an explicit type annotation with
  | --isolatedDeclarations.
   ,-[declarationComputedPropertyNames.d.ts:5:7]
 4 | 
 5 | const aliasing = Symbol;
   :       ^^^^^^^^
 6 | 
   `----
