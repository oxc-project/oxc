---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:17]
 3 │ 
 4 │                 it("foo")
   ·                 ──
 5 │             
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:17]
 3 │ 
 4 │                 testThisThing("foo")
   ·                 ─────────────
 5 │             
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ xit("foo")
   · ───
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ fit("foo")
   · ───
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it.skip("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it.concurrent("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it.only("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it.each([])("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it.each``("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:32]
 1 │ describe.each``("foo", () => { it.each``("bar") })
   ·                                ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:32]
 1 │ describe.each``("foo", () => { test.each``("bar") })
   ·                                ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:3:21]
 2 │                 describe.each()("%s", () => {
 3 │                     test("is valid, but should not be", () => {});
   ·                     ────
 4 │ 
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:3:21]
 2 │                 describe.only.each()("%s", () => {
 3 │                     test("is valid, but should not be", () => {});
   ·                     ────
 4 │ 
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { it("foo") })
   ·                           ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ xtest("foo")
   · ─────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.skip("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.concurrent("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.only("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.each([])("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:32]
 1 │ describe.each``("foo", () => { test.each``("bar") })
   ·                                ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.each``("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.only("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { xtest("foo") })
   ·                           ─────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:43]
 3 │ 
 4 │                 describe("suite", () => { dontTestThis("foo") });
   ·                                           ────────────
 5 │             
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:42]
 3 │ 
 4 │                 context("suite", () => { dontTestThis("foo") });
   ·                                          ────────────
 5 │             
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.skip("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.concurrent("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.only("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { xtest("foo") })
   ·                           ─────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:43]
 3 │ 
 4 │                 describe("suite", () => { dontTestThis("foo") });
   ·                                           ────────────
 5 │             
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:4:38]
 3 │ 
 4 │             context("suite", () => { dontTestThis("foo") });
   ·                                      ────────────
 5 │         
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.skip("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test.concurrent("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { it("foo") })
   ·                           ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { it("foo") })
   ·                           ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test("shows error", () => {});
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.skip("shows error");
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test.only('shows error');
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:25]
 1 │ describe('foo', () => { it('bar', () => {}); });
   ·                         ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:2:1]
 1 │ import { test } from "vitest"
 2 │ test("shows error", () => {});
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("shows error", () => {});
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { it("foo") })
   ·                           ──
   ╰────
  help: Prefer using "test" instead of "it" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ test("foo")
   · ────
   ╰────
  help: Prefer using "it" instead of "test"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { test("foo") })
   ·                           ────
   ╰────
  help: Prefer using "it" instead of "test" within describe

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:1]
 1 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:2:1]
 1 │ import { it } from "vitest"
 2 │ it("foo")
   · ──
   ╰────
  help: Prefer using "test" instead of "it"

  ⚠ eslint-plugin-vitest(consistent-test-it): Enforce `test` and `it` usage conventions
   ╭─[consistent_test_it.tsx:1:27]
 1 │ describe("suite", () => { it("foo") })
   ·                           ──
   ╰────
  help: Prefer using "test" instead of "it" within describe
