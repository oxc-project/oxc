---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo)[0]
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo, thisArgument)[0]
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo).shift()
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo, thisArgument).shift()
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:6]
 2 │                 // comment 1
 3 │                 .filter(
   ·                  ──────
 4 │                     // comment 2
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const [foo] = array.filter(bar)
   ·                     ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ const [items] = array.filter(bar)
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const [foo] = array.filter(bar, thisArgument)
   ·                     ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ const [{foo}] = array.filter(fn);
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:29]
 1 │ const [{foo = bar}] = array.filter(fn);
   ·                             ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ const [[foo]] = array.filter(fn);
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:29]
 1 │ const [[foo = bar]] = array.filter(fn);
   ·                             ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ const [foo, ] = array.filter(bar)
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ var [foo, ] = array.filter(bar)
   ·                     ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ let [foo, ] = array.filter(bar)
   ·                     ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:28]
 1 │ let a = 1, [foo, ] = array.filter(bar)
   ·                            ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:28]
 1 │ let a = 1, [{foo}] = array.filter(bar)
   ·                            ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:22]
 1 │ for (let [i] = array.filter(bar); i< 10; i++) {}
   ·                      ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:8:6]
 7 │                 // comment 3
 8 │                 .filter(
   ·                  ──────
 9 │                     // comment 4
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:27]
 1 │ const [foo = baz] = array.filter(bar)
   ·                           ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:29]
 1 │ const [foo = (bar)] = array.filter(bar)
   ·                             ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:33]
 1 │ const [foo = a ? b : c] = array.filter(bar)
   ·                                 ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:30]
 1 │ const [foo = a ?? b] = array.filter(bar)
   ·                              ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:30]
 1 │ const [foo = a || b] = array.filter(bar)
   ·                              ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:30]
 1 │ const [foo = a && b] = array.filter(bar)
   ·                              ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:15]
 1 │ [foo] = array.filter(bar)
   ·               ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:15]
 1 │ [foo] = array.filter(bar, thisArgument)
   ·               ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:25]
 1 │ [foo.bar().baz] = array.filter(fn)
   ·                         ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:17]
 1 │ [{foo}] = array.filter(fn);
   ·                 ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:17]
 1 │ [[foo]] = array.filter(fn);
   ·                 ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ [{foo = baz}] = array.filter(fn);
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:17]
 1 │ [foo, ] = array.filter(bar)
   ·                 ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:18]
 1 │ for ([i] = array.filter(bar); i< 10; i++) {}
   ·                  ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:19]
 2 │             const bar = []
 3 │             ;[foo] = array.filter(bar)
   ·                            ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ [foo = baz] = array.filter(bar)
   ·                     ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ [{foo} = baz] = array.filter(bar)
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:25]
 1 │ ;([{foo} = baz] = array.filter(bar))
   ·                         ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ [foo = (bar)] = array.filter(bar)
   ·                       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:27]
 1 │ [foo = a ? b : c] = array.filter(bar)
   ·                           ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:24]
 1 │ [foo = a || b] = array.filter(bar)
   ·                        ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); const [first] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); [first] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); const [{propOfFirst = unicorn}] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); [{propOfFirst = unicorn}] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const items = array.filter(bar);
   ·                     ──────
 2 │             const first = items[0];
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:38]
 1 │ const item = {}; const items = array.filter(bar); console.log(items[0]);
   ·                                      ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ let items = array.filter(bar); console.log(items[0]);
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:25]
 2 │             function f() {
 3 │                 const items = array.filter(bar);
   ·                                     ──────
 4 │                 console.log(items[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const items = array.filter(bar);
   ·                     ──────
 2 │             function f() {
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const items = array.filter(bar);
   ·                     ──────
 2 │             function f() {
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:21]
 1 │ const items = array.filter(bar);
   ·                     ──────
 2 │             console.log(items[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:2:25]
 1 │ function f() {
 2 │                 const items = array.filter(bar);
   ·                                     ──────
 3 │                 console.log(items[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:24]
 1 │ const packages = array.filter(bar);
   ·                        ──────
 2 │             console.log(packages[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:23]
 1 │ const symbols = array.filter(bar);
   ·                       ──────
 2 │             console.log(symbols[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); const [first = bar] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const foo = array.filter(bar); [first = bar] = foo;
   ·                   ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:17]
 1 │ let foo = array.filter(bar);foo[0](foo[0])[foo[0]];
   ·                 ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:2:22]
 1 │ let baz;
 2 │             const foo = array.filter(bar);
   ·                               ──────
 3 │             const [bar] = foo;
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:19]
 1 │ const quz = array.filter(fn);
   ·                   ──────
 2 │             const [foo] = array.filter(quz[0]);
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:2:24]
 1 │ const quz = array.filter(fn);
 2 │             const [foo] = array.filter(quz[0]);
   ·                                 ──────
 3 │             [{bar: baz}] = foo[
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:5:6]
 4 │                 array.filter(fn)[0]
 5 │             ].filter(
   ·               ──────
 6 │                 array.filter(fn).shift()
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:4:11]
 3 │             [{bar: baz}] = foo[
 4 │                 array.filter(fn)[0]
   ·                       ──────
 5 │             ].filter(
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:6:11]
 5 │             ].filter(
 6 │                 array.filter(fn).shift()
   ·                       ──────
 7 │             );
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:2:24]
 1 │ const quz = array.find(fn);
 2 │             const [foo] = array.filter(quz);
   ·                                 ──────
 3 │             ({bar: baz} = foo[
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:4:11]
 3 │             ({bar: baz} = foo[
 4 │                 array.filter(fn)[0]
   ·                       ──────
 5 │             ].find(
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:6:11]
 5 │             ].find(
 6 │                 array.filter(fn).shift()
   ·                       ──────
 7 │             ));
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo).pop()
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo, thisArgument).pop()
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:6]
 2 │                 // comment 1
 3 │                 .filter(
   ·                  ──────
 4 │                     // comment 2
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo).at(-1)
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo, thisArgument).at(-1)
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:6]
 2 │                 // comment 1
 3 │                 .filter(
   ·                  ──────
 4 │                     // comment 2
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo).at(0)
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:1:7]
 1 │ array.filter(foo, thisArgument).at(0)
   ·       ──────
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns

  ⚠ eslint-plugin-unicorn(prefer-array-find): Prefer 'find' over filtering and accessing the first result
   ╭─[prefer_array_find.tsx:3:6]
 2 │                 // comment 1
 3 │                 .filter(
   ·                  ──────
 4 │                     // comment 2
   ╰────
  help: Use 'find(predicate)' instead of 'filter(predicate)[0]' or similar patterns
