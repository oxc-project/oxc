---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt("111110111", 2) === 503;
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt("767", 8) === 503;
   · ──────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt("1F7", 16) === 255;
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt("111110111", 2) === 503;
   · ───────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt("767", 8) === 503;
   · ─────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt("1F7", 16) === 255;
   · ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('7999', 8);
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('1234', 2);
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('1234.5', 8);
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('1️⃣3️⃣3️⃣7️⃣', 16);
   · ────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('7999', 8);
   · ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('1234', 2);
   · ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('1234.5', 8);
   · ────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('1️⃣3️⃣3️⃣7️⃣', 16);
   · ───────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`111110111`, 2) === 503;
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`767`, 8) === 503;
   · ──────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`1F7`, 16) === 255;
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('', 8);
   · ───────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(``, 8);
   · ───────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`7999`, 8);
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`1234`, 2);
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`1234.5`, 8);
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2)
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('67', 8)
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:3]
 1 │ 5+parseInt('A', 16)
   ·   ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:21]
 1 │ function *f(){ yield(Number).parseInt('11', 2) }
   ·                     ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:21]
 1 │ function *f(){ yield(Number.parseInt)('67', 8) }
   ·                     ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:21]
 1 │ function *f(){ yield(parseInt)('A', 16) }
   ·                     ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:22]
 1 │ function *f(){ yield Number.parseInt('11', 2) }
   ·                      ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:25]
 1 │ function *f(){ yield/**/Number.parseInt('67', 8) }
   ·                         ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:22]
 1 │ function *f(){ yield(parseInt('A', 16)) }
   ·                      ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2)+5
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('17', 8)+5
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('A', 16)+5
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2)in foo
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('17', 8)in foo
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('A', 16)in foo
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2) in foo
   · ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('17', 8)/**/in foo
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:2]
 1 │ (parseInt('A', 16))in foo
   ·  ─────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:14]
 1 │ /* comment */Number.parseInt('11', 2);
   ·              ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number/**/.parseInt('11', 2);
   · ────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ ╭─▶ Number//
 2 │ ╰─▶             .parseInt('11', 2);
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number./**/parseInt('11', 2);
   · ────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt(/**/'11', 2);
   · ────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('11', /**/2);
   · ────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('11', 2)/* comment */;
   · ────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt/**/('11', 2);
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ ╭─▶ parseInt(//
 2 │ ╰─▶             '11', 2);
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11'/**/, 2);
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt(`11`/**/, 2);
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2 /**/);
   · ──────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('11', 2)//comment
   · ─────────────────
 2 │             ;
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt?.("1F7", 16) === 255;
   · ─────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number?.parseInt("1F7", 16) === 255;
   · ───────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number?.parseInt?.("1F7", 16) === 255;
   · ─────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ (Number?.parseInt)("1F7", 16) === 255;
   · ─────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ (Number?.parseInt)?.("1F7", 16) === 255;
   · ───────────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use binary literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('1_0', 2);
   · ──────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('5_000', 8);
   · ───────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ parseInt('0_1', 16);
   · ───────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use hexadecimal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:1:1]
 1 │ Number.parseInt('0_0', 16);
   · ──────────────────────────
   ╰────

  ⚠ eslint(prefer-numeric-literals): Use octal literals instead of parseInt().
   ╭─[prefer_numeric_literals.tsx:2:13]
 1 │ 
 2 │             parseInt("767", 8) === 503;
   ·             ──────────────────
 3 │             function foo() {
   ╰────
