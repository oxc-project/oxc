---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:3]
 1 │   for (const [input, expected] of data) {
   ·   ──────────────────────────────────────
 2 │                   it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:2]
 1 │  for (const [input, expected] of data) {
   ·  ──────────────────────────────────────
 2 │                   describe(`when the input is ${input}`, () => {
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ for (const [input, expected] of data) {
   · ──────────────────────────────────────
 2 │                   describe(`when the input is ${input}`, () => {
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:9:11]
  8 │                  
  9 │                    for (const [input, expected] of data) {
    ·                    ──────────────────────────────────────
 10 │                   it.skip(`results in ${expected}`, () => {
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ for (const [input, expected] of data) {
   · ──────────────────────────────────────
 2 │                   it.skip(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:5:11]
 4 │                  
 5 │                    for (const [input, expected] of data) {
   ·                    ──────────────────────────────────────
 6 │                   it.skip(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:2]
 1 │  for (const [input, expected] of data) {
   ·  ──────────────────────────────────────
 2 │                   it.skip(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:5:11]
 4 │                  
 5 │                    for (const [input, expected] of data) {
   ·                    ──────────────────────────────────────
 6 │                   it.skip(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ for (const [input, expected] of data) {
   · ──────────────────────────────────────
 2 │                   it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ for (const [input, expected] of data) {
   · ──────────────────────────────────────
 2 │                   it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:7:11]
 6 │                  
 7 │                    for (const [input, expected] of data) {
   ·                    ──────────────────────────────────────
 8 │                   it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ for (const [input, expected] of data) {
   · ──────────────────────────────────────
 2 │                   beforeEach(() => setupSomething(input));
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:11]
 1 │ 
 2 │                    for (const [input, expected] of data) {
   ·                    ──────────────────────────────────────
 3 │                   it("only returns numbers that are greater than seven", function () {
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:11]
 1 │ 
 2 │                    for (const [input, expected] of data) {
   ·                    ──────────────────────────────────────
 3 │                   beforeEach(() => setupSomething(input));
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.
