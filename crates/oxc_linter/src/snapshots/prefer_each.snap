---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │   for (const [input, expected] of data) {
 2 │                   it(`results in ${expected}`, () => {
   ·                   ──
 3 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │  for (const [input, expected] of data) {
 2 │                   describe(`when the input is ${input}`, () => {
   ·                   ────────
 3 │                     it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │ for (const [input, expected] of data) {
 2 │                   describe(`when the input is ${input}`, () => {
   ·                   ────────
 3 │                     it(`results in ${expected}`, () => {
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:10:10]
  9 │                    for (const [input, expected] of data) {
 10 │                   it.skip(`results in ${expected}`, () => {
    ·                   ───────
 11 │                     expect(fn(input)).toBe(expected)
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │ for (const [input, expected] of data) {
 2 │                   it.skip(`results in ${expected}`, () => {
   ·                   ───────
 3 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:6:10]
 5 │                    for (const [input, expected] of data) {
 6 │                   it.skip(`results in ${expected}`, () => {
   ·                   ───────
 7 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │  for (const [input, expected] of data) {
 2 │                   it.skip(`results in ${expected}`, () => {
   ·                   ───────
 3 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:6:10]
 5 │                    for (const [input, expected] of data) {
 6 │                   it.skip(`results in ${expected}`, () => {
   ·                   ───────
 7 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │ for (const [input, expected] of data) {
 2 │                   it(`results in ${expected}`, () => {
   ·                   ──
 3 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:6:10]
 5 │                  
 6 │                   it(`results in ${expected}`, () => {
   ·                   ──
 7 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │ for (const [input, expected] of data) {
 2 │                   it(`results in ${expected}`, () => {
   ·                   ──
 3 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:8:10]
 7 │                    for (const [input, expected] of data) {
 8 │                   it(`results in ${expected}`, () => {
   ·                   ──
 9 │                     expect(fn(input)).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:2:10]
 1 │ for (const [input, expected] of data) {
 2 │                   beforeEach(() => setupSomething(input));
   ·                   ──────────
 3 │                  
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:4:10]
 3 │                  
 4 │                   test(`results in ${expected}`, () => {
   ·                   ────
 5 │                     expect(doSomething()).toBe(expected)
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:3:10]
 2 │                    for (const [input, expected] of data) {
 3 │                   it("only returns numbers that are greater than seven", function () {
   ·                   ──
 4 │                     const numbers = getNumbers(input);
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:3:10]
 2 │                    for (const [input, expected] of data) {
 3 │                   beforeEach(() => setupSomething(input));
   ·                   ──────────
 4 │                  
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:5:10]
 4 │                  
 5 │                   it("only returns numbers that are greater than seven", function () {
   ·                   ──
 6 │                     const numbers = getNumbers();
   ╰────
  help: Prefer using `it.each` rather than a manual loop.
