---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:3]
 1 │ ╭─▶   for (const [input, expected] of data) {
 2 │ │                     it(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:2]
 1 │ ╭─▶  for (const [input, expected] of data) {
 2 │ │                     describe(`when the input is ${input}`, () => {
 3 │ │                       it(`results in ${expected}`, () => {
 4 │ │                      expect(fn(input)).toBe(expected)
 5 │ │                       });
 6 │ │                     });
 7 │ ╰─▶                    }
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     describe(`when the input is ${input}`, () => {
 3 │ │                       it(`results in ${expected}`, () => {
 4 │ │                      expect(fn(input)).toBe(expected)
 5 │ │                       });
 6 │ │                     });
 7 │ ╰─▶                    }
 8 │                      
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:9:11]
  8 │                      
  9 │ ╭─▶                    for (const [input, expected] of data) {
 10 │ │                     it.skip(`results in ${expected}`, () => {
 11 │ │                       expect(fn(input)).toBe(expected)
 12 │ │                     });
 13 │ ╰─▶                    }
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     it.skip(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:5:11]
 4 │                      
 5 │ ╭─▶                    for (const [input, expected] of data) {
 6 │ │                     it.skip(`results in ${expected}`, () => {
 7 │ │                       expect(fn(input)).toBe(expected)
 8 │ │                     });
 9 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:2]
 1 │ ╭─▶  for (const [input, expected] of data) {
 2 │ │                     it.skip(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ ╰─▶                    }
 6 │                      
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:5:11]
  4 │                      
  5 │ ╭─▶                    for (const [input, expected] of data) {
  6 │ │                     it.skip(`results in ${expected}`, () => {
  7 │ │                       expect(fn(input)).toBe(expected)
  8 │ │                     });
  9 │ ╰─▶                    }
 10 │                      
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     it(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ │                    
 6 │ │                     it(`results in ${expected}`, () => {
 7 │ │                       expect(fn(input)).toBe(expected)
 8 │ │                     });
 9 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     it(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ │                    
 6 │ │                     it(`results in ${expected}`, () => {
 7 │ │                       expect(fn(input)).toBe(expected)
 8 │ │                     });
 9 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     it(`results in ${expected}`, () => {
 3 │ │                       expect(fn(input)).toBe(expected)
 4 │ │                     });
 5 │ ╰─▶                    }
 6 │                      
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:7:11]
  6 │                      
  7 │ ╭─▶                    for (const [input, expected] of data) {
  8 │ │                     it(`results in ${expected}`, () => {
  9 │ │                       expect(fn(input)).toBe(expected)
 10 │ │                     });
 11 │ ╰─▶                    }
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     beforeEach(() => setupSomething(input));
 3 │ │                    
 4 │ │                     test(`results in ${expected}`, () => {
 5 │ │                       expect(doSomething()).toBe(expected)
 6 │ │                     });
 7 │ ╰─▶                    }
   ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
   ╭─[prefer_each.tsx:1:1]
 1 │ ╭─▶ for (const [input, expected] of data) {
 2 │ │                     beforeEach(() => setupSomething(input));
 3 │ │                    
 4 │ │                     test(`results in ${expected}`, () => {
 5 │ │                       expect(doSomething()).toBe(expected)
 6 │ │                     });
 7 │ ╰─▶                    }
   ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:2:11]
  1 │     
  2 │ ╭─▶                    for (const [input, expected] of data) {
  3 │ │                     it("only returns numbers that are greater than seven", function () {
  4 │ │                       const numbers = getNumbers(input);
  5 │ │                   
  6 │ │                       for (let i = 0; i < numbers.length; i++) {
  7 │ │                      expect(numbers[i]).toBeGreaterThan(7);
  8 │ │                       }
  9 │ │                     });
 10 │ ╰─▶                    }
 11 │                      
    ╰────
  help: Prefer using `it.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:2:11]
  1 │     
  2 │ ╭─▶                    for (const [input, expected] of data) {
  3 │ │                     beforeEach(() => setupSomething(input));
  4 │ │                    
  5 │ │                     it("only returns numbers that are greater than seven", function () {
  6 │ │                       const numbers = getNumbers();
  7 │ │                   
  8 │ │                       for (let i = 0; i < numbers.length; i++) {
  9 │ │                      expect(numbers[i]).toBeGreaterThan(7);
 10 │ │                       }
 11 │ │                     });
 12 │ ╰─▶                    }
 13 │                      
    ╰────
  help: Prefer using `describe.each` rather than a manual loop.

  ⚠ eslint-plugin-vitest(prefer-each): Enforce using `each` rather than manual loops
    ╭─[prefer_each.tsx:2:11]
  1 │     
  2 │ ╭─▶                    for (const [input, expected] of data) {
  3 │ │                     beforeEach(() => setupSomething(input));
  4 │ │                    
  5 │ │                     it("only returns numbers that are greater than seven", function () {
  6 │ │                       const numbers = getNumbers();
  7 │ │                   
  8 │ │                       for (let i = 0; i < numbers.length; i++) {
  9 │ │                      expect(numbers[i]).toBeGreaterThan(7);
 10 │ │                       }
 11 │ │                     });
 12 │ ╰─▶                    }
 13 │                      
    ╰────
  help: Prefer using `it.each` rather than a manual loop.
