---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ typescript-eslint(array-type): Array type using 'factories.User[]' is forbidden. Use 'Array<factories.User>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: factories.User[] = [];
   ·        ────────────────
   ╰────
  help: Replace `factories.User[]` with `Array<factories.User>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<string | number> = [];
   ·        ──────────────────────
   ╰────
  help: Replace `Array<string | number>` with `(string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<string | number> = [];
   ·        ──────────────────────────────
   ╰────
  help: Replace `ReadonlyArray<string | number>` with `readonly (string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<string | number> = [];
   ·        ──────────────────────
   ╰────
  help: Replace `Array<string | number>` with `(string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<string | number> = [];
   ·        ──────────────────────────────
   ╰────
  help: Replace `ReadonlyArray<string | number>` with `readonly (string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<string | number> = [];
   ·        ──────────────────────
   ╰────
  help: Replace `Array<string | number>` with `(string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<string | number> = [];
   ·        ──────────────────────
   ╰────
  help: Replace `Array<string | number>` with `(string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly number[] = [];
   ·        ─────────────────
   ╰────
  help: Replace `readonly number[]` with `ReadonlyArray<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<string | number> = [];
   ·        ──────────────────────────────
   ╰────
  help: Replace `ReadonlyArray<string | number>` with `readonly (string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden for simple types. Use 'number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: Array<number> = [];
   ·        ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly number[] = [];
   ·        ─────────────────
   ╰────
  help: Replace `readonly number[]` with `ReadonlyArray<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: number[] = [];
   ·        ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly number[] = [];
   ·        ─────────────────
   ╰────
  help: Replace `readonly number[]` with `ReadonlyArray<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: number[] = [];
   ·        ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<string | number> = [];
   ·        ──────────────────────────────
   ╰────
  help: Replace `ReadonlyArray<string | number>` with `readonly (string | number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: number[] = [];
   ·        ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden for simple types. Use 'readonly number[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<number> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden for non-simple types. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: number[] = [];
   ·        ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | number)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly number[] = [];
   ·        ─────────────────
   ╰────
  help: Replace `readonly number[]` with `ReadonlyArray<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | number)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | number)[]` with `ReadonlyArray<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'bigint[]' is forbidden. Use 'Array<bigint>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: bigint[] = [];
   ·        ────────
   ╰────
  help: Replace `bigint[]` with `Array<bigint>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | bigint)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | bigint)[]` with `Array<string | bigint>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<bigint>' is forbidden for simple types. Use 'readonly bigint[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: ReadonlyArray<bigint> = [];
   ·        ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<bigint>` with `readonly bigint[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: (string | bigint)[] = [];
   ·        ───────────────────
   ╰────
  help: Replace `(string | bigint)[]` with `Array<string | bigint>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly bigint[]' is forbidden. Use 'ReadonlyArray<bigint>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly bigint[] = [];
   ·        ─────────────────
   ╰────
  help: Replace `readonly bigint[]` with `ReadonlyArray<bigint>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly T[]' is forbidden. Use 'ReadonlyArray<T>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let a: readonly (string | bigint)[] = [];
   ·        ────────────────────────────
   ╰────
  help: Replace `readonly (string | bigint)[]` with `ReadonlyArray<string | bigint>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.
   ╭─[array_type.ts:1:15]
 1 │ let a: { foo: Array<Bar> }[] = [];
   ·               ──────────
   ╰────
  help: Replace `Array<Bar>` with `Bar[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Bar[]' is forbidden. Use 'Array<Bar>' instead.
   ╭─[array_type.ts:1:21]
 1 │ let a: Array<{ foo: Bar[] }> = [];
   ·                     ─────
   ╰────
  help: Replace `Bar[]` with `Array<Bar>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.
   ╭─[array_type.ts:1:17]
 1 │ function foo(a: Array<Bar>): Array<Bar> {}
   ·                 ──────────
   ╰────
  help: Replace `Array<Bar>` with `Bar[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<Bar>' is forbidden. Use 'Bar[]' instead.
   ╭─[array_type.ts:1:30]
 1 │ function foo(a: Array<Bar>): Array<Bar> {}
   ·                              ──────────
   ╰────
  help: Replace `Array<Bar>` with `Bar[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<undefined>' is forbidden for simple types. Use 'undefined[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let x: Array<undefined> = [undefined] as undefined[];
   ·        ────────────────
   ╰────
  help: Replace `Array<undefined>` with `undefined[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<any>' is forbidden for simple types. Use 'any[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let z: Array = [3, '4'];
   ·        ─────
   ╰────
  help: Replace `Array` with `any[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:24]
 1 │ let ya = [[1, '2']] as [number, string][];
   ·                        ──────────────────
   ╰────
  help: Replace `[number, string][]` with `Array<[number, string]>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden for simple types. Use 'T[]' instead.
   ╭─[array_type.ts:1:15]
 1 │ type Arr<T> = Array<T>;
   ·               ────────
   ╰────
  help: Replace `Array<T>` with `T[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden for simple types. Use 'T[]' instead.
   ╭─[array_type.ts:3:14]
 2 │         interface ArrayClass<T> {
 3 │         foo: Array<T>;
   ·              ────────
 4 │         bar: T[];
   ╰────
  help: Replace `Array<T>` with `T[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:35]
 1 │ 
 2 │         function barFunction(bar: ArrayClass<String>[]) {
   ·                                   ────────────────────
 3 │         return bar.map(e => e.bar);
   ╰────
  help: Replace `ArrayClass<String>[]` with `Array<ArrayClass<String>>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:13]
 1 │ let barVar: ((c: number) => number)[];
   ·             ─────────────────────────
   ╰────
  help: Replace `((c: number) => number)[]` with `Array<(c: number) => number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:17]
 1 │ type barUnion = (string | number | boolean)[];
   ·                 ─────────────────────────────
   ╰────
  help: Replace `(string | number | boolean)[]` with `Array<string | number | boolean>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:24]
 1 │ type barIntersection = (string & number)[];
   ·                        ───────────────────
   ╰────
  help: Replace `(string & number)[]` with `Array<string & number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<undefined>' is forbidden. Use 'undefined[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let x: Array<undefined> = [undefined] as undefined[];
   ·        ────────────────
   ╰────
  help: Replace `Array<undefined>` with `undefined[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<any>' is forbidden. Use 'any[]' instead.
   ╭─[array_type.ts:1:8]
 1 │ let z: Array = [3, '4'];
   ·        ─────
   ╰────
  help: Replace `Array` with `any[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:15]
 1 │ type Arr<T> = Array<T>;
   ·               ────────
   ╰────
  help: Replace `Array<T>` with `T[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:3:14]
 2 │         interface ArrayClass<T> {
 3 │         foo: Array<T>;
   ·              ────────
 4 │         bar: T[];
   ╰────
  help: Replace `Array<T>` with `T[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:2:35]
 1 │ 
 2 │         function fooFunction(foo: Array<ArrayClass<string>>) {
   ·                                   ─────────────────────────
 3 │         return foo.map(e => e.foo);
   ╰────
  help: Replace `Array<ArrayClass<string>>` with `ArrayClass<string>[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:13]
 1 │ let fooVar: Array<(c: number) => number>;
   ·             ────────────────────────────
   ╰────
  help: Replace `Array<(c: number) => number>` with `((c: number) => number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:17]
 1 │ type fooUnion = Array<string | number | boolean>;
   ·                 ────────────────────────────────
   ╰────
  help: Replace `Array<string | number | boolean>` with `(string | number | boolean)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:24]
 1 │ type fooIntersection = Array<string & number>;
   ·                        ──────────────────────
   ╰────
  help: Replace `Array<string & number>` with `(string & number)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:31]
 1 │ let x: Array<number> = [1] as number[];
   ·                               ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:1:8]
 1 │ let y: string[] = <Array<string>>['2'];
   ·        ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:24]
 1 │ let ya = [[1, '2']] as [number, string][];
   ·                        ──────────────────
   ╰────
  help: Replace `[number, string][]` with `Array<[number, string]>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:4:14]
 3 │         foo: Array<T>;
 4 │         bar: T[];
   ·              ───
 5 │         baz: Arr<T>;
   ╰────
  help: Replace `T[]` with `Array<T>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:35]
 1 │ 
 2 │         function barFunction(bar: ArrayClass<String>[]) {
   ·                                   ────────────────────
 3 │         return bar.map(e => e.bar);
   ╰────
  help: Replace `ArrayClass<String>[]` with `Array<ArrayClass<String>>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:13]
 1 │ let barVar: ((c: number) => number)[];
   ·             ─────────────────────────
   ╰────
  help: Replace `((c: number) => number)[]` with `Array<(c: number) => number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:17]
 1 │ type barUnion = (string | number | boolean)[];
   ·                 ─────────────────────────────
   ╰────
  help: Replace `(string | number | boolean)[]` with `Array<string | number | boolean>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:24]
 1 │ type barIntersection = (string & number)[];
   ·                        ───────────────────
   ╰────
  help: Replace `(string & number)[]` with `Array<string & number>`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:3:24]
 2 │         interface FooInterface {
 3 │         '.bar': { baz: string[] };
   ·                        ────────
 4 │         }
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:1:12]
 1 │ const foo: Array<new (...args: any[]) => void> = [];
   ·            ───────────────────────────────────
   ╰────
  help: Replace `Array<new (...args: any[]) => void>` with `(new (...args: any[]) => void)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<T>' is forbidden. Use 'readonly T[]' instead.
   ╭─[array_type.ts:1:12]
 1 │ const foo: ReadonlyArray<new (...args: any[]) => void> = [];
   ·            ───────────────────────────────────────────
   ╰────
  help: Replace `ReadonlyArray<new (...args: any[]) => void>` with `readonly (new (...args: any[]) => void)[]`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:1:16]
 1 │ let a: Promise<string[]> = Promise.resolve([]);
   ·                ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:1:16]
 1 │ let a: Promise<string[]> = Promise.resolve([]);
   ·                ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:10]
 1 │ type x = Array<number>[]
   ·          ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<Array<number>>' is forbidden. Use 'Array<number>[]' instead.
   ╭─[array_type.ts:1:12]
 1 │ const arr: Array<Array<number>>[] = [];
   ·            ────────────────────
   ╰────
  help: Replace `Array<Array<number>>` with `Array<number>[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:18]
 1 │ const arr: Array<Array<number>>[] = [];
   ·                  ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:26]
 1 │ export function fn4(arr: Array<number>[]) { return arr; }
   ·                          ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<{name: string}[]>([]);
   ·                             ────────────────
   ╰────
  help: Replace `{name: string}[]` with `Array<{name: string}>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<T>' is forbidden. Use 'T[]' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<Array<{name: string}>>([]);
   ·                             ─────────────────────
   ╰────
  help: Replace `Array<{name: string}>` with `{name: string}[]`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<string[]>([]);
   ·                             ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<(string | number)[]>([]);
   ·                             ───────────────────
   ╰────
  help: Replace `(string | number)[]` with `Array<string | number>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly string[]' is forbidden. Use 'ReadonlyArray<string>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<readonly string[]>([]);
   ·                             ─────────────────
   ╰────
  help: Replace `readonly string[]` with `ReadonlyArray<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<string>' is forbidden. Use 'readonly string[]' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test2 = testFn<ReadonlyArray<string>>([]);
   ·                             ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<string>` with `readonly string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test3 = testFn<string[], number[]>([]);
   ·                             ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:2:39]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test3 = testFn<string[], number[]>([]);
   ·                                       ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<string>' is forbidden. Use 'string[]' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test3 = testFn<Array<string>, Array<number>>([]);
   ·                             ─────────────
   ╰────
  help: Replace `Array<string>` with `string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:2:44]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test3 = testFn<Array<string>, Array<number>>([]);
   ·                                            ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:2:37]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test4 = testFn<Promise<string[]>>([]);
   ·                                     ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:2:37]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test4 = testFn<Promise<string[]>>([]);
   ·                                     ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<string>' is forbidden. Use 'string[]' instead.
   ╭─[array_type.ts:2:37]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test4 = testFn<Promise<Array<string>>>([]);
   ·                                     ─────────────
   ╰────
  help: Replace `Array<string>` with `string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<string>' is forbidden. Use 'string[]' instead.
   ╭─[array_type.ts:2:37]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test4 = testFn<Promise<Array<string>>>([]);
   ·                                     ─────────────
   ╰────
  help: Replace `Array<string>` with `string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test5 = testFn<(string & number)[]>([]);
   ·                             ───────────────────
   ╰────
  help: Replace `(string & number)[]` with `Array<string & number>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden for non-simple types. Use 'Array<T>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T>(param: T) { return param; }
 2 │ export const test5 = testFn<(() => void)[]>([]);
   ·                             ──────────────
   ╰────
  help: Replace `(() => void)[]` with `Array<() => void>`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:2:30]
 1 │ class MyClass<T> { constructor(public value: T) {} }
 2 │ const instance = new MyClass<number[]>([1, 2, 3]);
   ·                              ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:2:30]
 1 │ class MyClass<T> { constructor(public value: T) {} }
 2 │ const instance = new MyClass<Array<number>>([1, 2, 3]);
   ·                              ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:1:33]
 1 │ const value = {} as Map<string, number[]>;
   ·                                 ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:1:33]
 1 │ const value = {} as Map<string, Array<number>>;
   ·                                 ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'string[]' is forbidden. Use 'Array<string>' instead.
   ╭─[array_type.ts:2:28]
 1 │ interface Container<T> { value: T; }
 2 │ const container: Container<string[]> = { value: [] };
   ·                            ────────
   ╰────
  help: Replace `string[]` with `Array<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<string>' is forbidden. Use 'string[]' instead.
   ╭─[array_type.ts:2:28]
 1 │ interface Container<T> { value: T; }
 2 │ const container: Container<Array<string>> = { value: [] };
   ·                            ─────────────
   ╰────
  help: Replace `Array<string>` with `string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly string[]' is forbidden. Use 'ReadonlyArray<string>' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test7 = testFn<readonly string[], readonly number[]>([]);
   ·                             ─────────────────
   ╰────
  help: Replace `readonly string[]` with `ReadonlyArray<string>`.

  ⚠ typescript-eslint(array-type): Array type using 'readonly number[]' is forbidden. Use 'ReadonlyArray<number>' instead.
   ╭─[array_type.ts:2:48]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test7 = testFn<readonly string[], readonly number[]>([]);
   ·                                                ─────────────────
   ╰────
  help: Replace `readonly number[]` with `ReadonlyArray<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<string>' is forbidden. Use 'readonly string[]' instead.
   ╭─[array_type.ts:2:29]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test7 = testFn<ReadonlyArray<string>, ReadonlyArray<number>>([]);
   ·                             ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<string>` with `readonly string[]`.

  ⚠ typescript-eslint(array-type): Array type using 'ReadonlyArray<number>' is forbidden. Use 'readonly number[]' instead.
   ╭─[array_type.ts:2:52]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test7 = testFn<ReadonlyArray<string>, ReadonlyArray<number>>([]);
   ·                                                    ─────────────────────
   ╰────
  help: Replace `ReadonlyArray<number>` with `readonly number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'Array<number>' is forbidden. Use 'number[]' instead.
   ╭─[array_type.ts:2:39]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test8 = testFn<string[], Array<number>>([]);
   ·                                       ─────────────
   ╰────
  help: Replace `Array<number>` with `number[]`.

  ⚠ typescript-eslint(array-type): Array type using 'number[]' is forbidden. Use 'Array<number>' instead.
   ╭─[array_type.ts:2:44]
 1 │ function testFn<T, U>(param1: T, param2: U) { return [param1, param2]; }
 2 │ export const test8 = testFn<Array<string>, number[]>([]);
   ·                                            ────────
   ╰────
  help: Replace `number[]` with `Array<number>`.

  ⚠ typescript-eslint(array-type): Array type using 'any[]' is forbidden. Use 'Array<any>' instead.
   ╭─[array_type.ts:1:29]
 1 │ type IsArray<T> = T extends any[] ? true : false;
   ·                             ─────
   ╰────
  help: Replace `any[]` with `Array<any>`.

  ⚠ typescript-eslint(array-type): Array type using 'T[]' is forbidden. Use 'Array<T>' instead.
   ╭─[array_type.ts:1:40]
 1 │ type MakeArrays<T> = { [K in keyof T]: T[K][] };
   ·                                        ──────
   ╰────
  help: Replace `T[K][]` with `Array<T[K]>`.
