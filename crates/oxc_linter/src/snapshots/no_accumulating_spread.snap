---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:18]
 1 │ Object.keys(obj).reduce((acc, key) => ({ ...acc, [key]: obj[key] }), {})
   ·                  ───┬──                  ───┬──
   ·                     │                       ╰── From this spread
   ·                     ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:18]
 1 │ Object.keys(obj).reduce((acc, key) => ({ ...acc, [key]: obj[key] }), ({} as foo))
   ·                  ───┬──                  ───┬──
   ·                     │                       ╰── From this spread
   ·                     ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:18]
 1 │ Object.keys(obj).reduce((acc, key) => ({ ...acc, [key]: obj[key] }), foo)
   ·                  ───┬──                  ───┬──
   ·                     │                       ╰── From this spread
   ·                     ╰── For this reduce
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ arr.reduce((acc, x) => ({ ...acc, [x]: x }), {})
   ·     ───┬──                ───┬──
   ·        │                     ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ arr.reduce((differentName, x) => ({ ...differentName, [x]: x }), {})
   ·     ───┬──                          ────────┬───────
   ·        │                                    ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.arr.reduce((acc, x) => ({ ...acc, [x]: x }), {})
   ·         ───┬──                ───┬──
   ·            │                     ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.arr.reduce((acc, x) => ({ ...acc, [x]: x }), (({} as baz)))
   ·         ───┬──                ───┬──
   ·            │                     ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.arr.reduce((acc, x) => ({ ...acc, [x]: x }), (({})))
   ·         ───┬──                ───┬──
   ·            │                     ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.c.d.reduce((acc,x) => ([...acc, x]), [])
   ·         ───┬──              ───┬──
   ·            │                   ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.c.d.reduce((acc,x) => ([...acc, x]), ([]))
   ·         ───┬──              ───┬──
   ·            │                   ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.c.d.reduce((acc,x) => ([...acc, x]), ([] as foo))
   ·         ───┬──              ───┬──
   ·            │                   ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:9]
 1 │ a.b.c.d.reduce((acc,x) => ([...acc, x]), (([]) as foo))
   ·         ───┬──              ───┬──
   ·            │                   ╰── From this spread
   ·            ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:13]
 1 │ get_array().reduce((acc, x) => ({ ...acc, [x]: x }), {})
   ·             ───┬──                ───┬──
   ·                │                     ╰── From this spread
   ·                ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ arr.reduce(function (acc, x) { return { ...acc, [x]: x } }, {})
   ·     ───┬──                              ───┬──
   ·        │                                   ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ arr.reduce((acc, x) => {
   ·     ───┬──
   ·        ╰── For this reduce
 2 │             let temp = { ...acc, x }
   ·                          ───┬──
   ·                             ╰── From this spread
 3 │             return temp
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => [...acc, bar], [])
   ·     ───┬──                ───┬──
   ·        │                     ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => [...acc, bar], [])
   ·     ─────┬─────                ───┬──
   ·          │                        ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => {return [...acc, bar];}, [])
   ·     ───┬──                        ───┬──
   ·        │                             ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => {return [...acc, bar];}, [])
   ·     ─────┬─────                        ───┬──
   ·          │                                ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => [...acc, ...bar], [])
   ·     ───┬──                ───┬──
   ·        │                     ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => [...acc, ...bar], [])
   ·     ─────┬─────                ───┬──
   ·          │                        ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => {return [...acc, ...bar];}, [])
   ·     ───┬──                        ───┬──
   ·        │                             ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => {return [...acc, ...bar];}, [])
   ·     ─────┬─────                        ───┬──
   ·          │                                ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Array`. Consider using the `Array.push` or `Array.concat` methods to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => ({...acc, [bar.key]: bar.value}), {})
   ·     ───┬──                 ───┬──
   ·        │                      ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => ({...acc, [bar.key]: bar.value}), {})
   ·     ─────┬─────                 ───┬──
   ·          │                         ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => {return {...acc, [bar.key]: bar.value};}, {})
   ·     ───┬──                        ───┬──
   ·        │                             ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => {return {...acc, [bar.key]: bar.value};}, {})
   ·     ─────┬─────                        ───┬──
   ·          │                                ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => ({...acc, ...bar}), {})
   ·     ───┬──                 ───┬──
   ·        │                      ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => ({...acc, ...bar}), {})
   ·     ─────┬─────                 ───┬──
   ·          │                         ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduce((acc, bar) => {return {...acc, ...bar};}, {})
   ·     ───┬──                        ───┬──
   ·        │                             ╰── From this spread
   ·        ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in Array.prototype.reduce()
   ╭─[no_accumulating_spread.tsx:1:5]
 1 │ foo.reduceRight((acc, bar) => {return {...acc, ...bar};}, {})
   ·     ─────┬─────                        ───┬──
   ·          │                                ╰── From this spread
   ·          ╰── For this reduce
   ╰────
  help: It looks like you're spreading an `Object`. Consider using the `Object.assign` or assignment operators to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (let i = 0; i < 10; i++) { foo = [...foo, i]; }
   ·               ─┬─                                   ───┬──
   ·                │                                       ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (const i = 0; i < 10; i++) { foo = [...foo, i]; }
   ·               ─┬─                                     ───┬──
   ·                │                                         ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (let i in [1,2,3]) { foo = [...foo, i]; }
   ·               ─┬─                             ───┬──
   ·                │                                 ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (const i in [1,2,3]) { foo = [...foo, i]; }
   ·               ─┬─                               ───┬──
   ·                │                                   ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (let i of [1,2,3]) { foo = [...foo, i]; }
   ·               ─┬─                             ───┬──
   ·                │                                 ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; for (const i of [1,2,3]) { foo = [...foo, i]; }
   ·               ─┬─                               ───┬──
   ·                │                                   ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = []; while (foo.length < 10) { foo = [...foo, foo.length]; }
   ·               ──┬──                            ───┬──
   ·                 │                                 ╰── From this spread
   ·                 ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (let i = 0; i < 10; i++) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                                    ───┬──
   ·                │                                        ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (const i = 0; i < 10; i++) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                                      ───┬──
   ·                │                                          ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (let i in [1,2,3]) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                              ───┬──
   ·                │                                  ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (const i in [1,2,3]) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                                ───┬──
   ·                │                                    ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (let i of [1,2,3]) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                              ───┬──
   ·                │                                  ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; for (const i of [1,2,3]) { foo = { ...foo, [i]: i }; }
   ·               ─┬─                                ───┬──
   ·                │                                    ╰── From this spread
   ·                ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.

  ⚠ oxc(no-accumulating-spread): Do not spread accumulators in loops
   ╭─[no_accumulating_spread.tsx:1:15]
 1 │ let foo = {}; while (Object.keys(foo).length < 10) { foo = { ...foo, [Object.keys(foo).length]: Object.keys(foo).length }; }
   ·               ──┬──                                          ───┬──
   ·                 │                                               ╰── From this spread
   ·                 ╰── For this loop
   ╰────
  help: Consider using `Object.assign()` or `Array.prototype.push()` to mutate the accumulator instead.
        Using spreads within accumulators leads to `O(n^2)` time complexity.
