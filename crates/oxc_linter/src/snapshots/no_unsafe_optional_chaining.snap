---
source: crates/oxc_linter/src/tester.rs
expression: no_unsafe_optional_chaining
---
  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:2]
 1 │ (obj?.foo && obj?.baz).bar
   ·  ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError

  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:14]
 1 │ (obj?.foo && obj?.baz).bar
   ·              ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError

  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:7]
 1 │ with (obj?.foo) {};
   ·       ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError

  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:37]
 1 │ async function foo() { with ( await obj?.foo) {}; }
   ·                                     ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError

  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:8]
 1 │ (foo ? obj?.foo : obj?.bar).bar
   ·        ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError

  ⚠ eslint(no-unsafe-optional-chaining): Unsafe usage of optional chaining
   ╭─[no_unsafe_optional_chaining.tsx:1:19]
 1 │ (foo ? obj?.foo : obj?.bar).bar
   ·                   ────────
   ╰────
  help: If this short-circuits with 'undefined' the evaluation will throw TypeError
