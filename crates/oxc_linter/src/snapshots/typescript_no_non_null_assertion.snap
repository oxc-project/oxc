---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!.y;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y!;
   · ────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:2]
 1 │ !x!.y;
   ·  ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!.y?.z;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x![y];
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x![y]?.z;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y.z!();
   · ──────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y?.z!();
   · ───────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!!!;
   · ────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!!!;
   · ───
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!!!;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!!.y;
   · ───
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!!.y;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y!!;
   · ─────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y!!;
   · ────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y.z!!();
   · ───────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y.z!!();
   · ──────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!?.[y].z;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x!?.y.z;
   · ──
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:1:1]
 1 │ x.y.z!?.();
   · ──────
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:2:10]
 1 │ 
 2 │             x!
   ·             ──
 3 │             .y
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:2:10]
 1 │ 
 2 │             x!
   ·             ──
 3 │             // comment
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:2:10]
 1 │ 
 2 │             x!
   ·             ──
 3 │              // comment
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.

  ⚠ typescript-eslint(no-non-null-assertion): Forbidden non-null assertion.
   ╭─[no_non_null_assertion.tsx:2:10]
 1 │ 
 2 │             x!
   ·             ──
 3 │              // comment
   ╰────
  help: Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator.
