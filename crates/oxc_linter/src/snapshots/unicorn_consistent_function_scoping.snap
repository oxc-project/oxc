---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:3:30]
 2 │                 {
 3 │                     function doBar(bar) {
   ·                              ─────
 4 │                         return bar;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `Bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function doFoo(FooComponent) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 function Bar() {
   ·                          ─┬─
   ·                           ╰── This function does not use any variables from the parent function
 3 │                     return <FooComponent />;
   ╰────
  help: Move `Bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `Bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function Foo() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 function Bar () {
   ·                          ─┬─
   ·                           ╰── This function does not use any variables from the parent function
 3 │                     return <div />
   ╰────
  help: Move `Bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:27]
 1 │ function foo() { function bar() { return <JSX/>; } }
   ·          ─┬─              ─┬─
   ·           │                ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ function doFoo(Foo) { const doBar = () => arguments; return doBar(); };
   ·          ──┬──              ──┬──
   ·            │                  ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `inner` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:4:34]
 2 │ 
 3 │             function outer() {
   ·                      ──┬──
   ·                        ╰── Outer scope where this function is defined
 4 │                 inner = function inner() {}
   ·                                  ──┬──
   ·                                    ╰── This function does not use any variables from the parent function
 5 │             }
   ╰────
  help: Move `inner` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function doFoo(foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 function doBar(bar) {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 3 │                     return bar;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:3:26]
 1 │ function doFoo() {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 const foo = 'foo';
 3 │                 function doBar(bar) {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 4 │                     return bar;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ function doFoo() { function doBar(bar) { return bar; } }
   ·          ──┬──              ──┬──
   ·            │                  ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:37]
 1 │ const doFoo = function() { function doBar(bar) { return bar; } };
   ·                                     ─────
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:31]
 1 │ const doFoo = function() {
 2 │                 const doBar = function(bar) {
   ·                               ────────
 3 │                     return bar;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:34]
 1 │ function doFoo() { const doBar = function(bar) { return bar; }; }
   ·          ──┬──                   ────┬───
   ·            │                         ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:34]
 1 │ function doFoo() { const doBar = function(bar) { return bar; }; doBar(); }
   ·          ──┬──                   ────┬───
   ·            │                         ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ const doFoo = () => { const doBar = bar => { return bar; } }
   ·       ──┬──                 ──┬──
   ·         │                     ╰── This function does not use any variables from the parent arrow function
   ·         ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:32]
 1 │ function doFoo(Foo) { function doBar() { return this; } return doBar(); };
   ·          ──┬──                 ──┬──
   ·            │                     ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ function doFoo(Foo) { const doBar = () => (function() {return this})(); return doBar(); };
   ·          ──┬──              ──┬──
   ·            │                  ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:23]
 1 │ function doFoo(Foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 const doBar = () => (function() {return () => this})();
   ·                       ──┬──
   ·                         ╰── This function does not use any variables from the parent function
 3 │                 return doBar();
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function doFoo(Foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 function doBar() {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 3 │                     return arguments;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:23]
 1 │ function doFoo(Foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 const doBar = () => (function() {return arguments})();
   ·                       ──┬──
   ·                         ╰── This function does not use any variables from the parent function
 3 │                 return doBar();
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function doFoo(foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 function doBar(bar) {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 3 │                     return doBar(bar);
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function doFoo(foo) {
   ·          ──┬──
   ·            ╰── Outer scope where this function is defined
 2 │                 function doBar(bar) {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 3 │                     return bar;
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ function doFoo() { function doBar() {} }
   ·          ──┬──              ──┬──
   ·            │                  ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:36]
 1 │ function doFoo(foo) { { { function doBar(bar) { return bar; } } } return foo; }
   ·                                    ─────
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:14]
 1 │ { { function doBar(bar) { return bar; } } }
   ·              ─────
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:46]
 1 │ for (let foo = 0; foo < 1; foo++) { function doBar(bar) { return bar; } }
   ·                                              ─────
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:27]
 1 │ function foo() { function bar() {} }
   ·          ─┬─              ─┬─
   ·           │                ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:33]
 1 │ function foo() { async function bar() {} }
   ·          ─┬─                    ─┬─
   ·           │                      ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:28]
 1 │ function foo() { function* bar() {} }
   ·          ─┬─               ─┬─
   ·           │                 ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:34]
 1 │ function foo() { async function* bar() {} }
   ·          ─┬─                     ─┬─
   ·           │                       ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:24]
 1 │ function foo() { const bar = () => {} }
   ·          ─┬─           ─┬─
   ·           │             ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:24]
 1 │ function foo() { const bar = async () => {} }
   ·          ─┬─           ─┬─
   ·           │             ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `baz` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:34]
 1 │ function foo() { async function* baz() {} }
   ·          ─┬─                     ─┬─
   ·           │                       ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `baz` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:3:30]
 1 │ useEffect(() => {
 2 │                 function foo() {
   ·                          ─┬─
   ·                           ╰── Outer scope where this function is defined
 3 │                     function bar() {
   ·                              ─┬─
   ·                               ╰── This function does not use any variables from the parent function
 4 │                     }
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:3:30]
 1 │ (function() {
 2 │                 function foo() {
   ·                          ─┬─
   ·                           ╰── Outer scope where this function is defined
 3 │                     function bar() {
   ·                              ─┬─
   ·                               ╰── This function does not use any variables from the parent function
 4 │                     }
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `returnsZero` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ process.nextTick(() => {
 2 │                 function returnsZero() {
   ·                          ───────────
 3 │                     return true;
   ╰────
  help: Move `returnsZero` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:4:30]
 3 │                 function() {
 4 │                     function bar() {
   ·                              ───
 5 │                     }
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `baz` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:8:30]
 7 │                 function() {
 8 │                     function baz() {
   ·                              ───
 9 │                     }
   ╰────
  help: Move `baz` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBaz` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:3:26]
 1 │ function Foo() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 const Bar = <div />
 3 │                 function doBaz() {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 4 │                     return 42
   ╰────
  help: Move `doBaz` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `Bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:2:26]
 1 │ function Foo() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 function Bar () {
   ·                          ─┬─
   ·                           ╰── This function does not use any variables from the parent function
 3 │                     return <div />
   ╰────
  help: Move `Bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBaz` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:10]
 1 │ function Foo() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 function Bar () {
   ╰────
   ╭─[consistent_function_scoping.tsx:5:26]
 4 │                 }
 5 │                 function doBaz() {
   ·                          ──┬──
   ·                            ╰── This function does not use any variables from the parent function
 6 │                     return 42
   ╰────
  help: Move `doBaz` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `b` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:10]
 1 │ function fn1() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 function a() {
   ╰────
   ╭─[consistent_function_scoping.tsx:5:26]
 4 │                 }
 5 │                 function b() {}
   ·                          ┬
   ·                          ╰── This function does not use any variables from the parent function
 6 │                 function c() {}
   ╰────
  help: Move `b` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `c` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:10]
 1 │ function fn1() {
   ·          ─┬─
   ·           ╰── Outer scope where this function is defined
 2 │                 function a() {
   ╰────
   ╭─[consistent_function_scoping.tsx:6:26]
 5 │                 function b() {}
 6 │                 function c() {}
   ·                          ┬
   ·                          ╰── This function does not use any variables from the parent function
 7 │             }
   ╰────
  help: Move `c` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `foo` does not capture any variables from its parent scope
    ╭─[consistent_function_scoping.tsx:9:26]
  7 │             }
  8 │             function fn2() {
    ·                      ─┬─
    ·                       ╰── Outer scope where this function is defined
  9 │                 function foo() {}
    ·                          ─┬─
    ·                           ╰── This function does not use any variables from the parent function
 10 │             }
    ╰────
  help: Move `foo` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `inner` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:32]
 1 │ const outer = () => { function inner() {} }
   ·       ──┬──                    ──┬──
   ·         │                        ╰── This function does not use any variables from the parent arrow function
   ·         ╰── Outer scope where this function is defined
   ╰────
  help: Move `inner` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:27]
 1 │ function foo() { function bar() {} }
   ·          ─┬─              ─┬─
   ·           │                ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:33]
 1 │ function foo() { async function bar() {} }
   ·          ─┬─                    ─┬─
   ·           │                      ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:29]
 1 │ function foo() { function * bar() {} }
   ·          ─┬─                ─┬─
   ·           │                  ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:35]
 1 │ function foo() { async function * bar() {} }
   ·          ─┬─                      ─┬─
   ·           │                        ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:24]
 1 │ function foo() { const bar = () => {} }
   ·          ─┬─           ─┬─
   ·           │             ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `bar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:24]
 1 │ function foo() { const bar = async () => {} }
   ·          ─┬─           ─┬─
   ·           │             ╰── This function does not use any variables from the parent function
   ·           ╰── Outer scope where this function is defined
   ╰────
  help: Move `bar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `doBar` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:34]
 1 │ function doFoo() { const doBar = function(bar) { return bar; }; }
   ·          ──┬──                   ────┬───
   ·            │                         ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `doBar` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `inner` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:43]
 1 │ function outer() { const inner = function inner() {}; }
   ·          ──┬──                            ──┬──
   ·            │                                ╰── This function does not use any variables from the parent function
   ·            ╰── Outer scope where this function is defined
   ╰────
  help: Move `inner` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `inner` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:73]
 1 │ export namespace Foo { export function outer() { const inner = function inner() {}; } }
   ·                                        ──┬──                            ──┬──
   ·                                          │                                ╰── This function does not use any variables from the parent function
   ·                                          ╰── Outer scope where this function is defined
   ╰────
  help: Move `inner` to the outer scope to avoid recreating it on every call.

  ⚠ eslint-plugin-unicorn(consistent-function-scoping): Function `MockI18nProvider` does not capture any variables from its parent scope
   ╭─[consistent_function_scoping.tsx:1:70]
 1 │ jest.mock('@kbn/i18n-react', () => { return { I18nProvider: function MockI18nProvider() { }, }; });
   ·                                                                      ────────────────
   ╰────
  help: Move `MockI18nProvider` to the outer scope to avoid recreating it on every call.
