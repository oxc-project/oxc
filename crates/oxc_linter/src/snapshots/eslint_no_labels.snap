---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ label: while(true) {}
   · ─────
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ label: while (true) { break label; }
   · ─────
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:29]
 1 │ label: while (true) { break label; }
   ·                             ─────
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ label: while (true) { continue label; }
   · ─────
   ╰────

  ⚠ eslint(no-labels): Label in continue statement is not allowed
   ╭─[no_labels.tsx:1:32]
 1 │ label: while (true) { continue label; }
   ·                                ─────
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: var foo = 0;
   · ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: break A;
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:10]
 1 │ A: break A;
   ·          ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:25]
 1 │ A: { if (foo()) { break A; } bar(); };
   ·                         ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:32]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   ·                                ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: switch (a) { case 0: break A; default: break; };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:31]
 1 │ A: switch (a) { case 0: break A; default: break; };
   ·                               ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: switch (a) { case 0: B: { break A; } default: break; };
   · ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:25]
 1 │ A: switch (a) { case 0: B: { break A; } default: break; };
   ·                         ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:36]
 1 │ A: switch (a) { case 0: B: { break A; } default: break; };
   ·                                    ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: var foo = 0;
   · ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: break A;
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:10]
 1 │ A: break A;
   ·          ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:25]
 1 │ A: { if (foo()) { break A; } bar(); };
   ·                         ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:32]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   ·                                ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: switch (a) { case 0: break A; default: break; };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:31]
 1 │ A: switch (a) { case 0: break A; default: break; };
   ·                               ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: var foo = 0;
   · ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: break A;
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:10]
 1 │ A: break A;
   ·          ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:25]
 1 │ A: { if (foo()) { break A; } bar(); };
   ·                         ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:32]
 1 │ A: if (a) { if (foo()) { break A; } bar(); };
   ·                                ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: while (a) { break A; }
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:22]
 1 │ A: while (a) { break A; }
   ·                      ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: do { if (b) { break A; } } while (a);
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:24]
 1 │ A: do { if (b) { break A; } } while (a);
   ·                        ─
   ╰────

  ⚠ eslint(no-labels): Labeled statement is not allowed
   ╭─[no_labels.tsx:1:1]
 1 │ A: for (var a in obj) { for (;;) { switch (a) { case 0: break A; } } }
   · ─
   ╰────

  ⚠ eslint(no-labels): Label in break statement is not allowed
   ╭─[no_labels.tsx:1:63]
 1 │ A: for (var a in obj) { for (;;) { switch (a) { case 0: break A; } } }
   ·                                                               ─
   ╰────
