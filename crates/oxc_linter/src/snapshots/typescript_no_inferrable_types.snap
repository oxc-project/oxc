---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = 10n
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = -10n
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = BigInt(10)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = -BigInt(10)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = BigInt?.(10)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: bigint = -BigInt?.(10)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: boolean = false
   ·        ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: boolean = true
   ·        ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: boolean = Boolean(null)
   ·        ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: boolean = Boolean?.(null)
   ·        ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: boolean = !0
   ·        ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = 10
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = +10
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = -10
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = Number("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = +Number("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = -Number("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = Number?.("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = +Number?.("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = -Number?.("1")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = Infinity
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = +Infinity
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = -Infinity
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = NaN
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = +NaN
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: number = -NaN
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: null = null
   ·        ──────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: RegExp = /a/
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: RegExp = RegExp("a")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: RegExp = RegExp?.("a")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: RegExp = new RegExp("a")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: string = "str"
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: string = 'str'
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: string = `str`
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: string = String(1)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: string = String?.(1)
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: symbol = Symbol("a")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: symbol = Symbol?.("a")
   ·        ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: undefined = undefined
   ·        ───────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:8]
 1 │ const a: undefined = void someValue
   ·        ───────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:15]
 1 │ const fn = (a?: number = 5) => {};
   ·               ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:13]
 1 │ class A { a!: number = 1; }
   ·             ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:14]
 1 │ const fn = (a: number = 5, b: boolean = true, c: string = 'foo') => {};
   ·              ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:29]
 1 │ const fn = (a: number = 5, b: boolean = true, c: string = 'foo') => {};
   ·                             ─────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:48]
 1 │ const fn = (a: number = 5, b: boolean = true, c: string = 'foo') => {};
   ·                                                ────────
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:2:16]
 1 │ class Foo {
 2 │               a: number = 5;
   ·                ────────
 3 │               b: boolean = true;
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:3:16]
 2 │               a: number = 5;
 3 │               b: boolean = true;
   ·                ─────────
 4 │               c: string = 'foo';
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:4:16]
 3 │               b: boolean = true;
 4 │               c: string = 'foo';
   ·                ────────
 5 │             }
   ╰────
  help: Remove the type annotation

  ⚠ typescript-eslint(no-inferrable-types): Type can be trivially inferred from the initializer
   ╭─[no_inferrable_types.tsx:1:33]
 1 │ class Foo { constructor(public a: boolean = true) {} }
   ·                                 ─────────
   ╰────
  help: Remove the type annotation
