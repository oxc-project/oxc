---
source: crates/oxc_linter/src/tester.rs
expression: no_unnecessary_type_constraint
---
  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ function data<T extends any>() {}
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ function data<T extends any, U>() {}
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "U" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:18]
 1 │ function data<T, U extends any>() {}
   ·                  ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ function data<T extends any, U extends T>() {}
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any,>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any, >() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any ,>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any , >() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any = unknown>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any, U extends any>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "U" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:30]
 1 │ const data = <T extends any, U extends any>() => {};
   ·                              ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ function data<T extends unknown>() {}
   ·               ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "any" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends any>() => {};
   ·               ─         ───
   ╰────
  help: Remove the unnecessary "any" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:15]
 1 │ const data = <T extends unknown>() => {};
   ·               ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:12]
 1 │ class Data<T extends unknown> {}
   ·            ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:20]
 1 │ const Data = class<T extends unknown> {};
   ·                    ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:3:13]
 2 │             class Data {
 3 │               member<T extends unknown>() {}
   ·                      ─         ───────
 4 │             }
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:3:13]
 2 │             const Data = class {
 3 │               member<T extends unknown>() {}
   ·                      ─         ───────
 4 │             };
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:16]
 1 │ interface Data<T extends unknown> {}
   ·                ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint

  ⚠ typescript-eslint(no-unnecessary-type-constraint): constraining the generic type "T" to "unknown" does nothing and is unnecessary
   ╭─[no_unnecessary_type_constraint.tsx:1:11]
 1 │ type Data<T extends unknown> = {};
   ·           ─         ───────
   ╰────
  help: Remove the unnecessary "unknown" constraint
