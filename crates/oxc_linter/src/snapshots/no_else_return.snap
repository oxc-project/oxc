---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:48]
 1 │ function foo1() { if (true) { return x; } else { return y; } }
   ·                                                ─────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:61]
 1 │ function foo2() { if (true) { var x = bar; return x; } else { var y = baz; return y; } }
   ·                                                             ──────────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:44]
 1 │ function foo3() { if (true) return x; else return y; }
   ·                                            ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:74]
 1 │ function foo4() { if (true) { if (false) return x; else return y; } else { return z; } }
   ·                                                                          ─────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:57]
 1 │ function foo4() { if (true) { if (false) return x; else return y; } else { return z; } }
   ·                                                         ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:69]
 1 │ function foo5() { if (true) { if (false) { if (true) return x; else { w = y; } } else { w = x; } } else { return z; } }
   ·                                                                     ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:69]
 1 │ function foo6() { if (true) { if (false) { if (true) return x; else return y; } } else { return z; } }
   ·                                                                     ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:98]
 1 │ function foo7() { if (true) { if (false) { if (true) return x; else return y; } return w; } else { return z; } }
   ·                                                                                                  ─────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:69]
 1 │ function foo7() { if (true) { if (false) { if (true) return x; else return y; } return w; } else { return z; } }
   ·                                                                     ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:86]
 1 │ function foo8() { if (true) { if (false) { if (true) return x; else return y; } else { w = x; } } else { return z; } }
   ·                                                                                      ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:69]
 1 │ function foo8() { if (true) { if (false) { if (true) return x; else return y; } else { w = x; } } else { return z; } }
   ·                                                                     ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:76]
 1 │ function foo9() {if (x) { return true; } else if (y) { return true; } else { notAReturn(); } }
   ·                                                                            ─────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:48]
 1 │ function foo9a() {if (x) { return true; } else if (y) { return true; } else { notAReturn(); } }
   ·                                                ──────────────────────────────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:72]
 1 │ function foo9b() {if (x) { return true; } if (y) { return true; } else { notAReturn(); } }
   ·                                                                        ─────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:46]
 1 │ function foo10() { if (foo) return bar; else (foo).bar(); }
   ·                                              ────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo11() { if (foo) return bar 
 2 │             else { [1, 2, 3].map(foo) } }
   ·                  ──────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo12() { if (foo) return bar 
 2 │             else { baz() } 
   ·                  ─────────
 3 │             [1, 2, 3].map(foo) }
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo13() { if (foo) return bar; 
 2 │             else { [1, 2, 3].map(foo) } }
   ·                  ──────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo14() { if (foo) return bar 
 2 │             else { baz(); } 
   ·                  ──────────
 3 │             [1, 2, 3].map(foo) }
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:46]
 1 │ function foo15() { if (foo) return bar; else { baz() } qaz() }
   ·                                              ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo16() { if (foo) return bar 
 2 │             else { baz() } qaz() }
   ·                  ─────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo17() { if (foo) return bar 
 2 │             else { baz() } 
   ·                  ─────────
 3 │             qaz() }
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:2:9]
 1 │ function foo18() { if (foo) return function() {} 
 2 │             else [1, 2, 3].map(bar) }
   ·                  ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo19() { if (true) { return x; } else if (false) { return y; } }
   ·                                                 ────────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:48]
 1 │ function foo20() {if (x) { return true; } else if (y) { notAReturn() } else { notAReturn(); } }
   ·                                                ──────────────────────────────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo21() { var x = true; if (x) { return x; } else if (x === false) { return false; } }
   ·                                                            ──────────────────────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { var a; if (bar) { return true; } else { var a; } }
   ·                                                        ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:67]
 1 │ function foo() { if (bar) { var a; if (baz) { return true; } else { var a; } } }
   ·                                                                   ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { var a; if (bar) { return true; } else { var a; } }
   ·                                                        ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:67]
 1 │ function foo() { if (bar) { var a; if (baz) { return true; } else { var a; } } }
   ·                                                                   ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { let a; if (bar) { return true; } else { let a; } }
   ·                                                        ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:59]
 1 │ class foo { bar() { let a; if (baz) { return true; } else { let a; } } }
   ·                                                           ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:67]
 1 │ function foo() { if (bar) { let a; if (baz) { return true; } else { let a; } } }
   ·                                                                   ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:66]
 1 │ function foo() {let a; if (bar) { if (baz) { return true; } else { let a; } } }
   ·                                                                  ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:62]
 1 │ function foo() { const a = 1; if (bar) { return true; } else { let a; } }
   ·                                                              ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:73]
 1 │ function foo() { if (bar) { const a = 1; if (baz) { return true; } else { let a; } } }
   ·                                                                         ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { let a; if (bar) { return true; } else { const a = 1 } }
   ·                                                        ───────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:67]
 1 │ function foo() { if (bar) { let a; if (baz) { return true; } else { const a = 1; } } }
   ·                                                                   ────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:61]
 1 │ function foo() { class a {}; if (bar) { return true; } else { const a = 1; } }
   ·                                                             ────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:72]
 1 │ function foo() { if (bar) { class a {}; if (baz) { return true; } else { const a = 1; } } }
   ·                                                                        ────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:62]
 1 │ function foo() { const a = 1; if (bar) { return true; } else { class a {} } }
   ·                                                              ──────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:73]
 1 │ function foo() { if (bar) { const a = 1; if (baz) { return true; } else { class a {} } } }
   ·                                                                         ──────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { var a; if (bar) { return true; } else { let a; } }
   ·                                                        ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { if (bar) { var a; return true; } else { let a; } }
   ·                                                        ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; }  while (baz) { var a; } }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:50]
 1 │ function foo(a) { if (bar) { return true; } else { let a; } }
   ·                                                  ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:54]
 1 │ function foo(a = 1) { if (bar) { return true; } else { let a; } }
   ·                                                      ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:57]
 1 │ function foo(a, b = a) { if (bar) { return true; } else { let a; }  if (bar) { return true; } else { let b; }}
   ·                                                         ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:100]
 1 │ function foo(a, b = a) { if (bar) { return true; } else { let a; }  if (bar) { return true; } else { let b; }}
   ·                                                                                                    ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo(...args) { if (bar) { return true; } else { let args; } }
   ·                                                        ─────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:68]
 1 │ function foo() { try {} catch (a) { if (bar) { return true; } else { let a; } } }
   ·                                                                    ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:79]
 1 │ function foo() { try {} catch (a) { if (bar) { if (baz) { return true; } else { let a; } } } }
   ·                                                                               ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:79]
 1 │ function foo() { try {} catch ({bar, a = 1}) { if (baz) { return true; } else { let a; } } }
   ·                                                                               ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let arguments; } }
   ·                                                 ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let arguments; } return arguments[0]; }
   ·                                                 ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let arguments; } if (baz) { return arguments[0]; } }
   ·                                                 ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let arguments; } } }
   ·                                                            ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; } a; }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; } if (baz) { a; } }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } } a; }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } a; } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } if (quux) { a; } } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:47]
 1 │ function a() { if (foo) { return true; } else { let a; } a(); }
   ·                                               ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:45]
 1 │ function a() { if (a) { return true; } else { let a; } }
   ·                                             ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:44]
 1 │ function a() { if (foo) { return a; } else { let a; } }
   ·                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; } function baz() { a; } }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } (() => a) } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; } var a; }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } var a; } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } var { a } = {}; } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } if (quux) { var a; } } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } } if (quux) { var a; } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:81]
 1 │ function foo() { if (quux) { var a; } if (bar) { if (baz) { return true; } else { let a; } } }
   ·                                                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else { let a; } function a(){} }
   ·                                                 ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (baz) { if (bar) { return true; } else { let a; } function a(){} } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } } if (quux) { function a(){}  } }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:60]
 1 │ function foo() { if (bar) { if (baz) { return true; } else { let a; } } function a(){} }
   ·                                                            ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { let a; if (bar) { return true; } else { function a(){} } }
   ·                                                        ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:56]
 1 │ function foo() { var a; if (bar) { return true; } else { function a(){} } }
   ·                                                        ──────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:49]
 1 │ function foo() { if (bar) { return true; } else function baz() {} };
   ·                                                 ─────────────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:32]
 1 │ if (foo) { return true; } else { let a; }
   ·                                ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.

  ⚠ eslint(no-else-return): Disallow `else` blocks after `return` statements in `if` statements
   ╭─[no_else_return.tsx:1:39]
 1 │ let a; if (foo) { return true; } else { let a; }
   ·                                       ──────────
   ╰────
  help: Unnecessary 'else' after 'return'.
