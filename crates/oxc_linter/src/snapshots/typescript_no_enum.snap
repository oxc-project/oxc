---
source: crates/oxc_linter/src/tester.rs
---
  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ enum Color { Red, Green, Blue }
   · ───────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ enum Status { Active = 'active', Inactive = 'inactive' }
   · ────────────────────────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ enum Mixed { A, B = 'b', C = 2 }
   · ────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:8]
 1 │ export enum Color { Red, Green, Blue }
   ·        ───────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ enum Priority { Low = 1, Medium = 2, High = 3 }
   · ───────────────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ const enum Direction { Up, Down, Left, Right }
   · ──────────────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ enum Computed { A = 1 << 1, B = 1 << 2 }
   · ────────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ declare enum AmbientEnum { A, B, C }
   · ────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.

  ⚠ typescript-eslint(no-enum): Unexpected enum
   ╭─[no_enum.tsx:1:1]
 1 │ const enum ConstEnum { A = 1, B = 2, C = 3 }
   · ────────────────────────────────────────────
   ╰────
  help: Enums are not erasable syntax and are incompatible with TypeScript's --erasableSyntaxOnly flag. Consider using union types or const assertions instead.
